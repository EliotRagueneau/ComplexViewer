var xiNET =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/controller/Controller.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./node_modules/colorbrewer/index.js":
/*!*******************************************!*\
  !*** ./node_modules/colorbrewer/index.js ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;// This product includes color specifications and designs developed by Cynthia Brewer (http://colorbrewer.org/).\n// JavaScript specs as packaged in the D3 library (d3js.org). Please see license at http://colorbrewer.org/export/LICENSE.txt\n!function() {\n\nvar colorbrewer = {schemeGroups: {\nsequential: [\"BuGn\",\"BuPu\",\"GnBu\",\"OrRd\",\"PuBu\",\"PuBuGn\",\"PuRd\",\"RdPu\",\"YlGn\",\"YlGnBu\",\"YlOrBr\",\"YlOrRd\"],\nsinglehue:[\"Blues\",\"Greens\",\"Greys\",\"Oranges\",\"Purples\",\"Reds\"],\ndiverging: [\"BrBG\",\"PiYG\",\"PRGn\",\"PuOr\",\"RdBu\",\"RdGy\",\"RdYlBu\",\"RdYlGn\",\"Spectral\"],\nqualitative: [\"Accent\",\"Dark2\",\"Paired\",\"Pastel1\",\"Pastel2\",\"Set1\",\"Set2\",\"Set3\"]\n}, YlGn: {\n3: [\"#f7fcb9\",\"#addd8e\",\"#31a354\"],\n4: [\"#ffffcc\",\"#c2e699\",\"#78c679\",\"#238443\"],\n5: [\"#ffffcc\",\"#c2e699\",\"#78c679\",\"#31a354\",\"#006837\"],\n6: [\"#ffffcc\",\"#d9f0a3\",\"#addd8e\",\"#78c679\",\"#31a354\",\"#006837\"],\n7: [\"#ffffcc\",\"#d9f0a3\",\"#addd8e\",\"#78c679\",\"#41ab5d\",\"#238443\",\"#005a32\"],\n8: [\"#ffffe5\",\"#f7fcb9\",\"#d9f0a3\",\"#addd8e\",\"#78c679\",\"#41ab5d\",\"#238443\",\"#005a32\"],\n9: [\"#ffffe5\",\"#f7fcb9\",\"#d9f0a3\",\"#addd8e\",\"#78c679\",\"#41ab5d\",\"#238443\",\"#006837\",\"#004529\"]\n},YlGnBu: {\n3: [\"#edf8b1\",\"#7fcdbb\",\"#2c7fb8\"],\n4: [\"#ffffcc\",\"#a1dab4\",\"#41b6c4\",\"#225ea8\"],\n5: [\"#ffffcc\",\"#a1dab4\",\"#41b6c4\",\"#2c7fb8\",\"#253494\"],\n6: [\"#ffffcc\",\"#c7e9b4\",\"#7fcdbb\",\"#41b6c4\",\"#2c7fb8\",\"#253494\"],\n7: [\"#ffffcc\",\"#c7e9b4\",\"#7fcdbb\",\"#41b6c4\",\"#1d91c0\",\"#225ea8\",\"#0c2c84\"],\n8: [\"#ffffd9\",\"#edf8b1\",\"#c7e9b4\",\"#7fcdbb\",\"#41b6c4\",\"#1d91c0\",\"#225ea8\",\"#0c2c84\"],\n9: [\"#ffffd9\",\"#edf8b1\",\"#c7e9b4\",\"#7fcdbb\",\"#41b6c4\",\"#1d91c0\",\"#225ea8\",\"#253494\",\"#081d58\"]\n},GnBu: {\n3: [\"#e0f3db\",\"#a8ddb5\",\"#43a2ca\"],\n4: [\"#f0f9e8\",\"#bae4bc\",\"#7bccc4\",\"#2b8cbe\"],\n5: [\"#f0f9e8\",\"#bae4bc\",\"#7bccc4\",\"#43a2ca\",\"#0868ac\"],\n6: [\"#f0f9e8\",\"#ccebc5\",\"#a8ddb5\",\"#7bccc4\",\"#43a2ca\",\"#0868ac\"],\n7: [\"#f0f9e8\",\"#ccebc5\",\"#a8ddb5\",\"#7bccc4\",\"#4eb3d3\",\"#2b8cbe\",\"#08589e\"],\n8: [\"#f7fcf0\",\"#e0f3db\",\"#ccebc5\",\"#a8ddb5\",\"#7bccc4\",\"#4eb3d3\",\"#2b8cbe\",\"#08589e\"],\n9: [\"#f7fcf0\",\"#e0f3db\",\"#ccebc5\",\"#a8ddb5\",\"#7bccc4\",\"#4eb3d3\",\"#2b8cbe\",\"#0868ac\",\"#084081\"]\n},BuGn: {\n3: [\"#e5f5f9\",\"#99d8c9\",\"#2ca25f\"],\n4: [\"#edf8fb\",\"#b2e2e2\",\"#66c2a4\",\"#238b45\"],\n5: [\"#edf8fb\",\"#b2e2e2\",\"#66c2a4\",\"#2ca25f\",\"#006d2c\"],\n6: [\"#edf8fb\",\"#ccece6\",\"#99d8c9\",\"#66c2a4\",\"#2ca25f\",\"#006d2c\"],\n7: [\"#edf8fb\",\"#ccece6\",\"#99d8c9\",\"#66c2a4\",\"#41ae76\",\"#238b45\",\"#005824\"],\n8: [\"#f7fcfd\",\"#e5f5f9\",\"#ccece6\",\"#99d8c9\",\"#66c2a4\",\"#41ae76\",\"#238b45\",\"#005824\"],\n9: [\"#f7fcfd\",\"#e5f5f9\",\"#ccece6\",\"#99d8c9\",\"#66c2a4\",\"#41ae76\",\"#238b45\",\"#006d2c\",\"#00441b\"]\n},PuBuGn: {\n3: [\"#ece2f0\",\"#a6bddb\",\"#1c9099\"],\n4: [\"#f6eff7\",\"#bdc9e1\",\"#67a9cf\",\"#02818a\"],\n5: [\"#f6eff7\",\"#bdc9e1\",\"#67a9cf\",\"#1c9099\",\"#016c59\"],\n6: [\"#f6eff7\",\"#d0d1e6\",\"#a6bddb\",\"#67a9cf\",\"#1c9099\",\"#016c59\"],\n7: [\"#f6eff7\",\"#d0d1e6\",\"#a6bddb\",\"#67a9cf\",\"#3690c0\",\"#02818a\",\"#016450\"],\n8: [\"#fff7fb\",\"#ece2f0\",\"#d0d1e6\",\"#a6bddb\",\"#67a9cf\",\"#3690c0\",\"#02818a\",\"#016450\"],\n9: [\"#fff7fb\",\"#ece2f0\",\"#d0d1e6\",\"#a6bddb\",\"#67a9cf\",\"#3690c0\",\"#02818a\",\"#016c59\",\"#014636\"]\n},PuBu: {\n3: [\"#ece7f2\",\"#a6bddb\",\"#2b8cbe\"],\n4: [\"#f1eef6\",\"#bdc9e1\",\"#74a9cf\",\"#0570b0\"],\n5: [\"#f1eef6\",\"#bdc9e1\",\"#74a9cf\",\"#2b8cbe\",\"#045a8d\"],\n6: [\"#f1eef6\",\"#d0d1e6\",\"#a6bddb\",\"#74a9cf\",\"#2b8cbe\",\"#045a8d\"],\n7: [\"#f1eef6\",\"#d0d1e6\",\"#a6bddb\",\"#74a9cf\",\"#3690c0\",\"#0570b0\",\"#034e7b\"],\n8: [\"#fff7fb\",\"#ece7f2\",\"#d0d1e6\",\"#a6bddb\",\"#74a9cf\",\"#3690c0\",\"#0570b0\",\"#034e7b\"],\n9: [\"#fff7fb\",\"#ece7f2\",\"#d0d1e6\",\"#a6bddb\",\"#74a9cf\",\"#3690c0\",\"#0570b0\",\"#045a8d\",\"#023858\"]\n},BuPu: {\n3: [\"#e0ecf4\",\"#9ebcda\",\"#8856a7\"],\n4: [\"#edf8fb\",\"#b3cde3\",\"#8c96c6\",\"#88419d\"],\n5: [\"#edf8fb\",\"#b3cde3\",\"#8c96c6\",\"#8856a7\",\"#810f7c\"],\n6: [\"#edf8fb\",\"#bfd3e6\",\"#9ebcda\",\"#8c96c6\",\"#8856a7\",\"#810f7c\"],\n7: [\"#edf8fb\",\"#bfd3e6\",\"#9ebcda\",\"#8c96c6\",\"#8c6bb1\",\"#88419d\",\"#6e016b\"],\n8: [\"#f7fcfd\",\"#e0ecf4\",\"#bfd3e6\",\"#9ebcda\",\"#8c96c6\",\"#8c6bb1\",\"#88419d\",\"#6e016b\"],\n9: [\"#f7fcfd\",\"#e0ecf4\",\"#bfd3e6\",\"#9ebcda\",\"#8c96c6\",\"#8c6bb1\",\"#88419d\",\"#810f7c\",\"#4d004b\"]\n},RdPu: {\n3: [\"#fde0dd\",\"#fa9fb5\",\"#c51b8a\"],\n4: [\"#feebe2\",\"#fbb4b9\",\"#f768a1\",\"#ae017e\"],\n5: [\"#feebe2\",\"#fbb4b9\",\"#f768a1\",\"#c51b8a\",\"#7a0177\"],\n6: [\"#feebe2\",\"#fcc5c0\",\"#fa9fb5\",\"#f768a1\",\"#c51b8a\",\"#7a0177\"],\n7: [\"#feebe2\",\"#fcc5c0\",\"#fa9fb5\",\"#f768a1\",\"#dd3497\",\"#ae017e\",\"#7a0177\"],\n8: [\"#fff7f3\",\"#fde0dd\",\"#fcc5c0\",\"#fa9fb5\",\"#f768a1\",\"#dd3497\",\"#ae017e\",\"#7a0177\"],\n9: [\"#fff7f3\",\"#fde0dd\",\"#fcc5c0\",\"#fa9fb5\",\"#f768a1\",\"#dd3497\",\"#ae017e\",\"#7a0177\",\"#49006a\"]\n},PuRd: {\n3: [\"#e7e1ef\",\"#c994c7\",\"#dd1c77\"],\n4: [\"#f1eef6\",\"#d7b5d8\",\"#df65b0\",\"#ce1256\"],\n5: [\"#f1eef6\",\"#d7b5d8\",\"#df65b0\",\"#dd1c77\",\"#980043\"],\n6: [\"#f1eef6\",\"#d4b9da\",\"#c994c7\",\"#df65b0\",\"#dd1c77\",\"#980043\"],\n7: [\"#f1eef6\",\"#d4b9da\",\"#c994c7\",\"#df65b0\",\"#e7298a\",\"#ce1256\",\"#91003f\"],\n8: [\"#f7f4f9\",\"#e7e1ef\",\"#d4b9da\",\"#c994c7\",\"#df65b0\",\"#e7298a\",\"#ce1256\",\"#91003f\"],\n9: [\"#f7f4f9\",\"#e7e1ef\",\"#d4b9da\",\"#c994c7\",\"#df65b0\",\"#e7298a\",\"#ce1256\",\"#980043\",\"#67001f\"]\n},OrRd: {\n3: [\"#fee8c8\",\"#fdbb84\",\"#e34a33\"],\n4: [\"#fef0d9\",\"#fdcc8a\",\"#fc8d59\",\"#d7301f\"],\n5: [\"#fef0d9\",\"#fdcc8a\",\"#fc8d59\",\"#e34a33\",\"#b30000\"],\n6: [\"#fef0d9\",\"#fdd49e\",\"#fdbb84\",\"#fc8d59\",\"#e34a33\",\"#b30000\"],\n7: [\"#fef0d9\",\"#fdd49e\",\"#fdbb84\",\"#fc8d59\",\"#ef6548\",\"#d7301f\",\"#990000\"],\n8: [\"#fff7ec\",\"#fee8c8\",\"#fdd49e\",\"#fdbb84\",\"#fc8d59\",\"#ef6548\",\"#d7301f\",\"#990000\"],\n9: [\"#fff7ec\",\"#fee8c8\",\"#fdd49e\",\"#fdbb84\",\"#fc8d59\",\"#ef6548\",\"#d7301f\",\"#b30000\",\"#7f0000\"]\n},YlOrRd: {\n3: [\"#ffeda0\",\"#feb24c\",\"#f03b20\"],\n4: [\"#ffffb2\",\"#fecc5c\",\"#fd8d3c\",\"#e31a1c\"],\n5: [\"#ffffb2\",\"#fecc5c\",\"#fd8d3c\",\"#f03b20\",\"#bd0026\"],\n6: [\"#ffffb2\",\"#fed976\",\"#feb24c\",\"#fd8d3c\",\"#f03b20\",\"#bd0026\"],\n7: [\"#ffffb2\",\"#fed976\",\"#feb24c\",\"#fd8d3c\",\"#fc4e2a\",\"#e31a1c\",\"#b10026\"],\n8: [\"#ffffcc\",\"#ffeda0\",\"#fed976\",\"#feb24c\",\"#fd8d3c\",\"#fc4e2a\",\"#e31a1c\",\"#b10026\"],\n9: [\"#ffffcc\",\"#ffeda0\",\"#fed976\",\"#feb24c\",\"#fd8d3c\",\"#fc4e2a\",\"#e31a1c\",\"#bd0026\",\"#800026\"]\n},YlOrBr: {\n3: [\"#fff7bc\",\"#fec44f\",\"#d95f0e\"],\n4: [\"#ffffd4\",\"#fed98e\",\"#fe9929\",\"#cc4c02\"],\n5: [\"#ffffd4\",\"#fed98e\",\"#fe9929\",\"#d95f0e\",\"#993404\"],\n6: [\"#ffffd4\",\"#fee391\",\"#fec44f\",\"#fe9929\",\"#d95f0e\",\"#993404\"],\n7: [\"#ffffd4\",\"#fee391\",\"#fec44f\",\"#fe9929\",\"#ec7014\",\"#cc4c02\",\"#8c2d04\"],\n8: [\"#ffffe5\",\"#fff7bc\",\"#fee391\",\"#fec44f\",\"#fe9929\",\"#ec7014\",\"#cc4c02\",\"#8c2d04\"],\n9: [\"#ffffe5\",\"#fff7bc\",\"#fee391\",\"#fec44f\",\"#fe9929\",\"#ec7014\",\"#cc4c02\",\"#993404\",\"#662506\"]\n},Purples: {\n3: [\"#efedf5\",\"#bcbddc\",\"#756bb1\"],\n4: [\"#f2f0f7\",\"#cbc9e2\",\"#9e9ac8\",\"#6a51a3\"],\n5: [\"#f2f0f7\",\"#cbc9e2\",\"#9e9ac8\",\"#756bb1\",\"#54278f\"],\n6: [\"#f2f0f7\",\"#dadaeb\",\"#bcbddc\",\"#9e9ac8\",\"#756bb1\",\"#54278f\"],\n7: [\"#f2f0f7\",\"#dadaeb\",\"#bcbddc\",\"#9e9ac8\",\"#807dba\",\"#6a51a3\",\"#4a1486\"],\n8: [\"#fcfbfd\",\"#efedf5\",\"#dadaeb\",\"#bcbddc\",\"#9e9ac8\",\"#807dba\",\"#6a51a3\",\"#4a1486\"],\n9: [\"#fcfbfd\",\"#efedf5\",\"#dadaeb\",\"#bcbddc\",\"#9e9ac8\",\"#807dba\",\"#6a51a3\",\"#54278f\",\"#3f007d\"]\n},Blues: {\n3: [\"#deebf7\",\"#9ecae1\",\"#3182bd\"],\n4: [\"#eff3ff\",\"#bdd7e7\",\"#6baed6\",\"#2171b5\"],\n5: [\"#eff3ff\",\"#bdd7e7\",\"#6baed6\",\"#3182bd\",\"#08519c\"],\n6: [\"#eff3ff\",\"#c6dbef\",\"#9ecae1\",\"#6baed6\",\"#3182bd\",\"#08519c\"],\n7: [\"#eff3ff\",\"#c6dbef\",\"#9ecae1\",\"#6baed6\",\"#4292c6\",\"#2171b5\",\"#084594\"],\n8: [\"#f7fbff\",\"#deebf7\",\"#c6dbef\",\"#9ecae1\",\"#6baed6\",\"#4292c6\",\"#2171b5\",\"#084594\"],\n9: [\"#f7fbff\",\"#deebf7\",\"#c6dbef\",\"#9ecae1\",\"#6baed6\",\"#4292c6\",\"#2171b5\",\"#08519c\",\"#08306b\"]\n},Greens: {\n3: [\"#e5f5e0\",\"#a1d99b\",\"#31a354\"],\n4: [\"#edf8e9\",\"#bae4b3\",\"#74c476\",\"#238b45\"],\n5: [\"#edf8e9\",\"#bae4b3\",\"#74c476\",\"#31a354\",\"#006d2c\"],\n6: [\"#edf8e9\",\"#c7e9c0\",\"#a1d99b\",\"#74c476\",\"#31a354\",\"#006d2c\"],\n7: [\"#edf8e9\",\"#c7e9c0\",\"#a1d99b\",\"#74c476\",\"#41ab5d\",\"#238b45\",\"#005a32\"],\n8: [\"#f7fcf5\",\"#e5f5e0\",\"#c7e9c0\",\"#a1d99b\",\"#74c476\",\"#41ab5d\",\"#238b45\",\"#005a32\"],\n9: [\"#f7fcf5\",\"#e5f5e0\",\"#c7e9c0\",\"#a1d99b\",\"#74c476\",\"#41ab5d\",\"#238b45\",\"#006d2c\",\"#00441b\"]\n},Oranges: {\n3: [\"#fee6ce\",\"#fdae6b\",\"#e6550d\"],\n4: [\"#feedde\",\"#fdbe85\",\"#fd8d3c\",\"#d94701\"],\n5: [\"#feedde\",\"#fdbe85\",\"#fd8d3c\",\"#e6550d\",\"#a63603\"],\n6: [\"#feedde\",\"#fdd0a2\",\"#fdae6b\",\"#fd8d3c\",\"#e6550d\",\"#a63603\"],\n7: [\"#feedde\",\"#fdd0a2\",\"#fdae6b\",\"#fd8d3c\",\"#f16913\",\"#d94801\",\"#8c2d04\"],\n8: [\"#fff5eb\",\"#fee6ce\",\"#fdd0a2\",\"#fdae6b\",\"#fd8d3c\",\"#f16913\",\"#d94801\",\"#8c2d04\"],\n9: [\"#fff5eb\",\"#fee6ce\",\"#fdd0a2\",\"#fdae6b\",\"#fd8d3c\",\"#f16913\",\"#d94801\",\"#a63603\",\"#7f2704\"]\n},Reds: {\n3: [\"#fee0d2\",\"#fc9272\",\"#de2d26\"],\n4: [\"#fee5d9\",\"#fcae91\",\"#fb6a4a\",\"#cb181d\"],\n5: [\"#fee5d9\",\"#fcae91\",\"#fb6a4a\",\"#de2d26\",\"#a50f15\"],\n6: [\"#fee5d9\",\"#fcbba1\",\"#fc9272\",\"#fb6a4a\",\"#de2d26\",\"#a50f15\"],\n7: [\"#fee5d9\",\"#fcbba1\",\"#fc9272\",\"#fb6a4a\",\"#ef3b2c\",\"#cb181d\",\"#99000d\"],\n8: [\"#fff5f0\",\"#fee0d2\",\"#fcbba1\",\"#fc9272\",\"#fb6a4a\",\"#ef3b2c\",\"#cb181d\",\"#99000d\"],\n9: [\"#fff5f0\",\"#fee0d2\",\"#fcbba1\",\"#fc9272\",\"#fb6a4a\",\"#ef3b2c\",\"#cb181d\",\"#a50f15\",\"#67000d\"]\n},Greys: {\n3: [\"#f0f0f0\",\"#bdbdbd\",\"#636363\"],\n4: [\"#f7f7f7\",\"#cccccc\",\"#969696\",\"#525252\"],\n5: [\"#f7f7f7\",\"#cccccc\",\"#969696\",\"#636363\",\"#252525\"],\n6: [\"#f7f7f7\",\"#d9d9d9\",\"#bdbdbd\",\"#969696\",\"#636363\",\"#252525\"],\n7: [\"#f7f7f7\",\"#d9d9d9\",\"#bdbdbd\",\"#969696\",\"#737373\",\"#525252\",\"#252525\"],\n8: [\"#ffffff\",\"#f0f0f0\",\"#d9d9d9\",\"#bdbdbd\",\"#969696\",\"#737373\",\"#525252\",\"#252525\"],\n9: [\"#ffffff\",\"#f0f0f0\",\"#d9d9d9\",\"#bdbdbd\",\"#969696\",\"#737373\",\"#525252\",\"#252525\",\"#000000\"]\n},PuOr: {\n3: [\"#f1a340\",\"#f7f7f7\",\"#998ec3\"],\n4: [\"#e66101\",\"#fdb863\",\"#b2abd2\",\"#5e3c99\"],\n5: [\"#e66101\",\"#fdb863\",\"#f7f7f7\",\"#b2abd2\",\"#5e3c99\"],\n6: [\"#b35806\",\"#f1a340\",\"#fee0b6\",\"#d8daeb\",\"#998ec3\",\"#542788\"],\n7: [\"#b35806\",\"#f1a340\",\"#fee0b6\",\"#f7f7f7\",\"#d8daeb\",\"#998ec3\",\"#542788\"],\n8: [\"#b35806\",\"#e08214\",\"#fdb863\",\"#fee0b6\",\"#d8daeb\",\"#b2abd2\",\"#8073ac\",\"#542788\"],\n9: [\"#b35806\",\"#e08214\",\"#fdb863\",\"#fee0b6\",\"#f7f7f7\",\"#d8daeb\",\"#b2abd2\",\"#8073ac\",\"#542788\"],\n10: [\"#7f3b08\",\"#b35806\",\"#e08214\",\"#fdb863\",\"#fee0b6\",\"#d8daeb\",\"#b2abd2\",\"#8073ac\",\"#542788\",\"#2d004b\"],\n11: [\"#7f3b08\",\"#b35806\",\"#e08214\",\"#fdb863\",\"#fee0b6\",\"#f7f7f7\",\"#d8daeb\",\"#b2abd2\",\"#8073ac\",\"#542788\",\"#2d004b\"]\n},BrBG: {\n3: [\"#d8b365\",\"#f5f5f5\",\"#5ab4ac\"],\n4: [\"#a6611a\",\"#dfc27d\",\"#80cdc1\",\"#018571\"],\n5: [\"#a6611a\",\"#dfc27d\",\"#f5f5f5\",\"#80cdc1\",\"#018571\"],\n6: [\"#8c510a\",\"#d8b365\",\"#f6e8c3\",\"#c7eae5\",\"#5ab4ac\",\"#01665e\"],\n7: [\"#8c510a\",\"#d8b365\",\"#f6e8c3\",\"#f5f5f5\",\"#c7eae5\",\"#5ab4ac\",\"#01665e\"],\n8: [\"#8c510a\",\"#bf812d\",\"#dfc27d\",\"#f6e8c3\",\"#c7eae5\",\"#80cdc1\",\"#35978f\",\"#01665e\"],\n9: [\"#8c510a\",\"#bf812d\",\"#dfc27d\",\"#f6e8c3\",\"#f5f5f5\",\"#c7eae5\",\"#80cdc1\",\"#35978f\",\"#01665e\"],\n10: [\"#543005\",\"#8c510a\",\"#bf812d\",\"#dfc27d\",\"#f6e8c3\",\"#c7eae5\",\"#80cdc1\",\"#35978f\",\"#01665e\",\"#003c30\"],\n11: [\"#543005\",\"#8c510a\",\"#bf812d\",\"#dfc27d\",\"#f6e8c3\",\"#f5f5f5\",\"#c7eae5\",\"#80cdc1\",\"#35978f\",\"#01665e\",\"#003c30\"]\n},PRGn: {\n3: [\"#af8dc3\",\"#f7f7f7\",\"#7fbf7b\"],\n4: [\"#7b3294\",\"#c2a5cf\",\"#a6dba0\",\"#008837\"],\n5: [\"#7b3294\",\"#c2a5cf\",\"#f7f7f7\",\"#a6dba0\",\"#008837\"],\n6: [\"#762a83\",\"#af8dc3\",\"#e7d4e8\",\"#d9f0d3\",\"#7fbf7b\",\"#1b7837\"],\n7: [\"#762a83\",\"#af8dc3\",\"#e7d4e8\",\"#f7f7f7\",\"#d9f0d3\",\"#7fbf7b\",\"#1b7837\"],\n8: [\"#762a83\",\"#9970ab\",\"#c2a5cf\",\"#e7d4e8\",\"#d9f0d3\",\"#a6dba0\",\"#5aae61\",\"#1b7837\"],\n9: [\"#762a83\",\"#9970ab\",\"#c2a5cf\",\"#e7d4e8\",\"#f7f7f7\",\"#d9f0d3\",\"#a6dba0\",\"#5aae61\",\"#1b7837\"],\n10: [\"#40004b\",\"#762a83\",\"#9970ab\",\"#c2a5cf\",\"#e7d4e8\",\"#d9f0d3\",\"#a6dba0\",\"#5aae61\",\"#1b7837\",\"#00441b\"],\n11: [\"#40004b\",\"#762a83\",\"#9970ab\",\"#c2a5cf\",\"#e7d4e8\",\"#f7f7f7\",\"#d9f0d3\",\"#a6dba0\",\"#5aae61\",\"#1b7837\",\"#00441b\"]\n},PiYG: {\n3: [\"#e9a3c9\",\"#f7f7f7\",\"#a1d76a\"],\n4: [\"#d01c8b\",\"#f1b6da\",\"#b8e186\",\"#4dac26\"],\n5: [\"#d01c8b\",\"#f1b6da\",\"#f7f7f7\",\"#b8e186\",\"#4dac26\"],\n6: [\"#c51b7d\",\"#e9a3c9\",\"#fde0ef\",\"#e6f5d0\",\"#a1d76a\",\"#4d9221\"],\n7: [\"#c51b7d\",\"#e9a3c9\",\"#fde0ef\",\"#f7f7f7\",\"#e6f5d0\",\"#a1d76a\",\"#4d9221\"],\n8: [\"#c51b7d\",\"#de77ae\",\"#f1b6da\",\"#fde0ef\",\"#e6f5d0\",\"#b8e186\",\"#7fbc41\",\"#4d9221\"],\n9: [\"#c51b7d\",\"#de77ae\",\"#f1b6da\",\"#fde0ef\",\"#f7f7f7\",\"#e6f5d0\",\"#b8e186\",\"#7fbc41\",\"#4d9221\"],\n10: [\"#8e0152\",\"#c51b7d\",\"#de77ae\",\"#f1b6da\",\"#fde0ef\",\"#e6f5d0\",\"#b8e186\",\"#7fbc41\",\"#4d9221\",\"#276419\"],\n11: [\"#8e0152\",\"#c51b7d\",\"#de77ae\",\"#f1b6da\",\"#fde0ef\",\"#f7f7f7\",\"#e6f5d0\",\"#b8e186\",\"#7fbc41\",\"#4d9221\",\"#276419\"]\n},RdBu: {\n3: [\"#ef8a62\",\"#f7f7f7\",\"#67a9cf\"],\n4: [\"#ca0020\",\"#f4a582\",\"#92c5de\",\"#0571b0\"],\n5: [\"#ca0020\",\"#f4a582\",\"#f7f7f7\",\"#92c5de\",\"#0571b0\"],\n6: [\"#b2182b\",\"#ef8a62\",\"#fddbc7\",\"#d1e5f0\",\"#67a9cf\",\"#2166ac\"],\n7: [\"#b2182b\",\"#ef8a62\",\"#fddbc7\",\"#f7f7f7\",\"#d1e5f0\",\"#67a9cf\",\"#2166ac\"],\n8: [\"#b2182b\",\"#d6604d\",\"#f4a582\",\"#fddbc7\",\"#d1e5f0\",\"#92c5de\",\"#4393c3\",\"#2166ac\"],\n9: [\"#b2182b\",\"#d6604d\",\"#f4a582\",\"#fddbc7\",\"#f7f7f7\",\"#d1e5f0\",\"#92c5de\",\"#4393c3\",\"#2166ac\"],\n10: [\"#67001f\",\"#b2182b\",\"#d6604d\",\"#f4a582\",\"#fddbc7\",\"#d1e5f0\",\"#92c5de\",\"#4393c3\",\"#2166ac\",\"#053061\"],\n11: [\"#67001f\",\"#b2182b\",\"#d6604d\",\"#f4a582\",\"#fddbc7\",\"#f7f7f7\",\"#d1e5f0\",\"#92c5de\",\"#4393c3\",\"#2166ac\",\"#053061\"]\n},RdGy: {\n3: [\"#ef8a62\",\"#ffffff\",\"#999999\"],\n4: [\"#ca0020\",\"#f4a582\",\"#bababa\",\"#404040\"],\n5: [\"#ca0020\",\"#f4a582\",\"#ffffff\",\"#bababa\",\"#404040\"],\n6: [\"#b2182b\",\"#ef8a62\",\"#fddbc7\",\"#e0e0e0\",\"#999999\",\"#4d4d4d\"],\n7: [\"#b2182b\",\"#ef8a62\",\"#fddbc7\",\"#ffffff\",\"#e0e0e0\",\"#999999\",\"#4d4d4d\"],\n8: [\"#b2182b\",\"#d6604d\",\"#f4a582\",\"#fddbc7\",\"#e0e0e0\",\"#bababa\",\"#878787\",\"#4d4d4d\"],\n9: [\"#b2182b\",\"#d6604d\",\"#f4a582\",\"#fddbc7\",\"#ffffff\",\"#e0e0e0\",\"#bababa\",\"#878787\",\"#4d4d4d\"],\n10: [\"#67001f\",\"#b2182b\",\"#d6604d\",\"#f4a582\",\"#fddbc7\",\"#e0e0e0\",\"#bababa\",\"#878787\",\"#4d4d4d\",\"#1a1a1a\"],\n11: [\"#67001f\",\"#b2182b\",\"#d6604d\",\"#f4a582\",\"#fddbc7\",\"#ffffff\",\"#e0e0e0\",\"#bababa\",\"#878787\",\"#4d4d4d\",\"#1a1a1a\"]\n},RdYlBu: {\n3: [\"#fc8d59\",\"#ffffbf\",\"#91bfdb\"],\n4: [\"#d7191c\",\"#fdae61\",\"#abd9e9\",\"#2c7bb6\"],\n5: [\"#d7191c\",\"#fdae61\",\"#ffffbf\",\"#abd9e9\",\"#2c7bb6\"],\n6: [\"#d73027\",\"#fc8d59\",\"#fee090\",\"#e0f3f8\",\"#91bfdb\",\"#4575b4\"],\n7: [\"#d73027\",\"#fc8d59\",\"#fee090\",\"#ffffbf\",\"#e0f3f8\",\"#91bfdb\",\"#4575b4\"],\n8: [\"#d73027\",\"#f46d43\",\"#fdae61\",\"#fee090\",\"#e0f3f8\",\"#abd9e9\",\"#74add1\",\"#4575b4\"],\n9: [\"#d73027\",\"#f46d43\",\"#fdae61\",\"#fee090\",\"#ffffbf\",\"#e0f3f8\",\"#abd9e9\",\"#74add1\",\"#4575b4\"],\n10: [\"#a50026\",\"#d73027\",\"#f46d43\",\"#fdae61\",\"#fee090\",\"#e0f3f8\",\"#abd9e9\",\"#74add1\",\"#4575b4\",\"#313695\"],\n11: [\"#a50026\",\"#d73027\",\"#f46d43\",\"#fdae61\",\"#fee090\",\"#ffffbf\",\"#e0f3f8\",\"#abd9e9\",\"#74add1\",\"#4575b4\",\"#313695\"]\n},Spectral: {\n3: [\"#fc8d59\",\"#ffffbf\",\"#99d594\"],\n4: [\"#d7191c\",\"#fdae61\",\"#abdda4\",\"#2b83ba\"],\n5: [\"#d7191c\",\"#fdae61\",\"#ffffbf\",\"#abdda4\",\"#2b83ba\"],\n6: [\"#d53e4f\",\"#fc8d59\",\"#fee08b\",\"#e6f598\",\"#99d594\",\"#3288bd\"],\n7: [\"#d53e4f\",\"#fc8d59\",\"#fee08b\",\"#ffffbf\",\"#e6f598\",\"#99d594\",\"#3288bd\"],\n8: [\"#d53e4f\",\"#f46d43\",\"#fdae61\",\"#fee08b\",\"#e6f598\",\"#abdda4\",\"#66c2a5\",\"#3288bd\"],\n9: [\"#d53e4f\",\"#f46d43\",\"#fdae61\",\"#fee08b\",\"#ffffbf\",\"#e6f598\",\"#abdda4\",\"#66c2a5\",\"#3288bd\"],\n10: [\"#9e0142\",\"#d53e4f\",\"#f46d43\",\"#fdae61\",\"#fee08b\",\"#e6f598\",\"#abdda4\",\"#66c2a5\",\"#3288bd\",\"#5e4fa2\"],\n11: [\"#9e0142\",\"#d53e4f\",\"#f46d43\",\"#fdae61\",\"#fee08b\",\"#ffffbf\",\"#e6f598\",\"#abdda4\",\"#66c2a5\",\"#3288bd\",\"#5e4fa2\"]\n},RdYlGn: {\n3: [\"#fc8d59\",\"#ffffbf\",\"#91cf60\"],\n4: [\"#d7191c\",\"#fdae61\",\"#a6d96a\",\"#1a9641\"],\n5: [\"#d7191c\",\"#fdae61\",\"#ffffbf\",\"#a6d96a\",\"#1a9641\"],\n6: [\"#d73027\",\"#fc8d59\",\"#fee08b\",\"#d9ef8b\",\"#91cf60\",\"#1a9850\"],\n7: [\"#d73027\",\"#fc8d59\",\"#fee08b\",\"#ffffbf\",\"#d9ef8b\",\"#91cf60\",\"#1a9850\"],\n8: [\"#d73027\",\"#f46d43\",\"#fdae61\",\"#fee08b\",\"#d9ef8b\",\"#a6d96a\",\"#66bd63\",\"#1a9850\"],\n9: [\"#d73027\",\"#f46d43\",\"#fdae61\",\"#fee08b\",\"#ffffbf\",\"#d9ef8b\",\"#a6d96a\",\"#66bd63\",\"#1a9850\"],\n10: [\"#a50026\",\"#d73027\",\"#f46d43\",\"#fdae61\",\"#fee08b\",\"#d9ef8b\",\"#a6d96a\",\"#66bd63\",\"#1a9850\",\"#006837\"],\n11: [\"#a50026\",\"#d73027\",\"#f46d43\",\"#fdae61\",\"#fee08b\",\"#ffffbf\",\"#d9ef8b\",\"#a6d96a\",\"#66bd63\",\"#1a9850\",\"#006837\"]\n},Accent: {\n3: [\"#7fc97f\",\"#beaed4\",\"#fdc086\"],\n4: [\"#7fc97f\",\"#beaed4\",\"#fdc086\",\"#ffff99\"],\n5: [\"#7fc97f\",\"#beaed4\",\"#fdc086\",\"#ffff99\",\"#386cb0\"],\n6: [\"#7fc97f\",\"#beaed4\",\"#fdc086\",\"#ffff99\",\"#386cb0\",\"#f0027f\"],\n7: [\"#7fc97f\",\"#beaed4\",\"#fdc086\",\"#ffff99\",\"#386cb0\",\"#f0027f\",\"#bf5b17\"],\n8: [\"#7fc97f\",\"#beaed4\",\"#fdc086\",\"#ffff99\",\"#386cb0\",\"#f0027f\",\"#bf5b17\",\"#666666\"]\n},Dark2: {\n3: [\"#1b9e77\",\"#d95f02\",\"#7570b3\"],\n4: [\"#1b9e77\",\"#d95f02\",\"#7570b3\",\"#e7298a\"],\n5: [\"#1b9e77\",\"#d95f02\",\"#7570b3\",\"#e7298a\",\"#66a61e\"],\n6: [\"#1b9e77\",\"#d95f02\",\"#7570b3\",\"#e7298a\",\"#66a61e\",\"#e6ab02\"],\n7: [\"#1b9e77\",\"#d95f02\",\"#7570b3\",\"#e7298a\",\"#66a61e\",\"#e6ab02\",\"#a6761d\"],\n8: [\"#1b9e77\",\"#d95f02\",\"#7570b3\",\"#e7298a\",\"#66a61e\",\"#e6ab02\",\"#a6761d\",\"#666666\"]\n},Paired: {\n3: [\"#a6cee3\",\"#1f78b4\",\"#b2df8a\"],\n4: [\"#a6cee3\",\"#1f78b4\",\"#b2df8a\",\"#33a02c\"],\n5: [\"#a6cee3\",\"#1f78b4\",\"#b2df8a\",\"#33a02c\",\"#fb9a99\"],\n6: [\"#a6cee3\",\"#1f78b4\",\"#b2df8a\",\"#33a02c\",\"#fb9a99\",\"#e31a1c\"],\n7: [\"#a6cee3\",\"#1f78b4\",\"#b2df8a\",\"#33a02c\",\"#fb9a99\",\"#e31a1c\",\"#fdbf6f\"],\n8: [\"#a6cee3\",\"#1f78b4\",\"#b2df8a\",\"#33a02c\",\"#fb9a99\",\"#e31a1c\",\"#fdbf6f\",\"#ff7f00\"],\n9: [\"#a6cee3\",\"#1f78b4\",\"#b2df8a\",\"#33a02c\",\"#fb9a99\",\"#e31a1c\",\"#fdbf6f\",\"#ff7f00\",\"#cab2d6\"],\n10: [\"#a6cee3\",\"#1f78b4\",\"#b2df8a\",\"#33a02c\",\"#fb9a99\",\"#e31a1c\",\"#fdbf6f\",\"#ff7f00\",\"#cab2d6\",\"#6a3d9a\"],\n11: [\"#a6cee3\",\"#1f78b4\",\"#b2df8a\",\"#33a02c\",\"#fb9a99\",\"#e31a1c\",\"#fdbf6f\",\"#ff7f00\",\"#cab2d6\",\"#6a3d9a\",\"#ffff99\"],\n12: [\"#a6cee3\",\"#1f78b4\",\"#b2df8a\",\"#33a02c\",\"#fb9a99\",\"#e31a1c\",\"#fdbf6f\",\"#ff7f00\",\"#cab2d6\",\"#6a3d9a\",\"#ffff99\",\"#b15928\"]\n},Pastel1: {\n3: [\"#fbb4ae\",\"#b3cde3\",\"#ccebc5\"],\n4: [\"#fbb4ae\",\"#b3cde3\",\"#ccebc5\",\"#decbe4\"],\n5: [\"#fbb4ae\",\"#b3cde3\",\"#ccebc5\",\"#decbe4\",\"#fed9a6\"],\n6: [\"#fbb4ae\",\"#b3cde3\",\"#ccebc5\",\"#decbe4\",\"#fed9a6\",\"#ffffcc\"],\n7: [\"#fbb4ae\",\"#b3cde3\",\"#ccebc5\",\"#decbe4\",\"#fed9a6\",\"#ffffcc\",\"#e5d8bd\"],\n8: [\"#fbb4ae\",\"#b3cde3\",\"#ccebc5\",\"#decbe4\",\"#fed9a6\",\"#ffffcc\",\"#e5d8bd\",\"#fddaec\"],\n9: [\"#fbb4ae\",\"#b3cde3\",\"#ccebc5\",\"#decbe4\",\"#fed9a6\",\"#ffffcc\",\"#e5d8bd\",\"#fddaec\",\"#f2f2f2\"]\n},Pastel2: {\n3: [\"#b3e2cd\",\"#fdcdac\",\"#cbd5e8\"],\n4: [\"#b3e2cd\",\"#fdcdac\",\"#cbd5e8\",\"#f4cae4\"],\n5: [\"#b3e2cd\",\"#fdcdac\",\"#cbd5e8\",\"#f4cae4\",\"#e6f5c9\"],\n6: [\"#b3e2cd\",\"#fdcdac\",\"#cbd5e8\",\"#f4cae4\",\"#e6f5c9\",\"#fff2ae\"],\n7: [\"#b3e2cd\",\"#fdcdac\",\"#cbd5e8\",\"#f4cae4\",\"#e6f5c9\",\"#fff2ae\",\"#f1e2cc\"],\n8: [\"#b3e2cd\",\"#fdcdac\",\"#cbd5e8\",\"#f4cae4\",\"#e6f5c9\",\"#fff2ae\",\"#f1e2cc\",\"#cccccc\"]\n},Set1: {\n3: [\"#e41a1c\",\"#377eb8\",\"#4daf4a\"],\n4: [\"#e41a1c\",\"#377eb8\",\"#4daf4a\",\"#984ea3\"],\n5: [\"#e41a1c\",\"#377eb8\",\"#4daf4a\",\"#984ea3\",\"#ff7f00\"],\n6: [\"#e41a1c\",\"#377eb8\",\"#4daf4a\",\"#984ea3\",\"#ff7f00\",\"#ffff33\"],\n7: [\"#e41a1c\",\"#377eb8\",\"#4daf4a\",\"#984ea3\",\"#ff7f00\",\"#ffff33\",\"#a65628\"],\n8: [\"#e41a1c\",\"#377eb8\",\"#4daf4a\",\"#984ea3\",\"#ff7f00\",\"#ffff33\",\"#a65628\",\"#f781bf\"],\n9: [\"#e41a1c\",\"#377eb8\",\"#4daf4a\",\"#984ea3\",\"#ff7f00\",\"#ffff33\",\"#a65628\",\"#f781bf\",\"#999999\"]\n},Set2: {\n3: [\"#66c2a5\",\"#fc8d62\",\"#8da0cb\"],\n4: [\"#66c2a5\",\"#fc8d62\",\"#8da0cb\",\"#e78ac3\"],\n5: [\"#66c2a5\",\"#fc8d62\",\"#8da0cb\",\"#e78ac3\",\"#a6d854\"],\n6: [\"#66c2a5\",\"#fc8d62\",\"#8da0cb\",\"#e78ac3\",\"#a6d854\",\"#ffd92f\"],\n7: [\"#66c2a5\",\"#fc8d62\",\"#8da0cb\",\"#e78ac3\",\"#a6d854\",\"#ffd92f\",\"#e5c494\"],\n8: [\"#66c2a5\",\"#fc8d62\",\"#8da0cb\",\"#e78ac3\",\"#a6d854\",\"#ffd92f\",\"#e5c494\",\"#b3b3b3\"]\n},Set3: {\n3: [\"#8dd3c7\",\"#ffffb3\",\"#bebada\"],\n4: [\"#8dd3c7\",\"#ffffb3\",\"#bebada\",\"#fb8072\"],\n5: [\"#8dd3c7\",\"#ffffb3\",\"#bebada\",\"#fb8072\",\"#80b1d3\"],\n6: [\"#8dd3c7\",\"#ffffb3\",\"#bebada\",\"#fb8072\",\"#80b1d3\",\"#fdb462\"],\n7: [\"#8dd3c7\",\"#ffffb3\",\"#bebada\",\"#fb8072\",\"#80b1d3\",\"#fdb462\",\"#b3de69\"],\n8: [\"#8dd3c7\",\"#ffffb3\",\"#bebada\",\"#fb8072\",\"#80b1d3\",\"#fdb462\",\"#b3de69\",\"#fccde5\"],\n9: [\"#8dd3c7\",\"#ffffb3\",\"#bebada\",\"#fb8072\",\"#80b1d3\",\"#fdb462\",\"#b3de69\",\"#fccde5\",\"#d9d9d9\"],\n10: [\"#8dd3c7\",\"#ffffb3\",\"#bebada\",\"#fb8072\",\"#80b1d3\",\"#fdb462\",\"#b3de69\",\"#fccde5\",\"#d9d9d9\",\"#bc80bd\"],\n11: [\"#8dd3c7\",\"#ffffb3\",\"#bebada\",\"#fb8072\",\"#80b1d3\",\"#fdb462\",\"#b3de69\",\"#fccde5\",\"#d9d9d9\",\"#bc80bd\",\"#ccebc5\"],\n12: [\"#8dd3c7\",\"#ffffb3\",\"#bebada\",\"#fb8072\",\"#80b1d3\",\"#fdb462\",\"#b3de69\",\"#fccde5\",\"#d9d9d9\",\"#bc80bd\",\"#ccebc5\",\"#ffed6f\"]\n}};\n\nif (true) {\n    !(__WEBPACK_AMD_DEFINE_FACTORY__ = (colorbrewer),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) :\n\t\t\t\t__WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n} else {}\n\n}();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/colorbrewer/index.js\n");

/***/ }),

/***/ "./node_modules/d3/d3.js":
/*!*******************************!*\
  !*** ./node_modules/d3/d3.js ***!
  \*******************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;!function() {\n  var d3 = {\n    version: \"3.5.17\"\n  };\n  var d3_arraySlice = [].slice, d3_array = function(list) {\n    return d3_arraySlice.call(list);\n  };\n  var d3_document = this.document;\n  function d3_documentElement(node) {\n    return node && (node.ownerDocument || node.document || node).documentElement;\n  }\n  function d3_window(node) {\n    return node && (node.ownerDocument && node.ownerDocument.defaultView || node.document && node || node.defaultView);\n  }\n  if (d3_document) {\n    try {\n      d3_array(d3_document.documentElement.childNodes)[0].nodeType;\n    } catch (e) {\n      d3_array = function(list) {\n        var i = list.length, array = new Array(i);\n        while (i--) array[i] = list[i];\n        return array;\n      };\n    }\n  }\n  if (!Date.now) Date.now = function() {\n    return +new Date();\n  };\n  if (d3_document) {\n    try {\n      d3_document.createElement(\"DIV\").style.setProperty(\"opacity\", 0, \"\");\n    } catch (error) {\n      var d3_element_prototype = this.Element.prototype, d3_element_setAttribute = d3_element_prototype.setAttribute, d3_element_setAttributeNS = d3_element_prototype.setAttributeNS, d3_style_prototype = this.CSSStyleDeclaration.prototype, d3_style_setProperty = d3_style_prototype.setProperty;\n      d3_element_prototype.setAttribute = function(name, value) {\n        d3_element_setAttribute.call(this, name, value + \"\");\n      };\n      d3_element_prototype.setAttributeNS = function(space, local, value) {\n        d3_element_setAttributeNS.call(this, space, local, value + \"\");\n      };\n      d3_style_prototype.setProperty = function(name, value, priority) {\n        d3_style_setProperty.call(this, name, value + \"\", priority);\n      };\n    }\n  }\n  d3.ascending = d3_ascending;\n  function d3_ascending(a, b) {\n    return a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;\n  }\n  d3.descending = function(a, b) {\n    return b < a ? -1 : b > a ? 1 : b >= a ? 0 : NaN;\n  };\n  d3.min = function(array, f) {\n    var i = -1, n = array.length, a, b;\n    if (arguments.length === 1) {\n      while (++i < n) if ((b = array[i]) != null && b >= b) {\n        a = b;\n        break;\n      }\n      while (++i < n) if ((b = array[i]) != null && a > b) a = b;\n    } else {\n      while (++i < n) if ((b = f.call(array, array[i], i)) != null && b >= b) {\n        a = b;\n        break;\n      }\n      while (++i < n) if ((b = f.call(array, array[i], i)) != null && a > b) a = b;\n    }\n    return a;\n  };\n  d3.max = function(array, f) {\n    var i = -1, n = array.length, a, b;\n    if (arguments.length === 1) {\n      while (++i < n) if ((b = array[i]) != null && b >= b) {\n        a = b;\n        break;\n      }\n      while (++i < n) if ((b = array[i]) != null && b > a) a = b;\n    } else {\n      while (++i < n) if ((b = f.call(array, array[i], i)) != null && b >= b) {\n        a = b;\n        break;\n      }\n      while (++i < n) if ((b = f.call(array, array[i], i)) != null && b > a) a = b;\n    }\n    return a;\n  };\n  d3.extent = function(array, f) {\n    var i = -1, n = array.length, a, b, c;\n    if (arguments.length === 1) {\n      while (++i < n) if ((b = array[i]) != null && b >= b) {\n        a = c = b;\n        break;\n      }\n      while (++i < n) if ((b = array[i]) != null) {\n        if (a > b) a = b;\n        if (c < b) c = b;\n      }\n    } else {\n      while (++i < n) if ((b = f.call(array, array[i], i)) != null && b >= b) {\n        a = c = b;\n        break;\n      }\n      while (++i < n) if ((b = f.call(array, array[i], i)) != null) {\n        if (a > b) a = b;\n        if (c < b) c = b;\n      }\n    }\n    return [ a, c ];\n  };\n  function d3_number(x) {\n    return x === null ? NaN : +x;\n  }\n  function d3_numeric(x) {\n    return !isNaN(x);\n  }\n  d3.sum = function(array, f) {\n    var s = 0, n = array.length, a, i = -1;\n    if (arguments.length === 1) {\n      while (++i < n) if (d3_numeric(a = +array[i])) s += a;\n    } else {\n      while (++i < n) if (d3_numeric(a = +f.call(array, array[i], i))) s += a;\n    }\n    return s;\n  };\n  d3.mean = function(array, f) {\n    var s = 0, n = array.length, a, i = -1, j = n;\n    if (arguments.length === 1) {\n      while (++i < n) if (d3_numeric(a = d3_number(array[i]))) s += a; else --j;\n    } else {\n      while (++i < n) if (d3_numeric(a = d3_number(f.call(array, array[i], i)))) s += a; else --j;\n    }\n    if (j) return s / j;\n  };\n  d3.quantile = function(values, p) {\n    var H = (values.length - 1) * p + 1, h = Math.floor(H), v = +values[h - 1], e = H - h;\n    return e ? v + e * (values[h] - v) : v;\n  };\n  d3.median = function(array, f) {\n    var numbers = [], n = array.length, a, i = -1;\n    if (arguments.length === 1) {\n      while (++i < n) if (d3_numeric(a = d3_number(array[i]))) numbers.push(a);\n    } else {\n      while (++i < n) if (d3_numeric(a = d3_number(f.call(array, array[i], i)))) numbers.push(a);\n    }\n    if (numbers.length) return d3.quantile(numbers.sort(d3_ascending), .5);\n  };\n  d3.variance = function(array, f) {\n    var n = array.length, m = 0, a, d, s = 0, i = -1, j = 0;\n    if (arguments.length === 1) {\n      while (++i < n) {\n        if (d3_numeric(a = d3_number(array[i]))) {\n          d = a - m;\n          m += d / ++j;\n          s += d * (a - m);\n        }\n      }\n    } else {\n      while (++i < n) {\n        if (d3_numeric(a = d3_number(f.call(array, array[i], i)))) {\n          d = a - m;\n          m += d / ++j;\n          s += d * (a - m);\n        }\n      }\n    }\n    if (j > 1) return s / (j - 1);\n  };\n  d3.deviation = function() {\n    var v = d3.variance.apply(this, arguments);\n    return v ? Math.sqrt(v) : v;\n  };\n  function d3_bisector(compare) {\n    return {\n      left: function(a, x, lo, hi) {\n        if (arguments.length < 3) lo = 0;\n        if (arguments.length < 4) hi = a.length;\n        while (lo < hi) {\n          var mid = lo + hi >>> 1;\n          if (compare(a[mid], x) < 0) lo = mid + 1; else hi = mid;\n        }\n        return lo;\n      },\n      right: function(a, x, lo, hi) {\n        if (arguments.length < 3) lo = 0;\n        if (arguments.length < 4) hi = a.length;\n        while (lo < hi) {\n          var mid = lo + hi >>> 1;\n          if (compare(a[mid], x) > 0) hi = mid; else lo = mid + 1;\n        }\n        return lo;\n      }\n    };\n  }\n  var d3_bisect = d3_bisector(d3_ascending);\n  d3.bisectLeft = d3_bisect.left;\n  d3.bisect = d3.bisectRight = d3_bisect.right;\n  d3.bisector = function(f) {\n    return d3_bisector(f.length === 1 ? function(d, x) {\n      return d3_ascending(f(d), x);\n    } : f);\n  };\n  d3.shuffle = function(array, i0, i1) {\n    if ((m = arguments.length) < 3) {\n      i1 = array.length;\n      if (m < 2) i0 = 0;\n    }\n    var m = i1 - i0, t, i;\n    while (m) {\n      i = Math.random() * m-- | 0;\n      t = array[m + i0], array[m + i0] = array[i + i0], array[i + i0] = t;\n    }\n    return array;\n  };\n  d3.permute = function(array, indexes) {\n    var i = indexes.length, permutes = new Array(i);\n    while (i--) permutes[i] = array[indexes[i]];\n    return permutes;\n  };\n  d3.pairs = function(array) {\n    var i = 0, n = array.length - 1, p0, p1 = array[0], pairs = new Array(n < 0 ? 0 : n);\n    while (i < n) pairs[i] = [ p0 = p1, p1 = array[++i] ];\n    return pairs;\n  };\n  d3.transpose = function(matrix) {\n    if (!(n = matrix.length)) return [];\n    for (var i = -1, m = d3.min(matrix, d3_transposeLength), transpose = new Array(m); ++i < m; ) {\n      for (var j = -1, n, row = transpose[i] = new Array(n); ++j < n; ) {\n        row[j] = matrix[j][i];\n      }\n    }\n    return transpose;\n  };\n  function d3_transposeLength(d) {\n    return d.length;\n  }\n  d3.zip = function() {\n    return d3.transpose(arguments);\n  };\n  d3.keys = function(map) {\n    var keys = [];\n    for (var key in map) keys.push(key);\n    return keys;\n  };\n  d3.values = function(map) {\n    var values = [];\n    for (var key in map) values.push(map[key]);\n    return values;\n  };\n  d3.entries = function(map) {\n    var entries = [];\n    for (var key in map) entries.push({\n      key: key,\n      value: map[key]\n    });\n    return entries;\n  };\n  d3.merge = function(arrays) {\n    var n = arrays.length, m, i = -1, j = 0, merged, array;\n    while (++i < n) j += arrays[i].length;\n    merged = new Array(j);\n    while (--n >= 0) {\n      array = arrays[n];\n      m = array.length;\n      while (--m >= 0) {\n        merged[--j] = array[m];\n      }\n    }\n    return merged;\n  };\n  var abs = Math.abs;\n  d3.range = function(start, stop, step) {\n    if (arguments.length < 3) {\n      step = 1;\n      if (arguments.length < 2) {\n        stop = start;\n        start = 0;\n      }\n    }\n    if ((stop - start) / step === Infinity) throw new Error(\"infinite range\");\n    var range = [], k = d3_range_integerScale(abs(step)), i = -1, j;\n    start *= k, stop *= k, step *= k;\n    if (step < 0) while ((j = start + step * ++i) > stop) range.push(j / k); else while ((j = start + step * ++i) < stop) range.push(j / k);\n    return range;\n  };\n  function d3_range_integerScale(x) {\n    var k = 1;\n    while (x * k % 1) k *= 10;\n    return k;\n  }\n  function d3_class(ctor, properties) {\n    for (var key in properties) {\n      Object.defineProperty(ctor.prototype, key, {\n        value: properties[key],\n        enumerable: false\n      });\n    }\n  }\n  d3.map = function(object, f) {\n    var map = new d3_Map();\n    if (object instanceof d3_Map) {\n      object.forEach(function(key, value) {\n        map.set(key, value);\n      });\n    } else if (Array.isArray(object)) {\n      var i = -1, n = object.length, o;\n      if (arguments.length === 1) while (++i < n) map.set(i, object[i]); else while (++i < n) map.set(f.call(object, o = object[i], i), o);\n    } else {\n      for (var key in object) map.set(key, object[key]);\n    }\n    return map;\n  };\n  function d3_Map() {\n    this._ = Object.create(null);\n  }\n  var d3_map_proto = \"__proto__\", d3_map_zero = \"\\x00\";\n  d3_class(d3_Map, {\n    has: d3_map_has,\n    get: function(key) {\n      return this._[d3_map_escape(key)];\n    },\n    set: function(key, value) {\n      return this._[d3_map_escape(key)] = value;\n    },\n    remove: d3_map_remove,\n    keys: d3_map_keys,\n    values: function() {\n      var values = [];\n      for (var key in this._) values.push(this._[key]);\n      return values;\n    },\n    entries: function() {\n      var entries = [];\n      for (var key in this._) entries.push({\n        key: d3_map_unescape(key),\n        value: this._[key]\n      });\n      return entries;\n    },\n    size: d3_map_size,\n    empty: d3_map_empty,\n    forEach: function(f) {\n      for (var key in this._) f.call(this, d3_map_unescape(key), this._[key]);\n    }\n  });\n  function d3_map_escape(key) {\n    return (key += \"\") === d3_map_proto || key[0] === d3_map_zero ? d3_map_zero + key : key;\n  }\n  function d3_map_unescape(key) {\n    return (key += \"\")[0] === d3_map_zero ? key.slice(1) : key;\n  }\n  function d3_map_has(key) {\n    return d3_map_escape(key) in this._;\n  }\n  function d3_map_remove(key) {\n    return (key = d3_map_escape(key)) in this._ && delete this._[key];\n  }\n  function d3_map_keys() {\n    var keys = [];\n    for (var key in this._) keys.push(d3_map_unescape(key));\n    return keys;\n  }\n  function d3_map_size() {\n    var size = 0;\n    for (var key in this._) ++size;\n    return size;\n  }\n  function d3_map_empty() {\n    for (var key in this._) return false;\n    return true;\n  }\n  d3.nest = function() {\n    var nest = {}, keys = [], sortKeys = [], sortValues, rollup;\n    function map(mapType, array, depth) {\n      if (depth >= keys.length) return rollup ? rollup.call(nest, array) : sortValues ? array.sort(sortValues) : array;\n      var i = -1, n = array.length, key = keys[depth++], keyValue, object, setter, valuesByKey = new d3_Map(), values;\n      while (++i < n) {\n        if (values = valuesByKey.get(keyValue = key(object = array[i]))) {\n          values.push(object);\n        } else {\n          valuesByKey.set(keyValue, [ object ]);\n        }\n      }\n      if (mapType) {\n        object = mapType();\n        setter = function(keyValue, values) {\n          object.set(keyValue, map(mapType, values, depth));\n        };\n      } else {\n        object = {};\n        setter = function(keyValue, values) {\n          object[keyValue] = map(mapType, values, depth);\n        };\n      }\n      valuesByKey.forEach(setter);\n      return object;\n    }\n    function entries(map, depth) {\n      if (depth >= keys.length) return map;\n      var array = [], sortKey = sortKeys[depth++];\n      map.forEach(function(key, keyMap) {\n        array.push({\n          key: key,\n          values: entries(keyMap, depth)\n        });\n      });\n      return sortKey ? array.sort(function(a, b) {\n        return sortKey(a.key, b.key);\n      }) : array;\n    }\n    nest.map = function(array, mapType) {\n      return map(mapType, array, 0);\n    };\n    nest.entries = function(array) {\n      return entries(map(d3.map, array, 0), 0);\n    };\n    nest.key = function(d) {\n      keys.push(d);\n      return nest;\n    };\n    nest.sortKeys = function(order) {\n      sortKeys[keys.length - 1] = order;\n      return nest;\n    };\n    nest.sortValues = function(order) {\n      sortValues = order;\n      return nest;\n    };\n    nest.rollup = function(f) {\n      rollup = f;\n      return nest;\n    };\n    return nest;\n  };\n  d3.set = function(array) {\n    var set = new d3_Set();\n    if (array) for (var i = 0, n = array.length; i < n; ++i) set.add(array[i]);\n    return set;\n  };\n  function d3_Set() {\n    this._ = Object.create(null);\n  }\n  d3_class(d3_Set, {\n    has: d3_map_has,\n    add: function(key) {\n      this._[d3_map_escape(key += \"\")] = true;\n      return key;\n    },\n    remove: d3_map_remove,\n    values: d3_map_keys,\n    size: d3_map_size,\n    empty: d3_map_empty,\n    forEach: function(f) {\n      for (var key in this._) f.call(this, d3_map_unescape(key));\n    }\n  });\n  d3.behavior = {};\n  function d3_identity(d) {\n    return d;\n  }\n  d3.rebind = function(target, source) {\n    var i = 1, n = arguments.length, method;\n    while (++i < n) target[method = arguments[i]] = d3_rebind(target, source, source[method]);\n    return target;\n  };\n  function d3_rebind(target, source, method) {\n    return function() {\n      var value = method.apply(source, arguments);\n      return value === source ? target : value;\n    };\n  }\n  function d3_vendorSymbol(object, name) {\n    if (name in object) return name;\n    name = name.charAt(0).toUpperCase() + name.slice(1);\n    for (var i = 0, n = d3_vendorPrefixes.length; i < n; ++i) {\n      var prefixName = d3_vendorPrefixes[i] + name;\n      if (prefixName in object) return prefixName;\n    }\n  }\n  var d3_vendorPrefixes = [ \"webkit\", \"ms\", \"moz\", \"Moz\", \"o\", \"O\" ];\n  function d3_noop() {}\n  d3.dispatch = function() {\n    var dispatch = new d3_dispatch(), i = -1, n = arguments.length;\n    while (++i < n) dispatch[arguments[i]] = d3_dispatch_event(dispatch);\n    return dispatch;\n  };\n  function d3_dispatch() {}\n  d3_dispatch.prototype.on = function(type, listener) {\n    var i = type.indexOf(\".\"), name = \"\";\n    if (i >= 0) {\n      name = type.slice(i + 1);\n      type = type.slice(0, i);\n    }\n    if (type) return arguments.length < 2 ? this[type].on(name) : this[type].on(name, listener);\n    if (arguments.length === 2) {\n      if (listener == null) for (type in this) {\n        if (this.hasOwnProperty(type)) this[type].on(name, null);\n      }\n      return this;\n    }\n  };\n  function d3_dispatch_event(dispatch) {\n    var listeners = [], listenerByName = new d3_Map();\n    function event() {\n      var z = listeners, i = -1, n = z.length, l;\n      while (++i < n) if (l = z[i].on) l.apply(this, arguments);\n      return dispatch;\n    }\n    event.on = function(name, listener) {\n      var l = listenerByName.get(name), i;\n      if (arguments.length < 2) return l && l.on;\n      if (l) {\n        l.on = null;\n        listeners = listeners.slice(0, i = listeners.indexOf(l)).concat(listeners.slice(i + 1));\n        listenerByName.remove(name);\n      }\n      if (listener) listeners.push(listenerByName.set(name, {\n        on: listener\n      }));\n      return dispatch;\n    };\n    return event;\n  }\n  d3.event = null;\n  function d3_eventPreventDefault() {\n    d3.event.preventDefault();\n  }\n  function d3_eventSource() {\n    var e = d3.event, s;\n    while (s = e.sourceEvent) e = s;\n    return e;\n  }\n  function d3_eventDispatch(target) {\n    var dispatch = new d3_dispatch(), i = 0, n = arguments.length;\n    while (++i < n) dispatch[arguments[i]] = d3_dispatch_event(dispatch);\n    dispatch.of = function(thiz, argumentz) {\n      return function(e1) {\n        try {\n          var e0 = e1.sourceEvent = d3.event;\n          e1.target = target;\n          d3.event = e1;\n          dispatch[e1.type].apply(thiz, argumentz);\n        } finally {\n          d3.event = e0;\n        }\n      };\n    };\n    return dispatch;\n  }\n  d3.requote = function(s) {\n    return s.replace(d3_requote_re, \"\\\\$&\");\n  };\n  var d3_requote_re = /[\\\\\\^\\$\\*\\+\\?\\|\\[\\]\\(\\)\\.\\{\\}]/g;\n  var d3_subclass = {}.__proto__ ? function(object, prototype) {\n    object.__proto__ = prototype;\n  } : function(object, prototype) {\n    for (var property in prototype) object[property] = prototype[property];\n  };\n  function d3_selection(groups) {\n    d3_subclass(groups, d3_selectionPrototype);\n    return groups;\n  }\n  var d3_select = function(s, n) {\n    return n.querySelector(s);\n  }, d3_selectAll = function(s, n) {\n    return n.querySelectorAll(s);\n  }, d3_selectMatches = function(n, s) {\n    var d3_selectMatcher = n.matches || n[d3_vendorSymbol(n, \"matchesSelector\")];\n    d3_selectMatches = function(n, s) {\n      return d3_selectMatcher.call(n, s);\n    };\n    return d3_selectMatches(n, s);\n  };\n  if (typeof Sizzle === \"function\") {\n    d3_select = function(s, n) {\n      return Sizzle(s, n)[0] || null;\n    };\n    d3_selectAll = Sizzle;\n    d3_selectMatches = Sizzle.matchesSelector;\n  }\n  d3.selection = function() {\n    return d3.select(d3_document.documentElement);\n  };\n  var d3_selectionPrototype = d3.selection.prototype = [];\n  d3_selectionPrototype.select = function(selector) {\n    var subgroups = [], subgroup, subnode, group, node;\n    selector = d3_selection_selector(selector);\n    for (var j = -1, m = this.length; ++j < m; ) {\n      subgroups.push(subgroup = []);\n      subgroup.parentNode = (group = this[j]).parentNode;\n      for (var i = -1, n = group.length; ++i < n; ) {\n        if (node = group[i]) {\n          subgroup.push(subnode = selector.call(node, node.__data__, i, j));\n          if (subnode && \"__data__\" in node) subnode.__data__ = node.__data__;\n        } else {\n          subgroup.push(null);\n        }\n      }\n    }\n    return d3_selection(subgroups);\n  };\n  function d3_selection_selector(selector) {\n    return typeof selector === \"function\" ? selector : function() {\n      return d3_select(selector, this);\n    };\n  }\n  d3_selectionPrototype.selectAll = function(selector) {\n    var subgroups = [], subgroup, node;\n    selector = d3_selection_selectorAll(selector);\n    for (var j = -1, m = this.length; ++j < m; ) {\n      for (var group = this[j], i = -1, n = group.length; ++i < n; ) {\n        if (node = group[i]) {\n          subgroups.push(subgroup = d3_array(selector.call(node, node.__data__, i, j)));\n          subgroup.parentNode = node;\n        }\n      }\n    }\n    return d3_selection(subgroups);\n  };\n  function d3_selection_selectorAll(selector) {\n    return typeof selector === \"function\" ? selector : function() {\n      return d3_selectAll(selector, this);\n    };\n  }\n  var d3_nsXhtml = \"http://www.w3.org/1999/xhtml\";\n  var d3_nsPrefix = {\n    svg: \"http://www.w3.org/2000/svg\",\n    xhtml: d3_nsXhtml,\n    xlink: \"http://www.w3.org/1999/xlink\",\n    xml: \"http://www.w3.org/XML/1998/namespace\",\n    xmlns: \"http://www.w3.org/2000/xmlns/\"\n  };\n  d3.ns = {\n    prefix: d3_nsPrefix,\n    qualify: function(name) {\n      var i = name.indexOf(\":\"), prefix = name;\n      if (i >= 0 && (prefix = name.slice(0, i)) !== \"xmlns\") name = name.slice(i + 1);\n      return d3_nsPrefix.hasOwnProperty(prefix) ? {\n        space: d3_nsPrefix[prefix],\n        local: name\n      } : name;\n    }\n  };\n  d3_selectionPrototype.attr = function(name, value) {\n    if (arguments.length < 2) {\n      if (typeof name === \"string\") {\n        var node = this.node();\n        name = d3.ns.qualify(name);\n        return name.local ? node.getAttributeNS(name.space, name.local) : node.getAttribute(name);\n      }\n      for (value in name) this.each(d3_selection_attr(value, name[value]));\n      return this;\n    }\n    return this.each(d3_selection_attr(name, value));\n  };\n  function d3_selection_attr(name, value) {\n    name = d3.ns.qualify(name);\n    function attrNull() {\n      this.removeAttribute(name);\n    }\n    function attrNullNS() {\n      this.removeAttributeNS(name.space, name.local);\n    }\n    function attrConstant() {\n      this.setAttribute(name, value);\n    }\n    function attrConstantNS() {\n      this.setAttributeNS(name.space, name.local, value);\n    }\n    function attrFunction() {\n      var x = value.apply(this, arguments);\n      if (x == null) this.removeAttribute(name); else this.setAttribute(name, x);\n    }\n    function attrFunctionNS() {\n      var x = value.apply(this, arguments);\n      if (x == null) this.removeAttributeNS(name.space, name.local); else this.setAttributeNS(name.space, name.local, x);\n    }\n    return value == null ? name.local ? attrNullNS : attrNull : typeof value === \"function\" ? name.local ? attrFunctionNS : attrFunction : name.local ? attrConstantNS : attrConstant;\n  }\n  function d3_collapse(s) {\n    return s.trim().replace(/\\s+/g, \" \");\n  }\n  d3_selectionPrototype.classed = function(name, value) {\n    if (arguments.length < 2) {\n      if (typeof name === \"string\") {\n        var node = this.node(), n = (name = d3_selection_classes(name)).length, i = -1;\n        if (value = node.classList) {\n          while (++i < n) if (!value.contains(name[i])) return false;\n        } else {\n          value = node.getAttribute(\"class\");\n          while (++i < n) if (!d3_selection_classedRe(name[i]).test(value)) return false;\n        }\n        return true;\n      }\n      for (value in name) this.each(d3_selection_classed(value, name[value]));\n      return this;\n    }\n    return this.each(d3_selection_classed(name, value));\n  };\n  function d3_selection_classedRe(name) {\n    return new RegExp(\"(?:^|\\\\s+)\" + d3.requote(name) + \"(?:\\\\s+|$)\", \"g\");\n  }\n  function d3_selection_classes(name) {\n    return (name + \"\").trim().split(/^|\\s+/);\n  }\n  function d3_selection_classed(name, value) {\n    name = d3_selection_classes(name).map(d3_selection_classedName);\n    var n = name.length;\n    function classedConstant() {\n      var i = -1;\n      while (++i < n) name[i](this, value);\n    }\n    function classedFunction() {\n      var i = -1, x = value.apply(this, arguments);\n      while (++i < n) name[i](this, x);\n    }\n    return typeof value === \"function\" ? classedFunction : classedConstant;\n  }\n  function d3_selection_classedName(name) {\n    var re = d3_selection_classedRe(name);\n    return function(node, value) {\n      if (c = node.classList) return value ? c.add(name) : c.remove(name);\n      var c = node.getAttribute(\"class\") || \"\";\n      if (value) {\n        re.lastIndex = 0;\n        if (!re.test(c)) node.setAttribute(\"class\", d3_collapse(c + \" \" + name));\n      } else {\n        node.setAttribute(\"class\", d3_collapse(c.replace(re, \" \")));\n      }\n    };\n  }\n  d3_selectionPrototype.style = function(name, value, priority) {\n    var n = arguments.length;\n    if (n < 3) {\n      if (typeof name !== \"string\") {\n        if (n < 2) value = \"\";\n        for (priority in name) this.each(d3_selection_style(priority, name[priority], value));\n        return this;\n      }\n      if (n < 2) {\n        var node = this.node();\n        return d3_window(node).getComputedStyle(node, null).getPropertyValue(name);\n      }\n      priority = \"\";\n    }\n    return this.each(d3_selection_style(name, value, priority));\n  };\n  function d3_selection_style(name, value, priority) {\n    function styleNull() {\n      this.style.removeProperty(name);\n    }\n    function styleConstant() {\n      this.style.setProperty(name, value, priority);\n    }\n    function styleFunction() {\n      var x = value.apply(this, arguments);\n      if (x == null) this.style.removeProperty(name); else this.style.setProperty(name, x, priority);\n    }\n    return value == null ? styleNull : typeof value === \"function\" ? styleFunction : styleConstant;\n  }\n  d3_selectionPrototype.property = function(name, value) {\n    if (arguments.length < 2) {\n      if (typeof name === \"string\") return this.node()[name];\n      for (value in name) this.each(d3_selection_property(value, name[value]));\n      return this;\n    }\n    return this.each(d3_selection_property(name, value));\n  };\n  function d3_selection_property(name, value) {\n    function propertyNull() {\n      delete this[name];\n    }\n    function propertyConstant() {\n      this[name] = value;\n    }\n    function propertyFunction() {\n      var x = value.apply(this, arguments);\n      if (x == null) delete this[name]; else this[name] = x;\n    }\n    return value == null ? propertyNull : typeof value === \"function\" ? propertyFunction : propertyConstant;\n  }\n  d3_selectionPrototype.text = function(value) {\n    return arguments.length ? this.each(typeof value === \"function\" ? function() {\n      var v = value.apply(this, arguments);\n      this.textContent = v == null ? \"\" : v;\n    } : value == null ? function() {\n      this.textContent = \"\";\n    } : function() {\n      this.textContent = value;\n    }) : this.node().textContent;\n  };\n  d3_selectionPrototype.html = function(value) {\n    return arguments.length ? this.each(typeof value === \"function\" ? function() {\n      var v = value.apply(this, arguments);\n      this.innerHTML = v == null ? \"\" : v;\n    } : value == null ? function() {\n      this.innerHTML = \"\";\n    } : function() {\n      this.innerHTML = value;\n    }) : this.node().innerHTML;\n  };\n  d3_selectionPrototype.append = function(name) {\n    name = d3_selection_creator(name);\n    return this.select(function() {\n      return this.appendChild(name.apply(this, arguments));\n    });\n  };\n  function d3_selection_creator(name) {\n    function create() {\n      var document = this.ownerDocument, namespace = this.namespaceURI;\n      return namespace === d3_nsXhtml && document.documentElement.namespaceURI === d3_nsXhtml ? document.createElement(name) : document.createElementNS(namespace, name);\n    }\n    function createNS() {\n      return this.ownerDocument.createElementNS(name.space, name.local);\n    }\n    return typeof name === \"function\" ? name : (name = d3.ns.qualify(name)).local ? createNS : create;\n  }\n  d3_selectionPrototype.insert = function(name, before) {\n    name = d3_selection_creator(name);\n    before = d3_selection_selector(before);\n    return this.select(function() {\n      return this.insertBefore(name.apply(this, arguments), before.apply(this, arguments) || null);\n    });\n  };\n  d3_selectionPrototype.remove = function() {\n    return this.each(d3_selectionRemove);\n  };\n  function d3_selectionRemove() {\n    var parent = this.parentNode;\n    if (parent) parent.removeChild(this);\n  }\n  d3_selectionPrototype.data = function(value, key) {\n    var i = -1, n = this.length, group, node;\n    if (!arguments.length) {\n      value = new Array(n = (group = this[0]).length);\n      while (++i < n) {\n        if (node = group[i]) {\n          value[i] = node.__data__;\n        }\n      }\n      return value;\n    }\n    function bind(group, groupData) {\n      var i, n = group.length, m = groupData.length, n0 = Math.min(n, m), updateNodes = new Array(m), enterNodes = new Array(m), exitNodes = new Array(n), node, nodeData;\n      if (key) {\n        var nodeByKeyValue = new d3_Map(), keyValues = new Array(n), keyValue;\n        for (i = -1; ++i < n; ) {\n          if (node = group[i]) {\n            if (nodeByKeyValue.has(keyValue = key.call(node, node.__data__, i))) {\n              exitNodes[i] = node;\n            } else {\n              nodeByKeyValue.set(keyValue, node);\n            }\n            keyValues[i] = keyValue;\n          }\n        }\n        for (i = -1; ++i < m; ) {\n          if (!(node = nodeByKeyValue.get(keyValue = key.call(groupData, nodeData = groupData[i], i)))) {\n            enterNodes[i] = d3_selection_dataNode(nodeData);\n          } else if (node !== true) {\n            updateNodes[i] = node;\n            node.__data__ = nodeData;\n          }\n          nodeByKeyValue.set(keyValue, true);\n        }\n        for (i = -1; ++i < n; ) {\n          if (i in keyValues && nodeByKeyValue.get(keyValues[i]) !== true) {\n            exitNodes[i] = group[i];\n          }\n        }\n      } else {\n        for (i = -1; ++i < n0; ) {\n          node = group[i];\n          nodeData = groupData[i];\n          if (node) {\n            node.__data__ = nodeData;\n            updateNodes[i] = node;\n          } else {\n            enterNodes[i] = d3_selection_dataNode(nodeData);\n          }\n        }\n        for (;i < m; ++i) {\n          enterNodes[i] = d3_selection_dataNode(groupData[i]);\n        }\n        for (;i < n; ++i) {\n          exitNodes[i] = group[i];\n        }\n      }\n      enterNodes.update = updateNodes;\n      enterNodes.parentNode = updateNodes.parentNode = exitNodes.parentNode = group.parentNode;\n      enter.push(enterNodes);\n      update.push(updateNodes);\n      exit.push(exitNodes);\n    }\n    var enter = d3_selection_enter([]), update = d3_selection([]), exit = d3_selection([]);\n    if (typeof value === \"function\") {\n      while (++i < n) {\n        bind(group = this[i], value.call(group, group.parentNode.__data__, i));\n      }\n    } else {\n      while (++i < n) {\n        bind(group = this[i], value);\n      }\n    }\n    update.enter = function() {\n      return enter;\n    };\n    update.exit = function() {\n      return exit;\n    };\n    return update;\n  };\n  function d3_selection_dataNode(data) {\n    return {\n      __data__: data\n    };\n  }\n  d3_selectionPrototype.datum = function(value) {\n    return arguments.length ? this.property(\"__data__\", value) : this.property(\"__data__\");\n  };\n  d3_selectionPrototype.filter = function(filter) {\n    var subgroups = [], subgroup, group, node;\n    if (typeof filter !== \"function\") filter = d3_selection_filter(filter);\n    for (var j = 0, m = this.length; j < m; j++) {\n      subgroups.push(subgroup = []);\n      subgroup.parentNode = (group = this[j]).parentNode;\n      for (var i = 0, n = group.length; i < n; i++) {\n        if ((node = group[i]) && filter.call(node, node.__data__, i, j)) {\n          subgroup.push(node);\n        }\n      }\n    }\n    return d3_selection(subgroups);\n  };\n  function d3_selection_filter(selector) {\n    return function() {\n      return d3_selectMatches(this, selector);\n    };\n  }\n  d3_selectionPrototype.order = function() {\n    for (var j = -1, m = this.length; ++j < m; ) {\n      for (var group = this[j], i = group.length - 1, next = group[i], node; --i >= 0; ) {\n        if (node = group[i]) {\n          if (next && next !== node.nextSibling) next.parentNode.insertBefore(node, next);\n          next = node;\n        }\n      }\n    }\n    return this;\n  };\n  d3_selectionPrototype.sort = function(comparator) {\n    comparator = d3_selection_sortComparator.apply(this, arguments);\n    for (var j = -1, m = this.length; ++j < m; ) this[j].sort(comparator);\n    return this.order();\n  };\n  function d3_selection_sortComparator(comparator) {\n    if (!arguments.length) comparator = d3_ascending;\n    return function(a, b) {\n      return a && b ? comparator(a.__data__, b.__data__) : !a - !b;\n    };\n  }\n  d3_selectionPrototype.each = function(callback) {\n    return d3_selection_each(this, function(node, i, j) {\n      callback.call(node, node.__data__, i, j);\n    });\n  };\n  function d3_selection_each(groups, callback) {\n    for (var j = 0, m = groups.length; j < m; j++) {\n      for (var group = groups[j], i = 0, n = group.length, node; i < n; i++) {\n        if (node = group[i]) callback(node, i, j);\n      }\n    }\n    return groups;\n  }\n  d3_selectionPrototype.call = function(callback) {\n    var args = d3_array(arguments);\n    callback.apply(args[0] = this, args);\n    return this;\n  };\n  d3_selectionPrototype.empty = function() {\n    return !this.node();\n  };\n  d3_selectionPrototype.node = function() {\n    for (var j = 0, m = this.length; j < m; j++) {\n      for (var group = this[j], i = 0, n = group.length; i < n; i++) {\n        var node = group[i];\n        if (node) return node;\n      }\n    }\n    return null;\n  };\n  d3_selectionPrototype.size = function() {\n    var n = 0;\n    d3_selection_each(this, function() {\n      ++n;\n    });\n    return n;\n  };\n  function d3_selection_enter(selection) {\n    d3_subclass(selection, d3_selection_enterPrototype);\n    return selection;\n  }\n  var d3_selection_enterPrototype = [];\n  d3.selection.enter = d3_selection_enter;\n  d3.selection.enter.prototype = d3_selection_enterPrototype;\n  d3_selection_enterPrototype.append = d3_selectionPrototype.append;\n  d3_selection_enterPrototype.empty = d3_selectionPrototype.empty;\n  d3_selection_enterPrototype.node = d3_selectionPrototype.node;\n  d3_selection_enterPrototype.call = d3_selectionPrototype.call;\n  d3_selection_enterPrototype.size = d3_selectionPrototype.size;\n  d3_selection_enterPrototype.select = function(selector) {\n    var subgroups = [], subgroup, subnode, upgroup, group, node;\n    for (var j = -1, m = this.length; ++j < m; ) {\n      upgroup = (group = this[j]).update;\n      subgroups.push(subgroup = []);\n      subgroup.parentNode = group.parentNode;\n      for (var i = -1, n = group.length; ++i < n; ) {\n        if (node = group[i]) {\n          subgroup.push(upgroup[i] = subnode = selector.call(group.parentNode, node.__data__, i, j));\n          subnode.__data__ = node.__data__;\n        } else {\n          subgroup.push(null);\n        }\n      }\n    }\n    return d3_selection(subgroups);\n  };\n  d3_selection_enterPrototype.insert = function(name, before) {\n    if (arguments.length < 2) before = d3_selection_enterInsertBefore(this);\n    return d3_selectionPrototype.insert.call(this, name, before);\n  };\n  function d3_selection_enterInsertBefore(enter) {\n    var i0, j0;\n    return function(d, i, j) {\n      var group = enter[j].update, n = group.length, node;\n      if (j != j0) j0 = j, i0 = 0;\n      if (i >= i0) i0 = i + 1;\n      while (!(node = group[i0]) && ++i0 < n) ;\n      return node;\n    };\n  }\n  d3.select = function(node) {\n    var group;\n    if (typeof node === \"string\") {\n      group = [ d3_select(node, d3_document) ];\n      group.parentNode = d3_document.documentElement;\n    } else {\n      group = [ node ];\n      group.parentNode = d3_documentElement(node);\n    }\n    return d3_selection([ group ]);\n  };\n  d3.selectAll = function(nodes) {\n    var group;\n    if (typeof nodes === \"string\") {\n      group = d3_array(d3_selectAll(nodes, d3_document));\n      group.parentNode = d3_document.documentElement;\n    } else {\n      group = d3_array(nodes);\n      group.parentNode = null;\n    }\n    return d3_selection([ group ]);\n  };\n  d3_selectionPrototype.on = function(type, listener, capture) {\n    var n = arguments.length;\n    if (n < 3) {\n      if (typeof type !== \"string\") {\n        if (n < 2) listener = false;\n        for (capture in type) this.each(d3_selection_on(capture, type[capture], listener));\n        return this;\n      }\n      if (n < 2) return (n = this.node()[\"__on\" + type]) && n._;\n      capture = false;\n    }\n    return this.each(d3_selection_on(type, listener, capture));\n  };\n  function d3_selection_on(type, listener, capture) {\n    var name = \"__on\" + type, i = type.indexOf(\".\"), wrap = d3_selection_onListener;\n    if (i > 0) type = type.slice(0, i);\n    var filter = d3_selection_onFilters.get(type);\n    if (filter) type = filter, wrap = d3_selection_onFilter;\n    function onRemove() {\n      var l = this[name];\n      if (l) {\n        this.removeEventListener(type, l, l.$);\n        delete this[name];\n      }\n    }\n    function onAdd() {\n      var l = wrap(listener, d3_array(arguments));\n      onRemove.call(this);\n      this.addEventListener(type, this[name] = l, l.$ = capture);\n      l._ = listener;\n    }\n    function removeAll() {\n      var re = new RegExp(\"^__on([^.]+)\" + d3.requote(type) + \"$\"), match;\n      for (var name in this) {\n        if (match = name.match(re)) {\n          var l = this[name];\n          this.removeEventListener(match[1], l, l.$);\n          delete this[name];\n        }\n      }\n    }\n    return i ? listener ? onAdd : onRemove : listener ? d3_noop : removeAll;\n  }\n  var d3_selection_onFilters = d3.map({\n    mouseenter: \"mouseover\",\n    mouseleave: \"mouseout\"\n  });\n  if (d3_document) {\n    d3_selection_onFilters.forEach(function(k) {\n      if (\"on\" + k in d3_document) d3_selection_onFilters.remove(k);\n    });\n  }\n  function d3_selection_onListener(listener, argumentz) {\n    return function(e) {\n      var o = d3.event;\n      d3.event = e;\n      argumentz[0] = this.__data__;\n      try {\n        listener.apply(this, argumentz);\n      } finally {\n        d3.event = o;\n      }\n    };\n  }\n  function d3_selection_onFilter(listener, argumentz) {\n    var l = d3_selection_onListener(listener, argumentz);\n    return function(e) {\n      var target = this, related = e.relatedTarget;\n      if (!related || related !== target && !(related.compareDocumentPosition(target) & 8)) {\n        l.call(target, e);\n      }\n    };\n  }\n  var d3_event_dragSelect, d3_event_dragId = 0;\n  function d3_event_dragSuppress(node) {\n    var name = \".dragsuppress-\" + ++d3_event_dragId, click = \"click\" + name, w = d3.select(d3_window(node)).on(\"touchmove\" + name, d3_eventPreventDefault).on(\"dragstart\" + name, d3_eventPreventDefault).on(\"selectstart\" + name, d3_eventPreventDefault);\n    if (d3_event_dragSelect == null) {\n      d3_event_dragSelect = \"onselectstart\" in node ? false : d3_vendorSymbol(node.style, \"userSelect\");\n    }\n    if (d3_event_dragSelect) {\n      var style = d3_documentElement(node).style, select = style[d3_event_dragSelect];\n      style[d3_event_dragSelect] = \"none\";\n    }\n    return function(suppressClick) {\n      w.on(name, null);\n      if (d3_event_dragSelect) style[d3_event_dragSelect] = select;\n      if (suppressClick) {\n        var off = function() {\n          w.on(click, null);\n        };\n        w.on(click, function() {\n          d3_eventPreventDefault();\n          off();\n        }, true);\n        setTimeout(off, 0);\n      }\n    };\n  }\n  d3.mouse = function(container) {\n    return d3_mousePoint(container, d3_eventSource());\n  };\n  var d3_mouse_bug44083 = this.navigator && /WebKit/.test(this.navigator.userAgent) ? -1 : 0;\n  function d3_mousePoint(container, e) {\n    if (e.changedTouches) e = e.changedTouches[0];\n    var svg = container.ownerSVGElement || container;\n    if (svg.createSVGPoint) {\n      var point = svg.createSVGPoint();\n      if (d3_mouse_bug44083 < 0) {\n        var window = d3_window(container);\n        if (window.scrollX || window.scrollY) {\n          svg = d3.select(\"body\").append(\"svg\").style({\n            position: \"absolute\",\n            top: 0,\n            left: 0,\n            margin: 0,\n            padding: 0,\n            border: \"none\"\n          }, \"important\");\n          var ctm = svg[0][0].getScreenCTM();\n          d3_mouse_bug44083 = !(ctm.f || ctm.e);\n          svg.remove();\n        }\n      }\n      if (d3_mouse_bug44083) point.x = e.pageX, point.y = e.pageY; else point.x = e.clientX, \n      point.y = e.clientY;\n      point = point.matrixTransform(container.getScreenCTM().inverse());\n      return [ point.x, point.y ];\n    }\n    var rect = container.getBoundingClientRect();\n    return [ e.clientX - rect.left - container.clientLeft, e.clientY - rect.top - container.clientTop ];\n  }\n  d3.touch = function(container, touches, identifier) {\n    if (arguments.length < 3) identifier = touches, touches = d3_eventSource().changedTouches;\n    if (touches) for (var i = 0, n = touches.length, touch; i < n; ++i) {\n      if ((touch = touches[i]).identifier === identifier) {\n        return d3_mousePoint(container, touch);\n      }\n    }\n  };\n  d3.behavior.drag = function() {\n    var event = d3_eventDispatch(drag, \"drag\", \"dragstart\", \"dragend\"), origin = null, mousedown = dragstart(d3_noop, d3.mouse, d3_window, \"mousemove\", \"mouseup\"), touchstart = dragstart(d3_behavior_dragTouchId, d3.touch, d3_identity, \"touchmove\", \"touchend\");\n    function drag() {\n      this.on(\"mousedown.drag\", mousedown).on(\"touchstart.drag\", touchstart);\n    }\n    function dragstart(id, position, subject, move, end) {\n      return function() {\n        var that = this, target = d3.event.target.correspondingElement || d3.event.target, parent = that.parentNode, dispatch = event.of(that, arguments), dragged = 0, dragId = id(), dragName = \".drag\" + (dragId == null ? \"\" : \"-\" + dragId), dragOffset, dragSubject = d3.select(subject(target)).on(move + dragName, moved).on(end + dragName, ended), dragRestore = d3_event_dragSuppress(target), position0 = position(parent, dragId);\n        if (origin) {\n          dragOffset = origin.apply(that, arguments);\n          dragOffset = [ dragOffset.x - position0[0], dragOffset.y - position0[1] ];\n        } else {\n          dragOffset = [ 0, 0 ];\n        }\n        dispatch({\n          type: \"dragstart\"\n        });\n        function moved() {\n          var position1 = position(parent, dragId), dx, dy;\n          if (!position1) return;\n          dx = position1[0] - position0[0];\n          dy = position1[1] - position0[1];\n          dragged |= dx | dy;\n          position0 = position1;\n          dispatch({\n            type: \"drag\",\n            x: position1[0] + dragOffset[0],\n            y: position1[1] + dragOffset[1],\n            dx: dx,\n            dy: dy\n          });\n        }\n        function ended() {\n          if (!position(parent, dragId)) return;\n          dragSubject.on(move + dragName, null).on(end + dragName, null);\n          dragRestore(dragged);\n          dispatch({\n            type: \"dragend\"\n          });\n        }\n      };\n    }\n    drag.origin = function(x) {\n      if (!arguments.length) return origin;\n      origin = x;\n      return drag;\n    };\n    return d3.rebind(drag, event, \"on\");\n  };\n  function d3_behavior_dragTouchId() {\n    return d3.event.changedTouches[0].identifier;\n  }\n  d3.touches = function(container, touches) {\n    if (arguments.length < 2) touches = d3_eventSource().touches;\n    return touches ? d3_array(touches).map(function(touch) {\n      var point = d3_mousePoint(container, touch);\n      point.identifier = touch.identifier;\n      return point;\n    }) : [];\n  };\n  var ε = 1e-6, ε2 = ε * ε, π = Math.PI, τ = 2 * π, τε = τ - ε, halfπ = π / 2, d3_radians = π / 180, d3_degrees = 180 / π;\n  function d3_sgn(x) {\n    return x > 0 ? 1 : x < 0 ? -1 : 0;\n  }\n  function d3_cross2d(a, b, c) {\n    return (b[0] - a[0]) * (c[1] - a[1]) - (b[1] - a[1]) * (c[0] - a[0]);\n  }\n  function d3_acos(x) {\n    return x > 1 ? 0 : x < -1 ? π : Math.acos(x);\n  }\n  function d3_asin(x) {\n    return x > 1 ? halfπ : x < -1 ? -halfπ : Math.asin(x);\n  }\n  function d3_sinh(x) {\n    return ((x = Math.exp(x)) - 1 / x) / 2;\n  }\n  function d3_cosh(x) {\n    return ((x = Math.exp(x)) + 1 / x) / 2;\n  }\n  function d3_tanh(x) {\n    return ((x = Math.exp(2 * x)) - 1) / (x + 1);\n  }\n  function d3_haversin(x) {\n    return (x = Math.sin(x / 2)) * x;\n  }\n  var ρ = Math.SQRT2, ρ2 = 2, ρ4 = 4;\n  d3.interpolateZoom = function(p0, p1) {\n    var ux0 = p0[0], uy0 = p0[1], w0 = p0[2], ux1 = p1[0], uy1 = p1[1], w1 = p1[2], dx = ux1 - ux0, dy = uy1 - uy0, d2 = dx * dx + dy * dy, i, S;\n    if (d2 < ε2) {\n      S = Math.log(w1 / w0) / ρ;\n      i = function(t) {\n        return [ ux0 + t * dx, uy0 + t * dy, w0 * Math.exp(ρ * t * S) ];\n      };\n    } else {\n      var d1 = Math.sqrt(d2), b0 = (w1 * w1 - w0 * w0 + ρ4 * d2) / (2 * w0 * ρ2 * d1), b1 = (w1 * w1 - w0 * w0 - ρ4 * d2) / (2 * w1 * ρ2 * d1), r0 = Math.log(Math.sqrt(b0 * b0 + 1) - b0), r1 = Math.log(Math.sqrt(b1 * b1 + 1) - b1);\n      S = (r1 - r0) / ρ;\n      i = function(t) {\n        var s = t * S, coshr0 = d3_cosh(r0), u = w0 / (ρ2 * d1) * (coshr0 * d3_tanh(ρ * s + r0) - d3_sinh(r0));\n        return [ ux0 + u * dx, uy0 + u * dy, w0 * coshr0 / d3_cosh(ρ * s + r0) ];\n      };\n    }\n    i.duration = S * 1e3;\n    return i;\n  };\n  d3.behavior.zoom = function() {\n    var view = {\n      x: 0,\n      y: 0,\n      k: 1\n    }, translate0, center0, center, size = [ 960, 500 ], scaleExtent = d3_behavior_zoomInfinity, duration = 250, zooming = 0, mousedown = \"mousedown.zoom\", mousemove = \"mousemove.zoom\", mouseup = \"mouseup.zoom\", mousewheelTimer, touchstart = \"touchstart.zoom\", touchtime, event = d3_eventDispatch(zoom, \"zoomstart\", \"zoom\", \"zoomend\"), x0, x1, y0, y1;\n    if (!d3_behavior_zoomWheel) {\n      d3_behavior_zoomWheel = \"onwheel\" in d3_document ? (d3_behavior_zoomDelta = function() {\n        return -d3.event.deltaY * (d3.event.deltaMode ? 120 : 1);\n      }, \"wheel\") : \"onmousewheel\" in d3_document ? (d3_behavior_zoomDelta = function() {\n        return d3.event.wheelDelta;\n      }, \"mousewheel\") : (d3_behavior_zoomDelta = function() {\n        return -d3.event.detail;\n      }, \"MozMousePixelScroll\");\n    }\n    function zoom(g) {\n      g.on(mousedown, mousedowned).on(d3_behavior_zoomWheel + \".zoom\", mousewheeled).on(\"dblclick.zoom\", dblclicked).on(touchstart, touchstarted);\n    }\n    zoom.event = function(g) {\n      g.each(function() {\n        var dispatch = event.of(this, arguments), view1 = view;\n        if (d3_transitionInheritId) {\n          d3.select(this).transition().each(\"start.zoom\", function() {\n            view = this.__chart__ || {\n              x: 0,\n              y: 0,\n              k: 1\n            };\n            zoomstarted(dispatch);\n          }).tween(\"zoom:zoom\", function() {\n            var dx = size[0], dy = size[1], cx = center0 ? center0[0] : dx / 2, cy = center0 ? center0[1] : dy / 2, i = d3.interpolateZoom([ (cx - view.x) / view.k, (cy - view.y) / view.k, dx / view.k ], [ (cx - view1.x) / view1.k, (cy - view1.y) / view1.k, dx / view1.k ]);\n            return function(t) {\n              var l = i(t), k = dx / l[2];\n              this.__chart__ = view = {\n                x: cx - l[0] * k,\n                y: cy - l[1] * k,\n                k: k\n              };\n              zoomed(dispatch);\n            };\n          }).each(\"interrupt.zoom\", function() {\n            zoomended(dispatch);\n          }).each(\"end.zoom\", function() {\n            zoomended(dispatch);\n          });\n        } else {\n          this.__chart__ = view;\n          zoomstarted(dispatch);\n          zoomed(dispatch);\n          zoomended(dispatch);\n        }\n      });\n    };\n    zoom.translate = function(_) {\n      if (!arguments.length) return [ view.x, view.y ];\n      view = {\n        x: +_[0],\n        y: +_[1],\n        k: view.k\n      };\n      rescale();\n      return zoom;\n    };\n    zoom.scale = function(_) {\n      if (!arguments.length) return view.k;\n      view = {\n        x: view.x,\n        y: view.y,\n        k: null\n      };\n      scaleTo(+_);\n      rescale();\n      return zoom;\n    };\n    zoom.scaleExtent = function(_) {\n      if (!arguments.length) return scaleExtent;\n      scaleExtent = _ == null ? d3_behavior_zoomInfinity : [ +_[0], +_[1] ];\n      return zoom;\n    };\n    zoom.center = function(_) {\n      if (!arguments.length) return center;\n      center = _ && [ +_[0], +_[1] ];\n      return zoom;\n    };\n    zoom.size = function(_) {\n      if (!arguments.length) return size;\n      size = _ && [ +_[0], +_[1] ];\n      return zoom;\n    };\n    zoom.duration = function(_) {\n      if (!arguments.length) return duration;\n      duration = +_;\n      return zoom;\n    };\n    zoom.x = function(z) {\n      if (!arguments.length) return x1;\n      x1 = z;\n      x0 = z.copy();\n      view = {\n        x: 0,\n        y: 0,\n        k: 1\n      };\n      return zoom;\n    };\n    zoom.y = function(z) {\n      if (!arguments.length) return y1;\n      y1 = z;\n      y0 = z.copy();\n      view = {\n        x: 0,\n        y: 0,\n        k: 1\n      };\n      return zoom;\n    };\n    function location(p) {\n      return [ (p[0] - view.x) / view.k, (p[1] - view.y) / view.k ];\n    }\n    function point(l) {\n      return [ l[0] * view.k + view.x, l[1] * view.k + view.y ];\n    }\n    function scaleTo(s) {\n      view.k = Math.max(scaleExtent[0], Math.min(scaleExtent[1], s));\n    }\n    function translateTo(p, l) {\n      l = point(l);\n      view.x += p[0] - l[0];\n      view.y += p[1] - l[1];\n    }\n    function zoomTo(that, p, l, k) {\n      that.__chart__ = {\n        x: view.x,\n        y: view.y,\n        k: view.k\n      };\n      scaleTo(Math.pow(2, k));\n      translateTo(center0 = p, l);\n      that = d3.select(that);\n      if (duration > 0) that = that.transition().duration(duration);\n      that.call(zoom.event);\n    }\n    function rescale() {\n      if (x1) x1.domain(x0.range().map(function(x) {\n        return (x - view.x) / view.k;\n      }).map(x0.invert));\n      if (y1) y1.domain(y0.range().map(function(y) {\n        return (y - view.y) / view.k;\n      }).map(y0.invert));\n    }\n    function zoomstarted(dispatch) {\n      if (!zooming++) dispatch({\n        type: \"zoomstart\"\n      });\n    }\n    function zoomed(dispatch) {\n      rescale();\n      dispatch({\n        type: \"zoom\",\n        scale: view.k,\n        translate: [ view.x, view.y ]\n      });\n    }\n    function zoomended(dispatch) {\n      if (!--zooming) dispatch({\n        type: \"zoomend\"\n      }), center0 = null;\n    }\n    function mousedowned() {\n      var that = this, dispatch = event.of(that, arguments), dragged = 0, subject = d3.select(d3_window(that)).on(mousemove, moved).on(mouseup, ended), location0 = location(d3.mouse(that)), dragRestore = d3_event_dragSuppress(that);\n      d3_selection_interrupt.call(that);\n      zoomstarted(dispatch);\n      function moved() {\n        dragged = 1;\n        translateTo(d3.mouse(that), location0);\n        zoomed(dispatch);\n      }\n      function ended() {\n        subject.on(mousemove, null).on(mouseup, null);\n        dragRestore(dragged);\n        zoomended(dispatch);\n      }\n    }\n    function touchstarted() {\n      var that = this, dispatch = event.of(that, arguments), locations0 = {}, distance0 = 0, scale0, zoomName = \".zoom-\" + d3.event.changedTouches[0].identifier, touchmove = \"touchmove\" + zoomName, touchend = \"touchend\" + zoomName, targets = [], subject = d3.select(that), dragRestore = d3_event_dragSuppress(that);\n      started();\n      zoomstarted(dispatch);\n      subject.on(mousedown, null).on(touchstart, started);\n      function relocate() {\n        var touches = d3.touches(that);\n        scale0 = view.k;\n        touches.forEach(function(t) {\n          if (t.identifier in locations0) locations0[t.identifier] = location(t);\n        });\n        return touches;\n      }\n      function started() {\n        var target = d3.event.target;\n        d3.select(target).on(touchmove, moved).on(touchend, ended);\n        targets.push(target);\n        var changed = d3.event.changedTouches;\n        for (var i = 0, n = changed.length; i < n; ++i) {\n          locations0[changed[i].identifier] = null;\n        }\n        var touches = relocate(), now = Date.now();\n        if (touches.length === 1) {\n          if (now - touchtime < 500) {\n            var p = touches[0];\n            zoomTo(that, p, locations0[p.identifier], Math.floor(Math.log(view.k) / Math.LN2) + 1);\n            d3_eventPreventDefault();\n          }\n          touchtime = now;\n        } else if (touches.length > 1) {\n          var p = touches[0], q = touches[1], dx = p[0] - q[0], dy = p[1] - q[1];\n          distance0 = dx * dx + dy * dy;\n        }\n      }\n      function moved() {\n        var touches = d3.touches(that), p0, l0, p1, l1;\n        d3_selection_interrupt.call(that);\n        for (var i = 0, n = touches.length; i < n; ++i, l1 = null) {\n          p1 = touches[i];\n          if (l1 = locations0[p1.identifier]) {\n            if (l0) break;\n            p0 = p1, l0 = l1;\n          }\n        }\n        if (l1) {\n          var distance1 = (distance1 = p1[0] - p0[0]) * distance1 + (distance1 = p1[1] - p0[1]) * distance1, scale1 = distance0 && Math.sqrt(distance1 / distance0);\n          p0 = [ (p0[0] + p1[0]) / 2, (p0[1] + p1[1]) / 2 ];\n          l0 = [ (l0[0] + l1[0]) / 2, (l0[1] + l1[1]) / 2 ];\n          scaleTo(scale1 * scale0);\n        }\n        touchtime = null;\n        translateTo(p0, l0);\n        zoomed(dispatch);\n      }\n      function ended() {\n        if (d3.event.touches.length) {\n          var changed = d3.event.changedTouches;\n          for (var i = 0, n = changed.length; i < n; ++i) {\n            delete locations0[changed[i].identifier];\n          }\n          for (var identifier in locations0) {\n            return void relocate();\n          }\n        }\n        d3.selectAll(targets).on(zoomName, null);\n        subject.on(mousedown, mousedowned).on(touchstart, touchstarted);\n        dragRestore();\n        zoomended(dispatch);\n      }\n    }\n    function mousewheeled() {\n      var dispatch = event.of(this, arguments);\n      if (mousewheelTimer) clearTimeout(mousewheelTimer); else d3_selection_interrupt.call(this), \n      translate0 = location(center0 = center || d3.mouse(this)), zoomstarted(dispatch);\n      mousewheelTimer = setTimeout(function() {\n        mousewheelTimer = null;\n        zoomended(dispatch);\n      }, 50);\n      d3_eventPreventDefault();\n      scaleTo(Math.pow(2, d3_behavior_zoomDelta() * .002) * view.k);\n      translateTo(center0, translate0);\n      zoomed(dispatch);\n    }\n    function dblclicked() {\n      var p = d3.mouse(this), k = Math.log(view.k) / Math.LN2;\n      zoomTo(this, p, location(p), d3.event.shiftKey ? Math.ceil(k) - 1 : Math.floor(k) + 1);\n    }\n    return d3.rebind(zoom, event, \"on\");\n  };\n  var d3_behavior_zoomInfinity = [ 0, Infinity ], d3_behavior_zoomDelta, d3_behavior_zoomWheel;\n  d3.color = d3_color;\n  function d3_color() {}\n  d3_color.prototype.toString = function() {\n    return this.rgb() + \"\";\n  };\n  d3.hsl = d3_hsl;\n  function d3_hsl(h, s, l) {\n    return this instanceof d3_hsl ? void (this.h = +h, this.s = +s, this.l = +l) : arguments.length < 2 ? h instanceof d3_hsl ? new d3_hsl(h.h, h.s, h.l) : d3_rgb_parse(\"\" + h, d3_rgb_hsl, d3_hsl) : new d3_hsl(h, s, l);\n  }\n  var d3_hslPrototype = d3_hsl.prototype = new d3_color();\n  d3_hslPrototype.brighter = function(k) {\n    k = Math.pow(.7, arguments.length ? k : 1);\n    return new d3_hsl(this.h, this.s, this.l / k);\n  };\n  d3_hslPrototype.darker = function(k) {\n    k = Math.pow(.7, arguments.length ? k : 1);\n    return new d3_hsl(this.h, this.s, k * this.l);\n  };\n  d3_hslPrototype.rgb = function() {\n    return d3_hsl_rgb(this.h, this.s, this.l);\n  };\n  function d3_hsl_rgb(h, s, l) {\n    var m1, m2;\n    h = isNaN(h) ? 0 : (h %= 360) < 0 ? h + 360 : h;\n    s = isNaN(s) ? 0 : s < 0 ? 0 : s > 1 ? 1 : s;\n    l = l < 0 ? 0 : l > 1 ? 1 : l;\n    m2 = l <= .5 ? l * (1 + s) : l + s - l * s;\n    m1 = 2 * l - m2;\n    function v(h) {\n      if (h > 360) h -= 360; else if (h < 0) h += 360;\n      if (h < 60) return m1 + (m2 - m1) * h / 60;\n      if (h < 180) return m2;\n      if (h < 240) return m1 + (m2 - m1) * (240 - h) / 60;\n      return m1;\n    }\n    function vv(h) {\n      return Math.round(v(h) * 255);\n    }\n    return new d3_rgb(vv(h + 120), vv(h), vv(h - 120));\n  }\n  d3.hcl = d3_hcl;\n  function d3_hcl(h, c, l) {\n    return this instanceof d3_hcl ? void (this.h = +h, this.c = +c, this.l = +l) : arguments.length < 2 ? h instanceof d3_hcl ? new d3_hcl(h.h, h.c, h.l) : h instanceof d3_lab ? d3_lab_hcl(h.l, h.a, h.b) : d3_lab_hcl((h = d3_rgb_lab((h = d3.rgb(h)).r, h.g, h.b)).l, h.a, h.b) : new d3_hcl(h, c, l);\n  }\n  var d3_hclPrototype = d3_hcl.prototype = new d3_color();\n  d3_hclPrototype.brighter = function(k) {\n    return new d3_hcl(this.h, this.c, Math.min(100, this.l + d3_lab_K * (arguments.length ? k : 1)));\n  };\n  d3_hclPrototype.darker = function(k) {\n    return new d3_hcl(this.h, this.c, Math.max(0, this.l - d3_lab_K * (arguments.length ? k : 1)));\n  };\n  d3_hclPrototype.rgb = function() {\n    return d3_hcl_lab(this.h, this.c, this.l).rgb();\n  };\n  function d3_hcl_lab(h, c, l) {\n    if (isNaN(h)) h = 0;\n    if (isNaN(c)) c = 0;\n    return new d3_lab(l, Math.cos(h *= d3_radians) * c, Math.sin(h) * c);\n  }\n  d3.lab = d3_lab;\n  function d3_lab(l, a, b) {\n    return this instanceof d3_lab ? void (this.l = +l, this.a = +a, this.b = +b) : arguments.length < 2 ? l instanceof d3_lab ? new d3_lab(l.l, l.a, l.b) : l instanceof d3_hcl ? d3_hcl_lab(l.h, l.c, l.l) : d3_rgb_lab((l = d3_rgb(l)).r, l.g, l.b) : new d3_lab(l, a, b);\n  }\n  var d3_lab_K = 18;\n  var d3_lab_X = .95047, d3_lab_Y = 1, d3_lab_Z = 1.08883;\n  var d3_labPrototype = d3_lab.prototype = new d3_color();\n  d3_labPrototype.brighter = function(k) {\n    return new d3_lab(Math.min(100, this.l + d3_lab_K * (arguments.length ? k : 1)), this.a, this.b);\n  };\n  d3_labPrototype.darker = function(k) {\n    return new d3_lab(Math.max(0, this.l - d3_lab_K * (arguments.length ? k : 1)), this.a, this.b);\n  };\n  d3_labPrototype.rgb = function() {\n    return d3_lab_rgb(this.l, this.a, this.b);\n  };\n  function d3_lab_rgb(l, a, b) {\n    var y = (l + 16) / 116, x = y + a / 500, z = y - b / 200;\n    x = d3_lab_xyz(x) * d3_lab_X;\n    y = d3_lab_xyz(y) * d3_lab_Y;\n    z = d3_lab_xyz(z) * d3_lab_Z;\n    return new d3_rgb(d3_xyz_rgb(3.2404542 * x - 1.5371385 * y - .4985314 * z), d3_xyz_rgb(-.969266 * x + 1.8760108 * y + .041556 * z), d3_xyz_rgb(.0556434 * x - .2040259 * y + 1.0572252 * z));\n  }\n  function d3_lab_hcl(l, a, b) {\n    return l > 0 ? new d3_hcl(Math.atan2(b, a) * d3_degrees, Math.sqrt(a * a + b * b), l) : new d3_hcl(NaN, NaN, l);\n  }\n  function d3_lab_xyz(x) {\n    return x > .206893034 ? x * x * x : (x - 4 / 29) / 7.787037;\n  }\n  function d3_xyz_lab(x) {\n    return x > .008856 ? Math.pow(x, 1 / 3) : 7.787037 * x + 4 / 29;\n  }\n  function d3_xyz_rgb(r) {\n    return Math.round(255 * (r <= .00304 ? 12.92 * r : 1.055 * Math.pow(r, 1 / 2.4) - .055));\n  }\n  d3.rgb = d3_rgb;\n  function d3_rgb(r, g, b) {\n    return this instanceof d3_rgb ? void (this.r = ~~r, this.g = ~~g, this.b = ~~b) : arguments.length < 2 ? r instanceof d3_rgb ? new d3_rgb(r.r, r.g, r.b) : d3_rgb_parse(\"\" + r, d3_rgb, d3_hsl_rgb) : new d3_rgb(r, g, b);\n  }\n  function d3_rgbNumber(value) {\n    return new d3_rgb(value >> 16, value >> 8 & 255, value & 255);\n  }\n  function d3_rgbString(value) {\n    return d3_rgbNumber(value) + \"\";\n  }\n  var d3_rgbPrototype = d3_rgb.prototype = new d3_color();\n  d3_rgbPrototype.brighter = function(k) {\n    k = Math.pow(.7, arguments.length ? k : 1);\n    var r = this.r, g = this.g, b = this.b, i = 30;\n    if (!r && !g && !b) return new d3_rgb(i, i, i);\n    if (r && r < i) r = i;\n    if (g && g < i) g = i;\n    if (b && b < i) b = i;\n    return new d3_rgb(Math.min(255, r / k), Math.min(255, g / k), Math.min(255, b / k));\n  };\n  d3_rgbPrototype.darker = function(k) {\n    k = Math.pow(.7, arguments.length ? k : 1);\n    return new d3_rgb(k * this.r, k * this.g, k * this.b);\n  };\n  d3_rgbPrototype.hsl = function() {\n    return d3_rgb_hsl(this.r, this.g, this.b);\n  };\n  d3_rgbPrototype.toString = function() {\n    return \"#\" + d3_rgb_hex(this.r) + d3_rgb_hex(this.g) + d3_rgb_hex(this.b);\n  };\n  function d3_rgb_hex(v) {\n    return v < 16 ? \"0\" + Math.max(0, v).toString(16) : Math.min(255, v).toString(16);\n  }\n  function d3_rgb_parse(format, rgb, hsl) {\n    var r = 0, g = 0, b = 0, m1, m2, color;\n    m1 = /([a-z]+)\\((.*)\\)/.exec(format = format.toLowerCase());\n    if (m1) {\n      m2 = m1[2].split(\",\");\n      switch (m1[1]) {\n       case \"hsl\":\n        {\n          return hsl(parseFloat(m2[0]), parseFloat(m2[1]) / 100, parseFloat(m2[2]) / 100);\n        }\n\n       case \"rgb\":\n        {\n          return rgb(d3_rgb_parseNumber(m2[0]), d3_rgb_parseNumber(m2[1]), d3_rgb_parseNumber(m2[2]));\n        }\n      }\n    }\n    if (color = d3_rgb_names.get(format)) {\n      return rgb(color.r, color.g, color.b);\n    }\n    if (format != null && format.charAt(0) === \"#\" && !isNaN(color = parseInt(format.slice(1), 16))) {\n      if (format.length === 4) {\n        r = (color & 3840) >> 4;\n        r = r >> 4 | r;\n        g = color & 240;\n        g = g >> 4 | g;\n        b = color & 15;\n        b = b << 4 | b;\n      } else if (format.length === 7) {\n        r = (color & 16711680) >> 16;\n        g = (color & 65280) >> 8;\n        b = color & 255;\n      }\n    }\n    return rgb(r, g, b);\n  }\n  function d3_rgb_hsl(r, g, b) {\n    var min = Math.min(r /= 255, g /= 255, b /= 255), max = Math.max(r, g, b), d = max - min, h, s, l = (max + min) / 2;\n    if (d) {\n      s = l < .5 ? d / (max + min) : d / (2 - max - min);\n      if (r == max) h = (g - b) / d + (g < b ? 6 : 0); else if (g == max) h = (b - r) / d + 2; else h = (r - g) / d + 4;\n      h *= 60;\n    } else {\n      h = NaN;\n      s = l > 0 && l < 1 ? 0 : h;\n    }\n    return new d3_hsl(h, s, l);\n  }\n  function d3_rgb_lab(r, g, b) {\n    r = d3_rgb_xyz(r);\n    g = d3_rgb_xyz(g);\n    b = d3_rgb_xyz(b);\n    var x = d3_xyz_lab((.4124564 * r + .3575761 * g + .1804375 * b) / d3_lab_X), y = d3_xyz_lab((.2126729 * r + .7151522 * g + .072175 * b) / d3_lab_Y), z = d3_xyz_lab((.0193339 * r + .119192 * g + .9503041 * b) / d3_lab_Z);\n    return d3_lab(116 * y - 16, 500 * (x - y), 200 * (y - z));\n  }\n  function d3_rgb_xyz(r) {\n    return (r /= 255) <= .04045 ? r / 12.92 : Math.pow((r + .055) / 1.055, 2.4);\n  }\n  function d3_rgb_parseNumber(c) {\n    var f = parseFloat(c);\n    return c.charAt(c.length - 1) === \"%\" ? Math.round(f * 2.55) : f;\n  }\n  var d3_rgb_names = d3.map({\n    aliceblue: 15792383,\n    antiquewhite: 16444375,\n    aqua: 65535,\n    aquamarine: 8388564,\n    azure: 15794175,\n    beige: 16119260,\n    bisque: 16770244,\n    black: 0,\n    blanchedalmond: 16772045,\n    blue: 255,\n    blueviolet: 9055202,\n    brown: 10824234,\n    burlywood: 14596231,\n    cadetblue: 6266528,\n    chartreuse: 8388352,\n    chocolate: 13789470,\n    coral: 16744272,\n    cornflowerblue: 6591981,\n    cornsilk: 16775388,\n    crimson: 14423100,\n    cyan: 65535,\n    darkblue: 139,\n    darkcyan: 35723,\n    darkgoldenrod: 12092939,\n    darkgray: 11119017,\n    darkgreen: 25600,\n    darkgrey: 11119017,\n    darkkhaki: 12433259,\n    darkmagenta: 9109643,\n    darkolivegreen: 5597999,\n    darkorange: 16747520,\n    darkorchid: 10040012,\n    darkred: 9109504,\n    darksalmon: 15308410,\n    darkseagreen: 9419919,\n    darkslateblue: 4734347,\n    darkslategray: 3100495,\n    darkslategrey: 3100495,\n    darkturquoise: 52945,\n    darkviolet: 9699539,\n    deeppink: 16716947,\n    deepskyblue: 49151,\n    dimgray: 6908265,\n    dimgrey: 6908265,\n    dodgerblue: 2003199,\n    firebrick: 11674146,\n    floralwhite: 16775920,\n    forestgreen: 2263842,\n    fuchsia: 16711935,\n    gainsboro: 14474460,\n    ghostwhite: 16316671,\n    gold: 16766720,\n    goldenrod: 14329120,\n    gray: 8421504,\n    green: 32768,\n    greenyellow: 11403055,\n    grey: 8421504,\n    honeydew: 15794160,\n    hotpink: 16738740,\n    indianred: 13458524,\n    indigo: 4915330,\n    ivory: 16777200,\n    khaki: 15787660,\n    lavender: 15132410,\n    lavenderblush: 16773365,\n    lawngreen: 8190976,\n    lemonchiffon: 16775885,\n    lightblue: 11393254,\n    lightcoral: 15761536,\n    lightcyan: 14745599,\n    lightgoldenrodyellow: 16448210,\n    lightgray: 13882323,\n    lightgreen: 9498256,\n    lightgrey: 13882323,\n    lightpink: 16758465,\n    lightsalmon: 16752762,\n    lightseagreen: 2142890,\n    lightskyblue: 8900346,\n    lightslategray: 7833753,\n    lightslategrey: 7833753,\n    lightsteelblue: 11584734,\n    lightyellow: 16777184,\n    lime: 65280,\n    limegreen: 3329330,\n    linen: 16445670,\n    magenta: 16711935,\n    maroon: 8388608,\n    mediumaquamarine: 6737322,\n    mediumblue: 205,\n    mediumorchid: 12211667,\n    mediumpurple: 9662683,\n    mediumseagreen: 3978097,\n    mediumslateblue: 8087790,\n    mediumspringgreen: 64154,\n    mediumturquoise: 4772300,\n    mediumvioletred: 13047173,\n    midnightblue: 1644912,\n    mintcream: 16121850,\n    mistyrose: 16770273,\n    moccasin: 16770229,\n    navajowhite: 16768685,\n    navy: 128,\n    oldlace: 16643558,\n    olive: 8421376,\n    olivedrab: 7048739,\n    orange: 16753920,\n    orangered: 16729344,\n    orchid: 14315734,\n    palegoldenrod: 15657130,\n    palegreen: 10025880,\n    paleturquoise: 11529966,\n    palevioletred: 14381203,\n    papayawhip: 16773077,\n    peachpuff: 16767673,\n    peru: 13468991,\n    pink: 16761035,\n    plum: 14524637,\n    powderblue: 11591910,\n    purple: 8388736,\n    rebeccapurple: 6697881,\n    red: 16711680,\n    rosybrown: 12357519,\n    royalblue: 4286945,\n    saddlebrown: 9127187,\n    salmon: 16416882,\n    sandybrown: 16032864,\n    seagreen: 3050327,\n    seashell: 16774638,\n    sienna: 10506797,\n    silver: 12632256,\n    skyblue: 8900331,\n    slateblue: 6970061,\n    slategray: 7372944,\n    slategrey: 7372944,\n    snow: 16775930,\n    springgreen: 65407,\n    steelblue: 4620980,\n    tan: 13808780,\n    teal: 32896,\n    thistle: 14204888,\n    tomato: 16737095,\n    turquoise: 4251856,\n    violet: 15631086,\n    wheat: 16113331,\n    white: 16777215,\n    whitesmoke: 16119285,\n    yellow: 16776960,\n    yellowgreen: 10145074\n  });\n  d3_rgb_names.forEach(function(key, value) {\n    d3_rgb_names.set(key, d3_rgbNumber(value));\n  });\n  function d3_functor(v) {\n    return typeof v === \"function\" ? v : function() {\n      return v;\n    };\n  }\n  d3.functor = d3_functor;\n  d3.xhr = d3_xhrType(d3_identity);\n  function d3_xhrType(response) {\n    return function(url, mimeType, callback) {\n      if (arguments.length === 2 && typeof mimeType === \"function\") callback = mimeType, \n      mimeType = null;\n      return d3_xhr(url, mimeType, response, callback);\n    };\n  }\n  function d3_xhr(url, mimeType, response, callback) {\n    var xhr = {}, dispatch = d3.dispatch(\"beforesend\", \"progress\", \"load\", \"error\"), headers = {}, request = new XMLHttpRequest(), responseType = null;\n    if (this.XDomainRequest && !(\"withCredentials\" in request) && /^(http(s)?:)?\\/\\//.test(url)) request = new XDomainRequest();\n    \"onload\" in request ? request.onload = request.onerror = respond : request.onreadystatechange = function() {\n      request.readyState > 3 && respond();\n    };\n    function respond() {\n      var status = request.status, result;\n      if (!status && d3_xhrHasResponse(request) || status >= 200 && status < 300 || status === 304) {\n        try {\n          result = response.call(xhr, request);\n        } catch (e) {\n          dispatch.error.call(xhr, e);\n          return;\n        }\n        dispatch.load.call(xhr, result);\n      } else {\n        dispatch.error.call(xhr, request);\n      }\n    }\n    request.onprogress = function(event) {\n      var o = d3.event;\n      d3.event = event;\n      try {\n        dispatch.progress.call(xhr, request);\n      } finally {\n        d3.event = o;\n      }\n    };\n    xhr.header = function(name, value) {\n      name = (name + \"\").toLowerCase();\n      if (arguments.length < 2) return headers[name];\n      if (value == null) delete headers[name]; else headers[name] = value + \"\";\n      return xhr;\n    };\n    xhr.mimeType = function(value) {\n      if (!arguments.length) return mimeType;\n      mimeType = value == null ? null : value + \"\";\n      return xhr;\n    };\n    xhr.responseType = function(value) {\n      if (!arguments.length) return responseType;\n      responseType = value;\n      return xhr;\n    };\n    xhr.response = function(value) {\n      response = value;\n      return xhr;\n    };\n    [ \"get\", \"post\" ].forEach(function(method) {\n      xhr[method] = function() {\n        return xhr.send.apply(xhr, [ method ].concat(d3_array(arguments)));\n      };\n    });\n    xhr.send = function(method, data, callback) {\n      if (arguments.length === 2 && typeof data === \"function\") callback = data, data = null;\n      request.open(method, url, true);\n      if (mimeType != null && !(\"accept\" in headers)) headers[\"accept\"] = mimeType + \",*/*\";\n      if (request.setRequestHeader) for (var name in headers) request.setRequestHeader(name, headers[name]);\n      if (mimeType != null && request.overrideMimeType) request.overrideMimeType(mimeType);\n      if (responseType != null) request.responseType = responseType;\n      if (callback != null) xhr.on(\"error\", callback).on(\"load\", function(request) {\n        callback(null, request);\n      });\n      dispatch.beforesend.call(xhr, request);\n      request.send(data == null ? null : data);\n      return xhr;\n    };\n    xhr.abort = function() {\n      request.abort();\n      return xhr;\n    };\n    d3.rebind(xhr, dispatch, \"on\");\n    return callback == null ? xhr : xhr.get(d3_xhr_fixCallback(callback));\n  }\n  function d3_xhr_fixCallback(callback) {\n    return callback.length === 1 ? function(error, request) {\n      callback(error == null ? request : null);\n    } : callback;\n  }\n  function d3_xhrHasResponse(request) {\n    var type = request.responseType;\n    return type && type !== \"text\" ? request.response : request.responseText;\n  }\n  d3.dsv = function(delimiter, mimeType) {\n    var reFormat = new RegExp('[\"' + delimiter + \"\\n]\"), delimiterCode = delimiter.charCodeAt(0);\n    function dsv(url, row, callback) {\n      if (arguments.length < 3) callback = row, row = null;\n      var xhr = d3_xhr(url, mimeType, row == null ? response : typedResponse(row), callback);\n      xhr.row = function(_) {\n        return arguments.length ? xhr.response((row = _) == null ? response : typedResponse(_)) : row;\n      };\n      return xhr;\n    }\n    function response(request) {\n      return dsv.parse(request.responseText);\n    }\n    function typedResponse(f) {\n      return function(request) {\n        return dsv.parse(request.responseText, f);\n      };\n    }\n    dsv.parse = function(text, f) {\n      var o;\n      return dsv.parseRows(text, function(row, i) {\n        if (o) return o(row, i - 1);\n        var a = new Function(\"d\", \"return {\" + row.map(function(name, i) {\n          return JSON.stringify(name) + \": d[\" + i + \"]\";\n        }).join(\",\") + \"}\");\n        o = f ? function(row, i) {\n          return f(a(row), i);\n        } : a;\n      });\n    };\n    dsv.parseRows = function(text, f) {\n      var EOL = {}, EOF = {}, rows = [], N = text.length, I = 0, n = 0, t, eol;\n      function token() {\n        if (I >= N) return EOF;\n        if (eol) return eol = false, EOL;\n        var j = I;\n        if (text.charCodeAt(j) === 34) {\n          var i = j;\n          while (i++ < N) {\n            if (text.charCodeAt(i) === 34) {\n              if (text.charCodeAt(i + 1) !== 34) break;\n              ++i;\n            }\n          }\n          I = i + 2;\n          var c = text.charCodeAt(i + 1);\n          if (c === 13) {\n            eol = true;\n            if (text.charCodeAt(i + 2) === 10) ++I;\n          } else if (c === 10) {\n            eol = true;\n          }\n          return text.slice(j + 1, i).replace(/\"\"/g, '\"');\n        }\n        while (I < N) {\n          var c = text.charCodeAt(I++), k = 1;\n          if (c === 10) eol = true; else if (c === 13) {\n            eol = true;\n            if (text.charCodeAt(I) === 10) ++I, ++k;\n          } else if (c !== delimiterCode) continue;\n          return text.slice(j, I - k);\n        }\n        return text.slice(j);\n      }\n      while ((t = token()) !== EOF) {\n        var a = [];\n        while (t !== EOL && t !== EOF) {\n          a.push(t);\n          t = token();\n        }\n        if (f && (a = f(a, n++)) == null) continue;\n        rows.push(a);\n      }\n      return rows;\n    };\n    dsv.format = function(rows) {\n      if (Array.isArray(rows[0])) return dsv.formatRows(rows);\n      var fieldSet = new d3_Set(), fields = [];\n      rows.forEach(function(row) {\n        for (var field in row) {\n          if (!fieldSet.has(field)) {\n            fields.push(fieldSet.add(field));\n          }\n        }\n      });\n      return [ fields.map(formatValue).join(delimiter) ].concat(rows.map(function(row) {\n        return fields.map(function(field) {\n          return formatValue(row[field]);\n        }).join(delimiter);\n      })).join(\"\\n\");\n    };\n    dsv.formatRows = function(rows) {\n      return rows.map(formatRow).join(\"\\n\");\n    };\n    function formatRow(row) {\n      return row.map(formatValue).join(delimiter);\n    }\n    function formatValue(text) {\n      return reFormat.test(text) ? '\"' + text.replace(/\\\"/g, '\"\"') + '\"' : text;\n    }\n    return dsv;\n  };\n  d3.csv = d3.dsv(\",\", \"text/csv\");\n  d3.tsv = d3.dsv(\"\t\", \"text/tab-separated-values\");\n  var d3_timer_queueHead, d3_timer_queueTail, d3_timer_interval, d3_timer_timeout, d3_timer_frame = this[d3_vendorSymbol(this, \"requestAnimationFrame\")] || function(callback) {\n    setTimeout(callback, 17);\n  };\n  d3.timer = function() {\n    d3_timer.apply(this, arguments);\n  };\n  function d3_timer(callback, delay, then) {\n    var n = arguments.length;\n    if (n < 2) delay = 0;\n    if (n < 3) then = Date.now();\n    var time = then + delay, timer = {\n      c: callback,\n      t: time,\n      n: null\n    };\n    if (d3_timer_queueTail) d3_timer_queueTail.n = timer; else d3_timer_queueHead = timer;\n    d3_timer_queueTail = timer;\n    if (!d3_timer_interval) {\n      d3_timer_timeout = clearTimeout(d3_timer_timeout);\n      d3_timer_interval = 1;\n      d3_timer_frame(d3_timer_step);\n    }\n    return timer;\n  }\n  function d3_timer_step() {\n    var now = d3_timer_mark(), delay = d3_timer_sweep() - now;\n    if (delay > 24) {\n      if (isFinite(delay)) {\n        clearTimeout(d3_timer_timeout);\n        d3_timer_timeout = setTimeout(d3_timer_step, delay);\n      }\n      d3_timer_interval = 0;\n    } else {\n      d3_timer_interval = 1;\n      d3_timer_frame(d3_timer_step);\n    }\n  }\n  d3.timer.flush = function() {\n    d3_timer_mark();\n    d3_timer_sweep();\n  };\n  function d3_timer_mark() {\n    var now = Date.now(), timer = d3_timer_queueHead;\n    while (timer) {\n      if (now >= timer.t && timer.c(now - timer.t)) timer.c = null;\n      timer = timer.n;\n    }\n    return now;\n  }\n  function d3_timer_sweep() {\n    var t0, t1 = d3_timer_queueHead, time = Infinity;\n    while (t1) {\n      if (t1.c) {\n        if (t1.t < time) time = t1.t;\n        t1 = (t0 = t1).n;\n      } else {\n        t1 = t0 ? t0.n = t1.n : d3_timer_queueHead = t1.n;\n      }\n    }\n    d3_timer_queueTail = t0;\n    return time;\n  }\n  function d3_format_precision(x, p) {\n    return p - (x ? Math.ceil(Math.log(x) / Math.LN10) : 1);\n  }\n  d3.round = function(x, n) {\n    return n ? Math.round(x * (n = Math.pow(10, n))) / n : Math.round(x);\n  };\n  var d3_formatPrefixes = [ \"y\", \"z\", \"a\", \"f\", \"p\", \"n\", \"µ\", \"m\", \"\", \"k\", \"M\", \"G\", \"T\", \"P\", \"E\", \"Z\", \"Y\" ].map(d3_formatPrefix);\n  d3.formatPrefix = function(value, precision) {\n    var i = 0;\n    if (value = +value) {\n      if (value < 0) value *= -1;\n      if (precision) value = d3.round(value, d3_format_precision(value, precision));\n      i = 1 + Math.floor(1e-12 + Math.log(value) / Math.LN10);\n      i = Math.max(-24, Math.min(24, Math.floor((i - 1) / 3) * 3));\n    }\n    return d3_formatPrefixes[8 + i / 3];\n  };\n  function d3_formatPrefix(d, i) {\n    var k = Math.pow(10, abs(8 - i) * 3);\n    return {\n      scale: i > 8 ? function(d) {\n        return d / k;\n      } : function(d) {\n        return d * k;\n      },\n      symbol: d\n    };\n  }\n  function d3_locale_numberFormat(locale) {\n    var locale_decimal = locale.decimal, locale_thousands = locale.thousands, locale_grouping = locale.grouping, locale_currency = locale.currency, formatGroup = locale_grouping && locale_thousands ? function(value, width) {\n      var i = value.length, t = [], j = 0, g = locale_grouping[0], length = 0;\n      while (i > 0 && g > 0) {\n        if (length + g + 1 > width) g = Math.max(1, width - length);\n        t.push(value.substring(i -= g, i + g));\n        if ((length += g + 1) > width) break;\n        g = locale_grouping[j = (j + 1) % locale_grouping.length];\n      }\n      return t.reverse().join(locale_thousands);\n    } : d3_identity;\n    return function(specifier) {\n      var match = d3_format_re.exec(specifier), fill = match[1] || \" \", align = match[2] || \">\", sign = match[3] || \"-\", symbol = match[4] || \"\", zfill = match[5], width = +match[6], comma = match[7], precision = match[8], type = match[9], scale = 1, prefix = \"\", suffix = \"\", integer = false, exponent = true;\n      if (precision) precision = +precision.substring(1);\n      if (zfill || fill === \"0\" && align === \"=\") {\n        zfill = fill = \"0\";\n        align = \"=\";\n      }\n      switch (type) {\n       case \"n\":\n        comma = true;\n        type = \"g\";\n        break;\n\n       case \"%\":\n        scale = 100;\n        suffix = \"%\";\n        type = \"f\";\n        break;\n\n       case \"p\":\n        scale = 100;\n        suffix = \"%\";\n        type = \"r\";\n        break;\n\n       case \"b\":\n       case \"o\":\n       case \"x\":\n       case \"X\":\n        if (symbol === \"#\") prefix = \"0\" + type.toLowerCase();\n\n       case \"c\":\n        exponent = false;\n\n       case \"d\":\n        integer = true;\n        precision = 0;\n        break;\n\n       case \"s\":\n        scale = -1;\n        type = \"r\";\n        break;\n      }\n      if (symbol === \"$\") prefix = locale_currency[0], suffix = locale_currency[1];\n      if (type == \"r\" && !precision) type = \"g\";\n      if (precision != null) {\n        if (type == \"g\") precision = Math.max(1, Math.min(21, precision)); else if (type == \"e\" || type == \"f\") precision = Math.max(0, Math.min(20, precision));\n      }\n      type = d3_format_types.get(type) || d3_format_typeDefault;\n      var zcomma = zfill && comma;\n      return function(value) {\n        var fullSuffix = suffix;\n        if (integer && value % 1) return \"\";\n        var negative = value < 0 || value === 0 && 1 / value < 0 ? (value = -value, \"-\") : sign === \"-\" ? \"\" : sign;\n        if (scale < 0) {\n          var unit = d3.formatPrefix(value, precision);\n          value = unit.scale(value);\n          fullSuffix = unit.symbol + suffix;\n        } else {\n          value *= scale;\n        }\n        value = type(value, precision);\n        var i = value.lastIndexOf(\".\"), before, after;\n        if (i < 0) {\n          var j = exponent ? value.lastIndexOf(\"e\") : -1;\n          if (j < 0) before = value, after = \"\"; else before = value.substring(0, j), after = value.substring(j);\n        } else {\n          before = value.substring(0, i);\n          after = locale_decimal + value.substring(i + 1);\n        }\n        if (!zfill && comma) before = formatGroup(before, Infinity);\n        var length = prefix.length + before.length + after.length + (zcomma ? 0 : negative.length), padding = length < width ? new Array(length = width - length + 1).join(fill) : \"\";\n        if (zcomma) before = formatGroup(padding + before, padding.length ? width - after.length : Infinity);\n        negative += prefix;\n        value = before + after;\n        return (align === \"<\" ? negative + value + padding : align === \">\" ? padding + negative + value : align === \"^\" ? padding.substring(0, length >>= 1) + negative + value + padding.substring(length) : negative + (zcomma ? value : padding + value)) + fullSuffix;\n      };\n    };\n  }\n  var d3_format_re = /(?:([^{])?([<>=^]))?([+\\- ])?([$#])?(0)?(\\d+)?(,)?(\\.-?\\d+)?([a-z%])?/i;\n  var d3_format_types = d3.map({\n    b: function(x) {\n      return x.toString(2);\n    },\n    c: function(x) {\n      return String.fromCharCode(x);\n    },\n    o: function(x) {\n      return x.toString(8);\n    },\n    x: function(x) {\n      return x.toString(16);\n    },\n    X: function(x) {\n      return x.toString(16).toUpperCase();\n    },\n    g: function(x, p) {\n      return x.toPrecision(p);\n    },\n    e: function(x, p) {\n      return x.toExponential(p);\n    },\n    f: function(x, p) {\n      return x.toFixed(p);\n    },\n    r: function(x, p) {\n      return (x = d3.round(x, d3_format_precision(x, p))).toFixed(Math.max(0, Math.min(20, d3_format_precision(x * (1 + 1e-15), p))));\n    }\n  });\n  function d3_format_typeDefault(x) {\n    return x + \"\";\n  }\n  var d3_time = d3.time = {}, d3_date = Date;\n  function d3_date_utc() {\n    this._ = new Date(arguments.length > 1 ? Date.UTC.apply(this, arguments) : arguments[0]);\n  }\n  d3_date_utc.prototype = {\n    getDate: function() {\n      return this._.getUTCDate();\n    },\n    getDay: function() {\n      return this._.getUTCDay();\n    },\n    getFullYear: function() {\n      return this._.getUTCFullYear();\n    },\n    getHours: function() {\n      return this._.getUTCHours();\n    },\n    getMilliseconds: function() {\n      return this._.getUTCMilliseconds();\n    },\n    getMinutes: function() {\n      return this._.getUTCMinutes();\n    },\n    getMonth: function() {\n      return this._.getUTCMonth();\n    },\n    getSeconds: function() {\n      return this._.getUTCSeconds();\n    },\n    getTime: function() {\n      return this._.getTime();\n    },\n    getTimezoneOffset: function() {\n      return 0;\n    },\n    valueOf: function() {\n      return this._.valueOf();\n    },\n    setDate: function() {\n      d3_time_prototype.setUTCDate.apply(this._, arguments);\n    },\n    setDay: function() {\n      d3_time_prototype.setUTCDay.apply(this._, arguments);\n    },\n    setFullYear: function() {\n      d3_time_prototype.setUTCFullYear.apply(this._, arguments);\n    },\n    setHours: function() {\n      d3_time_prototype.setUTCHours.apply(this._, arguments);\n    },\n    setMilliseconds: function() {\n      d3_time_prototype.setUTCMilliseconds.apply(this._, arguments);\n    },\n    setMinutes: function() {\n      d3_time_prototype.setUTCMinutes.apply(this._, arguments);\n    },\n    setMonth: function() {\n      d3_time_prototype.setUTCMonth.apply(this._, arguments);\n    },\n    setSeconds: function() {\n      d3_time_prototype.setUTCSeconds.apply(this._, arguments);\n    },\n    setTime: function() {\n      d3_time_prototype.setTime.apply(this._, arguments);\n    }\n  };\n  var d3_time_prototype = Date.prototype;\n  function d3_time_interval(local, step, number) {\n    function round(date) {\n      var d0 = local(date), d1 = offset(d0, 1);\n      return date - d0 < d1 - date ? d0 : d1;\n    }\n    function ceil(date) {\n      step(date = local(new d3_date(date - 1)), 1);\n      return date;\n    }\n    function offset(date, k) {\n      step(date = new d3_date(+date), k);\n      return date;\n    }\n    function range(t0, t1, dt) {\n      var time = ceil(t0), times = [];\n      if (dt > 1) {\n        while (time < t1) {\n          if (!(number(time) % dt)) times.push(new Date(+time));\n          step(time, 1);\n        }\n      } else {\n        while (time < t1) times.push(new Date(+time)), step(time, 1);\n      }\n      return times;\n    }\n    function range_utc(t0, t1, dt) {\n      try {\n        d3_date = d3_date_utc;\n        var utc = new d3_date_utc();\n        utc._ = t0;\n        return range(utc, t1, dt);\n      } finally {\n        d3_date = Date;\n      }\n    }\n    local.floor = local;\n    local.round = round;\n    local.ceil = ceil;\n    local.offset = offset;\n    local.range = range;\n    var utc = local.utc = d3_time_interval_utc(local);\n    utc.floor = utc;\n    utc.round = d3_time_interval_utc(round);\n    utc.ceil = d3_time_interval_utc(ceil);\n    utc.offset = d3_time_interval_utc(offset);\n    utc.range = range_utc;\n    return local;\n  }\n  function d3_time_interval_utc(method) {\n    return function(date, k) {\n      try {\n        d3_date = d3_date_utc;\n        var utc = new d3_date_utc();\n        utc._ = date;\n        return method(utc, k)._;\n      } finally {\n        d3_date = Date;\n      }\n    };\n  }\n  d3_time.year = d3_time_interval(function(date) {\n    date = d3_time.day(date);\n    date.setMonth(0, 1);\n    return date;\n  }, function(date, offset) {\n    date.setFullYear(date.getFullYear() + offset);\n  }, function(date) {\n    return date.getFullYear();\n  });\n  d3_time.years = d3_time.year.range;\n  d3_time.years.utc = d3_time.year.utc.range;\n  d3_time.day = d3_time_interval(function(date) {\n    var day = new d3_date(2e3, 0);\n    day.setFullYear(date.getFullYear(), date.getMonth(), date.getDate());\n    return day;\n  }, function(date, offset) {\n    date.setDate(date.getDate() + offset);\n  }, function(date) {\n    return date.getDate() - 1;\n  });\n  d3_time.days = d3_time.day.range;\n  d3_time.days.utc = d3_time.day.utc.range;\n  d3_time.dayOfYear = function(date) {\n    var year = d3_time.year(date);\n    return Math.floor((date - year - (date.getTimezoneOffset() - year.getTimezoneOffset()) * 6e4) / 864e5);\n  };\n  [ \"sunday\", \"monday\", \"tuesday\", \"wednesday\", \"thursday\", \"friday\", \"saturday\" ].forEach(function(day, i) {\n    i = 7 - i;\n    var interval = d3_time[day] = d3_time_interval(function(date) {\n      (date = d3_time.day(date)).setDate(date.getDate() - (date.getDay() + i) % 7);\n      return date;\n    }, function(date, offset) {\n      date.setDate(date.getDate() + Math.floor(offset) * 7);\n    }, function(date) {\n      var day = d3_time.year(date).getDay();\n      return Math.floor((d3_time.dayOfYear(date) + (day + i) % 7) / 7) - (day !== i);\n    });\n    d3_time[day + \"s\"] = interval.range;\n    d3_time[day + \"s\"].utc = interval.utc.range;\n    d3_time[day + \"OfYear\"] = function(date) {\n      var day = d3_time.year(date).getDay();\n      return Math.floor((d3_time.dayOfYear(date) + (day + i) % 7) / 7);\n    };\n  });\n  d3_time.week = d3_time.sunday;\n  d3_time.weeks = d3_time.sunday.range;\n  d3_time.weeks.utc = d3_time.sunday.utc.range;\n  d3_time.weekOfYear = d3_time.sundayOfYear;\n  function d3_locale_timeFormat(locale) {\n    var locale_dateTime = locale.dateTime, locale_date = locale.date, locale_time = locale.time, locale_periods = locale.periods, locale_days = locale.days, locale_shortDays = locale.shortDays, locale_months = locale.months, locale_shortMonths = locale.shortMonths;\n    function d3_time_format(template) {\n      var n = template.length;\n      function format(date) {\n        var string = [], i = -1, j = 0, c, p, f;\n        while (++i < n) {\n          if (template.charCodeAt(i) === 37) {\n            string.push(template.slice(j, i));\n            if ((p = d3_time_formatPads[c = template.charAt(++i)]) != null) c = template.charAt(++i);\n            if (f = d3_time_formats[c]) c = f(date, p == null ? c === \"e\" ? \" \" : \"0\" : p);\n            string.push(c);\n            j = i + 1;\n          }\n        }\n        string.push(template.slice(j, i));\n        return string.join(\"\");\n      }\n      format.parse = function(string) {\n        var d = {\n          y: 1900,\n          m: 0,\n          d: 1,\n          H: 0,\n          M: 0,\n          S: 0,\n          L: 0,\n          Z: null\n        }, i = d3_time_parse(d, template, string, 0);\n        if (i != string.length) return null;\n        if (\"p\" in d) d.H = d.H % 12 + d.p * 12;\n        var localZ = d.Z != null && d3_date !== d3_date_utc, date = new (localZ ? d3_date_utc : d3_date)();\n        if (\"j\" in d) date.setFullYear(d.y, 0, d.j); else if (\"W\" in d || \"U\" in d) {\n          if (!(\"w\" in d)) d.w = \"W\" in d ? 1 : 0;\n          date.setFullYear(d.y, 0, 1);\n          date.setFullYear(d.y, 0, \"W\" in d ? (d.w + 6) % 7 + d.W * 7 - (date.getDay() + 5) % 7 : d.w + d.U * 7 - (date.getDay() + 6) % 7);\n        } else date.setFullYear(d.y, d.m, d.d);\n        date.setHours(d.H + (d.Z / 100 | 0), d.M + d.Z % 100, d.S, d.L);\n        return localZ ? date._ : date;\n      };\n      format.toString = function() {\n        return template;\n      };\n      return format;\n    }\n    function d3_time_parse(date, template, string, j) {\n      var c, p, t, i = 0, n = template.length, m = string.length;\n      while (i < n) {\n        if (j >= m) return -1;\n        c = template.charCodeAt(i++);\n        if (c === 37) {\n          t = template.charAt(i++);\n          p = d3_time_parsers[t in d3_time_formatPads ? template.charAt(i++) : t];\n          if (!p || (j = p(date, string, j)) < 0) return -1;\n        } else if (c != string.charCodeAt(j++)) {\n          return -1;\n        }\n      }\n      return j;\n    }\n    d3_time_format.utc = function(template) {\n      var local = d3_time_format(template);\n      function format(date) {\n        try {\n          d3_date = d3_date_utc;\n          var utc = new d3_date();\n          utc._ = date;\n          return local(utc);\n        } finally {\n          d3_date = Date;\n        }\n      }\n      format.parse = function(string) {\n        try {\n          d3_date = d3_date_utc;\n          var date = local.parse(string);\n          return date && date._;\n        } finally {\n          d3_date = Date;\n        }\n      };\n      format.toString = local.toString;\n      return format;\n    };\n    d3_time_format.multi = d3_time_format.utc.multi = d3_time_formatMulti;\n    var d3_time_periodLookup = d3.map(), d3_time_dayRe = d3_time_formatRe(locale_days), d3_time_dayLookup = d3_time_formatLookup(locale_days), d3_time_dayAbbrevRe = d3_time_formatRe(locale_shortDays), d3_time_dayAbbrevLookup = d3_time_formatLookup(locale_shortDays), d3_time_monthRe = d3_time_formatRe(locale_months), d3_time_monthLookup = d3_time_formatLookup(locale_months), d3_time_monthAbbrevRe = d3_time_formatRe(locale_shortMonths), d3_time_monthAbbrevLookup = d3_time_formatLookup(locale_shortMonths);\n    locale_periods.forEach(function(p, i) {\n      d3_time_periodLookup.set(p.toLowerCase(), i);\n    });\n    var d3_time_formats = {\n      a: function(d) {\n        return locale_shortDays[d.getDay()];\n      },\n      A: function(d) {\n        return locale_days[d.getDay()];\n      },\n      b: function(d) {\n        return locale_shortMonths[d.getMonth()];\n      },\n      B: function(d) {\n        return locale_months[d.getMonth()];\n      },\n      c: d3_time_format(locale_dateTime),\n      d: function(d, p) {\n        return d3_time_formatPad(d.getDate(), p, 2);\n      },\n      e: function(d, p) {\n        return d3_time_formatPad(d.getDate(), p, 2);\n      },\n      H: function(d, p) {\n        return d3_time_formatPad(d.getHours(), p, 2);\n      },\n      I: function(d, p) {\n        return d3_time_formatPad(d.getHours() % 12 || 12, p, 2);\n      },\n      j: function(d, p) {\n        return d3_time_formatPad(1 + d3_time.dayOfYear(d), p, 3);\n      },\n      L: function(d, p) {\n        return d3_time_formatPad(d.getMilliseconds(), p, 3);\n      },\n      m: function(d, p) {\n        return d3_time_formatPad(d.getMonth() + 1, p, 2);\n      },\n      M: function(d, p) {\n        return d3_time_formatPad(d.getMinutes(), p, 2);\n      },\n      p: function(d) {\n        return locale_periods[+(d.getHours() >= 12)];\n      },\n      S: function(d, p) {\n        return d3_time_formatPad(d.getSeconds(), p, 2);\n      },\n      U: function(d, p) {\n        return d3_time_formatPad(d3_time.sundayOfYear(d), p, 2);\n      },\n      w: function(d) {\n        return d.getDay();\n      },\n      W: function(d, p) {\n        return d3_time_formatPad(d3_time.mondayOfYear(d), p, 2);\n      },\n      x: d3_time_format(locale_date),\n      X: d3_time_format(locale_time),\n      y: function(d, p) {\n        return d3_time_formatPad(d.getFullYear() % 100, p, 2);\n      },\n      Y: function(d, p) {\n        return d3_time_formatPad(d.getFullYear() % 1e4, p, 4);\n      },\n      Z: d3_time_zone,\n      \"%\": function() {\n        return \"%\";\n      }\n    };\n    var d3_time_parsers = {\n      a: d3_time_parseWeekdayAbbrev,\n      A: d3_time_parseWeekday,\n      b: d3_time_parseMonthAbbrev,\n      B: d3_time_parseMonth,\n      c: d3_time_parseLocaleFull,\n      d: d3_time_parseDay,\n      e: d3_time_parseDay,\n      H: d3_time_parseHour24,\n      I: d3_time_parseHour24,\n      j: d3_time_parseDayOfYear,\n      L: d3_time_parseMilliseconds,\n      m: d3_time_parseMonthNumber,\n      M: d3_time_parseMinutes,\n      p: d3_time_parseAmPm,\n      S: d3_time_parseSeconds,\n      U: d3_time_parseWeekNumberSunday,\n      w: d3_time_parseWeekdayNumber,\n      W: d3_time_parseWeekNumberMonday,\n      x: d3_time_parseLocaleDate,\n      X: d3_time_parseLocaleTime,\n      y: d3_time_parseYear,\n      Y: d3_time_parseFullYear,\n      Z: d3_time_parseZone,\n      \"%\": d3_time_parseLiteralPercent\n    };\n    function d3_time_parseWeekdayAbbrev(date, string, i) {\n      d3_time_dayAbbrevRe.lastIndex = 0;\n      var n = d3_time_dayAbbrevRe.exec(string.slice(i));\n      return n ? (date.w = d3_time_dayAbbrevLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;\n    }\n    function d3_time_parseWeekday(date, string, i) {\n      d3_time_dayRe.lastIndex = 0;\n      var n = d3_time_dayRe.exec(string.slice(i));\n      return n ? (date.w = d3_time_dayLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;\n    }\n    function d3_time_parseMonthAbbrev(date, string, i) {\n      d3_time_monthAbbrevRe.lastIndex = 0;\n      var n = d3_time_monthAbbrevRe.exec(string.slice(i));\n      return n ? (date.m = d3_time_monthAbbrevLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;\n    }\n    function d3_time_parseMonth(date, string, i) {\n      d3_time_monthRe.lastIndex = 0;\n      var n = d3_time_monthRe.exec(string.slice(i));\n      return n ? (date.m = d3_time_monthLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;\n    }\n    function d3_time_parseLocaleFull(date, string, i) {\n      return d3_time_parse(date, d3_time_formats.c.toString(), string, i);\n    }\n    function d3_time_parseLocaleDate(date, string, i) {\n      return d3_time_parse(date, d3_time_formats.x.toString(), string, i);\n    }\n    function d3_time_parseLocaleTime(date, string, i) {\n      return d3_time_parse(date, d3_time_formats.X.toString(), string, i);\n    }\n    function d3_time_parseAmPm(date, string, i) {\n      var n = d3_time_periodLookup.get(string.slice(i, i += 2).toLowerCase());\n      return n == null ? -1 : (date.p = n, i);\n    }\n    return d3_time_format;\n  }\n  var d3_time_formatPads = {\n    \"-\": \"\",\n    _: \" \",\n    \"0\": \"0\"\n  }, d3_time_numberRe = /^\\s*\\d+/, d3_time_percentRe = /^%/;\n  function d3_time_formatPad(value, fill, width) {\n    var sign = value < 0 ? \"-\" : \"\", string = (sign ? -value : value) + \"\", length = string.length;\n    return sign + (length < width ? new Array(width - length + 1).join(fill) + string : string);\n  }\n  function d3_time_formatRe(names) {\n    return new RegExp(\"^(?:\" + names.map(d3.requote).join(\"|\") + \")\", \"i\");\n  }\n  function d3_time_formatLookup(names) {\n    var map = new d3_Map(), i = -1, n = names.length;\n    while (++i < n) map.set(names[i].toLowerCase(), i);\n    return map;\n  }\n  function d3_time_parseWeekdayNumber(date, string, i) {\n    d3_time_numberRe.lastIndex = 0;\n    var n = d3_time_numberRe.exec(string.slice(i, i + 1));\n    return n ? (date.w = +n[0], i + n[0].length) : -1;\n  }\n  function d3_time_parseWeekNumberSunday(date, string, i) {\n    d3_time_numberRe.lastIndex = 0;\n    var n = d3_time_numberRe.exec(string.slice(i));\n    return n ? (date.U = +n[0], i + n[0].length) : -1;\n  }\n  function d3_time_parseWeekNumberMonday(date, string, i) {\n    d3_time_numberRe.lastIndex = 0;\n    var n = d3_time_numberRe.exec(string.slice(i));\n    return n ? (date.W = +n[0], i + n[0].length) : -1;\n  }\n  function d3_time_parseFullYear(date, string, i) {\n    d3_time_numberRe.lastIndex = 0;\n    var n = d3_time_numberRe.exec(string.slice(i, i + 4));\n    return n ? (date.y = +n[0], i + n[0].length) : -1;\n  }\n  function d3_time_parseYear(date, string, i) {\n    d3_time_numberRe.lastIndex = 0;\n    var n = d3_time_numberRe.exec(string.slice(i, i + 2));\n    return n ? (date.y = d3_time_expandYear(+n[0]), i + n[0].length) : -1;\n  }\n  function d3_time_parseZone(date, string, i) {\n    return /^[+-]\\d{4}$/.test(string = string.slice(i, i + 5)) ? (date.Z = -string, \n    i + 5) : -1;\n  }\n  function d3_time_expandYear(d) {\n    return d + (d > 68 ? 1900 : 2e3);\n  }\n  function d3_time_parseMonthNumber(date, string, i) {\n    d3_time_numberRe.lastIndex = 0;\n    var n = d3_time_numberRe.exec(string.slice(i, i + 2));\n    return n ? (date.m = n[0] - 1, i + n[0].length) : -1;\n  }\n  function d3_time_parseDay(date, string, i) {\n    d3_time_numberRe.lastIndex = 0;\n    var n = d3_time_numberRe.exec(string.slice(i, i + 2));\n    return n ? (date.d = +n[0], i + n[0].length) : -1;\n  }\n  function d3_time_parseDayOfYear(date, string, i) {\n    d3_time_numberRe.lastIndex = 0;\n    var n = d3_time_numberRe.exec(string.slice(i, i + 3));\n    return n ? (date.j = +n[0], i + n[0].length) : -1;\n  }\n  function d3_time_parseHour24(date, string, i) {\n    d3_time_numberRe.lastIndex = 0;\n    var n = d3_time_numberRe.exec(string.slice(i, i + 2));\n    return n ? (date.H = +n[0], i + n[0].length) : -1;\n  }\n  function d3_time_parseMinutes(date, string, i) {\n    d3_time_numberRe.lastIndex = 0;\n    var n = d3_time_numberRe.exec(string.slice(i, i + 2));\n    return n ? (date.M = +n[0], i + n[0].length) : -1;\n  }\n  function d3_time_parseSeconds(date, string, i) {\n    d3_time_numberRe.lastIndex = 0;\n    var n = d3_time_numberRe.exec(string.slice(i, i + 2));\n    return n ? (date.S = +n[0], i + n[0].length) : -1;\n  }\n  function d3_time_parseMilliseconds(date, string, i) {\n    d3_time_numberRe.lastIndex = 0;\n    var n = d3_time_numberRe.exec(string.slice(i, i + 3));\n    return n ? (date.L = +n[0], i + n[0].length) : -1;\n  }\n  function d3_time_zone(d) {\n    var z = d.getTimezoneOffset(), zs = z > 0 ? \"-\" : \"+\", zh = abs(z) / 60 | 0, zm = abs(z) % 60;\n    return zs + d3_time_formatPad(zh, \"0\", 2) + d3_time_formatPad(zm, \"0\", 2);\n  }\n  function d3_time_parseLiteralPercent(date, string, i) {\n    d3_time_percentRe.lastIndex = 0;\n    var n = d3_time_percentRe.exec(string.slice(i, i + 1));\n    return n ? i + n[0].length : -1;\n  }\n  function d3_time_formatMulti(formats) {\n    var n = formats.length, i = -1;\n    while (++i < n) formats[i][0] = this(formats[i][0]);\n    return function(date) {\n      var i = 0, f = formats[i];\n      while (!f[1](date)) f = formats[++i];\n      return f[0](date);\n    };\n  }\n  d3.locale = function(locale) {\n    return {\n      numberFormat: d3_locale_numberFormat(locale),\n      timeFormat: d3_locale_timeFormat(locale)\n    };\n  };\n  var d3_locale_enUS = d3.locale({\n    decimal: \".\",\n    thousands: \",\",\n    grouping: [ 3 ],\n    currency: [ \"$\", \"\" ],\n    dateTime: \"%a %b %e %X %Y\",\n    date: \"%m/%d/%Y\",\n    time: \"%H:%M:%S\",\n    periods: [ \"AM\", \"PM\" ],\n    days: [ \"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\" ],\n    shortDays: [ \"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\" ],\n    months: [ \"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\" ],\n    shortMonths: [ \"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\" ]\n  });\n  d3.format = d3_locale_enUS.numberFormat;\n  d3.geo = {};\n  function d3_adder() {}\n  d3_adder.prototype = {\n    s: 0,\n    t: 0,\n    add: function(y) {\n      d3_adderSum(y, this.t, d3_adderTemp);\n      d3_adderSum(d3_adderTemp.s, this.s, this);\n      if (this.s) this.t += d3_adderTemp.t; else this.s = d3_adderTemp.t;\n    },\n    reset: function() {\n      this.s = this.t = 0;\n    },\n    valueOf: function() {\n      return this.s;\n    }\n  };\n  var d3_adderTemp = new d3_adder();\n  function d3_adderSum(a, b, o) {\n    var x = o.s = a + b, bv = x - a, av = x - bv;\n    o.t = a - av + (b - bv);\n  }\n  d3.geo.stream = function(object, listener) {\n    if (object && d3_geo_streamObjectType.hasOwnProperty(object.type)) {\n      d3_geo_streamObjectType[object.type](object, listener);\n    } else {\n      d3_geo_streamGeometry(object, listener);\n    }\n  };\n  function d3_geo_streamGeometry(geometry, listener) {\n    if (geometry && d3_geo_streamGeometryType.hasOwnProperty(geometry.type)) {\n      d3_geo_streamGeometryType[geometry.type](geometry, listener);\n    }\n  }\n  var d3_geo_streamObjectType = {\n    Feature: function(feature, listener) {\n      d3_geo_streamGeometry(feature.geometry, listener);\n    },\n    FeatureCollection: function(object, listener) {\n      var features = object.features, i = -1, n = features.length;\n      while (++i < n) d3_geo_streamGeometry(features[i].geometry, listener);\n    }\n  };\n  var d3_geo_streamGeometryType = {\n    Sphere: function(object, listener) {\n      listener.sphere();\n    },\n    Point: function(object, listener) {\n      object = object.coordinates;\n      listener.point(object[0], object[1], object[2]);\n    },\n    MultiPoint: function(object, listener) {\n      var coordinates = object.coordinates, i = -1, n = coordinates.length;\n      while (++i < n) object = coordinates[i], listener.point(object[0], object[1], object[2]);\n    },\n    LineString: function(object, listener) {\n      d3_geo_streamLine(object.coordinates, listener, 0);\n    },\n    MultiLineString: function(object, listener) {\n      var coordinates = object.coordinates, i = -1, n = coordinates.length;\n      while (++i < n) d3_geo_streamLine(coordinates[i], listener, 0);\n    },\n    Polygon: function(object, listener) {\n      d3_geo_streamPolygon(object.coordinates, listener);\n    },\n    MultiPolygon: function(object, listener) {\n      var coordinates = object.coordinates, i = -1, n = coordinates.length;\n      while (++i < n) d3_geo_streamPolygon(coordinates[i], listener);\n    },\n    GeometryCollection: function(object, listener) {\n      var geometries = object.geometries, i = -1, n = geometries.length;\n      while (++i < n) d3_geo_streamGeometry(geometries[i], listener);\n    }\n  };\n  function d3_geo_streamLine(coordinates, listener, closed) {\n    var i = -1, n = coordinates.length - closed, coordinate;\n    listener.lineStart();\n    while (++i < n) coordinate = coordinates[i], listener.point(coordinate[0], coordinate[1], coordinate[2]);\n    listener.lineEnd();\n  }\n  function d3_geo_streamPolygon(coordinates, listener) {\n    var i = -1, n = coordinates.length;\n    listener.polygonStart();\n    while (++i < n) d3_geo_streamLine(coordinates[i], listener, 1);\n    listener.polygonEnd();\n  }\n  d3.geo.area = function(object) {\n    d3_geo_areaSum = 0;\n    d3.geo.stream(object, d3_geo_area);\n    return d3_geo_areaSum;\n  };\n  var d3_geo_areaSum, d3_geo_areaRingSum = new d3_adder();\n  var d3_geo_area = {\n    sphere: function() {\n      d3_geo_areaSum += 4 * π;\n    },\n    point: d3_noop,\n    lineStart: d3_noop,\n    lineEnd: d3_noop,\n    polygonStart: function() {\n      d3_geo_areaRingSum.reset();\n      d3_geo_area.lineStart = d3_geo_areaRingStart;\n    },\n    polygonEnd: function() {\n      var area = 2 * d3_geo_areaRingSum;\n      d3_geo_areaSum += area < 0 ? 4 * π + area : area;\n      d3_geo_area.lineStart = d3_geo_area.lineEnd = d3_geo_area.point = d3_noop;\n    }\n  };\n  function d3_geo_areaRingStart() {\n    var λ00, φ00, λ0, cosφ0, sinφ0;\n    d3_geo_area.point = function(λ, φ) {\n      d3_geo_area.point = nextPoint;\n      λ0 = (λ00 = λ) * d3_radians, cosφ0 = Math.cos(φ = (φ00 = φ) * d3_radians / 2 + π / 4), \n      sinφ0 = Math.sin(φ);\n    };\n    function nextPoint(λ, φ) {\n      λ *= d3_radians;\n      φ = φ * d3_radians / 2 + π / 4;\n      var dλ = λ - λ0, sdλ = dλ >= 0 ? 1 : -1, adλ = sdλ * dλ, cosφ = Math.cos(φ), sinφ = Math.sin(φ), k = sinφ0 * sinφ, u = cosφ0 * cosφ + k * Math.cos(adλ), v = k * sdλ * Math.sin(adλ);\n      d3_geo_areaRingSum.add(Math.atan2(v, u));\n      λ0 = λ, cosφ0 = cosφ, sinφ0 = sinφ;\n    }\n    d3_geo_area.lineEnd = function() {\n      nextPoint(λ00, φ00);\n    };\n  }\n  function d3_geo_cartesian(spherical) {\n    var λ = spherical[0], φ = spherical[1], cosφ = Math.cos(φ);\n    return [ cosφ * Math.cos(λ), cosφ * Math.sin(λ), Math.sin(φ) ];\n  }\n  function d3_geo_cartesianDot(a, b) {\n    return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\n  }\n  function d3_geo_cartesianCross(a, b) {\n    return [ a[1] * b[2] - a[2] * b[1], a[2] * b[0] - a[0] * b[2], a[0] * b[1] - a[1] * b[0] ];\n  }\n  function d3_geo_cartesianAdd(a, b) {\n    a[0] += b[0];\n    a[1] += b[1];\n    a[2] += b[2];\n  }\n  function d3_geo_cartesianScale(vector, k) {\n    return [ vector[0] * k, vector[1] * k, vector[2] * k ];\n  }\n  function d3_geo_cartesianNormalize(d) {\n    var l = Math.sqrt(d[0] * d[0] + d[1] * d[1] + d[2] * d[2]);\n    d[0] /= l;\n    d[1] /= l;\n    d[2] /= l;\n  }\n  function d3_geo_spherical(cartesian) {\n    return [ Math.atan2(cartesian[1], cartesian[0]), d3_asin(cartesian[2]) ];\n  }\n  function d3_geo_sphericalEqual(a, b) {\n    return abs(a[0] - b[0]) < ε && abs(a[1] - b[1]) < ε;\n  }\n  d3.geo.bounds = function() {\n    var λ0, φ0, λ1, φ1, λ_, λ__, φ__, p0, dλSum, ranges, range;\n    var bound = {\n      point: point,\n      lineStart: lineStart,\n      lineEnd: lineEnd,\n      polygonStart: function() {\n        bound.point = ringPoint;\n        bound.lineStart = ringStart;\n        bound.lineEnd = ringEnd;\n        dλSum = 0;\n        d3_geo_area.polygonStart();\n      },\n      polygonEnd: function() {\n        d3_geo_area.polygonEnd();\n        bound.point = point;\n        bound.lineStart = lineStart;\n        bound.lineEnd = lineEnd;\n        if (d3_geo_areaRingSum < 0) λ0 = -(λ1 = 180), φ0 = -(φ1 = 90); else if (dλSum > ε) φ1 = 90; else if (dλSum < -ε) φ0 = -90;\n        range[0] = λ0, range[1] = λ1;\n      }\n    };\n    function point(λ, φ) {\n      ranges.push(range = [ λ0 = λ, λ1 = λ ]);\n      if (φ < φ0) φ0 = φ;\n      if (φ > φ1) φ1 = φ;\n    }\n    function linePoint(λ, φ) {\n      var p = d3_geo_cartesian([ λ * d3_radians, φ * d3_radians ]);\n      if (p0) {\n        var normal = d3_geo_cartesianCross(p0, p), equatorial = [ normal[1], -normal[0], 0 ], inflection = d3_geo_cartesianCross(equatorial, normal);\n        d3_geo_cartesianNormalize(inflection);\n        inflection = d3_geo_spherical(inflection);\n        var dλ = λ - λ_, s = dλ > 0 ? 1 : -1, λi = inflection[0] * d3_degrees * s, antimeridian = abs(dλ) > 180;\n        if (antimeridian ^ (s * λ_ < λi && λi < s * λ)) {\n          var φi = inflection[1] * d3_degrees;\n          if (φi > φ1) φ1 = φi;\n        } else if (λi = (λi + 360) % 360 - 180, antimeridian ^ (s * λ_ < λi && λi < s * λ)) {\n          var φi = -inflection[1] * d3_degrees;\n          if (φi < φ0) φ0 = φi;\n        } else {\n          if (φ < φ0) φ0 = φ;\n          if (φ > φ1) φ1 = φ;\n        }\n        if (antimeridian) {\n          if (λ < λ_) {\n            if (angle(λ0, λ) > angle(λ0, λ1)) λ1 = λ;\n          } else {\n            if (angle(λ, λ1) > angle(λ0, λ1)) λ0 = λ;\n          }\n        } else {\n          if (λ1 >= λ0) {\n            if (λ < λ0) λ0 = λ;\n            if (λ > λ1) λ1 = λ;\n          } else {\n            if (λ > λ_) {\n              if (angle(λ0, λ) > angle(λ0, λ1)) λ1 = λ;\n            } else {\n              if (angle(λ, λ1) > angle(λ0, λ1)) λ0 = λ;\n            }\n          }\n        }\n      } else {\n        point(λ, φ);\n      }\n      p0 = p, λ_ = λ;\n    }\n    function lineStart() {\n      bound.point = linePoint;\n    }\n    function lineEnd() {\n      range[0] = λ0, range[1] = λ1;\n      bound.point = point;\n      p0 = null;\n    }\n    function ringPoint(λ, φ) {\n      if (p0) {\n        var dλ = λ - λ_;\n        dλSum += abs(dλ) > 180 ? dλ + (dλ > 0 ? 360 : -360) : dλ;\n      } else λ__ = λ, φ__ = φ;\n      d3_geo_area.point(λ, φ);\n      linePoint(λ, φ);\n    }\n    function ringStart() {\n      d3_geo_area.lineStart();\n    }\n    function ringEnd() {\n      ringPoint(λ__, φ__);\n      d3_geo_area.lineEnd();\n      if (abs(dλSum) > ε) λ0 = -(λ1 = 180);\n      range[0] = λ0, range[1] = λ1;\n      p0 = null;\n    }\n    function angle(λ0, λ1) {\n      return (λ1 -= λ0) < 0 ? λ1 + 360 : λ1;\n    }\n    function compareRanges(a, b) {\n      return a[0] - b[0];\n    }\n    function withinRange(x, range) {\n      return range[0] <= range[1] ? range[0] <= x && x <= range[1] : x < range[0] || range[1] < x;\n    }\n    return function(feature) {\n      φ1 = λ1 = -(λ0 = φ0 = Infinity);\n      ranges = [];\n      d3.geo.stream(feature, bound);\n      var n = ranges.length;\n      if (n) {\n        ranges.sort(compareRanges);\n        for (var i = 1, a = ranges[0], b, merged = [ a ]; i < n; ++i) {\n          b = ranges[i];\n          if (withinRange(b[0], a) || withinRange(b[1], a)) {\n            if (angle(a[0], b[1]) > angle(a[0], a[1])) a[1] = b[1];\n            if (angle(b[0], a[1]) > angle(a[0], a[1])) a[0] = b[0];\n          } else {\n            merged.push(a = b);\n          }\n        }\n        var best = -Infinity, dλ;\n        for (var n = merged.length - 1, i = 0, a = merged[n], b; i <= n; a = b, ++i) {\n          b = merged[i];\n          if ((dλ = angle(a[1], b[0])) > best) best = dλ, λ0 = b[0], λ1 = a[1];\n        }\n      }\n      ranges = range = null;\n      return λ0 === Infinity || φ0 === Infinity ? [ [ NaN, NaN ], [ NaN, NaN ] ] : [ [ λ0, φ0 ], [ λ1, φ1 ] ];\n    };\n  }();\n  d3.geo.centroid = function(object) {\n    d3_geo_centroidW0 = d3_geo_centroidW1 = d3_geo_centroidX0 = d3_geo_centroidY0 = d3_geo_centroidZ0 = d3_geo_centroidX1 = d3_geo_centroidY1 = d3_geo_centroidZ1 = d3_geo_centroidX2 = d3_geo_centroidY2 = d3_geo_centroidZ2 = 0;\n    d3.geo.stream(object, d3_geo_centroid);\n    var x = d3_geo_centroidX2, y = d3_geo_centroidY2, z = d3_geo_centroidZ2, m = x * x + y * y + z * z;\n    if (m < ε2) {\n      x = d3_geo_centroidX1, y = d3_geo_centroidY1, z = d3_geo_centroidZ1;\n      if (d3_geo_centroidW1 < ε) x = d3_geo_centroidX0, y = d3_geo_centroidY0, z = d3_geo_centroidZ0;\n      m = x * x + y * y + z * z;\n      if (m < ε2) return [ NaN, NaN ];\n    }\n    return [ Math.atan2(y, x) * d3_degrees, d3_asin(z / Math.sqrt(m)) * d3_degrees ];\n  };\n  var d3_geo_centroidW0, d3_geo_centroidW1, d3_geo_centroidX0, d3_geo_centroidY0, d3_geo_centroidZ0, d3_geo_centroidX1, d3_geo_centroidY1, d3_geo_centroidZ1, d3_geo_centroidX2, d3_geo_centroidY2, d3_geo_centroidZ2;\n  var d3_geo_centroid = {\n    sphere: d3_noop,\n    point: d3_geo_centroidPoint,\n    lineStart: d3_geo_centroidLineStart,\n    lineEnd: d3_geo_centroidLineEnd,\n    polygonStart: function() {\n      d3_geo_centroid.lineStart = d3_geo_centroidRingStart;\n    },\n    polygonEnd: function() {\n      d3_geo_centroid.lineStart = d3_geo_centroidLineStart;\n    }\n  };\n  function d3_geo_centroidPoint(λ, φ) {\n    λ *= d3_radians;\n    var cosφ = Math.cos(φ *= d3_radians);\n    d3_geo_centroidPointXYZ(cosφ * Math.cos(λ), cosφ * Math.sin(λ), Math.sin(φ));\n  }\n  function d3_geo_centroidPointXYZ(x, y, z) {\n    ++d3_geo_centroidW0;\n    d3_geo_centroidX0 += (x - d3_geo_centroidX0) / d3_geo_centroidW0;\n    d3_geo_centroidY0 += (y - d3_geo_centroidY0) / d3_geo_centroidW0;\n    d3_geo_centroidZ0 += (z - d3_geo_centroidZ0) / d3_geo_centroidW0;\n  }\n  function d3_geo_centroidLineStart() {\n    var x0, y0, z0;\n    d3_geo_centroid.point = function(λ, φ) {\n      λ *= d3_radians;\n      var cosφ = Math.cos(φ *= d3_radians);\n      x0 = cosφ * Math.cos(λ);\n      y0 = cosφ * Math.sin(λ);\n      z0 = Math.sin(φ);\n      d3_geo_centroid.point = nextPoint;\n      d3_geo_centroidPointXYZ(x0, y0, z0);\n    };\n    function nextPoint(λ, φ) {\n      λ *= d3_radians;\n      var cosφ = Math.cos(φ *= d3_radians), x = cosφ * Math.cos(λ), y = cosφ * Math.sin(λ), z = Math.sin(φ), w = Math.atan2(Math.sqrt((w = y0 * z - z0 * y) * w + (w = z0 * x - x0 * z) * w + (w = x0 * y - y0 * x) * w), x0 * x + y0 * y + z0 * z);\n      d3_geo_centroidW1 += w;\n      d3_geo_centroidX1 += w * (x0 + (x0 = x));\n      d3_geo_centroidY1 += w * (y0 + (y0 = y));\n      d3_geo_centroidZ1 += w * (z0 + (z0 = z));\n      d3_geo_centroidPointXYZ(x0, y0, z0);\n    }\n  }\n  function d3_geo_centroidLineEnd() {\n    d3_geo_centroid.point = d3_geo_centroidPoint;\n  }\n  function d3_geo_centroidRingStart() {\n    var λ00, φ00, x0, y0, z0;\n    d3_geo_centroid.point = function(λ, φ) {\n      λ00 = λ, φ00 = φ;\n      d3_geo_centroid.point = nextPoint;\n      λ *= d3_radians;\n      var cosφ = Math.cos(φ *= d3_radians);\n      x0 = cosφ * Math.cos(λ);\n      y0 = cosφ * Math.sin(λ);\n      z0 = Math.sin(φ);\n      d3_geo_centroidPointXYZ(x0, y0, z0);\n    };\n    d3_geo_centroid.lineEnd = function() {\n      nextPoint(λ00, φ00);\n      d3_geo_centroid.lineEnd = d3_geo_centroidLineEnd;\n      d3_geo_centroid.point = d3_geo_centroidPoint;\n    };\n    function nextPoint(λ, φ) {\n      λ *= d3_radians;\n      var cosφ = Math.cos(φ *= d3_radians), x = cosφ * Math.cos(λ), y = cosφ * Math.sin(λ), z = Math.sin(φ), cx = y0 * z - z0 * y, cy = z0 * x - x0 * z, cz = x0 * y - y0 * x, m = Math.sqrt(cx * cx + cy * cy + cz * cz), u = x0 * x + y0 * y + z0 * z, v = m && -d3_acos(u) / m, w = Math.atan2(m, u);\n      d3_geo_centroidX2 += v * cx;\n      d3_geo_centroidY2 += v * cy;\n      d3_geo_centroidZ2 += v * cz;\n      d3_geo_centroidW1 += w;\n      d3_geo_centroidX1 += w * (x0 + (x0 = x));\n      d3_geo_centroidY1 += w * (y0 + (y0 = y));\n      d3_geo_centroidZ1 += w * (z0 + (z0 = z));\n      d3_geo_centroidPointXYZ(x0, y0, z0);\n    }\n  }\n  function d3_geo_compose(a, b) {\n    function compose(x, y) {\n      return x = a(x, y), b(x[0], x[1]);\n    }\n    if (a.invert && b.invert) compose.invert = function(x, y) {\n      return x = b.invert(x, y), x && a.invert(x[0], x[1]);\n    };\n    return compose;\n  }\n  function d3_true() {\n    return true;\n  }\n  function d3_geo_clipPolygon(segments, compare, clipStartInside, interpolate, listener) {\n    var subject = [], clip = [];\n    segments.forEach(function(segment) {\n      if ((n = segment.length - 1) <= 0) return;\n      var n, p0 = segment[0], p1 = segment[n];\n      if (d3_geo_sphericalEqual(p0, p1)) {\n        listener.lineStart();\n        for (var i = 0; i < n; ++i) listener.point((p0 = segment[i])[0], p0[1]);\n        listener.lineEnd();\n        return;\n      }\n      var a = new d3_geo_clipPolygonIntersection(p0, segment, null, true), b = new d3_geo_clipPolygonIntersection(p0, null, a, false);\n      a.o = b;\n      subject.push(a);\n      clip.push(b);\n      a = new d3_geo_clipPolygonIntersection(p1, segment, null, false);\n      b = new d3_geo_clipPolygonIntersection(p1, null, a, true);\n      a.o = b;\n      subject.push(a);\n      clip.push(b);\n    });\n    clip.sort(compare);\n    d3_geo_clipPolygonLinkCircular(subject);\n    d3_geo_clipPolygonLinkCircular(clip);\n    if (!subject.length) return;\n    for (var i = 0, entry = clipStartInside, n = clip.length; i < n; ++i) {\n      clip[i].e = entry = !entry;\n    }\n    var start = subject[0], points, point;\n    while (1) {\n      var current = start, isSubject = true;\n      while (current.v) if ((current = current.n) === start) return;\n      points = current.z;\n      listener.lineStart();\n      do {\n        current.v = current.o.v = true;\n        if (current.e) {\n          if (isSubject) {\n            for (var i = 0, n = points.length; i < n; ++i) listener.point((point = points[i])[0], point[1]);\n          } else {\n            interpolate(current.x, current.n.x, 1, listener);\n          }\n          current = current.n;\n        } else {\n          if (isSubject) {\n            points = current.p.z;\n            for (var i = points.length - 1; i >= 0; --i) listener.point((point = points[i])[0], point[1]);\n          } else {\n            interpolate(current.x, current.p.x, -1, listener);\n          }\n          current = current.p;\n        }\n        current = current.o;\n        points = current.z;\n        isSubject = !isSubject;\n      } while (!current.v);\n      listener.lineEnd();\n    }\n  }\n  function d3_geo_clipPolygonLinkCircular(array) {\n    if (!(n = array.length)) return;\n    var n, i = 0, a = array[0], b;\n    while (++i < n) {\n      a.n = b = array[i];\n      b.p = a;\n      a = b;\n    }\n    a.n = b = array[0];\n    b.p = a;\n  }\n  function d3_geo_clipPolygonIntersection(point, points, other, entry) {\n    this.x = point;\n    this.z = points;\n    this.o = other;\n    this.e = entry;\n    this.v = false;\n    this.n = this.p = null;\n  }\n  function d3_geo_clip(pointVisible, clipLine, interpolate, clipStart) {\n    return function(rotate, listener) {\n      var line = clipLine(listener), rotatedClipStart = rotate.invert(clipStart[0], clipStart[1]);\n      var clip = {\n        point: point,\n        lineStart: lineStart,\n        lineEnd: lineEnd,\n        polygonStart: function() {\n          clip.point = pointRing;\n          clip.lineStart = ringStart;\n          clip.lineEnd = ringEnd;\n          segments = [];\n          polygon = [];\n        },\n        polygonEnd: function() {\n          clip.point = point;\n          clip.lineStart = lineStart;\n          clip.lineEnd = lineEnd;\n          segments = d3.merge(segments);\n          var clipStartInside = d3_geo_pointInPolygon(rotatedClipStart, polygon);\n          if (segments.length) {\n            if (!polygonStarted) listener.polygonStart(), polygonStarted = true;\n            d3_geo_clipPolygon(segments, d3_geo_clipSort, clipStartInside, interpolate, listener);\n          } else if (clipStartInside) {\n            if (!polygonStarted) listener.polygonStart(), polygonStarted = true;\n            listener.lineStart();\n            interpolate(null, null, 1, listener);\n            listener.lineEnd();\n          }\n          if (polygonStarted) listener.polygonEnd(), polygonStarted = false;\n          segments = polygon = null;\n        },\n        sphere: function() {\n          listener.polygonStart();\n          listener.lineStart();\n          interpolate(null, null, 1, listener);\n          listener.lineEnd();\n          listener.polygonEnd();\n        }\n      };\n      function point(λ, φ) {\n        var point = rotate(λ, φ);\n        if (pointVisible(λ = point[0], φ = point[1])) listener.point(λ, φ);\n      }\n      function pointLine(λ, φ) {\n        var point = rotate(λ, φ);\n        line.point(point[0], point[1]);\n      }\n      function lineStart() {\n        clip.point = pointLine;\n        line.lineStart();\n      }\n      function lineEnd() {\n        clip.point = point;\n        line.lineEnd();\n      }\n      var segments;\n      var buffer = d3_geo_clipBufferListener(), ringListener = clipLine(buffer), polygonStarted = false, polygon, ring;\n      function pointRing(λ, φ) {\n        ring.push([ λ, φ ]);\n        var point = rotate(λ, φ);\n        ringListener.point(point[0], point[1]);\n      }\n      function ringStart() {\n        ringListener.lineStart();\n        ring = [];\n      }\n      function ringEnd() {\n        pointRing(ring[0][0], ring[0][1]);\n        ringListener.lineEnd();\n        var clean = ringListener.clean(), ringSegments = buffer.buffer(), segment, n = ringSegments.length;\n        ring.pop();\n        polygon.push(ring);\n        ring = null;\n        if (!n) return;\n        if (clean & 1) {\n          segment = ringSegments[0];\n          var n = segment.length - 1, i = -1, point;\n          if (n > 0) {\n            if (!polygonStarted) listener.polygonStart(), polygonStarted = true;\n            listener.lineStart();\n            while (++i < n) listener.point((point = segment[i])[0], point[1]);\n            listener.lineEnd();\n          }\n          return;\n        }\n        if (n > 1 && clean & 2) ringSegments.push(ringSegments.pop().concat(ringSegments.shift()));\n        segments.push(ringSegments.filter(d3_geo_clipSegmentLength1));\n      }\n      return clip;\n    };\n  }\n  function d3_geo_clipSegmentLength1(segment) {\n    return segment.length > 1;\n  }\n  function d3_geo_clipBufferListener() {\n    var lines = [], line;\n    return {\n      lineStart: function() {\n        lines.push(line = []);\n      },\n      point: function(λ, φ) {\n        line.push([ λ, φ ]);\n      },\n      lineEnd: d3_noop,\n      buffer: function() {\n        var buffer = lines;\n        lines = [];\n        line = null;\n        return buffer;\n      },\n      rejoin: function() {\n        if (lines.length > 1) lines.push(lines.pop().concat(lines.shift()));\n      }\n    };\n  }\n  function d3_geo_clipSort(a, b) {\n    return ((a = a.x)[0] < 0 ? a[1] - halfπ - ε : halfπ - a[1]) - ((b = b.x)[0] < 0 ? b[1] - halfπ - ε : halfπ - b[1]);\n  }\n  var d3_geo_clipAntimeridian = d3_geo_clip(d3_true, d3_geo_clipAntimeridianLine, d3_geo_clipAntimeridianInterpolate, [ -π, -π / 2 ]);\n  function d3_geo_clipAntimeridianLine(listener) {\n    var λ0 = NaN, φ0 = NaN, sλ0 = NaN, clean;\n    return {\n      lineStart: function() {\n        listener.lineStart();\n        clean = 1;\n      },\n      point: function(λ1, φ1) {\n        var sλ1 = λ1 > 0 ? π : -π, dλ = abs(λ1 - λ0);\n        if (abs(dλ - π) < ε) {\n          listener.point(λ0, φ0 = (φ0 + φ1) / 2 > 0 ? halfπ : -halfπ);\n          listener.point(sλ0, φ0);\n          listener.lineEnd();\n          listener.lineStart();\n          listener.point(sλ1, φ0);\n          listener.point(λ1, φ0);\n          clean = 0;\n        } else if (sλ0 !== sλ1 && dλ >= π) {\n          if (abs(λ0 - sλ0) < ε) λ0 -= sλ0 * ε;\n          if (abs(λ1 - sλ1) < ε) λ1 -= sλ1 * ε;\n          φ0 = d3_geo_clipAntimeridianIntersect(λ0, φ0, λ1, φ1);\n          listener.point(sλ0, φ0);\n          listener.lineEnd();\n          listener.lineStart();\n          listener.point(sλ1, φ0);\n          clean = 0;\n        }\n        listener.point(λ0 = λ1, φ0 = φ1);\n        sλ0 = sλ1;\n      },\n      lineEnd: function() {\n        listener.lineEnd();\n        λ0 = φ0 = NaN;\n      },\n      clean: function() {\n        return 2 - clean;\n      }\n    };\n  }\n  function d3_geo_clipAntimeridianIntersect(λ0, φ0, λ1, φ1) {\n    var cosφ0, cosφ1, sinλ0_λ1 = Math.sin(λ0 - λ1);\n    return abs(sinλ0_λ1) > ε ? Math.atan((Math.sin(φ0) * (cosφ1 = Math.cos(φ1)) * Math.sin(λ1) - Math.sin(φ1) * (cosφ0 = Math.cos(φ0)) * Math.sin(λ0)) / (cosφ0 * cosφ1 * sinλ0_λ1)) : (φ0 + φ1) / 2;\n  }\n  function d3_geo_clipAntimeridianInterpolate(from, to, direction, listener) {\n    var φ;\n    if (from == null) {\n      φ = direction * halfπ;\n      listener.point(-π, φ);\n      listener.point(0, φ);\n      listener.point(π, φ);\n      listener.point(π, 0);\n      listener.point(π, -φ);\n      listener.point(0, -φ);\n      listener.point(-π, -φ);\n      listener.point(-π, 0);\n      listener.point(-π, φ);\n    } else if (abs(from[0] - to[0]) > ε) {\n      var s = from[0] < to[0] ? π : -π;\n      φ = direction * s / 2;\n      listener.point(-s, φ);\n      listener.point(0, φ);\n      listener.point(s, φ);\n    } else {\n      listener.point(to[0], to[1]);\n    }\n  }\n  function d3_geo_pointInPolygon(point, polygon) {\n    var meridian = point[0], parallel = point[1], meridianNormal = [ Math.sin(meridian), -Math.cos(meridian), 0 ], polarAngle = 0, winding = 0;\n    d3_geo_areaRingSum.reset();\n    for (var i = 0, n = polygon.length; i < n; ++i) {\n      var ring = polygon[i], m = ring.length;\n      if (!m) continue;\n      var point0 = ring[0], λ0 = point0[0], φ0 = point0[1] / 2 + π / 4, sinφ0 = Math.sin(φ0), cosφ0 = Math.cos(φ0), j = 1;\n      while (true) {\n        if (j === m) j = 0;\n        point = ring[j];\n        var λ = point[0], φ = point[1] / 2 + π / 4, sinφ = Math.sin(φ), cosφ = Math.cos(φ), dλ = λ - λ0, sdλ = dλ >= 0 ? 1 : -1, adλ = sdλ * dλ, antimeridian = adλ > π, k = sinφ0 * sinφ;\n        d3_geo_areaRingSum.add(Math.atan2(k * sdλ * Math.sin(adλ), cosφ0 * cosφ + k * Math.cos(adλ)));\n        polarAngle += antimeridian ? dλ + sdλ * τ : dλ;\n        if (antimeridian ^ λ0 >= meridian ^ λ >= meridian) {\n          var arc = d3_geo_cartesianCross(d3_geo_cartesian(point0), d3_geo_cartesian(point));\n          d3_geo_cartesianNormalize(arc);\n          var intersection = d3_geo_cartesianCross(meridianNormal, arc);\n          d3_geo_cartesianNormalize(intersection);\n          var φarc = (antimeridian ^ dλ >= 0 ? -1 : 1) * d3_asin(intersection[2]);\n          if (parallel > φarc || parallel === φarc && (arc[0] || arc[1])) {\n            winding += antimeridian ^ dλ >= 0 ? 1 : -1;\n          }\n        }\n        if (!j++) break;\n        λ0 = λ, sinφ0 = sinφ, cosφ0 = cosφ, point0 = point;\n      }\n    }\n    return (polarAngle < -ε || polarAngle < ε && d3_geo_areaRingSum < -ε) ^ winding & 1;\n  }\n  function d3_geo_clipCircle(radius) {\n    var cr = Math.cos(radius), smallRadius = cr > 0, notHemisphere = abs(cr) > ε, interpolate = d3_geo_circleInterpolate(radius, 6 * d3_radians);\n    return d3_geo_clip(visible, clipLine, interpolate, smallRadius ? [ 0, -radius ] : [ -π, radius - π ]);\n    function visible(λ, φ) {\n      return Math.cos(λ) * Math.cos(φ) > cr;\n    }\n    function clipLine(listener) {\n      var point0, c0, v0, v00, clean;\n      return {\n        lineStart: function() {\n          v00 = v0 = false;\n          clean = 1;\n        },\n        point: function(λ, φ) {\n          var point1 = [ λ, φ ], point2, v = visible(λ, φ), c = smallRadius ? v ? 0 : code(λ, φ) : v ? code(λ + (λ < 0 ? π : -π), φ) : 0;\n          if (!point0 && (v00 = v0 = v)) listener.lineStart();\n          if (v !== v0) {\n            point2 = intersect(point0, point1);\n            if (d3_geo_sphericalEqual(point0, point2) || d3_geo_sphericalEqual(point1, point2)) {\n              point1[0] += ε;\n              point1[1] += ε;\n              v = visible(point1[0], point1[1]);\n            }\n          }\n          if (v !== v0) {\n            clean = 0;\n            if (v) {\n              listener.lineStart();\n              point2 = intersect(point1, point0);\n              listener.point(point2[0], point2[1]);\n            } else {\n              point2 = intersect(point0, point1);\n              listener.point(point2[0], point2[1]);\n              listener.lineEnd();\n            }\n            point0 = point2;\n          } else if (notHemisphere && point0 && smallRadius ^ v) {\n            var t;\n            if (!(c & c0) && (t = intersect(point1, point0, true))) {\n              clean = 0;\n              if (smallRadius) {\n                listener.lineStart();\n                listener.point(t[0][0], t[0][1]);\n                listener.point(t[1][0], t[1][1]);\n                listener.lineEnd();\n              } else {\n                listener.point(t[1][0], t[1][1]);\n                listener.lineEnd();\n                listener.lineStart();\n                listener.point(t[0][0], t[0][1]);\n              }\n            }\n          }\n          if (v && (!point0 || !d3_geo_sphericalEqual(point0, point1))) {\n            listener.point(point1[0], point1[1]);\n          }\n          point0 = point1, v0 = v, c0 = c;\n        },\n        lineEnd: function() {\n          if (v0) listener.lineEnd();\n          point0 = null;\n        },\n        clean: function() {\n          return clean | (v00 && v0) << 1;\n        }\n      };\n    }\n    function intersect(a, b, two) {\n      var pa = d3_geo_cartesian(a), pb = d3_geo_cartesian(b);\n      var n1 = [ 1, 0, 0 ], n2 = d3_geo_cartesianCross(pa, pb), n2n2 = d3_geo_cartesianDot(n2, n2), n1n2 = n2[0], determinant = n2n2 - n1n2 * n1n2;\n      if (!determinant) return !two && a;\n      var c1 = cr * n2n2 / determinant, c2 = -cr * n1n2 / determinant, n1xn2 = d3_geo_cartesianCross(n1, n2), A = d3_geo_cartesianScale(n1, c1), B = d3_geo_cartesianScale(n2, c2);\n      d3_geo_cartesianAdd(A, B);\n      var u = n1xn2, w = d3_geo_cartesianDot(A, u), uu = d3_geo_cartesianDot(u, u), t2 = w * w - uu * (d3_geo_cartesianDot(A, A) - 1);\n      if (t2 < 0) return;\n      var t = Math.sqrt(t2), q = d3_geo_cartesianScale(u, (-w - t) / uu);\n      d3_geo_cartesianAdd(q, A);\n      q = d3_geo_spherical(q);\n      if (!two) return q;\n      var λ0 = a[0], λ1 = b[0], φ0 = a[1], φ1 = b[1], z;\n      if (λ1 < λ0) z = λ0, λ0 = λ1, λ1 = z;\n      var δλ = λ1 - λ0, polar = abs(δλ - π) < ε, meridian = polar || δλ < ε;\n      if (!polar && φ1 < φ0) z = φ0, φ0 = φ1, φ1 = z;\n      if (meridian ? polar ? φ0 + φ1 > 0 ^ q[1] < (abs(q[0] - λ0) < ε ? φ0 : φ1) : φ0 <= q[1] && q[1] <= φ1 : δλ > π ^ (λ0 <= q[0] && q[0] <= λ1)) {\n        var q1 = d3_geo_cartesianScale(u, (-w + t) / uu);\n        d3_geo_cartesianAdd(q1, A);\n        return [ q, d3_geo_spherical(q1) ];\n      }\n    }\n    function code(λ, φ) {\n      var r = smallRadius ? radius : π - radius, code = 0;\n      if (λ < -r) code |= 1; else if (λ > r) code |= 2;\n      if (φ < -r) code |= 4; else if (φ > r) code |= 8;\n      return code;\n    }\n  }\n  function d3_geom_clipLine(x0, y0, x1, y1) {\n    return function(line) {\n      var a = line.a, b = line.b, ax = a.x, ay = a.y, bx = b.x, by = b.y, t0 = 0, t1 = 1, dx = bx - ax, dy = by - ay, r;\n      r = x0 - ax;\n      if (!dx && r > 0) return;\n      r /= dx;\n      if (dx < 0) {\n        if (r < t0) return;\n        if (r < t1) t1 = r;\n      } else if (dx > 0) {\n        if (r > t1) return;\n        if (r > t0) t0 = r;\n      }\n      r = x1 - ax;\n      if (!dx && r < 0) return;\n      r /= dx;\n      if (dx < 0) {\n        if (r > t1) return;\n        if (r > t0) t0 = r;\n      } else if (dx > 0) {\n        if (r < t0) return;\n        if (r < t1) t1 = r;\n      }\n      r = y0 - ay;\n      if (!dy && r > 0) return;\n      r /= dy;\n      if (dy < 0) {\n        if (r < t0) return;\n        if (r < t1) t1 = r;\n      } else if (dy > 0) {\n        if (r > t1) return;\n        if (r > t0) t0 = r;\n      }\n      r = y1 - ay;\n      if (!dy && r < 0) return;\n      r /= dy;\n      if (dy < 0) {\n        if (r > t1) return;\n        if (r > t0) t0 = r;\n      } else if (dy > 0) {\n        if (r < t0) return;\n        if (r < t1) t1 = r;\n      }\n      if (t0 > 0) line.a = {\n        x: ax + t0 * dx,\n        y: ay + t0 * dy\n      };\n      if (t1 < 1) line.b = {\n        x: ax + t1 * dx,\n        y: ay + t1 * dy\n      };\n      return line;\n    };\n  }\n  var d3_geo_clipExtentMAX = 1e9;\n  d3.geo.clipExtent = function() {\n    var x0, y0, x1, y1, stream, clip, clipExtent = {\n      stream: function(output) {\n        if (stream) stream.valid = false;\n        stream = clip(output);\n        stream.valid = true;\n        return stream;\n      },\n      extent: function(_) {\n        if (!arguments.length) return [ [ x0, y0 ], [ x1, y1 ] ];\n        clip = d3_geo_clipExtent(x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1]);\n        if (stream) stream.valid = false, stream = null;\n        return clipExtent;\n      }\n    };\n    return clipExtent.extent([ [ 0, 0 ], [ 960, 500 ] ]);\n  };\n  function d3_geo_clipExtent(x0, y0, x1, y1) {\n    return function(listener) {\n      var listener_ = listener, bufferListener = d3_geo_clipBufferListener(), clipLine = d3_geom_clipLine(x0, y0, x1, y1), segments, polygon, ring;\n      var clip = {\n        point: point,\n        lineStart: lineStart,\n        lineEnd: lineEnd,\n        polygonStart: function() {\n          listener = bufferListener;\n          segments = [];\n          polygon = [];\n          clean = true;\n        },\n        polygonEnd: function() {\n          listener = listener_;\n          segments = d3.merge(segments);\n          var clipStartInside = insidePolygon([ x0, y1 ]), inside = clean && clipStartInside, visible = segments.length;\n          if (inside || visible) {\n            listener.polygonStart();\n            if (inside) {\n              listener.lineStart();\n              interpolate(null, null, 1, listener);\n              listener.lineEnd();\n            }\n            if (visible) {\n              d3_geo_clipPolygon(segments, compare, clipStartInside, interpolate, listener);\n            }\n            listener.polygonEnd();\n          }\n          segments = polygon = ring = null;\n        }\n      };\n      function insidePolygon(p) {\n        var wn = 0, n = polygon.length, y = p[1];\n        for (var i = 0; i < n; ++i) {\n          for (var j = 1, v = polygon[i], m = v.length, a = v[0], b; j < m; ++j) {\n            b = v[j];\n            if (a[1] <= y) {\n              if (b[1] > y && d3_cross2d(a, b, p) > 0) ++wn;\n            } else {\n              if (b[1] <= y && d3_cross2d(a, b, p) < 0) --wn;\n            }\n            a = b;\n          }\n        }\n        return wn !== 0;\n      }\n      function interpolate(from, to, direction, listener) {\n        var a = 0, a1 = 0;\n        if (from == null || (a = corner(from, direction)) !== (a1 = corner(to, direction)) || comparePoints(from, to) < 0 ^ direction > 0) {\n          do {\n            listener.point(a === 0 || a === 3 ? x0 : x1, a > 1 ? y1 : y0);\n          } while ((a = (a + direction + 4) % 4) !== a1);\n        } else {\n          listener.point(to[0], to[1]);\n        }\n      }\n      function pointVisible(x, y) {\n        return x0 <= x && x <= x1 && y0 <= y && y <= y1;\n      }\n      function point(x, y) {\n        if (pointVisible(x, y)) listener.point(x, y);\n      }\n      var x__, y__, v__, x_, y_, v_, first, clean;\n      function lineStart() {\n        clip.point = linePoint;\n        if (polygon) polygon.push(ring = []);\n        first = true;\n        v_ = false;\n        x_ = y_ = NaN;\n      }\n      function lineEnd() {\n        if (segments) {\n          linePoint(x__, y__);\n          if (v__ && v_) bufferListener.rejoin();\n          segments.push(bufferListener.buffer());\n        }\n        clip.point = point;\n        if (v_) listener.lineEnd();\n      }\n      function linePoint(x, y) {\n        x = Math.max(-d3_geo_clipExtentMAX, Math.min(d3_geo_clipExtentMAX, x));\n        y = Math.max(-d3_geo_clipExtentMAX, Math.min(d3_geo_clipExtentMAX, y));\n        var v = pointVisible(x, y);\n        if (polygon) ring.push([ x, y ]);\n        if (first) {\n          x__ = x, y__ = y, v__ = v;\n          first = false;\n          if (v) {\n            listener.lineStart();\n            listener.point(x, y);\n          }\n        } else {\n          if (v && v_) listener.point(x, y); else {\n            var l = {\n              a: {\n                x: x_,\n                y: y_\n              },\n              b: {\n                x: x,\n                y: y\n              }\n            };\n            if (clipLine(l)) {\n              if (!v_) {\n                listener.lineStart();\n                listener.point(l.a.x, l.a.y);\n              }\n              listener.point(l.b.x, l.b.y);\n              if (!v) listener.lineEnd();\n              clean = false;\n            } else if (v) {\n              listener.lineStart();\n              listener.point(x, y);\n              clean = false;\n            }\n          }\n        }\n        x_ = x, y_ = y, v_ = v;\n      }\n      return clip;\n    };\n    function corner(p, direction) {\n      return abs(p[0] - x0) < ε ? direction > 0 ? 0 : 3 : abs(p[0] - x1) < ε ? direction > 0 ? 2 : 1 : abs(p[1] - y0) < ε ? direction > 0 ? 1 : 0 : direction > 0 ? 3 : 2;\n    }\n    function compare(a, b) {\n      return comparePoints(a.x, b.x);\n    }\n    function comparePoints(a, b) {\n      var ca = corner(a, 1), cb = corner(b, 1);\n      return ca !== cb ? ca - cb : ca === 0 ? b[1] - a[1] : ca === 1 ? a[0] - b[0] : ca === 2 ? a[1] - b[1] : b[0] - a[0];\n    }\n  }\n  function d3_geo_conic(projectAt) {\n    var φ0 = 0, φ1 = π / 3, m = d3_geo_projectionMutator(projectAt), p = m(φ0, φ1);\n    p.parallels = function(_) {\n      if (!arguments.length) return [ φ0 / π * 180, φ1 / π * 180 ];\n      return m(φ0 = _[0] * π / 180, φ1 = _[1] * π / 180);\n    };\n    return p;\n  }\n  function d3_geo_conicEqualArea(φ0, φ1) {\n    var sinφ0 = Math.sin(φ0), n = (sinφ0 + Math.sin(φ1)) / 2, C = 1 + sinφ0 * (2 * n - sinφ0), ρ0 = Math.sqrt(C) / n;\n    function forward(λ, φ) {\n      var ρ = Math.sqrt(C - 2 * n * Math.sin(φ)) / n;\n      return [ ρ * Math.sin(λ *= n), ρ0 - ρ * Math.cos(λ) ];\n    }\n    forward.invert = function(x, y) {\n      var ρ0_y = ρ0 - y;\n      return [ Math.atan2(x, ρ0_y) / n, d3_asin((C - (x * x + ρ0_y * ρ0_y) * n * n) / (2 * n)) ];\n    };\n    return forward;\n  }\n  (d3.geo.conicEqualArea = function() {\n    return d3_geo_conic(d3_geo_conicEqualArea);\n  }).raw = d3_geo_conicEqualArea;\n  d3.geo.albers = function() {\n    return d3.geo.conicEqualArea().rotate([ 96, 0 ]).center([ -.6, 38.7 ]).parallels([ 29.5, 45.5 ]).scale(1070);\n  };\n  d3.geo.albersUsa = function() {\n    var lower48 = d3.geo.albers();\n    var alaska = d3.geo.conicEqualArea().rotate([ 154, 0 ]).center([ -2, 58.5 ]).parallels([ 55, 65 ]);\n    var hawaii = d3.geo.conicEqualArea().rotate([ 157, 0 ]).center([ -3, 19.9 ]).parallels([ 8, 18 ]);\n    var point, pointStream = {\n      point: function(x, y) {\n        point = [ x, y ];\n      }\n    }, lower48Point, alaskaPoint, hawaiiPoint;\n    function albersUsa(coordinates) {\n      var x = coordinates[0], y = coordinates[1];\n      point = null;\n      (lower48Point(x, y), point) || (alaskaPoint(x, y), point) || hawaiiPoint(x, y);\n      return point;\n    }\n    albersUsa.invert = function(coordinates) {\n      var k = lower48.scale(), t = lower48.translate(), x = (coordinates[0] - t[0]) / k, y = (coordinates[1] - t[1]) / k;\n      return (y >= .12 && y < .234 && x >= -.425 && x < -.214 ? alaska : y >= .166 && y < .234 && x >= -.214 && x < -.115 ? hawaii : lower48).invert(coordinates);\n    };\n    albersUsa.stream = function(stream) {\n      var lower48Stream = lower48.stream(stream), alaskaStream = alaska.stream(stream), hawaiiStream = hawaii.stream(stream);\n      return {\n        point: function(x, y) {\n          lower48Stream.point(x, y);\n          alaskaStream.point(x, y);\n          hawaiiStream.point(x, y);\n        },\n        sphere: function() {\n          lower48Stream.sphere();\n          alaskaStream.sphere();\n          hawaiiStream.sphere();\n        },\n        lineStart: function() {\n          lower48Stream.lineStart();\n          alaskaStream.lineStart();\n          hawaiiStream.lineStart();\n        },\n        lineEnd: function() {\n          lower48Stream.lineEnd();\n          alaskaStream.lineEnd();\n          hawaiiStream.lineEnd();\n        },\n        polygonStart: function() {\n          lower48Stream.polygonStart();\n          alaskaStream.polygonStart();\n          hawaiiStream.polygonStart();\n        },\n        polygonEnd: function() {\n          lower48Stream.polygonEnd();\n          alaskaStream.polygonEnd();\n          hawaiiStream.polygonEnd();\n        }\n      };\n    };\n    albersUsa.precision = function(_) {\n      if (!arguments.length) return lower48.precision();\n      lower48.precision(_);\n      alaska.precision(_);\n      hawaii.precision(_);\n      return albersUsa;\n    };\n    albersUsa.scale = function(_) {\n      if (!arguments.length) return lower48.scale();\n      lower48.scale(_);\n      alaska.scale(_ * .35);\n      hawaii.scale(_);\n      return albersUsa.translate(lower48.translate());\n    };\n    albersUsa.translate = function(_) {\n      if (!arguments.length) return lower48.translate();\n      var k = lower48.scale(), x = +_[0], y = +_[1];\n      lower48Point = lower48.translate(_).clipExtent([ [ x - .455 * k, y - .238 * k ], [ x + .455 * k, y + .238 * k ] ]).stream(pointStream).point;\n      alaskaPoint = alaska.translate([ x - .307 * k, y + .201 * k ]).clipExtent([ [ x - .425 * k + ε, y + .12 * k + ε ], [ x - .214 * k - ε, y + .234 * k - ε ] ]).stream(pointStream).point;\n      hawaiiPoint = hawaii.translate([ x - .205 * k, y + .212 * k ]).clipExtent([ [ x - .214 * k + ε, y + .166 * k + ε ], [ x - .115 * k - ε, y + .234 * k - ε ] ]).stream(pointStream).point;\n      return albersUsa;\n    };\n    return albersUsa.scale(1070);\n  };\n  var d3_geo_pathAreaSum, d3_geo_pathAreaPolygon, d3_geo_pathArea = {\n    point: d3_noop,\n    lineStart: d3_noop,\n    lineEnd: d3_noop,\n    polygonStart: function() {\n      d3_geo_pathAreaPolygon = 0;\n      d3_geo_pathArea.lineStart = d3_geo_pathAreaRingStart;\n    },\n    polygonEnd: function() {\n      d3_geo_pathArea.lineStart = d3_geo_pathArea.lineEnd = d3_geo_pathArea.point = d3_noop;\n      d3_geo_pathAreaSum += abs(d3_geo_pathAreaPolygon / 2);\n    }\n  };\n  function d3_geo_pathAreaRingStart() {\n    var x00, y00, x0, y0;\n    d3_geo_pathArea.point = function(x, y) {\n      d3_geo_pathArea.point = nextPoint;\n      x00 = x0 = x, y00 = y0 = y;\n    };\n    function nextPoint(x, y) {\n      d3_geo_pathAreaPolygon += y0 * x - x0 * y;\n      x0 = x, y0 = y;\n    }\n    d3_geo_pathArea.lineEnd = function() {\n      nextPoint(x00, y00);\n    };\n  }\n  var d3_geo_pathBoundsX0, d3_geo_pathBoundsY0, d3_geo_pathBoundsX1, d3_geo_pathBoundsY1;\n  var d3_geo_pathBounds = {\n    point: d3_geo_pathBoundsPoint,\n    lineStart: d3_noop,\n    lineEnd: d3_noop,\n    polygonStart: d3_noop,\n    polygonEnd: d3_noop\n  };\n  function d3_geo_pathBoundsPoint(x, y) {\n    if (x < d3_geo_pathBoundsX0) d3_geo_pathBoundsX0 = x;\n    if (x > d3_geo_pathBoundsX1) d3_geo_pathBoundsX1 = x;\n    if (y < d3_geo_pathBoundsY0) d3_geo_pathBoundsY0 = y;\n    if (y > d3_geo_pathBoundsY1) d3_geo_pathBoundsY1 = y;\n  }\n  function d3_geo_pathBuffer() {\n    var pointCircle = d3_geo_pathBufferCircle(4.5), buffer = [];\n    var stream = {\n      point: point,\n      lineStart: function() {\n        stream.point = pointLineStart;\n      },\n      lineEnd: lineEnd,\n      polygonStart: function() {\n        stream.lineEnd = lineEndPolygon;\n      },\n      polygonEnd: function() {\n        stream.lineEnd = lineEnd;\n        stream.point = point;\n      },\n      pointRadius: function(_) {\n        pointCircle = d3_geo_pathBufferCircle(_);\n        return stream;\n      },\n      result: function() {\n        if (buffer.length) {\n          var result = buffer.join(\"\");\n          buffer = [];\n          return result;\n        }\n      }\n    };\n    function point(x, y) {\n      buffer.push(\"M\", x, \",\", y, pointCircle);\n    }\n    function pointLineStart(x, y) {\n      buffer.push(\"M\", x, \",\", y);\n      stream.point = pointLine;\n    }\n    function pointLine(x, y) {\n      buffer.push(\"L\", x, \",\", y);\n    }\n    function lineEnd() {\n      stream.point = point;\n    }\n    function lineEndPolygon() {\n      buffer.push(\"Z\");\n    }\n    return stream;\n  }\n  function d3_geo_pathBufferCircle(radius) {\n    return \"m0,\" + radius + \"a\" + radius + \",\" + radius + \" 0 1,1 0,\" + -2 * radius + \"a\" + radius + \",\" + radius + \" 0 1,1 0,\" + 2 * radius + \"z\";\n  }\n  var d3_geo_pathCentroid = {\n    point: d3_geo_pathCentroidPoint,\n    lineStart: d3_geo_pathCentroidLineStart,\n    lineEnd: d3_geo_pathCentroidLineEnd,\n    polygonStart: function() {\n      d3_geo_pathCentroid.lineStart = d3_geo_pathCentroidRingStart;\n    },\n    polygonEnd: function() {\n      d3_geo_pathCentroid.point = d3_geo_pathCentroidPoint;\n      d3_geo_pathCentroid.lineStart = d3_geo_pathCentroidLineStart;\n      d3_geo_pathCentroid.lineEnd = d3_geo_pathCentroidLineEnd;\n    }\n  };\n  function d3_geo_pathCentroidPoint(x, y) {\n    d3_geo_centroidX0 += x;\n    d3_geo_centroidY0 += y;\n    ++d3_geo_centroidZ0;\n  }\n  function d3_geo_pathCentroidLineStart() {\n    var x0, y0;\n    d3_geo_pathCentroid.point = function(x, y) {\n      d3_geo_pathCentroid.point = nextPoint;\n      d3_geo_pathCentroidPoint(x0 = x, y0 = y);\n    };\n    function nextPoint(x, y) {\n      var dx = x - x0, dy = y - y0, z = Math.sqrt(dx * dx + dy * dy);\n      d3_geo_centroidX1 += z * (x0 + x) / 2;\n      d3_geo_centroidY1 += z * (y0 + y) / 2;\n      d3_geo_centroidZ1 += z;\n      d3_geo_pathCentroidPoint(x0 = x, y0 = y);\n    }\n  }\n  function d3_geo_pathCentroidLineEnd() {\n    d3_geo_pathCentroid.point = d3_geo_pathCentroidPoint;\n  }\n  function d3_geo_pathCentroidRingStart() {\n    var x00, y00, x0, y0;\n    d3_geo_pathCentroid.point = function(x, y) {\n      d3_geo_pathCentroid.point = nextPoint;\n      d3_geo_pathCentroidPoint(x00 = x0 = x, y00 = y0 = y);\n    };\n    function nextPoint(x, y) {\n      var dx = x - x0, dy = y - y0, z = Math.sqrt(dx * dx + dy * dy);\n      d3_geo_centroidX1 += z * (x0 + x) / 2;\n      d3_geo_centroidY1 += z * (y0 + y) / 2;\n      d3_geo_centroidZ1 += z;\n      z = y0 * x - x0 * y;\n      d3_geo_centroidX2 += z * (x0 + x);\n      d3_geo_centroidY2 += z * (y0 + y);\n      d3_geo_centroidZ2 += z * 3;\n      d3_geo_pathCentroidPoint(x0 = x, y0 = y);\n    }\n    d3_geo_pathCentroid.lineEnd = function() {\n      nextPoint(x00, y00);\n    };\n  }\n  function d3_geo_pathContext(context) {\n    var pointRadius = 4.5;\n    var stream = {\n      point: point,\n      lineStart: function() {\n        stream.point = pointLineStart;\n      },\n      lineEnd: lineEnd,\n      polygonStart: function() {\n        stream.lineEnd = lineEndPolygon;\n      },\n      polygonEnd: function() {\n        stream.lineEnd = lineEnd;\n        stream.point = point;\n      },\n      pointRadius: function(_) {\n        pointRadius = _;\n        return stream;\n      },\n      result: d3_noop\n    };\n    function point(x, y) {\n      context.moveTo(x + pointRadius, y);\n      context.arc(x, y, pointRadius, 0, τ);\n    }\n    function pointLineStart(x, y) {\n      context.moveTo(x, y);\n      stream.point = pointLine;\n    }\n    function pointLine(x, y) {\n      context.lineTo(x, y);\n    }\n    function lineEnd() {\n      stream.point = point;\n    }\n    function lineEndPolygon() {\n      context.closePath();\n    }\n    return stream;\n  }\n  function d3_geo_resample(project) {\n    var δ2 = .5, cosMinDistance = Math.cos(30 * d3_radians), maxDepth = 16;\n    function resample(stream) {\n      return (maxDepth ? resampleRecursive : resampleNone)(stream);\n    }\n    function resampleNone(stream) {\n      return d3_geo_transformPoint(stream, function(x, y) {\n        x = project(x, y);\n        stream.point(x[0], x[1]);\n      });\n    }\n    function resampleRecursive(stream) {\n      var λ00, φ00, x00, y00, a00, b00, c00, λ0, x0, y0, a0, b0, c0;\n      var resample = {\n        point: point,\n        lineStart: lineStart,\n        lineEnd: lineEnd,\n        polygonStart: function() {\n          stream.polygonStart();\n          resample.lineStart = ringStart;\n        },\n        polygonEnd: function() {\n          stream.polygonEnd();\n          resample.lineStart = lineStart;\n        }\n      };\n      function point(x, y) {\n        x = project(x, y);\n        stream.point(x[0], x[1]);\n      }\n      function lineStart() {\n        x0 = NaN;\n        resample.point = linePoint;\n        stream.lineStart();\n      }\n      function linePoint(λ, φ) {\n        var c = d3_geo_cartesian([ λ, φ ]), p = project(λ, φ);\n        resampleLineTo(x0, y0, λ0, a0, b0, c0, x0 = p[0], y0 = p[1], λ0 = λ, a0 = c[0], b0 = c[1], c0 = c[2], maxDepth, stream);\n        stream.point(x0, y0);\n      }\n      function lineEnd() {\n        resample.point = point;\n        stream.lineEnd();\n      }\n      function ringStart() {\n        lineStart();\n        resample.point = ringPoint;\n        resample.lineEnd = ringEnd;\n      }\n      function ringPoint(λ, φ) {\n        linePoint(λ00 = λ, φ00 = φ), x00 = x0, y00 = y0, a00 = a0, b00 = b0, c00 = c0;\n        resample.point = linePoint;\n      }\n      function ringEnd() {\n        resampleLineTo(x0, y0, λ0, a0, b0, c0, x00, y00, λ00, a00, b00, c00, maxDepth, stream);\n        resample.lineEnd = lineEnd;\n        lineEnd();\n      }\n      return resample;\n    }\n    function resampleLineTo(x0, y0, λ0, a0, b0, c0, x1, y1, λ1, a1, b1, c1, depth, stream) {\n      var dx = x1 - x0, dy = y1 - y0, d2 = dx * dx + dy * dy;\n      if (d2 > 4 * δ2 && depth--) {\n        var a = a0 + a1, b = b0 + b1, c = c0 + c1, m = Math.sqrt(a * a + b * b + c * c), φ2 = Math.asin(c /= m), λ2 = abs(abs(c) - 1) < ε || abs(λ0 - λ1) < ε ? (λ0 + λ1) / 2 : Math.atan2(b, a), p = project(λ2, φ2), x2 = p[0], y2 = p[1], dx2 = x2 - x0, dy2 = y2 - y0, dz = dy * dx2 - dx * dy2;\n        if (dz * dz / d2 > δ2 || abs((dx * dx2 + dy * dy2) / d2 - .5) > .3 || a0 * a1 + b0 * b1 + c0 * c1 < cosMinDistance) {\n          resampleLineTo(x0, y0, λ0, a0, b0, c0, x2, y2, λ2, a /= m, b /= m, c, depth, stream);\n          stream.point(x2, y2);\n          resampleLineTo(x2, y2, λ2, a, b, c, x1, y1, λ1, a1, b1, c1, depth, stream);\n        }\n      }\n    }\n    resample.precision = function(_) {\n      if (!arguments.length) return Math.sqrt(δ2);\n      maxDepth = (δ2 = _ * _) > 0 && 16;\n      return resample;\n    };\n    return resample;\n  }\n  d3.geo.path = function() {\n    var pointRadius = 4.5, projection, context, projectStream, contextStream, cacheStream;\n    function path(object) {\n      if (object) {\n        if (typeof pointRadius === \"function\") contextStream.pointRadius(+pointRadius.apply(this, arguments));\n        if (!cacheStream || !cacheStream.valid) cacheStream = projectStream(contextStream);\n        d3.geo.stream(object, cacheStream);\n      }\n      return contextStream.result();\n    }\n    path.area = function(object) {\n      d3_geo_pathAreaSum = 0;\n      d3.geo.stream(object, projectStream(d3_geo_pathArea));\n      return d3_geo_pathAreaSum;\n    };\n    path.centroid = function(object) {\n      d3_geo_centroidX0 = d3_geo_centroidY0 = d3_geo_centroidZ0 = d3_geo_centroidX1 = d3_geo_centroidY1 = d3_geo_centroidZ1 = d3_geo_centroidX2 = d3_geo_centroidY2 = d3_geo_centroidZ2 = 0;\n      d3.geo.stream(object, projectStream(d3_geo_pathCentroid));\n      return d3_geo_centroidZ2 ? [ d3_geo_centroidX2 / d3_geo_centroidZ2, d3_geo_centroidY2 / d3_geo_centroidZ2 ] : d3_geo_centroidZ1 ? [ d3_geo_centroidX1 / d3_geo_centroidZ1, d3_geo_centroidY1 / d3_geo_centroidZ1 ] : d3_geo_centroidZ0 ? [ d3_geo_centroidX0 / d3_geo_centroidZ0, d3_geo_centroidY0 / d3_geo_centroidZ0 ] : [ NaN, NaN ];\n    };\n    path.bounds = function(object) {\n      d3_geo_pathBoundsX1 = d3_geo_pathBoundsY1 = -(d3_geo_pathBoundsX0 = d3_geo_pathBoundsY0 = Infinity);\n      d3.geo.stream(object, projectStream(d3_geo_pathBounds));\n      return [ [ d3_geo_pathBoundsX0, d3_geo_pathBoundsY0 ], [ d3_geo_pathBoundsX1, d3_geo_pathBoundsY1 ] ];\n    };\n    path.projection = function(_) {\n      if (!arguments.length) return projection;\n      projectStream = (projection = _) ? _.stream || d3_geo_pathProjectStream(_) : d3_identity;\n      return reset();\n    };\n    path.context = function(_) {\n      if (!arguments.length) return context;\n      contextStream = (context = _) == null ? new d3_geo_pathBuffer() : new d3_geo_pathContext(_);\n      if (typeof pointRadius !== \"function\") contextStream.pointRadius(pointRadius);\n      return reset();\n    };\n    path.pointRadius = function(_) {\n      if (!arguments.length) return pointRadius;\n      pointRadius = typeof _ === \"function\" ? _ : (contextStream.pointRadius(+_), +_);\n      return path;\n    };\n    function reset() {\n      cacheStream = null;\n      return path;\n    }\n    return path.projection(d3.geo.albersUsa()).context(null);\n  };\n  function d3_geo_pathProjectStream(project) {\n    var resample = d3_geo_resample(function(x, y) {\n      return project([ x * d3_degrees, y * d3_degrees ]);\n    });\n    return function(stream) {\n      return d3_geo_projectionRadians(resample(stream));\n    };\n  }\n  d3.geo.transform = function(methods) {\n    return {\n      stream: function(stream) {\n        var transform = new d3_geo_transform(stream);\n        for (var k in methods) transform[k] = methods[k];\n        return transform;\n      }\n    };\n  };\n  function d3_geo_transform(stream) {\n    this.stream = stream;\n  }\n  d3_geo_transform.prototype = {\n    point: function(x, y) {\n      this.stream.point(x, y);\n    },\n    sphere: function() {\n      this.stream.sphere();\n    },\n    lineStart: function() {\n      this.stream.lineStart();\n    },\n    lineEnd: function() {\n      this.stream.lineEnd();\n    },\n    polygonStart: function() {\n      this.stream.polygonStart();\n    },\n    polygonEnd: function() {\n      this.stream.polygonEnd();\n    }\n  };\n  function d3_geo_transformPoint(stream, point) {\n    return {\n      point: point,\n      sphere: function() {\n        stream.sphere();\n      },\n      lineStart: function() {\n        stream.lineStart();\n      },\n      lineEnd: function() {\n        stream.lineEnd();\n      },\n      polygonStart: function() {\n        stream.polygonStart();\n      },\n      polygonEnd: function() {\n        stream.polygonEnd();\n      }\n    };\n  }\n  d3.geo.projection = d3_geo_projection;\n  d3.geo.projectionMutator = d3_geo_projectionMutator;\n  function d3_geo_projection(project) {\n    return d3_geo_projectionMutator(function() {\n      return project;\n    })();\n  }\n  function d3_geo_projectionMutator(projectAt) {\n    var project, rotate, projectRotate, projectResample = d3_geo_resample(function(x, y) {\n      x = project(x, y);\n      return [ x[0] * k + δx, δy - x[1] * k ];\n    }), k = 150, x = 480, y = 250, λ = 0, φ = 0, δλ = 0, δφ = 0, δγ = 0, δx, δy, preclip = d3_geo_clipAntimeridian, postclip = d3_identity, clipAngle = null, clipExtent = null, stream;\n    function projection(point) {\n      point = projectRotate(point[0] * d3_radians, point[1] * d3_radians);\n      return [ point[0] * k + δx, δy - point[1] * k ];\n    }\n    function invert(point) {\n      point = projectRotate.invert((point[0] - δx) / k, (δy - point[1]) / k);\n      return point && [ point[0] * d3_degrees, point[1] * d3_degrees ];\n    }\n    projection.stream = function(output) {\n      if (stream) stream.valid = false;\n      stream = d3_geo_projectionRadians(preclip(rotate, projectResample(postclip(output))));\n      stream.valid = true;\n      return stream;\n    };\n    projection.clipAngle = function(_) {\n      if (!arguments.length) return clipAngle;\n      preclip = _ == null ? (clipAngle = _, d3_geo_clipAntimeridian) : d3_geo_clipCircle((clipAngle = +_) * d3_radians);\n      return invalidate();\n    };\n    projection.clipExtent = function(_) {\n      if (!arguments.length) return clipExtent;\n      clipExtent = _;\n      postclip = _ ? d3_geo_clipExtent(_[0][0], _[0][1], _[1][0], _[1][1]) : d3_identity;\n      return invalidate();\n    };\n    projection.scale = function(_) {\n      if (!arguments.length) return k;\n      k = +_;\n      return reset();\n    };\n    projection.translate = function(_) {\n      if (!arguments.length) return [ x, y ];\n      x = +_[0];\n      y = +_[1];\n      return reset();\n    };\n    projection.center = function(_) {\n      if (!arguments.length) return [ λ * d3_degrees, φ * d3_degrees ];\n      λ = _[0] % 360 * d3_radians;\n      φ = _[1] % 360 * d3_radians;\n      return reset();\n    };\n    projection.rotate = function(_) {\n      if (!arguments.length) return [ δλ * d3_degrees, δφ * d3_degrees, δγ * d3_degrees ];\n      δλ = _[0] % 360 * d3_radians;\n      δφ = _[1] % 360 * d3_radians;\n      δγ = _.length > 2 ? _[2] % 360 * d3_radians : 0;\n      return reset();\n    };\n    d3.rebind(projection, projectResample, \"precision\");\n    function reset() {\n      projectRotate = d3_geo_compose(rotate = d3_geo_rotation(δλ, δφ, δγ), project);\n      var center = project(λ, φ);\n      δx = x - center[0] * k;\n      δy = y + center[1] * k;\n      return invalidate();\n    }\n    function invalidate() {\n      if (stream) stream.valid = false, stream = null;\n      return projection;\n    }\n    return function() {\n      project = projectAt.apply(this, arguments);\n      projection.invert = project.invert && invert;\n      return reset();\n    };\n  }\n  function d3_geo_projectionRadians(stream) {\n    return d3_geo_transformPoint(stream, function(x, y) {\n      stream.point(x * d3_radians, y * d3_radians);\n    });\n  }\n  function d3_geo_equirectangular(λ, φ) {\n    return [ λ, φ ];\n  }\n  (d3.geo.equirectangular = function() {\n    return d3_geo_projection(d3_geo_equirectangular);\n  }).raw = d3_geo_equirectangular.invert = d3_geo_equirectangular;\n  d3.geo.rotation = function(rotate) {\n    rotate = d3_geo_rotation(rotate[0] % 360 * d3_radians, rotate[1] * d3_radians, rotate.length > 2 ? rotate[2] * d3_radians : 0);\n    function forward(coordinates) {\n      coordinates = rotate(coordinates[0] * d3_radians, coordinates[1] * d3_radians);\n      return coordinates[0] *= d3_degrees, coordinates[1] *= d3_degrees, coordinates;\n    }\n    forward.invert = function(coordinates) {\n      coordinates = rotate.invert(coordinates[0] * d3_radians, coordinates[1] * d3_radians);\n      return coordinates[0] *= d3_degrees, coordinates[1] *= d3_degrees, coordinates;\n    };\n    return forward;\n  };\n  function d3_geo_identityRotation(λ, φ) {\n    return [ λ > π ? λ - τ : λ < -π ? λ + τ : λ, φ ];\n  }\n  d3_geo_identityRotation.invert = d3_geo_equirectangular;\n  function d3_geo_rotation(δλ, δφ, δγ) {\n    return δλ ? δφ || δγ ? d3_geo_compose(d3_geo_rotationλ(δλ), d3_geo_rotationφγ(δφ, δγ)) : d3_geo_rotationλ(δλ) : δφ || δγ ? d3_geo_rotationφγ(δφ, δγ) : d3_geo_identityRotation;\n  }\n  function d3_geo_forwardRotationλ(δλ) {\n    return function(λ, φ) {\n      return λ += δλ, [ λ > π ? λ - τ : λ < -π ? λ + τ : λ, φ ];\n    };\n  }\n  function d3_geo_rotationλ(δλ) {\n    var rotation = d3_geo_forwardRotationλ(δλ);\n    rotation.invert = d3_geo_forwardRotationλ(-δλ);\n    return rotation;\n  }\n  function d3_geo_rotationφγ(δφ, δγ) {\n    var cosδφ = Math.cos(δφ), sinδφ = Math.sin(δφ), cosδγ = Math.cos(δγ), sinδγ = Math.sin(δγ);\n    function rotation(λ, φ) {\n      var cosφ = Math.cos(φ), x = Math.cos(λ) * cosφ, y = Math.sin(λ) * cosφ, z = Math.sin(φ), k = z * cosδφ + x * sinδφ;\n      return [ Math.atan2(y * cosδγ - k * sinδγ, x * cosδφ - z * sinδφ), d3_asin(k * cosδγ + y * sinδγ) ];\n    }\n    rotation.invert = function(λ, φ) {\n      var cosφ = Math.cos(φ), x = Math.cos(λ) * cosφ, y = Math.sin(λ) * cosφ, z = Math.sin(φ), k = z * cosδγ - y * sinδγ;\n      return [ Math.atan2(y * cosδγ + z * sinδγ, x * cosδφ + k * sinδφ), d3_asin(k * cosδφ - x * sinδφ) ];\n    };\n    return rotation;\n  }\n  d3.geo.circle = function() {\n    var origin = [ 0, 0 ], angle, precision = 6, interpolate;\n    function circle() {\n      var center = typeof origin === \"function\" ? origin.apply(this, arguments) : origin, rotate = d3_geo_rotation(-center[0] * d3_radians, -center[1] * d3_radians, 0).invert, ring = [];\n      interpolate(null, null, 1, {\n        point: function(x, y) {\n          ring.push(x = rotate(x, y));\n          x[0] *= d3_degrees, x[1] *= d3_degrees;\n        }\n      });\n      return {\n        type: \"Polygon\",\n        coordinates: [ ring ]\n      };\n    }\n    circle.origin = function(x) {\n      if (!arguments.length) return origin;\n      origin = x;\n      return circle;\n    };\n    circle.angle = function(x) {\n      if (!arguments.length) return angle;\n      interpolate = d3_geo_circleInterpolate((angle = +x) * d3_radians, precision * d3_radians);\n      return circle;\n    };\n    circle.precision = function(_) {\n      if (!arguments.length) return precision;\n      interpolate = d3_geo_circleInterpolate(angle * d3_radians, (precision = +_) * d3_radians);\n      return circle;\n    };\n    return circle.angle(90);\n  };\n  function d3_geo_circleInterpolate(radius, precision) {\n    var cr = Math.cos(radius), sr = Math.sin(radius);\n    return function(from, to, direction, listener) {\n      var step = direction * precision;\n      if (from != null) {\n        from = d3_geo_circleAngle(cr, from);\n        to = d3_geo_circleAngle(cr, to);\n        if (direction > 0 ? from < to : from > to) from += direction * τ;\n      } else {\n        from = radius + direction * τ;\n        to = radius - .5 * step;\n      }\n      for (var point, t = from; direction > 0 ? t > to : t < to; t -= step) {\n        listener.point((point = d3_geo_spherical([ cr, -sr * Math.cos(t), -sr * Math.sin(t) ]))[0], point[1]);\n      }\n    };\n  }\n  function d3_geo_circleAngle(cr, point) {\n    var a = d3_geo_cartesian(point);\n    a[0] -= cr;\n    d3_geo_cartesianNormalize(a);\n    var angle = d3_acos(-a[1]);\n    return ((-a[2] < 0 ? -angle : angle) + 2 * Math.PI - ε) % (2 * Math.PI);\n  }\n  d3.geo.distance = function(a, b) {\n    var Δλ = (b[0] - a[0]) * d3_radians, φ0 = a[1] * d3_radians, φ1 = b[1] * d3_radians, sinΔλ = Math.sin(Δλ), cosΔλ = Math.cos(Δλ), sinφ0 = Math.sin(φ0), cosφ0 = Math.cos(φ0), sinφ1 = Math.sin(φ1), cosφ1 = Math.cos(φ1), t;\n    return Math.atan2(Math.sqrt((t = cosφ1 * sinΔλ) * t + (t = cosφ0 * sinφ1 - sinφ0 * cosφ1 * cosΔλ) * t), sinφ0 * sinφ1 + cosφ0 * cosφ1 * cosΔλ);\n  };\n  d3.geo.graticule = function() {\n    var x1, x0, X1, X0, y1, y0, Y1, Y0, dx = 10, dy = dx, DX = 90, DY = 360, x, y, X, Y, precision = 2.5;\n    function graticule() {\n      return {\n        type: \"MultiLineString\",\n        coordinates: lines()\n      };\n    }\n    function lines() {\n      return d3.range(Math.ceil(X0 / DX) * DX, X1, DX).map(X).concat(d3.range(Math.ceil(Y0 / DY) * DY, Y1, DY).map(Y)).concat(d3.range(Math.ceil(x0 / dx) * dx, x1, dx).filter(function(x) {\n        return abs(x % DX) > ε;\n      }).map(x)).concat(d3.range(Math.ceil(y0 / dy) * dy, y1, dy).filter(function(y) {\n        return abs(y % DY) > ε;\n      }).map(y));\n    }\n    graticule.lines = function() {\n      return lines().map(function(coordinates) {\n        return {\n          type: \"LineString\",\n          coordinates: coordinates\n        };\n      });\n    };\n    graticule.outline = function() {\n      return {\n        type: \"Polygon\",\n        coordinates: [ X(X0).concat(Y(Y1).slice(1), X(X1).reverse().slice(1), Y(Y0).reverse().slice(1)) ]\n      };\n    };\n    graticule.extent = function(_) {\n      if (!arguments.length) return graticule.minorExtent();\n      return graticule.majorExtent(_).minorExtent(_);\n    };\n    graticule.majorExtent = function(_) {\n      if (!arguments.length) return [ [ X0, Y0 ], [ X1, Y1 ] ];\n      X0 = +_[0][0], X1 = +_[1][0];\n      Y0 = +_[0][1], Y1 = +_[1][1];\n      if (X0 > X1) _ = X0, X0 = X1, X1 = _;\n      if (Y0 > Y1) _ = Y0, Y0 = Y1, Y1 = _;\n      return graticule.precision(precision);\n    };\n    graticule.minorExtent = function(_) {\n      if (!arguments.length) return [ [ x0, y0 ], [ x1, y1 ] ];\n      x0 = +_[0][0], x1 = +_[1][0];\n      y0 = +_[0][1], y1 = +_[1][1];\n      if (x0 > x1) _ = x0, x0 = x1, x1 = _;\n      if (y0 > y1) _ = y0, y0 = y1, y1 = _;\n      return graticule.precision(precision);\n    };\n    graticule.step = function(_) {\n      if (!arguments.length) return graticule.minorStep();\n      return graticule.majorStep(_).minorStep(_);\n    };\n    graticule.majorStep = function(_) {\n      if (!arguments.length) return [ DX, DY ];\n      DX = +_[0], DY = +_[1];\n      return graticule;\n    };\n    graticule.minorStep = function(_) {\n      if (!arguments.length) return [ dx, dy ];\n      dx = +_[0], dy = +_[1];\n      return graticule;\n    };\n    graticule.precision = function(_) {\n      if (!arguments.length) return precision;\n      precision = +_;\n      x = d3_geo_graticuleX(y0, y1, 90);\n      y = d3_geo_graticuleY(x0, x1, precision);\n      X = d3_geo_graticuleX(Y0, Y1, 90);\n      Y = d3_geo_graticuleY(X0, X1, precision);\n      return graticule;\n    };\n    return graticule.majorExtent([ [ -180, -90 + ε ], [ 180, 90 - ε ] ]).minorExtent([ [ -180, -80 - ε ], [ 180, 80 + ε ] ]);\n  };\n  function d3_geo_graticuleX(y0, y1, dy) {\n    var y = d3.range(y0, y1 - ε, dy).concat(y1);\n    return function(x) {\n      return y.map(function(y) {\n        return [ x, y ];\n      });\n    };\n  }\n  function d3_geo_graticuleY(x0, x1, dx) {\n    var x = d3.range(x0, x1 - ε, dx).concat(x1);\n    return function(y) {\n      return x.map(function(x) {\n        return [ x, y ];\n      });\n    };\n  }\n  function d3_source(d) {\n    return d.source;\n  }\n  function d3_target(d) {\n    return d.target;\n  }\n  d3.geo.greatArc = function() {\n    var source = d3_source, source_, target = d3_target, target_;\n    function greatArc() {\n      return {\n        type: \"LineString\",\n        coordinates: [ source_ || source.apply(this, arguments), target_ || target.apply(this, arguments) ]\n      };\n    }\n    greatArc.distance = function() {\n      return d3.geo.distance(source_ || source.apply(this, arguments), target_ || target.apply(this, arguments));\n    };\n    greatArc.source = function(_) {\n      if (!arguments.length) return source;\n      source = _, source_ = typeof _ === \"function\" ? null : _;\n      return greatArc;\n    };\n    greatArc.target = function(_) {\n      if (!arguments.length) return target;\n      target = _, target_ = typeof _ === \"function\" ? null : _;\n      return greatArc;\n    };\n    greatArc.precision = function() {\n      return arguments.length ? greatArc : 0;\n    };\n    return greatArc;\n  };\n  d3.geo.interpolate = function(source, target) {\n    return d3_geo_interpolate(source[0] * d3_radians, source[1] * d3_radians, target[0] * d3_radians, target[1] * d3_radians);\n  };\n  function d3_geo_interpolate(x0, y0, x1, y1) {\n    var cy0 = Math.cos(y0), sy0 = Math.sin(y0), cy1 = Math.cos(y1), sy1 = Math.sin(y1), kx0 = cy0 * Math.cos(x0), ky0 = cy0 * Math.sin(x0), kx1 = cy1 * Math.cos(x1), ky1 = cy1 * Math.sin(x1), d = 2 * Math.asin(Math.sqrt(d3_haversin(y1 - y0) + cy0 * cy1 * d3_haversin(x1 - x0))), k = 1 / Math.sin(d);\n    var interpolate = d ? function(t) {\n      var B = Math.sin(t *= d) * k, A = Math.sin(d - t) * k, x = A * kx0 + B * kx1, y = A * ky0 + B * ky1, z = A * sy0 + B * sy1;\n      return [ Math.atan2(y, x) * d3_degrees, Math.atan2(z, Math.sqrt(x * x + y * y)) * d3_degrees ];\n    } : function() {\n      return [ x0 * d3_degrees, y0 * d3_degrees ];\n    };\n    interpolate.distance = d;\n    return interpolate;\n  }\n  d3.geo.length = function(object) {\n    d3_geo_lengthSum = 0;\n    d3.geo.stream(object, d3_geo_length);\n    return d3_geo_lengthSum;\n  };\n  var d3_geo_lengthSum;\n  var d3_geo_length = {\n    sphere: d3_noop,\n    point: d3_noop,\n    lineStart: d3_geo_lengthLineStart,\n    lineEnd: d3_noop,\n    polygonStart: d3_noop,\n    polygonEnd: d3_noop\n  };\n  function d3_geo_lengthLineStart() {\n    var λ0, sinφ0, cosφ0;\n    d3_geo_length.point = function(λ, φ) {\n      λ0 = λ * d3_radians, sinφ0 = Math.sin(φ *= d3_radians), cosφ0 = Math.cos(φ);\n      d3_geo_length.point = nextPoint;\n    };\n    d3_geo_length.lineEnd = function() {\n      d3_geo_length.point = d3_geo_length.lineEnd = d3_noop;\n    };\n    function nextPoint(λ, φ) {\n      var sinφ = Math.sin(φ *= d3_radians), cosφ = Math.cos(φ), t = abs((λ *= d3_radians) - λ0), cosΔλ = Math.cos(t);\n      d3_geo_lengthSum += Math.atan2(Math.sqrt((t = cosφ * Math.sin(t)) * t + (t = cosφ0 * sinφ - sinφ0 * cosφ * cosΔλ) * t), sinφ0 * sinφ + cosφ0 * cosφ * cosΔλ);\n      λ0 = λ, sinφ0 = sinφ, cosφ0 = cosφ;\n    }\n  }\n  function d3_geo_azimuthal(scale, angle) {\n    function azimuthal(λ, φ) {\n      var cosλ = Math.cos(λ), cosφ = Math.cos(φ), k = scale(cosλ * cosφ);\n      return [ k * cosφ * Math.sin(λ), k * Math.sin(φ) ];\n    }\n    azimuthal.invert = function(x, y) {\n      var ρ = Math.sqrt(x * x + y * y), c = angle(ρ), sinc = Math.sin(c), cosc = Math.cos(c);\n      return [ Math.atan2(x * sinc, ρ * cosc), Math.asin(ρ && y * sinc / ρ) ];\n    };\n    return azimuthal;\n  }\n  var d3_geo_azimuthalEqualArea = d3_geo_azimuthal(function(cosλcosφ) {\n    return Math.sqrt(2 / (1 + cosλcosφ));\n  }, function(ρ) {\n    return 2 * Math.asin(ρ / 2);\n  });\n  (d3.geo.azimuthalEqualArea = function() {\n    return d3_geo_projection(d3_geo_azimuthalEqualArea);\n  }).raw = d3_geo_azimuthalEqualArea;\n  var d3_geo_azimuthalEquidistant = d3_geo_azimuthal(function(cosλcosφ) {\n    var c = Math.acos(cosλcosφ);\n    return c && c / Math.sin(c);\n  }, d3_identity);\n  (d3.geo.azimuthalEquidistant = function() {\n    return d3_geo_projection(d3_geo_azimuthalEquidistant);\n  }).raw = d3_geo_azimuthalEquidistant;\n  function d3_geo_conicConformal(φ0, φ1) {\n    var cosφ0 = Math.cos(φ0), t = function(φ) {\n      return Math.tan(π / 4 + φ / 2);\n    }, n = φ0 === φ1 ? Math.sin(φ0) : Math.log(cosφ0 / Math.cos(φ1)) / Math.log(t(φ1) / t(φ0)), F = cosφ0 * Math.pow(t(φ0), n) / n;\n    if (!n) return d3_geo_mercator;\n    function forward(λ, φ) {\n      if (F > 0) {\n        if (φ < -halfπ + ε) φ = -halfπ + ε;\n      } else {\n        if (φ > halfπ - ε) φ = halfπ - ε;\n      }\n      var ρ = F / Math.pow(t(φ), n);\n      return [ ρ * Math.sin(n * λ), F - ρ * Math.cos(n * λ) ];\n    }\n    forward.invert = function(x, y) {\n      var ρ0_y = F - y, ρ = d3_sgn(n) * Math.sqrt(x * x + ρ0_y * ρ0_y);\n      return [ Math.atan2(x, ρ0_y) / n, 2 * Math.atan(Math.pow(F / ρ, 1 / n)) - halfπ ];\n    };\n    return forward;\n  }\n  (d3.geo.conicConformal = function() {\n    return d3_geo_conic(d3_geo_conicConformal);\n  }).raw = d3_geo_conicConformal;\n  function d3_geo_conicEquidistant(φ0, φ1) {\n    var cosφ0 = Math.cos(φ0), n = φ0 === φ1 ? Math.sin(φ0) : (cosφ0 - Math.cos(φ1)) / (φ1 - φ0), G = cosφ0 / n + φ0;\n    if (abs(n) < ε) return d3_geo_equirectangular;\n    function forward(λ, φ) {\n      var ρ = G - φ;\n      return [ ρ * Math.sin(n * λ), G - ρ * Math.cos(n * λ) ];\n    }\n    forward.invert = function(x, y) {\n      var ρ0_y = G - y;\n      return [ Math.atan2(x, ρ0_y) / n, G - d3_sgn(n) * Math.sqrt(x * x + ρ0_y * ρ0_y) ];\n    };\n    return forward;\n  }\n  (d3.geo.conicEquidistant = function() {\n    return d3_geo_conic(d3_geo_conicEquidistant);\n  }).raw = d3_geo_conicEquidistant;\n  var d3_geo_gnomonic = d3_geo_azimuthal(function(cosλcosφ) {\n    return 1 / cosλcosφ;\n  }, Math.atan);\n  (d3.geo.gnomonic = function() {\n    return d3_geo_projection(d3_geo_gnomonic);\n  }).raw = d3_geo_gnomonic;\n  function d3_geo_mercator(λ, φ) {\n    return [ λ, Math.log(Math.tan(π / 4 + φ / 2)) ];\n  }\n  d3_geo_mercator.invert = function(x, y) {\n    return [ x, 2 * Math.atan(Math.exp(y)) - halfπ ];\n  };\n  function d3_geo_mercatorProjection(project) {\n    var m = d3_geo_projection(project), scale = m.scale, translate = m.translate, clipExtent = m.clipExtent, clipAuto;\n    m.scale = function() {\n      var v = scale.apply(m, arguments);\n      return v === m ? clipAuto ? m.clipExtent(null) : m : v;\n    };\n    m.translate = function() {\n      var v = translate.apply(m, arguments);\n      return v === m ? clipAuto ? m.clipExtent(null) : m : v;\n    };\n    m.clipExtent = function(_) {\n      var v = clipExtent.apply(m, arguments);\n      if (v === m) {\n        if (clipAuto = _ == null) {\n          var k = π * scale(), t = translate();\n          clipExtent([ [ t[0] - k, t[1] - k ], [ t[0] + k, t[1] + k ] ]);\n        }\n      } else if (clipAuto) {\n        v = null;\n      }\n      return v;\n    };\n    return m.clipExtent(null);\n  }\n  (d3.geo.mercator = function() {\n    return d3_geo_mercatorProjection(d3_geo_mercator);\n  }).raw = d3_geo_mercator;\n  var d3_geo_orthographic = d3_geo_azimuthal(function() {\n    return 1;\n  }, Math.asin);\n  (d3.geo.orthographic = function() {\n    return d3_geo_projection(d3_geo_orthographic);\n  }).raw = d3_geo_orthographic;\n  var d3_geo_stereographic = d3_geo_azimuthal(function(cosλcosφ) {\n    return 1 / (1 + cosλcosφ);\n  }, function(ρ) {\n    return 2 * Math.atan(ρ);\n  });\n  (d3.geo.stereographic = function() {\n    return d3_geo_projection(d3_geo_stereographic);\n  }).raw = d3_geo_stereographic;\n  function d3_geo_transverseMercator(λ, φ) {\n    return [ Math.log(Math.tan(π / 4 + φ / 2)), -λ ];\n  }\n  d3_geo_transverseMercator.invert = function(x, y) {\n    return [ -y, 2 * Math.atan(Math.exp(x)) - halfπ ];\n  };\n  (d3.geo.transverseMercator = function() {\n    var projection = d3_geo_mercatorProjection(d3_geo_transverseMercator), center = projection.center, rotate = projection.rotate;\n    projection.center = function(_) {\n      return _ ? center([ -_[1], _[0] ]) : (_ = center(), [ _[1], -_[0] ]);\n    };\n    projection.rotate = function(_) {\n      return _ ? rotate([ _[0], _[1], _.length > 2 ? _[2] + 90 : 90 ]) : (_ = rotate(), \n      [ _[0], _[1], _[2] - 90 ]);\n    };\n    return rotate([ 0, 0, 90 ]);\n  }).raw = d3_geo_transverseMercator;\n  d3.geom = {};\n  function d3_geom_pointX(d) {\n    return d[0];\n  }\n  function d3_geom_pointY(d) {\n    return d[1];\n  }\n  d3.geom.hull = function(vertices) {\n    var x = d3_geom_pointX, y = d3_geom_pointY;\n    if (arguments.length) return hull(vertices);\n    function hull(data) {\n      if (data.length < 3) return [];\n      var fx = d3_functor(x), fy = d3_functor(y), i, n = data.length, points = [], flippedPoints = [];\n      for (i = 0; i < n; i++) {\n        points.push([ +fx.call(this, data[i], i), +fy.call(this, data[i], i), i ]);\n      }\n      points.sort(d3_geom_hullOrder);\n      for (i = 0; i < n; i++) flippedPoints.push([ points[i][0], -points[i][1] ]);\n      var upper = d3_geom_hullUpper(points), lower = d3_geom_hullUpper(flippedPoints);\n      var skipLeft = lower[0] === upper[0], skipRight = lower[lower.length - 1] === upper[upper.length - 1], polygon = [];\n      for (i = upper.length - 1; i >= 0; --i) polygon.push(data[points[upper[i]][2]]);\n      for (i = +skipLeft; i < lower.length - skipRight; ++i) polygon.push(data[points[lower[i]][2]]);\n      return polygon;\n    }\n    hull.x = function(_) {\n      return arguments.length ? (x = _, hull) : x;\n    };\n    hull.y = function(_) {\n      return arguments.length ? (y = _, hull) : y;\n    };\n    return hull;\n  };\n  function d3_geom_hullUpper(points) {\n    var n = points.length, hull = [ 0, 1 ], hs = 2;\n    for (var i = 2; i < n; i++) {\n      while (hs > 1 && d3_cross2d(points[hull[hs - 2]], points[hull[hs - 1]], points[i]) <= 0) --hs;\n      hull[hs++] = i;\n    }\n    return hull.slice(0, hs);\n  }\n  function d3_geom_hullOrder(a, b) {\n    return a[0] - b[0] || a[1] - b[1];\n  }\n  d3.geom.polygon = function(coordinates) {\n    d3_subclass(coordinates, d3_geom_polygonPrototype);\n    return coordinates;\n  };\n  var d3_geom_polygonPrototype = d3.geom.polygon.prototype = [];\n  d3_geom_polygonPrototype.area = function() {\n    var i = -1, n = this.length, a, b = this[n - 1], area = 0;\n    while (++i < n) {\n      a = b;\n      b = this[i];\n      area += a[1] * b[0] - a[0] * b[1];\n    }\n    return area * .5;\n  };\n  d3_geom_polygonPrototype.centroid = function(k) {\n    var i = -1, n = this.length, x = 0, y = 0, a, b = this[n - 1], c;\n    if (!arguments.length) k = -1 / (6 * this.area());\n    while (++i < n) {\n      a = b;\n      b = this[i];\n      c = a[0] * b[1] - b[0] * a[1];\n      x += (a[0] + b[0]) * c;\n      y += (a[1] + b[1]) * c;\n    }\n    return [ x * k, y * k ];\n  };\n  d3_geom_polygonPrototype.clip = function(subject) {\n    var input, closed = d3_geom_polygonClosed(subject), i = -1, n = this.length - d3_geom_polygonClosed(this), j, m, a = this[n - 1], b, c, d;\n    while (++i < n) {\n      input = subject.slice();\n      subject.length = 0;\n      b = this[i];\n      c = input[(m = input.length - closed) - 1];\n      j = -1;\n      while (++j < m) {\n        d = input[j];\n        if (d3_geom_polygonInside(d, a, b)) {\n          if (!d3_geom_polygonInside(c, a, b)) {\n            subject.push(d3_geom_polygonIntersect(c, d, a, b));\n          }\n          subject.push(d);\n        } else if (d3_geom_polygonInside(c, a, b)) {\n          subject.push(d3_geom_polygonIntersect(c, d, a, b));\n        }\n        c = d;\n      }\n      if (closed) subject.push(subject[0]);\n      a = b;\n    }\n    return subject;\n  };\n  function d3_geom_polygonInside(p, a, b) {\n    return (b[0] - a[0]) * (p[1] - a[1]) < (b[1] - a[1]) * (p[0] - a[0]);\n  }\n  function d3_geom_polygonIntersect(c, d, a, b) {\n    var x1 = c[0], x3 = a[0], x21 = d[0] - x1, x43 = b[0] - x3, y1 = c[1], y3 = a[1], y21 = d[1] - y1, y43 = b[1] - y3, ua = (x43 * (y1 - y3) - y43 * (x1 - x3)) / (y43 * x21 - x43 * y21);\n    return [ x1 + ua * x21, y1 + ua * y21 ];\n  }\n  function d3_geom_polygonClosed(coordinates) {\n    var a = coordinates[0], b = coordinates[coordinates.length - 1];\n    return !(a[0] - b[0] || a[1] - b[1]);\n  }\n  var d3_geom_voronoiEdges, d3_geom_voronoiCells, d3_geom_voronoiBeaches, d3_geom_voronoiBeachPool = [], d3_geom_voronoiFirstCircle, d3_geom_voronoiCircles, d3_geom_voronoiCirclePool = [];\n  function d3_geom_voronoiBeach() {\n    d3_geom_voronoiRedBlackNode(this);\n    this.edge = this.site = this.circle = null;\n  }\n  function d3_geom_voronoiCreateBeach(site) {\n    var beach = d3_geom_voronoiBeachPool.pop() || new d3_geom_voronoiBeach();\n    beach.site = site;\n    return beach;\n  }\n  function d3_geom_voronoiDetachBeach(beach) {\n    d3_geom_voronoiDetachCircle(beach);\n    d3_geom_voronoiBeaches.remove(beach);\n    d3_geom_voronoiBeachPool.push(beach);\n    d3_geom_voronoiRedBlackNode(beach);\n  }\n  function d3_geom_voronoiRemoveBeach(beach) {\n    var circle = beach.circle, x = circle.x, y = circle.cy, vertex = {\n      x: x,\n      y: y\n    }, previous = beach.P, next = beach.N, disappearing = [ beach ];\n    d3_geom_voronoiDetachBeach(beach);\n    var lArc = previous;\n    while (lArc.circle && abs(x - lArc.circle.x) < ε && abs(y - lArc.circle.cy) < ε) {\n      previous = lArc.P;\n      disappearing.unshift(lArc);\n      d3_geom_voronoiDetachBeach(lArc);\n      lArc = previous;\n    }\n    disappearing.unshift(lArc);\n    d3_geom_voronoiDetachCircle(lArc);\n    var rArc = next;\n    while (rArc.circle && abs(x - rArc.circle.x) < ε && abs(y - rArc.circle.cy) < ε) {\n      next = rArc.N;\n      disappearing.push(rArc);\n      d3_geom_voronoiDetachBeach(rArc);\n      rArc = next;\n    }\n    disappearing.push(rArc);\n    d3_geom_voronoiDetachCircle(rArc);\n    var nArcs = disappearing.length, iArc;\n    for (iArc = 1; iArc < nArcs; ++iArc) {\n      rArc = disappearing[iArc];\n      lArc = disappearing[iArc - 1];\n      d3_geom_voronoiSetEdgeEnd(rArc.edge, lArc.site, rArc.site, vertex);\n    }\n    lArc = disappearing[0];\n    rArc = disappearing[nArcs - 1];\n    rArc.edge = d3_geom_voronoiCreateEdge(lArc.site, rArc.site, null, vertex);\n    d3_geom_voronoiAttachCircle(lArc);\n    d3_geom_voronoiAttachCircle(rArc);\n  }\n  function d3_geom_voronoiAddBeach(site) {\n    var x = site.x, directrix = site.y, lArc, rArc, dxl, dxr, node = d3_geom_voronoiBeaches._;\n    while (node) {\n      dxl = d3_geom_voronoiLeftBreakPoint(node, directrix) - x;\n      if (dxl > ε) node = node.L; else {\n        dxr = x - d3_geom_voronoiRightBreakPoint(node, directrix);\n        if (dxr > ε) {\n          if (!node.R) {\n            lArc = node;\n            break;\n          }\n          node = node.R;\n        } else {\n          if (dxl > -ε) {\n            lArc = node.P;\n            rArc = node;\n          } else if (dxr > -ε) {\n            lArc = node;\n            rArc = node.N;\n          } else {\n            lArc = rArc = node;\n          }\n          break;\n        }\n      }\n    }\n    var newArc = d3_geom_voronoiCreateBeach(site);\n    d3_geom_voronoiBeaches.insert(lArc, newArc);\n    if (!lArc && !rArc) return;\n    if (lArc === rArc) {\n      d3_geom_voronoiDetachCircle(lArc);\n      rArc = d3_geom_voronoiCreateBeach(lArc.site);\n      d3_geom_voronoiBeaches.insert(newArc, rArc);\n      newArc.edge = rArc.edge = d3_geom_voronoiCreateEdge(lArc.site, newArc.site);\n      d3_geom_voronoiAttachCircle(lArc);\n      d3_geom_voronoiAttachCircle(rArc);\n      return;\n    }\n    if (!rArc) {\n      newArc.edge = d3_geom_voronoiCreateEdge(lArc.site, newArc.site);\n      return;\n    }\n    d3_geom_voronoiDetachCircle(lArc);\n    d3_geom_voronoiDetachCircle(rArc);\n    var lSite = lArc.site, ax = lSite.x, ay = lSite.y, bx = site.x - ax, by = site.y - ay, rSite = rArc.site, cx = rSite.x - ax, cy = rSite.y - ay, d = 2 * (bx * cy - by * cx), hb = bx * bx + by * by, hc = cx * cx + cy * cy, vertex = {\n      x: (cy * hb - by * hc) / d + ax,\n      y: (bx * hc - cx * hb) / d + ay\n    };\n    d3_geom_voronoiSetEdgeEnd(rArc.edge, lSite, rSite, vertex);\n    newArc.edge = d3_geom_voronoiCreateEdge(lSite, site, null, vertex);\n    rArc.edge = d3_geom_voronoiCreateEdge(site, rSite, null, vertex);\n    d3_geom_voronoiAttachCircle(lArc);\n    d3_geom_voronoiAttachCircle(rArc);\n  }\n  function d3_geom_voronoiLeftBreakPoint(arc, directrix) {\n    var site = arc.site, rfocx = site.x, rfocy = site.y, pby2 = rfocy - directrix;\n    if (!pby2) return rfocx;\n    var lArc = arc.P;\n    if (!lArc) return -Infinity;\n    site = lArc.site;\n    var lfocx = site.x, lfocy = site.y, plby2 = lfocy - directrix;\n    if (!plby2) return lfocx;\n    var hl = lfocx - rfocx, aby2 = 1 / pby2 - 1 / plby2, b = hl / plby2;\n    if (aby2) return (-b + Math.sqrt(b * b - 2 * aby2 * (hl * hl / (-2 * plby2) - lfocy + plby2 / 2 + rfocy - pby2 / 2))) / aby2 + rfocx;\n    return (rfocx + lfocx) / 2;\n  }\n  function d3_geom_voronoiRightBreakPoint(arc, directrix) {\n    var rArc = arc.N;\n    if (rArc) return d3_geom_voronoiLeftBreakPoint(rArc, directrix);\n    var site = arc.site;\n    return site.y === directrix ? site.x : Infinity;\n  }\n  function d3_geom_voronoiCell(site) {\n    this.site = site;\n    this.edges = [];\n  }\n  d3_geom_voronoiCell.prototype.prepare = function() {\n    var halfEdges = this.edges, iHalfEdge = halfEdges.length, edge;\n    while (iHalfEdge--) {\n      edge = halfEdges[iHalfEdge].edge;\n      if (!edge.b || !edge.a) halfEdges.splice(iHalfEdge, 1);\n    }\n    halfEdges.sort(d3_geom_voronoiHalfEdgeOrder);\n    return halfEdges.length;\n  };\n  function d3_geom_voronoiCloseCells(extent) {\n    var x0 = extent[0][0], x1 = extent[1][0], y0 = extent[0][1], y1 = extent[1][1], x2, y2, x3, y3, cells = d3_geom_voronoiCells, iCell = cells.length, cell, iHalfEdge, halfEdges, nHalfEdges, start, end;\n    while (iCell--) {\n      cell = cells[iCell];\n      if (!cell || !cell.prepare()) continue;\n      halfEdges = cell.edges;\n      nHalfEdges = halfEdges.length;\n      iHalfEdge = 0;\n      while (iHalfEdge < nHalfEdges) {\n        end = halfEdges[iHalfEdge].end(), x3 = end.x, y3 = end.y;\n        start = halfEdges[++iHalfEdge % nHalfEdges].start(), x2 = start.x, y2 = start.y;\n        if (abs(x3 - x2) > ε || abs(y3 - y2) > ε) {\n          halfEdges.splice(iHalfEdge, 0, new d3_geom_voronoiHalfEdge(d3_geom_voronoiCreateBorderEdge(cell.site, end, abs(x3 - x0) < ε && y1 - y3 > ε ? {\n            x: x0,\n            y: abs(x2 - x0) < ε ? y2 : y1\n          } : abs(y3 - y1) < ε && x1 - x3 > ε ? {\n            x: abs(y2 - y1) < ε ? x2 : x1,\n            y: y1\n          } : abs(x3 - x1) < ε && y3 - y0 > ε ? {\n            x: x1,\n            y: abs(x2 - x1) < ε ? y2 : y0\n          } : abs(y3 - y0) < ε && x3 - x0 > ε ? {\n            x: abs(y2 - y0) < ε ? x2 : x0,\n            y: y0\n          } : null), cell.site, null));\n          ++nHalfEdges;\n        }\n      }\n    }\n  }\n  function d3_geom_voronoiHalfEdgeOrder(a, b) {\n    return b.angle - a.angle;\n  }\n  function d3_geom_voronoiCircle() {\n    d3_geom_voronoiRedBlackNode(this);\n    this.x = this.y = this.arc = this.site = this.cy = null;\n  }\n  function d3_geom_voronoiAttachCircle(arc) {\n    var lArc = arc.P, rArc = arc.N;\n    if (!lArc || !rArc) return;\n    var lSite = lArc.site, cSite = arc.site, rSite = rArc.site;\n    if (lSite === rSite) return;\n    var bx = cSite.x, by = cSite.y, ax = lSite.x - bx, ay = lSite.y - by, cx = rSite.x - bx, cy = rSite.y - by;\n    var d = 2 * (ax * cy - ay * cx);\n    if (d >= -ε2) return;\n    var ha = ax * ax + ay * ay, hc = cx * cx + cy * cy, x = (cy * ha - ay * hc) / d, y = (ax * hc - cx * ha) / d, cy = y + by;\n    var circle = d3_geom_voronoiCirclePool.pop() || new d3_geom_voronoiCircle();\n    circle.arc = arc;\n    circle.site = cSite;\n    circle.x = x + bx;\n    circle.y = cy + Math.sqrt(x * x + y * y);\n    circle.cy = cy;\n    arc.circle = circle;\n    var before = null, node = d3_geom_voronoiCircles._;\n    while (node) {\n      if (circle.y < node.y || circle.y === node.y && circle.x <= node.x) {\n        if (node.L) node = node.L; else {\n          before = node.P;\n          break;\n        }\n      } else {\n        if (node.R) node = node.R; else {\n          before = node;\n          break;\n        }\n      }\n    }\n    d3_geom_voronoiCircles.insert(before, circle);\n    if (!before) d3_geom_voronoiFirstCircle = circle;\n  }\n  function d3_geom_voronoiDetachCircle(arc) {\n    var circle = arc.circle;\n    if (circle) {\n      if (!circle.P) d3_geom_voronoiFirstCircle = circle.N;\n      d3_geom_voronoiCircles.remove(circle);\n      d3_geom_voronoiCirclePool.push(circle);\n      d3_geom_voronoiRedBlackNode(circle);\n      arc.circle = null;\n    }\n  }\n  function d3_geom_voronoiClipEdges(extent) {\n    var edges = d3_geom_voronoiEdges, clip = d3_geom_clipLine(extent[0][0], extent[0][1], extent[1][0], extent[1][1]), i = edges.length, e;\n    while (i--) {\n      e = edges[i];\n      if (!d3_geom_voronoiConnectEdge(e, extent) || !clip(e) || abs(e.a.x - e.b.x) < ε && abs(e.a.y - e.b.y) < ε) {\n        e.a = e.b = null;\n        edges.splice(i, 1);\n      }\n    }\n  }\n  function d3_geom_voronoiConnectEdge(edge, extent) {\n    var vb = edge.b;\n    if (vb) return true;\n    var va = edge.a, x0 = extent[0][0], x1 = extent[1][0], y0 = extent[0][1], y1 = extent[1][1], lSite = edge.l, rSite = edge.r, lx = lSite.x, ly = lSite.y, rx = rSite.x, ry = rSite.y, fx = (lx + rx) / 2, fy = (ly + ry) / 2, fm, fb;\n    if (ry === ly) {\n      if (fx < x0 || fx >= x1) return;\n      if (lx > rx) {\n        if (!va) va = {\n          x: fx,\n          y: y0\n        }; else if (va.y >= y1) return;\n        vb = {\n          x: fx,\n          y: y1\n        };\n      } else {\n        if (!va) va = {\n          x: fx,\n          y: y1\n        }; else if (va.y < y0) return;\n        vb = {\n          x: fx,\n          y: y0\n        };\n      }\n    } else {\n      fm = (lx - rx) / (ry - ly);\n      fb = fy - fm * fx;\n      if (fm < -1 || fm > 1) {\n        if (lx > rx) {\n          if (!va) va = {\n            x: (y0 - fb) / fm,\n            y: y0\n          }; else if (va.y >= y1) return;\n          vb = {\n            x: (y1 - fb) / fm,\n            y: y1\n          };\n        } else {\n          if (!va) va = {\n            x: (y1 - fb) / fm,\n            y: y1\n          }; else if (va.y < y0) return;\n          vb = {\n            x: (y0 - fb) / fm,\n            y: y0\n          };\n        }\n      } else {\n        if (ly < ry) {\n          if (!va) va = {\n            x: x0,\n            y: fm * x0 + fb\n          }; else if (va.x >= x1) return;\n          vb = {\n            x: x1,\n            y: fm * x1 + fb\n          };\n        } else {\n          if (!va) va = {\n            x: x1,\n            y: fm * x1 + fb\n          }; else if (va.x < x0) return;\n          vb = {\n            x: x0,\n            y: fm * x0 + fb\n          };\n        }\n      }\n    }\n    edge.a = va;\n    edge.b = vb;\n    return true;\n  }\n  function d3_geom_voronoiEdge(lSite, rSite) {\n    this.l = lSite;\n    this.r = rSite;\n    this.a = this.b = null;\n  }\n  function d3_geom_voronoiCreateEdge(lSite, rSite, va, vb) {\n    var edge = new d3_geom_voronoiEdge(lSite, rSite);\n    d3_geom_voronoiEdges.push(edge);\n    if (va) d3_geom_voronoiSetEdgeEnd(edge, lSite, rSite, va);\n    if (vb) d3_geom_voronoiSetEdgeEnd(edge, rSite, lSite, vb);\n    d3_geom_voronoiCells[lSite.i].edges.push(new d3_geom_voronoiHalfEdge(edge, lSite, rSite));\n    d3_geom_voronoiCells[rSite.i].edges.push(new d3_geom_voronoiHalfEdge(edge, rSite, lSite));\n    return edge;\n  }\n  function d3_geom_voronoiCreateBorderEdge(lSite, va, vb) {\n    var edge = new d3_geom_voronoiEdge(lSite, null);\n    edge.a = va;\n    edge.b = vb;\n    d3_geom_voronoiEdges.push(edge);\n    return edge;\n  }\n  function d3_geom_voronoiSetEdgeEnd(edge, lSite, rSite, vertex) {\n    if (!edge.a && !edge.b) {\n      edge.a = vertex;\n      edge.l = lSite;\n      edge.r = rSite;\n    } else if (edge.l === rSite) {\n      edge.b = vertex;\n    } else {\n      edge.a = vertex;\n    }\n  }\n  function d3_geom_voronoiHalfEdge(edge, lSite, rSite) {\n    var va = edge.a, vb = edge.b;\n    this.edge = edge;\n    this.site = lSite;\n    this.angle = rSite ? Math.atan2(rSite.y - lSite.y, rSite.x - lSite.x) : edge.l === lSite ? Math.atan2(vb.x - va.x, va.y - vb.y) : Math.atan2(va.x - vb.x, vb.y - va.y);\n  }\n  d3_geom_voronoiHalfEdge.prototype = {\n    start: function() {\n      return this.edge.l === this.site ? this.edge.a : this.edge.b;\n    },\n    end: function() {\n      return this.edge.l === this.site ? this.edge.b : this.edge.a;\n    }\n  };\n  function d3_geom_voronoiRedBlackTree() {\n    this._ = null;\n  }\n  function d3_geom_voronoiRedBlackNode(node) {\n    node.U = node.C = node.L = node.R = node.P = node.N = null;\n  }\n  d3_geom_voronoiRedBlackTree.prototype = {\n    insert: function(after, node) {\n      var parent, grandpa, uncle;\n      if (after) {\n        node.P = after;\n        node.N = after.N;\n        if (after.N) after.N.P = node;\n        after.N = node;\n        if (after.R) {\n          after = after.R;\n          while (after.L) after = after.L;\n          after.L = node;\n        } else {\n          after.R = node;\n        }\n        parent = after;\n      } else if (this._) {\n        after = d3_geom_voronoiRedBlackFirst(this._);\n        node.P = null;\n        node.N = after;\n        after.P = after.L = node;\n        parent = after;\n      } else {\n        node.P = node.N = null;\n        this._ = node;\n        parent = null;\n      }\n      node.L = node.R = null;\n      node.U = parent;\n      node.C = true;\n      after = node;\n      while (parent && parent.C) {\n        grandpa = parent.U;\n        if (parent === grandpa.L) {\n          uncle = grandpa.R;\n          if (uncle && uncle.C) {\n            parent.C = uncle.C = false;\n            grandpa.C = true;\n            after = grandpa;\n          } else {\n            if (after === parent.R) {\n              d3_geom_voronoiRedBlackRotateLeft(this, parent);\n              after = parent;\n              parent = after.U;\n            }\n            parent.C = false;\n            grandpa.C = true;\n            d3_geom_voronoiRedBlackRotateRight(this, grandpa);\n          }\n        } else {\n          uncle = grandpa.L;\n          if (uncle && uncle.C) {\n            parent.C = uncle.C = false;\n            grandpa.C = true;\n            after = grandpa;\n          } else {\n            if (after === parent.L) {\n              d3_geom_voronoiRedBlackRotateRight(this, parent);\n              after = parent;\n              parent = after.U;\n            }\n            parent.C = false;\n            grandpa.C = true;\n            d3_geom_voronoiRedBlackRotateLeft(this, grandpa);\n          }\n        }\n        parent = after.U;\n      }\n      this._.C = false;\n    },\n    remove: function(node) {\n      if (node.N) node.N.P = node.P;\n      if (node.P) node.P.N = node.N;\n      node.N = node.P = null;\n      var parent = node.U, sibling, left = node.L, right = node.R, next, red;\n      if (!left) next = right; else if (!right) next = left; else next = d3_geom_voronoiRedBlackFirst(right);\n      if (parent) {\n        if (parent.L === node) parent.L = next; else parent.R = next;\n      } else {\n        this._ = next;\n      }\n      if (left && right) {\n        red = next.C;\n        next.C = node.C;\n        next.L = left;\n        left.U = next;\n        if (next !== right) {\n          parent = next.U;\n          next.U = node.U;\n          node = next.R;\n          parent.L = node;\n          next.R = right;\n          right.U = next;\n        } else {\n          next.U = parent;\n          parent = next;\n          node = next.R;\n        }\n      } else {\n        red = node.C;\n        node = next;\n      }\n      if (node) node.U = parent;\n      if (red) return;\n      if (node && node.C) {\n        node.C = false;\n        return;\n      }\n      do {\n        if (node === this._) break;\n        if (node === parent.L) {\n          sibling = parent.R;\n          if (sibling.C) {\n            sibling.C = false;\n            parent.C = true;\n            d3_geom_voronoiRedBlackRotateLeft(this, parent);\n            sibling = parent.R;\n          }\n          if (sibling.L && sibling.L.C || sibling.R && sibling.R.C) {\n            if (!sibling.R || !sibling.R.C) {\n              sibling.L.C = false;\n              sibling.C = true;\n              d3_geom_voronoiRedBlackRotateRight(this, sibling);\n              sibling = parent.R;\n            }\n            sibling.C = parent.C;\n            parent.C = sibling.R.C = false;\n            d3_geom_voronoiRedBlackRotateLeft(this, parent);\n            node = this._;\n            break;\n          }\n        } else {\n          sibling = parent.L;\n          if (sibling.C) {\n            sibling.C = false;\n            parent.C = true;\n            d3_geom_voronoiRedBlackRotateRight(this, parent);\n            sibling = parent.L;\n          }\n          if (sibling.L && sibling.L.C || sibling.R && sibling.R.C) {\n            if (!sibling.L || !sibling.L.C) {\n              sibling.R.C = false;\n              sibling.C = true;\n              d3_geom_voronoiRedBlackRotateLeft(this, sibling);\n              sibling = parent.L;\n            }\n            sibling.C = parent.C;\n            parent.C = sibling.L.C = false;\n            d3_geom_voronoiRedBlackRotateRight(this, parent);\n            node = this._;\n            break;\n          }\n        }\n        sibling.C = true;\n        node = parent;\n        parent = parent.U;\n      } while (!node.C);\n      if (node) node.C = false;\n    }\n  };\n  function d3_geom_voronoiRedBlackRotateLeft(tree, node) {\n    var p = node, q = node.R, parent = p.U;\n    if (parent) {\n      if (parent.L === p) parent.L = q; else parent.R = q;\n    } else {\n      tree._ = q;\n    }\n    q.U = parent;\n    p.U = q;\n    p.R = q.L;\n    if (p.R) p.R.U = p;\n    q.L = p;\n  }\n  function d3_geom_voronoiRedBlackRotateRight(tree, node) {\n    var p = node, q = node.L, parent = p.U;\n    if (parent) {\n      if (parent.L === p) parent.L = q; else parent.R = q;\n    } else {\n      tree._ = q;\n    }\n    q.U = parent;\n    p.U = q;\n    p.L = q.R;\n    if (p.L) p.L.U = p;\n    q.R = p;\n  }\n  function d3_geom_voronoiRedBlackFirst(node) {\n    while (node.L) node = node.L;\n    return node;\n  }\n  function d3_geom_voronoi(sites, bbox) {\n    var site = sites.sort(d3_geom_voronoiVertexOrder).pop(), x0, y0, circle;\n    d3_geom_voronoiEdges = [];\n    d3_geom_voronoiCells = new Array(sites.length);\n    d3_geom_voronoiBeaches = new d3_geom_voronoiRedBlackTree();\n    d3_geom_voronoiCircles = new d3_geom_voronoiRedBlackTree();\n    while (true) {\n      circle = d3_geom_voronoiFirstCircle;\n      if (site && (!circle || site.y < circle.y || site.y === circle.y && site.x < circle.x)) {\n        if (site.x !== x0 || site.y !== y0) {\n          d3_geom_voronoiCells[site.i] = new d3_geom_voronoiCell(site);\n          d3_geom_voronoiAddBeach(site);\n          x0 = site.x, y0 = site.y;\n        }\n        site = sites.pop();\n      } else if (circle) {\n        d3_geom_voronoiRemoveBeach(circle.arc);\n      } else {\n        break;\n      }\n    }\n    if (bbox) d3_geom_voronoiClipEdges(bbox), d3_geom_voronoiCloseCells(bbox);\n    var diagram = {\n      cells: d3_geom_voronoiCells,\n      edges: d3_geom_voronoiEdges\n    };\n    d3_geom_voronoiBeaches = d3_geom_voronoiCircles = d3_geom_voronoiEdges = d3_geom_voronoiCells = null;\n    return diagram;\n  }\n  function d3_geom_voronoiVertexOrder(a, b) {\n    return b.y - a.y || b.x - a.x;\n  }\n  d3.geom.voronoi = function(points) {\n    var x = d3_geom_pointX, y = d3_geom_pointY, fx = x, fy = y, clipExtent = d3_geom_voronoiClipExtent;\n    if (points) return voronoi(points);\n    function voronoi(data) {\n      var polygons = new Array(data.length), x0 = clipExtent[0][0], y0 = clipExtent[0][1], x1 = clipExtent[1][0], y1 = clipExtent[1][1];\n      d3_geom_voronoi(sites(data), clipExtent).cells.forEach(function(cell, i) {\n        var edges = cell.edges, site = cell.site, polygon = polygons[i] = edges.length ? edges.map(function(e) {\n          var s = e.start();\n          return [ s.x, s.y ];\n        }) : site.x >= x0 && site.x <= x1 && site.y >= y0 && site.y <= y1 ? [ [ x0, y1 ], [ x1, y1 ], [ x1, y0 ], [ x0, y0 ] ] : [];\n        polygon.point = data[i];\n      });\n      return polygons;\n    }\n    function sites(data) {\n      return data.map(function(d, i) {\n        return {\n          x: Math.round(fx(d, i) / ε) * ε,\n          y: Math.round(fy(d, i) / ε) * ε,\n          i: i\n        };\n      });\n    }\n    voronoi.links = function(data) {\n      return d3_geom_voronoi(sites(data)).edges.filter(function(edge) {\n        return edge.l && edge.r;\n      }).map(function(edge) {\n        return {\n          source: data[edge.l.i],\n          target: data[edge.r.i]\n        };\n      });\n    };\n    voronoi.triangles = function(data) {\n      var triangles = [];\n      d3_geom_voronoi(sites(data)).cells.forEach(function(cell, i) {\n        var site = cell.site, edges = cell.edges.sort(d3_geom_voronoiHalfEdgeOrder), j = -1, m = edges.length, e0, s0, e1 = edges[m - 1].edge, s1 = e1.l === site ? e1.r : e1.l;\n        while (++j < m) {\n          e0 = e1;\n          s0 = s1;\n          e1 = edges[j].edge;\n          s1 = e1.l === site ? e1.r : e1.l;\n          if (i < s0.i && i < s1.i && d3_geom_voronoiTriangleArea(site, s0, s1) < 0) {\n            triangles.push([ data[i], data[s0.i], data[s1.i] ]);\n          }\n        }\n      });\n      return triangles;\n    };\n    voronoi.x = function(_) {\n      return arguments.length ? (fx = d3_functor(x = _), voronoi) : x;\n    };\n    voronoi.y = function(_) {\n      return arguments.length ? (fy = d3_functor(y = _), voronoi) : y;\n    };\n    voronoi.clipExtent = function(_) {\n      if (!arguments.length) return clipExtent === d3_geom_voronoiClipExtent ? null : clipExtent;\n      clipExtent = _ == null ? d3_geom_voronoiClipExtent : _;\n      return voronoi;\n    };\n    voronoi.size = function(_) {\n      if (!arguments.length) return clipExtent === d3_geom_voronoiClipExtent ? null : clipExtent && clipExtent[1];\n      return voronoi.clipExtent(_ && [ [ 0, 0 ], _ ]);\n    };\n    return voronoi;\n  };\n  var d3_geom_voronoiClipExtent = [ [ -1e6, -1e6 ], [ 1e6, 1e6 ] ];\n  function d3_geom_voronoiTriangleArea(a, b, c) {\n    return (a.x - c.x) * (b.y - a.y) - (a.x - b.x) * (c.y - a.y);\n  }\n  d3.geom.delaunay = function(vertices) {\n    return d3.geom.voronoi().triangles(vertices);\n  };\n  d3.geom.quadtree = function(points, x1, y1, x2, y2) {\n    var x = d3_geom_pointX, y = d3_geom_pointY, compat;\n    if (compat = arguments.length) {\n      x = d3_geom_quadtreeCompatX;\n      y = d3_geom_quadtreeCompatY;\n      if (compat === 3) {\n        y2 = y1;\n        x2 = x1;\n        y1 = x1 = 0;\n      }\n      return quadtree(points);\n    }\n    function quadtree(data) {\n      var d, fx = d3_functor(x), fy = d3_functor(y), xs, ys, i, n, x1_, y1_, x2_, y2_;\n      if (x1 != null) {\n        x1_ = x1, y1_ = y1, x2_ = x2, y2_ = y2;\n      } else {\n        x2_ = y2_ = -(x1_ = y1_ = Infinity);\n        xs = [], ys = [];\n        n = data.length;\n        if (compat) for (i = 0; i < n; ++i) {\n          d = data[i];\n          if (d.x < x1_) x1_ = d.x;\n          if (d.y < y1_) y1_ = d.y;\n          if (d.x > x2_) x2_ = d.x;\n          if (d.y > y2_) y2_ = d.y;\n          xs.push(d.x);\n          ys.push(d.y);\n        } else for (i = 0; i < n; ++i) {\n          var x_ = +fx(d = data[i], i), y_ = +fy(d, i);\n          if (x_ < x1_) x1_ = x_;\n          if (y_ < y1_) y1_ = y_;\n          if (x_ > x2_) x2_ = x_;\n          if (y_ > y2_) y2_ = y_;\n          xs.push(x_);\n          ys.push(y_);\n        }\n      }\n      var dx = x2_ - x1_, dy = y2_ - y1_;\n      if (dx > dy) y2_ = y1_ + dx; else x2_ = x1_ + dy;\n      function insert(n, d, x, y, x1, y1, x2, y2) {\n        if (isNaN(x) || isNaN(y)) return;\n        if (n.leaf) {\n          var nx = n.x, ny = n.y;\n          if (nx != null) {\n            if (abs(nx - x) + abs(ny - y) < .01) {\n              insertChild(n, d, x, y, x1, y1, x2, y2);\n            } else {\n              var nPoint = n.point;\n              n.x = n.y = n.point = null;\n              insertChild(n, nPoint, nx, ny, x1, y1, x2, y2);\n              insertChild(n, d, x, y, x1, y1, x2, y2);\n            }\n          } else {\n            n.x = x, n.y = y, n.point = d;\n          }\n        } else {\n          insertChild(n, d, x, y, x1, y1, x2, y2);\n        }\n      }\n      function insertChild(n, d, x, y, x1, y1, x2, y2) {\n        var xm = (x1 + x2) * .5, ym = (y1 + y2) * .5, right = x >= xm, below = y >= ym, i = below << 1 | right;\n        n.leaf = false;\n        n = n.nodes[i] || (n.nodes[i] = d3_geom_quadtreeNode());\n        if (right) x1 = xm; else x2 = xm;\n        if (below) y1 = ym; else y2 = ym;\n        insert(n, d, x, y, x1, y1, x2, y2);\n      }\n      var root = d3_geom_quadtreeNode();\n      root.add = function(d) {\n        insert(root, d, +fx(d, ++i), +fy(d, i), x1_, y1_, x2_, y2_);\n      };\n      root.visit = function(f) {\n        d3_geom_quadtreeVisit(f, root, x1_, y1_, x2_, y2_);\n      };\n      root.find = function(point) {\n        return d3_geom_quadtreeFind(root, point[0], point[1], x1_, y1_, x2_, y2_);\n      };\n      i = -1;\n      if (x1 == null) {\n        while (++i < n) {\n          insert(root, data[i], xs[i], ys[i], x1_, y1_, x2_, y2_);\n        }\n        --i;\n      } else data.forEach(root.add);\n      xs = ys = data = d = null;\n      return root;\n    }\n    quadtree.x = function(_) {\n      return arguments.length ? (x = _, quadtree) : x;\n    };\n    quadtree.y = function(_) {\n      return arguments.length ? (y = _, quadtree) : y;\n    };\n    quadtree.extent = function(_) {\n      if (!arguments.length) return x1 == null ? null : [ [ x1, y1 ], [ x2, y2 ] ];\n      if (_ == null) x1 = y1 = x2 = y2 = null; else x1 = +_[0][0], y1 = +_[0][1], x2 = +_[1][0], \n      y2 = +_[1][1];\n      return quadtree;\n    };\n    quadtree.size = function(_) {\n      if (!arguments.length) return x1 == null ? null : [ x2 - x1, y2 - y1 ];\n      if (_ == null) x1 = y1 = x2 = y2 = null; else x1 = y1 = 0, x2 = +_[0], y2 = +_[1];\n      return quadtree;\n    };\n    return quadtree;\n  };\n  function d3_geom_quadtreeCompatX(d) {\n    return d.x;\n  }\n  function d3_geom_quadtreeCompatY(d) {\n    return d.y;\n  }\n  function d3_geom_quadtreeNode() {\n    return {\n      leaf: true,\n      nodes: [],\n      point: null,\n      x: null,\n      y: null\n    };\n  }\n  function d3_geom_quadtreeVisit(f, node, x1, y1, x2, y2) {\n    if (!f(node, x1, y1, x2, y2)) {\n      var sx = (x1 + x2) * .5, sy = (y1 + y2) * .5, children = node.nodes;\n      if (children[0]) d3_geom_quadtreeVisit(f, children[0], x1, y1, sx, sy);\n      if (children[1]) d3_geom_quadtreeVisit(f, children[1], sx, y1, x2, sy);\n      if (children[2]) d3_geom_quadtreeVisit(f, children[2], x1, sy, sx, y2);\n      if (children[3]) d3_geom_quadtreeVisit(f, children[3], sx, sy, x2, y2);\n    }\n  }\n  function d3_geom_quadtreeFind(root, x, y, x0, y0, x3, y3) {\n    var minDistance2 = Infinity, closestPoint;\n    (function find(node, x1, y1, x2, y2) {\n      if (x1 > x3 || y1 > y3 || x2 < x0 || y2 < y0) return;\n      if (point = node.point) {\n        var point, dx = x - node.x, dy = y - node.y, distance2 = dx * dx + dy * dy;\n        if (distance2 < minDistance2) {\n          var distance = Math.sqrt(minDistance2 = distance2);\n          x0 = x - distance, y0 = y - distance;\n          x3 = x + distance, y3 = y + distance;\n          closestPoint = point;\n        }\n      }\n      var children = node.nodes, xm = (x1 + x2) * .5, ym = (y1 + y2) * .5, right = x >= xm, below = y >= ym;\n      for (var i = below << 1 | right, j = i + 4; i < j; ++i) {\n        if (node = children[i & 3]) switch (i & 3) {\n         case 0:\n          find(node, x1, y1, xm, ym);\n          break;\n\n         case 1:\n          find(node, xm, y1, x2, ym);\n          break;\n\n         case 2:\n          find(node, x1, ym, xm, y2);\n          break;\n\n         case 3:\n          find(node, xm, ym, x2, y2);\n          break;\n        }\n      }\n    })(root, x0, y0, x3, y3);\n    return closestPoint;\n  }\n  d3.interpolateRgb = d3_interpolateRgb;\n  function d3_interpolateRgb(a, b) {\n    a = d3.rgb(a);\n    b = d3.rgb(b);\n    var ar = a.r, ag = a.g, ab = a.b, br = b.r - ar, bg = b.g - ag, bb = b.b - ab;\n    return function(t) {\n      return \"#\" + d3_rgb_hex(Math.round(ar + br * t)) + d3_rgb_hex(Math.round(ag + bg * t)) + d3_rgb_hex(Math.round(ab + bb * t));\n    };\n  }\n  d3.interpolateObject = d3_interpolateObject;\n  function d3_interpolateObject(a, b) {\n    var i = {}, c = {}, k;\n    for (k in a) {\n      if (k in b) {\n        i[k] = d3_interpolate(a[k], b[k]);\n      } else {\n        c[k] = a[k];\n      }\n    }\n    for (k in b) {\n      if (!(k in a)) {\n        c[k] = b[k];\n      }\n    }\n    return function(t) {\n      for (k in i) c[k] = i[k](t);\n      return c;\n    };\n  }\n  d3.interpolateNumber = d3_interpolateNumber;\n  function d3_interpolateNumber(a, b) {\n    a = +a, b = +b;\n    return function(t) {\n      return a * (1 - t) + b * t;\n    };\n  }\n  d3.interpolateString = d3_interpolateString;\n  function d3_interpolateString(a, b) {\n    var bi = d3_interpolate_numberA.lastIndex = d3_interpolate_numberB.lastIndex = 0, am, bm, bs, i = -1, s = [], q = [];\n    a = a + \"\", b = b + \"\";\n    while ((am = d3_interpolate_numberA.exec(a)) && (bm = d3_interpolate_numberB.exec(b))) {\n      if ((bs = bm.index) > bi) {\n        bs = b.slice(bi, bs);\n        if (s[i]) s[i] += bs; else s[++i] = bs;\n      }\n      if ((am = am[0]) === (bm = bm[0])) {\n        if (s[i]) s[i] += bm; else s[++i] = bm;\n      } else {\n        s[++i] = null;\n        q.push({\n          i: i,\n          x: d3_interpolateNumber(am, bm)\n        });\n      }\n      bi = d3_interpolate_numberB.lastIndex;\n    }\n    if (bi < b.length) {\n      bs = b.slice(bi);\n      if (s[i]) s[i] += bs; else s[++i] = bs;\n    }\n    return s.length < 2 ? q[0] ? (b = q[0].x, function(t) {\n      return b(t) + \"\";\n    }) : function() {\n      return b;\n    } : (b = q.length, function(t) {\n      for (var i = 0, o; i < b; ++i) s[(o = q[i]).i] = o.x(t);\n      return s.join(\"\");\n    });\n  }\n  var d3_interpolate_numberA = /[-+]?(?:\\d+\\.?\\d*|\\.?\\d+)(?:[eE][-+]?\\d+)?/g, d3_interpolate_numberB = new RegExp(d3_interpolate_numberA.source, \"g\");\n  d3.interpolate = d3_interpolate;\n  function d3_interpolate(a, b) {\n    var i = d3.interpolators.length, f;\n    while (--i >= 0 && !(f = d3.interpolators[i](a, b))) ;\n    return f;\n  }\n  d3.interpolators = [ function(a, b) {\n    var t = typeof b;\n    return (t === \"string\" ? d3_rgb_names.has(b.toLowerCase()) || /^(#|rgb\\(|hsl\\()/i.test(b) ? d3_interpolateRgb : d3_interpolateString : b instanceof d3_color ? d3_interpolateRgb : Array.isArray(b) ? d3_interpolateArray : t === \"object\" && isNaN(b) ? d3_interpolateObject : d3_interpolateNumber)(a, b);\n  } ];\n  d3.interpolateArray = d3_interpolateArray;\n  function d3_interpolateArray(a, b) {\n    var x = [], c = [], na = a.length, nb = b.length, n0 = Math.min(a.length, b.length), i;\n    for (i = 0; i < n0; ++i) x.push(d3_interpolate(a[i], b[i]));\n    for (;i < na; ++i) c[i] = a[i];\n    for (;i < nb; ++i) c[i] = b[i];\n    return function(t) {\n      for (i = 0; i < n0; ++i) c[i] = x[i](t);\n      return c;\n    };\n  }\n  var d3_ease_default = function() {\n    return d3_identity;\n  };\n  var d3_ease = d3.map({\n    linear: d3_ease_default,\n    poly: d3_ease_poly,\n    quad: function() {\n      return d3_ease_quad;\n    },\n    cubic: function() {\n      return d3_ease_cubic;\n    },\n    sin: function() {\n      return d3_ease_sin;\n    },\n    exp: function() {\n      return d3_ease_exp;\n    },\n    circle: function() {\n      return d3_ease_circle;\n    },\n    elastic: d3_ease_elastic,\n    back: d3_ease_back,\n    bounce: function() {\n      return d3_ease_bounce;\n    }\n  });\n  var d3_ease_mode = d3.map({\n    \"in\": d3_identity,\n    out: d3_ease_reverse,\n    \"in-out\": d3_ease_reflect,\n    \"out-in\": function(f) {\n      return d3_ease_reflect(d3_ease_reverse(f));\n    }\n  });\n  d3.ease = function(name) {\n    var i = name.indexOf(\"-\"), t = i >= 0 ? name.slice(0, i) : name, m = i >= 0 ? name.slice(i + 1) : \"in\";\n    t = d3_ease.get(t) || d3_ease_default;\n    m = d3_ease_mode.get(m) || d3_identity;\n    return d3_ease_clamp(m(t.apply(null, d3_arraySlice.call(arguments, 1))));\n  };\n  function d3_ease_clamp(f) {\n    return function(t) {\n      return t <= 0 ? 0 : t >= 1 ? 1 : f(t);\n    };\n  }\n  function d3_ease_reverse(f) {\n    return function(t) {\n      return 1 - f(1 - t);\n    };\n  }\n  function d3_ease_reflect(f) {\n    return function(t) {\n      return .5 * (t < .5 ? f(2 * t) : 2 - f(2 - 2 * t));\n    };\n  }\n  function d3_ease_quad(t) {\n    return t * t;\n  }\n  function d3_ease_cubic(t) {\n    return t * t * t;\n  }\n  function d3_ease_cubicInOut(t) {\n    if (t <= 0) return 0;\n    if (t >= 1) return 1;\n    var t2 = t * t, t3 = t2 * t;\n    return 4 * (t < .5 ? t3 : 3 * (t - t2) + t3 - .75);\n  }\n  function d3_ease_poly(e) {\n    return function(t) {\n      return Math.pow(t, e);\n    };\n  }\n  function d3_ease_sin(t) {\n    return 1 - Math.cos(t * halfπ);\n  }\n  function d3_ease_exp(t) {\n    return Math.pow(2, 10 * (t - 1));\n  }\n  function d3_ease_circle(t) {\n    return 1 - Math.sqrt(1 - t * t);\n  }\n  function d3_ease_elastic(a, p) {\n    var s;\n    if (arguments.length < 2) p = .45;\n    if (arguments.length) s = p / τ * Math.asin(1 / a); else a = 1, s = p / 4;\n    return function(t) {\n      return 1 + a * Math.pow(2, -10 * t) * Math.sin((t - s) * τ / p);\n    };\n  }\n  function d3_ease_back(s) {\n    if (!s) s = 1.70158;\n    return function(t) {\n      return t * t * ((s + 1) * t - s);\n    };\n  }\n  function d3_ease_bounce(t) {\n    return t < 1 / 2.75 ? 7.5625 * t * t : t < 2 / 2.75 ? 7.5625 * (t -= 1.5 / 2.75) * t + .75 : t < 2.5 / 2.75 ? 7.5625 * (t -= 2.25 / 2.75) * t + .9375 : 7.5625 * (t -= 2.625 / 2.75) * t + .984375;\n  }\n  d3.interpolateHcl = d3_interpolateHcl;\n  function d3_interpolateHcl(a, b) {\n    a = d3.hcl(a);\n    b = d3.hcl(b);\n    var ah = a.h, ac = a.c, al = a.l, bh = b.h - ah, bc = b.c - ac, bl = b.l - al;\n    if (isNaN(bc)) bc = 0, ac = isNaN(ac) ? b.c : ac;\n    if (isNaN(bh)) bh = 0, ah = isNaN(ah) ? b.h : ah; else if (bh > 180) bh -= 360; else if (bh < -180) bh += 360;\n    return function(t) {\n      return d3_hcl_lab(ah + bh * t, ac + bc * t, al + bl * t) + \"\";\n    };\n  }\n  d3.interpolateHsl = d3_interpolateHsl;\n  function d3_interpolateHsl(a, b) {\n    a = d3.hsl(a);\n    b = d3.hsl(b);\n    var ah = a.h, as = a.s, al = a.l, bh = b.h - ah, bs = b.s - as, bl = b.l - al;\n    if (isNaN(bs)) bs = 0, as = isNaN(as) ? b.s : as;\n    if (isNaN(bh)) bh = 0, ah = isNaN(ah) ? b.h : ah; else if (bh > 180) bh -= 360; else if (bh < -180) bh += 360;\n    return function(t) {\n      return d3_hsl_rgb(ah + bh * t, as + bs * t, al + bl * t) + \"\";\n    };\n  }\n  d3.interpolateLab = d3_interpolateLab;\n  function d3_interpolateLab(a, b) {\n    a = d3.lab(a);\n    b = d3.lab(b);\n    var al = a.l, aa = a.a, ab = a.b, bl = b.l - al, ba = b.a - aa, bb = b.b - ab;\n    return function(t) {\n      return d3_lab_rgb(al + bl * t, aa + ba * t, ab + bb * t) + \"\";\n    };\n  }\n  d3.interpolateRound = d3_interpolateRound;\n  function d3_interpolateRound(a, b) {\n    b -= a;\n    return function(t) {\n      return Math.round(a + b * t);\n    };\n  }\n  d3.transform = function(string) {\n    var g = d3_document.createElementNS(d3.ns.prefix.svg, \"g\");\n    return (d3.transform = function(string) {\n      if (string != null) {\n        g.setAttribute(\"transform\", string);\n        var t = g.transform.baseVal.consolidate();\n      }\n      return new d3_transform(t ? t.matrix : d3_transformIdentity);\n    })(string);\n  };\n  function d3_transform(m) {\n    var r0 = [ m.a, m.b ], r1 = [ m.c, m.d ], kx = d3_transformNormalize(r0), kz = d3_transformDot(r0, r1), ky = d3_transformNormalize(d3_transformCombine(r1, r0, -kz)) || 0;\n    if (r0[0] * r1[1] < r1[0] * r0[1]) {\n      r0[0] *= -1;\n      r0[1] *= -1;\n      kx *= -1;\n      kz *= -1;\n    }\n    this.rotate = (kx ? Math.atan2(r0[1], r0[0]) : Math.atan2(-r1[0], r1[1])) * d3_degrees;\n    this.translate = [ m.e, m.f ];\n    this.scale = [ kx, ky ];\n    this.skew = ky ? Math.atan2(kz, ky) * d3_degrees : 0;\n  }\n  d3_transform.prototype.toString = function() {\n    return \"translate(\" + this.translate + \")rotate(\" + this.rotate + \")skewX(\" + this.skew + \")scale(\" + this.scale + \")\";\n  };\n  function d3_transformDot(a, b) {\n    return a[0] * b[0] + a[1] * b[1];\n  }\n  function d3_transformNormalize(a) {\n    var k = Math.sqrt(d3_transformDot(a, a));\n    if (k) {\n      a[0] /= k;\n      a[1] /= k;\n    }\n    return k;\n  }\n  function d3_transformCombine(a, b, k) {\n    a[0] += k * b[0];\n    a[1] += k * b[1];\n    return a;\n  }\n  var d3_transformIdentity = {\n    a: 1,\n    b: 0,\n    c: 0,\n    d: 1,\n    e: 0,\n    f: 0\n  };\n  d3.interpolateTransform = d3_interpolateTransform;\n  function d3_interpolateTransformPop(s) {\n    return s.length ? s.pop() + \",\" : \"\";\n  }\n  function d3_interpolateTranslate(ta, tb, s, q) {\n    if (ta[0] !== tb[0] || ta[1] !== tb[1]) {\n      var i = s.push(\"translate(\", null, \",\", null, \")\");\n      q.push({\n        i: i - 4,\n        x: d3_interpolateNumber(ta[0], tb[0])\n      }, {\n        i: i - 2,\n        x: d3_interpolateNumber(ta[1], tb[1])\n      });\n    } else if (tb[0] || tb[1]) {\n      s.push(\"translate(\" + tb + \")\");\n    }\n  }\n  function d3_interpolateRotate(ra, rb, s, q) {\n    if (ra !== rb) {\n      if (ra - rb > 180) rb += 360; else if (rb - ra > 180) ra += 360;\n      q.push({\n        i: s.push(d3_interpolateTransformPop(s) + \"rotate(\", null, \")\") - 2,\n        x: d3_interpolateNumber(ra, rb)\n      });\n    } else if (rb) {\n      s.push(d3_interpolateTransformPop(s) + \"rotate(\" + rb + \")\");\n    }\n  }\n  function d3_interpolateSkew(wa, wb, s, q) {\n    if (wa !== wb) {\n      q.push({\n        i: s.push(d3_interpolateTransformPop(s) + \"skewX(\", null, \")\") - 2,\n        x: d3_interpolateNumber(wa, wb)\n      });\n    } else if (wb) {\n      s.push(d3_interpolateTransformPop(s) + \"skewX(\" + wb + \")\");\n    }\n  }\n  function d3_interpolateScale(ka, kb, s, q) {\n    if (ka[0] !== kb[0] || ka[1] !== kb[1]) {\n      var i = s.push(d3_interpolateTransformPop(s) + \"scale(\", null, \",\", null, \")\");\n      q.push({\n        i: i - 4,\n        x: d3_interpolateNumber(ka[0], kb[0])\n      }, {\n        i: i - 2,\n        x: d3_interpolateNumber(ka[1], kb[1])\n      });\n    } else if (kb[0] !== 1 || kb[1] !== 1) {\n      s.push(d3_interpolateTransformPop(s) + \"scale(\" + kb + \")\");\n    }\n  }\n  function d3_interpolateTransform(a, b) {\n    var s = [], q = [];\n    a = d3.transform(a), b = d3.transform(b);\n    d3_interpolateTranslate(a.translate, b.translate, s, q);\n    d3_interpolateRotate(a.rotate, b.rotate, s, q);\n    d3_interpolateSkew(a.skew, b.skew, s, q);\n    d3_interpolateScale(a.scale, b.scale, s, q);\n    a = b = null;\n    return function(t) {\n      var i = -1, n = q.length, o;\n      while (++i < n) s[(o = q[i]).i] = o.x(t);\n      return s.join(\"\");\n    };\n  }\n  function d3_uninterpolateNumber(a, b) {\n    b = (b -= a = +a) || 1 / b;\n    return function(x) {\n      return (x - a) / b;\n    };\n  }\n  function d3_uninterpolateClamp(a, b) {\n    b = (b -= a = +a) || 1 / b;\n    return function(x) {\n      return Math.max(0, Math.min(1, (x - a) / b));\n    };\n  }\n  d3.layout = {};\n  d3.layout.bundle = function() {\n    return function(links) {\n      var paths = [], i = -1, n = links.length;\n      while (++i < n) paths.push(d3_layout_bundlePath(links[i]));\n      return paths;\n    };\n  };\n  function d3_layout_bundlePath(link) {\n    var start = link.source, end = link.target, lca = d3_layout_bundleLeastCommonAncestor(start, end), points = [ start ];\n    while (start !== lca) {\n      start = start.parent;\n      points.push(start);\n    }\n    var k = points.length;\n    while (end !== lca) {\n      points.splice(k, 0, end);\n      end = end.parent;\n    }\n    return points;\n  }\n  function d3_layout_bundleAncestors(node) {\n    var ancestors = [], parent = node.parent;\n    while (parent != null) {\n      ancestors.push(node);\n      node = parent;\n      parent = parent.parent;\n    }\n    ancestors.push(node);\n    return ancestors;\n  }\n  function d3_layout_bundleLeastCommonAncestor(a, b) {\n    if (a === b) return a;\n    var aNodes = d3_layout_bundleAncestors(a), bNodes = d3_layout_bundleAncestors(b), aNode = aNodes.pop(), bNode = bNodes.pop(), sharedNode = null;\n    while (aNode === bNode) {\n      sharedNode = aNode;\n      aNode = aNodes.pop();\n      bNode = bNodes.pop();\n    }\n    return sharedNode;\n  }\n  d3.layout.chord = function() {\n    var chord = {}, chords, groups, matrix, n, padding = 0, sortGroups, sortSubgroups, sortChords;\n    function relayout() {\n      var subgroups = {}, groupSums = [], groupIndex = d3.range(n), subgroupIndex = [], k, x, x0, i, j;\n      chords = [];\n      groups = [];\n      k = 0, i = -1;\n      while (++i < n) {\n        x = 0, j = -1;\n        while (++j < n) {\n          x += matrix[i][j];\n        }\n        groupSums.push(x);\n        subgroupIndex.push(d3.range(n));\n        k += x;\n      }\n      if (sortGroups) {\n        groupIndex.sort(function(a, b) {\n          return sortGroups(groupSums[a], groupSums[b]);\n        });\n      }\n      if (sortSubgroups) {\n        subgroupIndex.forEach(function(d, i) {\n          d.sort(function(a, b) {\n            return sortSubgroups(matrix[i][a], matrix[i][b]);\n          });\n        });\n      }\n      k = (τ - padding * n) / k;\n      x = 0, i = -1;\n      while (++i < n) {\n        x0 = x, j = -1;\n        while (++j < n) {\n          var di = groupIndex[i], dj = subgroupIndex[di][j], v = matrix[di][dj], a0 = x, a1 = x += v * k;\n          subgroups[di + \"-\" + dj] = {\n            index: di,\n            subindex: dj,\n            startAngle: a0,\n            endAngle: a1,\n            value: v\n          };\n        }\n        groups[di] = {\n          index: di,\n          startAngle: x0,\n          endAngle: x,\n          value: groupSums[di]\n        };\n        x += padding;\n      }\n      i = -1;\n      while (++i < n) {\n        j = i - 1;\n        while (++j < n) {\n          var source = subgroups[i + \"-\" + j], target = subgroups[j + \"-\" + i];\n          if (source.value || target.value) {\n            chords.push(source.value < target.value ? {\n              source: target,\n              target: source\n            } : {\n              source: source,\n              target: target\n            });\n          }\n        }\n      }\n      if (sortChords) resort();\n    }\n    function resort() {\n      chords.sort(function(a, b) {\n        return sortChords((a.source.value + a.target.value) / 2, (b.source.value + b.target.value) / 2);\n      });\n    }\n    chord.matrix = function(x) {\n      if (!arguments.length) return matrix;\n      n = (matrix = x) && matrix.length;\n      chords = groups = null;\n      return chord;\n    };\n    chord.padding = function(x) {\n      if (!arguments.length) return padding;\n      padding = x;\n      chords = groups = null;\n      return chord;\n    };\n    chord.sortGroups = function(x) {\n      if (!arguments.length) return sortGroups;\n      sortGroups = x;\n      chords = groups = null;\n      return chord;\n    };\n    chord.sortSubgroups = function(x) {\n      if (!arguments.length) return sortSubgroups;\n      sortSubgroups = x;\n      chords = null;\n      return chord;\n    };\n    chord.sortChords = function(x) {\n      if (!arguments.length) return sortChords;\n      sortChords = x;\n      if (chords) resort();\n      return chord;\n    };\n    chord.chords = function() {\n      if (!chords) relayout();\n      return chords;\n    };\n    chord.groups = function() {\n      if (!groups) relayout();\n      return groups;\n    };\n    return chord;\n  };\n  d3.layout.force = function() {\n    var force = {}, event = d3.dispatch(\"start\", \"tick\", \"end\"), timer, size = [ 1, 1 ], drag, alpha, friction = .9, linkDistance = d3_layout_forceLinkDistance, linkStrength = d3_layout_forceLinkStrength, charge = -30, chargeDistance2 = d3_layout_forceChargeDistance2, gravity = .1, theta2 = .64, nodes = [], links = [], distances, strengths, charges;\n    function repulse(node) {\n      return function(quad, x1, _, x2) {\n        if (quad.point !== node) {\n          var dx = quad.cx - node.x, dy = quad.cy - node.y, dw = x2 - x1, dn = dx * dx + dy * dy;\n          if (dw * dw / theta2 < dn) {\n            if (dn < chargeDistance2) {\n              var k = quad.charge / dn;\n              node.px -= dx * k;\n              node.py -= dy * k;\n            }\n            return true;\n          }\n          if (quad.point && dn && dn < chargeDistance2) {\n            var k = quad.pointCharge / dn;\n            node.px -= dx * k;\n            node.py -= dy * k;\n          }\n        }\n        return !quad.charge;\n      };\n    }\n    force.tick = function() {\n      if ((alpha *= .99) < .005) {\n        timer = null;\n        event.end({\n          type: \"end\",\n          alpha: alpha = 0\n        });\n        return true;\n      }\n      var n = nodes.length, m = links.length, q, i, o, s, t, l, k, x, y;\n      for (i = 0; i < m; ++i) {\n        o = links[i];\n        s = o.source;\n        t = o.target;\n        x = t.x - s.x;\n        y = t.y - s.y;\n        if (l = x * x + y * y) {\n          l = alpha * strengths[i] * ((l = Math.sqrt(l)) - distances[i]) / l;\n          x *= l;\n          y *= l;\n          t.x -= x * (k = s.weight + t.weight ? s.weight / (s.weight + t.weight) : .5);\n          t.y -= y * k;\n          s.x += x * (k = 1 - k);\n          s.y += y * k;\n        }\n      }\n      if (k = alpha * gravity) {\n        x = size[0] / 2;\n        y = size[1] / 2;\n        i = -1;\n        if (k) while (++i < n) {\n          o = nodes[i];\n          o.x += (x - o.x) * k;\n          o.y += (y - o.y) * k;\n        }\n      }\n      if (charge) {\n        d3_layout_forceAccumulate(q = d3.geom.quadtree(nodes), alpha, charges);\n        i = -1;\n        while (++i < n) {\n          if (!(o = nodes[i]).fixed) {\n            q.visit(repulse(o));\n          }\n        }\n      }\n      i = -1;\n      while (++i < n) {\n        o = nodes[i];\n        if (o.fixed) {\n          o.x = o.px;\n          o.y = o.py;\n        } else {\n          o.x -= (o.px - (o.px = o.x)) * friction;\n          o.y -= (o.py - (o.py = o.y)) * friction;\n        }\n      }\n      event.tick({\n        type: \"tick\",\n        alpha: alpha\n      });\n    };\n    force.nodes = function(x) {\n      if (!arguments.length) return nodes;\n      nodes = x;\n      return force;\n    };\n    force.links = function(x) {\n      if (!arguments.length) return links;\n      links = x;\n      return force;\n    };\n    force.size = function(x) {\n      if (!arguments.length) return size;\n      size = x;\n      return force;\n    };\n    force.linkDistance = function(x) {\n      if (!arguments.length) return linkDistance;\n      linkDistance = typeof x === \"function\" ? x : +x;\n      return force;\n    };\n    force.distance = force.linkDistance;\n    force.linkStrength = function(x) {\n      if (!arguments.length) return linkStrength;\n      linkStrength = typeof x === \"function\" ? x : +x;\n      return force;\n    };\n    force.friction = function(x) {\n      if (!arguments.length) return friction;\n      friction = +x;\n      return force;\n    };\n    force.charge = function(x) {\n      if (!arguments.length) return charge;\n      charge = typeof x === \"function\" ? x : +x;\n      return force;\n    };\n    force.chargeDistance = function(x) {\n      if (!arguments.length) return Math.sqrt(chargeDistance2);\n      chargeDistance2 = x * x;\n      return force;\n    };\n    force.gravity = function(x) {\n      if (!arguments.length) return gravity;\n      gravity = +x;\n      return force;\n    };\n    force.theta = function(x) {\n      if (!arguments.length) return Math.sqrt(theta2);\n      theta2 = x * x;\n      return force;\n    };\n    force.alpha = function(x) {\n      if (!arguments.length) return alpha;\n      x = +x;\n      if (alpha) {\n        if (x > 0) {\n          alpha = x;\n        } else {\n          timer.c = null, timer.t = NaN, timer = null;\n          event.end({\n            type: \"end\",\n            alpha: alpha = 0\n          });\n        }\n      } else if (x > 0) {\n        event.start({\n          type: \"start\",\n          alpha: alpha = x\n        });\n        timer = d3_timer(force.tick);\n      }\n      return force;\n    };\n    force.start = function() {\n      var i, n = nodes.length, m = links.length, w = size[0], h = size[1], neighbors, o;\n      for (i = 0; i < n; ++i) {\n        (o = nodes[i]).index = i;\n        o.weight = 0;\n      }\n      for (i = 0; i < m; ++i) {\n        o = links[i];\n        if (typeof o.source == \"number\") o.source = nodes[o.source];\n        if (typeof o.target == \"number\") o.target = nodes[o.target];\n        ++o.source.weight;\n        ++o.target.weight;\n      }\n      for (i = 0; i < n; ++i) {\n        o = nodes[i];\n        if (isNaN(o.x)) o.x = position(\"x\", w);\n        if (isNaN(o.y)) o.y = position(\"y\", h);\n        if (isNaN(o.px)) o.px = o.x;\n        if (isNaN(o.py)) o.py = o.y;\n      }\n      distances = [];\n      if (typeof linkDistance === \"function\") for (i = 0; i < m; ++i) distances[i] = +linkDistance.call(this, links[i], i); else for (i = 0; i < m; ++i) distances[i] = linkDistance;\n      strengths = [];\n      if (typeof linkStrength === \"function\") for (i = 0; i < m; ++i) strengths[i] = +linkStrength.call(this, links[i], i); else for (i = 0; i < m; ++i) strengths[i] = linkStrength;\n      charges = [];\n      if (typeof charge === \"function\") for (i = 0; i < n; ++i) charges[i] = +charge.call(this, nodes[i], i); else for (i = 0; i < n; ++i) charges[i] = charge;\n      function position(dimension, size) {\n        if (!neighbors) {\n          neighbors = new Array(n);\n          for (j = 0; j < n; ++j) {\n            neighbors[j] = [];\n          }\n          for (j = 0; j < m; ++j) {\n            var o = links[j];\n            neighbors[o.source.index].push(o.target);\n            neighbors[o.target.index].push(o.source);\n          }\n        }\n        var candidates = neighbors[i], j = -1, l = candidates.length, x;\n        while (++j < l) if (!isNaN(x = candidates[j][dimension])) return x;\n        return Math.random() * size;\n      }\n      return force.resume();\n    };\n    force.resume = function() {\n      return force.alpha(.1);\n    };\n    force.stop = function() {\n      return force.alpha(0);\n    };\n    force.drag = function() {\n      if (!drag) drag = d3.behavior.drag().origin(d3_identity).on(\"dragstart.force\", d3_layout_forceDragstart).on(\"drag.force\", dragmove).on(\"dragend.force\", d3_layout_forceDragend);\n      if (!arguments.length) return drag;\n      this.on(\"mouseover.force\", d3_layout_forceMouseover).on(\"mouseout.force\", d3_layout_forceMouseout).call(drag);\n    };\n    function dragmove(d) {\n      d.px = d3.event.x, d.py = d3.event.y;\n      force.resume();\n    }\n    return d3.rebind(force, event, \"on\");\n  };\n  function d3_layout_forceDragstart(d) {\n    d.fixed |= 2;\n  }\n  function d3_layout_forceDragend(d) {\n    d.fixed &= ~6;\n  }\n  function d3_layout_forceMouseover(d) {\n    d.fixed |= 4;\n    d.px = d.x, d.py = d.y;\n  }\n  function d3_layout_forceMouseout(d) {\n    d.fixed &= ~4;\n  }\n  function d3_layout_forceAccumulate(quad, alpha, charges) {\n    var cx = 0, cy = 0;\n    quad.charge = 0;\n    if (!quad.leaf) {\n      var nodes = quad.nodes, n = nodes.length, i = -1, c;\n      while (++i < n) {\n        c = nodes[i];\n        if (c == null) continue;\n        d3_layout_forceAccumulate(c, alpha, charges);\n        quad.charge += c.charge;\n        cx += c.charge * c.cx;\n        cy += c.charge * c.cy;\n      }\n    }\n    if (quad.point) {\n      if (!quad.leaf) {\n        quad.point.x += Math.random() - .5;\n        quad.point.y += Math.random() - .5;\n      }\n      var k = alpha * charges[quad.point.index];\n      quad.charge += quad.pointCharge = k;\n      cx += k * quad.point.x;\n      cy += k * quad.point.y;\n    }\n    quad.cx = cx / quad.charge;\n    quad.cy = cy / quad.charge;\n  }\n  var d3_layout_forceLinkDistance = 20, d3_layout_forceLinkStrength = 1, d3_layout_forceChargeDistance2 = Infinity;\n  d3.layout.hierarchy = function() {\n    var sort = d3_layout_hierarchySort, children = d3_layout_hierarchyChildren, value = d3_layout_hierarchyValue;\n    function hierarchy(root) {\n      var stack = [ root ], nodes = [], node;\n      root.depth = 0;\n      while ((node = stack.pop()) != null) {\n        nodes.push(node);\n        if ((childs = children.call(hierarchy, node, node.depth)) && (n = childs.length)) {\n          var n, childs, child;\n          while (--n >= 0) {\n            stack.push(child = childs[n]);\n            child.parent = node;\n            child.depth = node.depth + 1;\n          }\n          if (value) node.value = 0;\n          node.children = childs;\n        } else {\n          if (value) node.value = +value.call(hierarchy, node, node.depth) || 0;\n          delete node.children;\n        }\n      }\n      d3_layout_hierarchyVisitAfter(root, function(node) {\n        var childs, parent;\n        if (sort && (childs = node.children)) childs.sort(sort);\n        if (value && (parent = node.parent)) parent.value += node.value;\n      });\n      return nodes;\n    }\n    hierarchy.sort = function(x) {\n      if (!arguments.length) return sort;\n      sort = x;\n      return hierarchy;\n    };\n    hierarchy.children = function(x) {\n      if (!arguments.length) return children;\n      children = x;\n      return hierarchy;\n    };\n    hierarchy.value = function(x) {\n      if (!arguments.length) return value;\n      value = x;\n      return hierarchy;\n    };\n    hierarchy.revalue = function(root) {\n      if (value) {\n        d3_layout_hierarchyVisitBefore(root, function(node) {\n          if (node.children) node.value = 0;\n        });\n        d3_layout_hierarchyVisitAfter(root, function(node) {\n          var parent;\n          if (!node.children) node.value = +value.call(hierarchy, node, node.depth) || 0;\n          if (parent = node.parent) parent.value += node.value;\n        });\n      }\n      return root;\n    };\n    return hierarchy;\n  };\n  function d3_layout_hierarchyRebind(object, hierarchy) {\n    d3.rebind(object, hierarchy, \"sort\", \"children\", \"value\");\n    object.nodes = object;\n    object.links = d3_layout_hierarchyLinks;\n    return object;\n  }\n  function d3_layout_hierarchyVisitBefore(node, callback) {\n    var nodes = [ node ];\n    while ((node = nodes.pop()) != null) {\n      callback(node);\n      if ((children = node.children) && (n = children.length)) {\n        var n, children;\n        while (--n >= 0) nodes.push(children[n]);\n      }\n    }\n  }\n  function d3_layout_hierarchyVisitAfter(node, callback) {\n    var nodes = [ node ], nodes2 = [];\n    while ((node = nodes.pop()) != null) {\n      nodes2.push(node);\n      if ((children = node.children) && (n = children.length)) {\n        var i = -1, n, children;\n        while (++i < n) nodes.push(children[i]);\n      }\n    }\n    while ((node = nodes2.pop()) != null) {\n      callback(node);\n    }\n  }\n  function d3_layout_hierarchyChildren(d) {\n    return d.children;\n  }\n  function d3_layout_hierarchyValue(d) {\n    return d.value;\n  }\n  function d3_layout_hierarchySort(a, b) {\n    return b.value - a.value;\n  }\n  function d3_layout_hierarchyLinks(nodes) {\n    return d3.merge(nodes.map(function(parent) {\n      return (parent.children || []).map(function(child) {\n        return {\n          source: parent,\n          target: child\n        };\n      });\n    }));\n  }\n  d3.layout.partition = function() {\n    var hierarchy = d3.layout.hierarchy(), size = [ 1, 1 ];\n    function position(node, x, dx, dy) {\n      var children = node.children;\n      node.x = x;\n      node.y = node.depth * dy;\n      node.dx = dx;\n      node.dy = dy;\n      if (children && (n = children.length)) {\n        var i = -1, n, c, d;\n        dx = node.value ? dx / node.value : 0;\n        while (++i < n) {\n          position(c = children[i], x, d = c.value * dx, dy);\n          x += d;\n        }\n      }\n    }\n    function depth(node) {\n      var children = node.children, d = 0;\n      if (children && (n = children.length)) {\n        var i = -1, n;\n        while (++i < n) d = Math.max(d, depth(children[i]));\n      }\n      return 1 + d;\n    }\n    function partition(d, i) {\n      var nodes = hierarchy.call(this, d, i);\n      position(nodes[0], 0, size[0], size[1] / depth(nodes[0]));\n      return nodes;\n    }\n    partition.size = function(x) {\n      if (!arguments.length) return size;\n      size = x;\n      return partition;\n    };\n    return d3_layout_hierarchyRebind(partition, hierarchy);\n  };\n  d3.layout.pie = function() {\n    var value = Number, sort = d3_layout_pieSortByValue, startAngle = 0, endAngle = τ, padAngle = 0;\n    function pie(data) {\n      var n = data.length, values = data.map(function(d, i) {\n        return +value.call(pie, d, i);\n      }), a = +(typeof startAngle === \"function\" ? startAngle.apply(this, arguments) : startAngle), da = (typeof endAngle === \"function\" ? endAngle.apply(this, arguments) : endAngle) - a, p = Math.min(Math.abs(da) / n, +(typeof padAngle === \"function\" ? padAngle.apply(this, arguments) : padAngle)), pa = p * (da < 0 ? -1 : 1), sum = d3.sum(values), k = sum ? (da - n * pa) / sum : 0, index = d3.range(n), arcs = [], v;\n      if (sort != null) index.sort(sort === d3_layout_pieSortByValue ? function(i, j) {\n        return values[j] - values[i];\n      } : function(i, j) {\n        return sort(data[i], data[j]);\n      });\n      index.forEach(function(i) {\n        arcs[i] = {\n          data: data[i],\n          value: v = values[i],\n          startAngle: a,\n          endAngle: a += v * k + pa,\n          padAngle: p\n        };\n      });\n      return arcs;\n    }\n    pie.value = function(_) {\n      if (!arguments.length) return value;\n      value = _;\n      return pie;\n    };\n    pie.sort = function(_) {\n      if (!arguments.length) return sort;\n      sort = _;\n      return pie;\n    };\n    pie.startAngle = function(_) {\n      if (!arguments.length) return startAngle;\n      startAngle = _;\n      return pie;\n    };\n    pie.endAngle = function(_) {\n      if (!arguments.length) return endAngle;\n      endAngle = _;\n      return pie;\n    };\n    pie.padAngle = function(_) {\n      if (!arguments.length) return padAngle;\n      padAngle = _;\n      return pie;\n    };\n    return pie;\n  };\n  var d3_layout_pieSortByValue = {};\n  d3.layout.stack = function() {\n    var values = d3_identity, order = d3_layout_stackOrderDefault, offset = d3_layout_stackOffsetZero, out = d3_layout_stackOut, x = d3_layout_stackX, y = d3_layout_stackY;\n    function stack(data, index) {\n      if (!(n = data.length)) return data;\n      var series = data.map(function(d, i) {\n        return values.call(stack, d, i);\n      });\n      var points = series.map(function(d) {\n        return d.map(function(v, i) {\n          return [ x.call(stack, v, i), y.call(stack, v, i) ];\n        });\n      });\n      var orders = order.call(stack, points, index);\n      series = d3.permute(series, orders);\n      points = d3.permute(points, orders);\n      var offsets = offset.call(stack, points, index);\n      var m = series[0].length, n, i, j, o;\n      for (j = 0; j < m; ++j) {\n        out.call(stack, series[0][j], o = offsets[j], points[0][j][1]);\n        for (i = 1; i < n; ++i) {\n          out.call(stack, series[i][j], o += points[i - 1][j][1], points[i][j][1]);\n        }\n      }\n      return data;\n    }\n    stack.values = function(x) {\n      if (!arguments.length) return values;\n      values = x;\n      return stack;\n    };\n    stack.order = function(x) {\n      if (!arguments.length) return order;\n      order = typeof x === \"function\" ? x : d3_layout_stackOrders.get(x) || d3_layout_stackOrderDefault;\n      return stack;\n    };\n    stack.offset = function(x) {\n      if (!arguments.length) return offset;\n      offset = typeof x === \"function\" ? x : d3_layout_stackOffsets.get(x) || d3_layout_stackOffsetZero;\n      return stack;\n    };\n    stack.x = function(z) {\n      if (!arguments.length) return x;\n      x = z;\n      return stack;\n    };\n    stack.y = function(z) {\n      if (!arguments.length) return y;\n      y = z;\n      return stack;\n    };\n    stack.out = function(z) {\n      if (!arguments.length) return out;\n      out = z;\n      return stack;\n    };\n    return stack;\n  };\n  function d3_layout_stackX(d) {\n    return d.x;\n  }\n  function d3_layout_stackY(d) {\n    return d.y;\n  }\n  function d3_layout_stackOut(d, y0, y) {\n    d.y0 = y0;\n    d.y = y;\n  }\n  var d3_layout_stackOrders = d3.map({\n    \"inside-out\": function(data) {\n      var n = data.length, i, j, max = data.map(d3_layout_stackMaxIndex), sums = data.map(d3_layout_stackReduceSum), index = d3.range(n).sort(function(a, b) {\n        return max[a] - max[b];\n      }), top = 0, bottom = 0, tops = [], bottoms = [];\n      for (i = 0; i < n; ++i) {\n        j = index[i];\n        if (top < bottom) {\n          top += sums[j];\n          tops.push(j);\n        } else {\n          bottom += sums[j];\n          bottoms.push(j);\n        }\n      }\n      return bottoms.reverse().concat(tops);\n    },\n    reverse: function(data) {\n      return d3.range(data.length).reverse();\n    },\n    \"default\": d3_layout_stackOrderDefault\n  });\n  var d3_layout_stackOffsets = d3.map({\n    silhouette: function(data) {\n      var n = data.length, m = data[0].length, sums = [], max = 0, i, j, o, y0 = [];\n      for (j = 0; j < m; ++j) {\n        for (i = 0, o = 0; i < n; i++) o += data[i][j][1];\n        if (o > max) max = o;\n        sums.push(o);\n      }\n      for (j = 0; j < m; ++j) {\n        y0[j] = (max - sums[j]) / 2;\n      }\n      return y0;\n    },\n    wiggle: function(data) {\n      var n = data.length, x = data[0], m = x.length, i, j, k, s1, s2, s3, dx, o, o0, y0 = [];\n      y0[0] = o = o0 = 0;\n      for (j = 1; j < m; ++j) {\n        for (i = 0, s1 = 0; i < n; ++i) s1 += data[i][j][1];\n        for (i = 0, s2 = 0, dx = x[j][0] - x[j - 1][0]; i < n; ++i) {\n          for (k = 0, s3 = (data[i][j][1] - data[i][j - 1][1]) / (2 * dx); k < i; ++k) {\n            s3 += (data[k][j][1] - data[k][j - 1][1]) / dx;\n          }\n          s2 += s3 * data[i][j][1];\n        }\n        y0[j] = o -= s1 ? s2 / s1 * dx : 0;\n        if (o < o0) o0 = o;\n      }\n      for (j = 0; j < m; ++j) y0[j] -= o0;\n      return y0;\n    },\n    expand: function(data) {\n      var n = data.length, m = data[0].length, k = 1 / n, i, j, o, y0 = [];\n      for (j = 0; j < m; ++j) {\n        for (i = 0, o = 0; i < n; i++) o += data[i][j][1];\n        if (o) for (i = 0; i < n; i++) data[i][j][1] /= o; else for (i = 0; i < n; i++) data[i][j][1] = k;\n      }\n      for (j = 0; j < m; ++j) y0[j] = 0;\n      return y0;\n    },\n    zero: d3_layout_stackOffsetZero\n  });\n  function d3_layout_stackOrderDefault(data) {\n    return d3.range(data.length);\n  }\n  function d3_layout_stackOffsetZero(data) {\n    var j = -1, m = data[0].length, y0 = [];\n    while (++j < m) y0[j] = 0;\n    return y0;\n  }\n  function d3_layout_stackMaxIndex(array) {\n    var i = 1, j = 0, v = array[0][1], k, n = array.length;\n    for (;i < n; ++i) {\n      if ((k = array[i][1]) > v) {\n        j = i;\n        v = k;\n      }\n    }\n    return j;\n  }\n  function d3_layout_stackReduceSum(d) {\n    return d.reduce(d3_layout_stackSum, 0);\n  }\n  function d3_layout_stackSum(p, d) {\n    return p + d[1];\n  }\n  d3.layout.histogram = function() {\n    var frequency = true, valuer = Number, ranger = d3_layout_histogramRange, binner = d3_layout_histogramBinSturges;\n    function histogram(data, i) {\n      var bins = [], values = data.map(valuer, this), range = ranger.call(this, values, i), thresholds = binner.call(this, range, values, i), bin, i = -1, n = values.length, m = thresholds.length - 1, k = frequency ? 1 : 1 / n, x;\n      while (++i < m) {\n        bin = bins[i] = [];\n        bin.dx = thresholds[i + 1] - (bin.x = thresholds[i]);\n        bin.y = 0;\n      }\n      if (m > 0) {\n        i = -1;\n        while (++i < n) {\n          x = values[i];\n          if (x >= range[0] && x <= range[1]) {\n            bin = bins[d3.bisect(thresholds, x, 1, m) - 1];\n            bin.y += k;\n            bin.push(data[i]);\n          }\n        }\n      }\n      return bins;\n    }\n    histogram.value = function(x) {\n      if (!arguments.length) return valuer;\n      valuer = x;\n      return histogram;\n    };\n    histogram.range = function(x) {\n      if (!arguments.length) return ranger;\n      ranger = d3_functor(x);\n      return histogram;\n    };\n    histogram.bins = function(x) {\n      if (!arguments.length) return binner;\n      binner = typeof x === \"number\" ? function(range) {\n        return d3_layout_histogramBinFixed(range, x);\n      } : d3_functor(x);\n      return histogram;\n    };\n    histogram.frequency = function(x) {\n      if (!arguments.length) return frequency;\n      frequency = !!x;\n      return histogram;\n    };\n    return histogram;\n  };\n  function d3_layout_histogramBinSturges(range, values) {\n    return d3_layout_histogramBinFixed(range, Math.ceil(Math.log(values.length) / Math.LN2 + 1));\n  }\n  function d3_layout_histogramBinFixed(range, n) {\n    var x = -1, b = +range[0], m = (range[1] - b) / n, f = [];\n    while (++x <= n) f[x] = m * x + b;\n    return f;\n  }\n  function d3_layout_histogramRange(values) {\n    return [ d3.min(values), d3.max(values) ];\n  }\n  d3.layout.pack = function() {\n    var hierarchy = d3.layout.hierarchy().sort(d3_layout_packSort), padding = 0, size = [ 1, 1 ], radius;\n    function pack(d, i) {\n      var nodes = hierarchy.call(this, d, i), root = nodes[0], w = size[0], h = size[1], r = radius == null ? Math.sqrt : typeof radius === \"function\" ? radius : function() {\n        return radius;\n      };\n      root.x = root.y = 0;\n      d3_layout_hierarchyVisitAfter(root, function(d) {\n        d.r = +r(d.value);\n      });\n      d3_layout_hierarchyVisitAfter(root, d3_layout_packSiblings);\n      if (padding) {\n        var dr = padding * (radius ? 1 : Math.max(2 * root.r / w, 2 * root.r / h)) / 2;\n        d3_layout_hierarchyVisitAfter(root, function(d) {\n          d.r += dr;\n        });\n        d3_layout_hierarchyVisitAfter(root, d3_layout_packSiblings);\n        d3_layout_hierarchyVisitAfter(root, function(d) {\n          d.r -= dr;\n        });\n      }\n      d3_layout_packTransform(root, w / 2, h / 2, radius ? 1 : 1 / Math.max(2 * root.r / w, 2 * root.r / h));\n      return nodes;\n    }\n    pack.size = function(_) {\n      if (!arguments.length) return size;\n      size = _;\n      return pack;\n    };\n    pack.radius = function(_) {\n      if (!arguments.length) return radius;\n      radius = _ == null || typeof _ === \"function\" ? _ : +_;\n      return pack;\n    };\n    pack.padding = function(_) {\n      if (!arguments.length) return padding;\n      padding = +_;\n      return pack;\n    };\n    return d3_layout_hierarchyRebind(pack, hierarchy);\n  };\n  function d3_layout_packSort(a, b) {\n    return a.value - b.value;\n  }\n  function d3_layout_packInsert(a, b) {\n    var c = a._pack_next;\n    a._pack_next = b;\n    b._pack_prev = a;\n    b._pack_next = c;\n    c._pack_prev = b;\n  }\n  function d3_layout_packSplice(a, b) {\n    a._pack_next = b;\n    b._pack_prev = a;\n  }\n  function d3_layout_packIntersects(a, b) {\n    var dx = b.x - a.x, dy = b.y - a.y, dr = a.r + b.r;\n    return .999 * dr * dr > dx * dx + dy * dy;\n  }\n  function d3_layout_packSiblings(node) {\n    if (!(nodes = node.children) || !(n = nodes.length)) return;\n    var nodes, xMin = Infinity, xMax = -Infinity, yMin = Infinity, yMax = -Infinity, a, b, c, i, j, k, n;\n    function bound(node) {\n      xMin = Math.min(node.x - node.r, xMin);\n      xMax = Math.max(node.x + node.r, xMax);\n      yMin = Math.min(node.y - node.r, yMin);\n      yMax = Math.max(node.y + node.r, yMax);\n    }\n    nodes.forEach(d3_layout_packLink);\n    a = nodes[0];\n    a.x = -a.r;\n    a.y = 0;\n    bound(a);\n    if (n > 1) {\n      b = nodes[1];\n      b.x = b.r;\n      b.y = 0;\n      bound(b);\n      if (n > 2) {\n        c = nodes[2];\n        d3_layout_packPlace(a, b, c);\n        bound(c);\n        d3_layout_packInsert(a, c);\n        a._pack_prev = c;\n        d3_layout_packInsert(c, b);\n        b = a._pack_next;\n        for (i = 3; i < n; i++) {\n          d3_layout_packPlace(a, b, c = nodes[i]);\n          var isect = 0, s1 = 1, s2 = 1;\n          for (j = b._pack_next; j !== b; j = j._pack_next, s1++) {\n            if (d3_layout_packIntersects(j, c)) {\n              isect = 1;\n              break;\n            }\n          }\n          if (isect == 1) {\n            for (k = a._pack_prev; k !== j._pack_prev; k = k._pack_prev, s2++) {\n              if (d3_layout_packIntersects(k, c)) {\n                break;\n              }\n            }\n          }\n          if (isect) {\n            if (s1 < s2 || s1 == s2 && b.r < a.r) d3_layout_packSplice(a, b = j); else d3_layout_packSplice(a = k, b);\n            i--;\n          } else {\n            d3_layout_packInsert(a, c);\n            b = c;\n            bound(c);\n          }\n        }\n      }\n    }\n    var cx = (xMin + xMax) / 2, cy = (yMin + yMax) / 2, cr = 0;\n    for (i = 0; i < n; i++) {\n      c = nodes[i];\n      c.x -= cx;\n      c.y -= cy;\n      cr = Math.max(cr, c.r + Math.sqrt(c.x * c.x + c.y * c.y));\n    }\n    node.r = cr;\n    nodes.forEach(d3_layout_packUnlink);\n  }\n  function d3_layout_packLink(node) {\n    node._pack_next = node._pack_prev = node;\n  }\n  function d3_layout_packUnlink(node) {\n    delete node._pack_next;\n    delete node._pack_prev;\n  }\n  function d3_layout_packTransform(node, x, y, k) {\n    var children = node.children;\n    node.x = x += k * node.x;\n    node.y = y += k * node.y;\n    node.r *= k;\n    if (children) {\n      var i = -1, n = children.length;\n      while (++i < n) d3_layout_packTransform(children[i], x, y, k);\n    }\n  }\n  function d3_layout_packPlace(a, b, c) {\n    var db = a.r + c.r, dx = b.x - a.x, dy = b.y - a.y;\n    if (db && (dx || dy)) {\n      var da = b.r + c.r, dc = dx * dx + dy * dy;\n      da *= da;\n      db *= db;\n      var x = .5 + (db - da) / (2 * dc), y = Math.sqrt(Math.max(0, 2 * da * (db + dc) - (db -= dc) * db - da * da)) / (2 * dc);\n      c.x = a.x + x * dx + y * dy;\n      c.y = a.y + x * dy - y * dx;\n    } else {\n      c.x = a.x + db;\n      c.y = a.y;\n    }\n  }\n  d3.layout.tree = function() {\n    var hierarchy = d3.layout.hierarchy().sort(null).value(null), separation = d3_layout_treeSeparation, size = [ 1, 1 ], nodeSize = null;\n    function tree(d, i) {\n      var nodes = hierarchy.call(this, d, i), root0 = nodes[0], root1 = wrapTree(root0);\n      d3_layout_hierarchyVisitAfter(root1, firstWalk), root1.parent.m = -root1.z;\n      d3_layout_hierarchyVisitBefore(root1, secondWalk);\n      if (nodeSize) d3_layout_hierarchyVisitBefore(root0, sizeNode); else {\n        var left = root0, right = root0, bottom = root0;\n        d3_layout_hierarchyVisitBefore(root0, function(node) {\n          if (node.x < left.x) left = node;\n          if (node.x > right.x) right = node;\n          if (node.depth > bottom.depth) bottom = node;\n        });\n        var tx = separation(left, right) / 2 - left.x, kx = size[0] / (right.x + separation(right, left) / 2 + tx), ky = size[1] / (bottom.depth || 1);\n        d3_layout_hierarchyVisitBefore(root0, function(node) {\n          node.x = (node.x + tx) * kx;\n          node.y = node.depth * ky;\n        });\n      }\n      return nodes;\n    }\n    function wrapTree(root0) {\n      var root1 = {\n        A: null,\n        children: [ root0 ]\n      }, queue = [ root1 ], node1;\n      while ((node1 = queue.pop()) != null) {\n        for (var children = node1.children, child, i = 0, n = children.length; i < n; ++i) {\n          queue.push((children[i] = child = {\n            _: children[i],\n            parent: node1,\n            children: (child = children[i].children) && child.slice() || [],\n            A: null,\n            a: null,\n            z: 0,\n            m: 0,\n            c: 0,\n            s: 0,\n            t: null,\n            i: i\n          }).a = child);\n        }\n      }\n      return root1.children[0];\n    }\n    function firstWalk(v) {\n      var children = v.children, siblings = v.parent.children, w = v.i ? siblings[v.i - 1] : null;\n      if (children.length) {\n        d3_layout_treeShift(v);\n        var midpoint = (children[0].z + children[children.length - 1].z) / 2;\n        if (w) {\n          v.z = w.z + separation(v._, w._);\n          v.m = v.z - midpoint;\n        } else {\n          v.z = midpoint;\n        }\n      } else if (w) {\n        v.z = w.z + separation(v._, w._);\n      }\n      v.parent.A = apportion(v, w, v.parent.A || siblings[0]);\n    }\n    function secondWalk(v) {\n      v._.x = v.z + v.parent.m;\n      v.m += v.parent.m;\n    }\n    function apportion(v, w, ancestor) {\n      if (w) {\n        var vip = v, vop = v, vim = w, vom = vip.parent.children[0], sip = vip.m, sop = vop.m, sim = vim.m, som = vom.m, shift;\n        while (vim = d3_layout_treeRight(vim), vip = d3_layout_treeLeft(vip), vim && vip) {\n          vom = d3_layout_treeLeft(vom);\n          vop = d3_layout_treeRight(vop);\n          vop.a = v;\n          shift = vim.z + sim - vip.z - sip + separation(vim._, vip._);\n          if (shift > 0) {\n            d3_layout_treeMove(d3_layout_treeAncestor(vim, v, ancestor), v, shift);\n            sip += shift;\n            sop += shift;\n          }\n          sim += vim.m;\n          sip += vip.m;\n          som += vom.m;\n          sop += vop.m;\n        }\n        if (vim && !d3_layout_treeRight(vop)) {\n          vop.t = vim;\n          vop.m += sim - sop;\n        }\n        if (vip && !d3_layout_treeLeft(vom)) {\n          vom.t = vip;\n          vom.m += sip - som;\n          ancestor = v;\n        }\n      }\n      return ancestor;\n    }\n    function sizeNode(node) {\n      node.x *= size[0];\n      node.y = node.depth * size[1];\n    }\n    tree.separation = function(x) {\n      if (!arguments.length) return separation;\n      separation = x;\n      return tree;\n    };\n    tree.size = function(x) {\n      if (!arguments.length) return nodeSize ? null : size;\n      nodeSize = (size = x) == null ? sizeNode : null;\n      return tree;\n    };\n    tree.nodeSize = function(x) {\n      if (!arguments.length) return nodeSize ? size : null;\n      nodeSize = (size = x) == null ? null : sizeNode;\n      return tree;\n    };\n    return d3_layout_hierarchyRebind(tree, hierarchy);\n  };\n  function d3_layout_treeSeparation(a, b) {\n    return a.parent == b.parent ? 1 : 2;\n  }\n  function d3_layout_treeLeft(v) {\n    var children = v.children;\n    return children.length ? children[0] : v.t;\n  }\n  function d3_layout_treeRight(v) {\n    var children = v.children, n;\n    return (n = children.length) ? children[n - 1] : v.t;\n  }\n  function d3_layout_treeMove(wm, wp, shift) {\n    var change = shift / (wp.i - wm.i);\n    wp.c -= change;\n    wp.s += shift;\n    wm.c += change;\n    wp.z += shift;\n    wp.m += shift;\n  }\n  function d3_layout_treeShift(v) {\n    var shift = 0, change = 0, children = v.children, i = children.length, w;\n    while (--i >= 0) {\n      w = children[i];\n      w.z += shift;\n      w.m += shift;\n      shift += w.s + (change += w.c);\n    }\n  }\n  function d3_layout_treeAncestor(vim, v, ancestor) {\n    return vim.a.parent === v.parent ? vim.a : ancestor;\n  }\n  d3.layout.cluster = function() {\n    var hierarchy = d3.layout.hierarchy().sort(null).value(null), separation = d3_layout_treeSeparation, size = [ 1, 1 ], nodeSize = false;\n    function cluster(d, i) {\n      var nodes = hierarchy.call(this, d, i), root = nodes[0], previousNode, x = 0;\n      d3_layout_hierarchyVisitAfter(root, function(node) {\n        var children = node.children;\n        if (children && children.length) {\n          node.x = d3_layout_clusterX(children);\n          node.y = d3_layout_clusterY(children);\n        } else {\n          node.x = previousNode ? x += separation(node, previousNode) : 0;\n          node.y = 0;\n          previousNode = node;\n        }\n      });\n      var left = d3_layout_clusterLeft(root), right = d3_layout_clusterRight(root), x0 = left.x - separation(left, right) / 2, x1 = right.x + separation(right, left) / 2;\n      d3_layout_hierarchyVisitAfter(root, nodeSize ? function(node) {\n        node.x = (node.x - root.x) * size[0];\n        node.y = (root.y - node.y) * size[1];\n      } : function(node) {\n        node.x = (node.x - x0) / (x1 - x0) * size[0];\n        node.y = (1 - (root.y ? node.y / root.y : 1)) * size[1];\n      });\n      return nodes;\n    }\n    cluster.separation = function(x) {\n      if (!arguments.length) return separation;\n      separation = x;\n      return cluster;\n    };\n    cluster.size = function(x) {\n      if (!arguments.length) return nodeSize ? null : size;\n      nodeSize = (size = x) == null;\n      return cluster;\n    };\n    cluster.nodeSize = function(x) {\n      if (!arguments.length) return nodeSize ? size : null;\n      nodeSize = (size = x) != null;\n      return cluster;\n    };\n    return d3_layout_hierarchyRebind(cluster, hierarchy);\n  };\n  function d3_layout_clusterY(children) {\n    return 1 + d3.max(children, function(child) {\n      return child.y;\n    });\n  }\n  function d3_layout_clusterX(children) {\n    return children.reduce(function(x, child) {\n      return x + child.x;\n    }, 0) / children.length;\n  }\n  function d3_layout_clusterLeft(node) {\n    var children = node.children;\n    return children && children.length ? d3_layout_clusterLeft(children[0]) : node;\n  }\n  function d3_layout_clusterRight(node) {\n    var children = node.children, n;\n    return children && (n = children.length) ? d3_layout_clusterRight(children[n - 1]) : node;\n  }\n  d3.layout.treemap = function() {\n    var hierarchy = d3.layout.hierarchy(), round = Math.round, size = [ 1, 1 ], padding = null, pad = d3_layout_treemapPadNull, sticky = false, stickies, mode = \"squarify\", ratio = .5 * (1 + Math.sqrt(5));\n    function scale(children, k) {\n      var i = -1, n = children.length, child, area;\n      while (++i < n) {\n        area = (child = children[i]).value * (k < 0 ? 0 : k);\n        child.area = isNaN(area) || area <= 0 ? 0 : area;\n      }\n    }\n    function squarify(node) {\n      var children = node.children;\n      if (children && children.length) {\n        var rect = pad(node), row = [], remaining = children.slice(), child, best = Infinity, score, u = mode === \"slice\" ? rect.dx : mode === \"dice\" ? rect.dy : mode === \"slice-dice\" ? node.depth & 1 ? rect.dy : rect.dx : Math.min(rect.dx, rect.dy), n;\n        scale(remaining, rect.dx * rect.dy / node.value);\n        row.area = 0;\n        while ((n = remaining.length) > 0) {\n          row.push(child = remaining[n - 1]);\n          row.area += child.area;\n          if (mode !== \"squarify\" || (score = worst(row, u)) <= best) {\n            remaining.pop();\n            best = score;\n          } else {\n            row.area -= row.pop().area;\n            position(row, u, rect, false);\n            u = Math.min(rect.dx, rect.dy);\n            row.length = row.area = 0;\n            best = Infinity;\n          }\n        }\n        if (row.length) {\n          position(row, u, rect, true);\n          row.length = row.area = 0;\n        }\n        children.forEach(squarify);\n      }\n    }\n    function stickify(node) {\n      var children = node.children;\n      if (children && children.length) {\n        var rect = pad(node), remaining = children.slice(), child, row = [];\n        scale(remaining, rect.dx * rect.dy / node.value);\n        row.area = 0;\n        while (child = remaining.pop()) {\n          row.push(child);\n          row.area += child.area;\n          if (child.z != null) {\n            position(row, child.z ? rect.dx : rect.dy, rect, !remaining.length);\n            row.length = row.area = 0;\n          }\n        }\n        children.forEach(stickify);\n      }\n    }\n    function worst(row, u) {\n      var s = row.area, r, rmax = 0, rmin = Infinity, i = -1, n = row.length;\n      while (++i < n) {\n        if (!(r = row[i].area)) continue;\n        if (r < rmin) rmin = r;\n        if (r > rmax) rmax = r;\n      }\n      s *= s;\n      u *= u;\n      return s ? Math.max(u * rmax * ratio / s, s / (u * rmin * ratio)) : Infinity;\n    }\n    function position(row, u, rect, flush) {\n      var i = -1, n = row.length, x = rect.x, y = rect.y, v = u ? round(row.area / u) : 0, o;\n      if (u == rect.dx) {\n        if (flush || v > rect.dy) v = rect.dy;\n        while (++i < n) {\n          o = row[i];\n          o.x = x;\n          o.y = y;\n          o.dy = v;\n          x += o.dx = Math.min(rect.x + rect.dx - x, v ? round(o.area / v) : 0);\n        }\n        o.z = true;\n        o.dx += rect.x + rect.dx - x;\n        rect.y += v;\n        rect.dy -= v;\n      } else {\n        if (flush || v > rect.dx) v = rect.dx;\n        while (++i < n) {\n          o = row[i];\n          o.x = x;\n          o.y = y;\n          o.dx = v;\n          y += o.dy = Math.min(rect.y + rect.dy - y, v ? round(o.area / v) : 0);\n        }\n        o.z = false;\n        o.dy += rect.y + rect.dy - y;\n        rect.x += v;\n        rect.dx -= v;\n      }\n    }\n    function treemap(d) {\n      var nodes = stickies || hierarchy(d), root = nodes[0];\n      root.x = root.y = 0;\n      if (root.value) root.dx = size[0], root.dy = size[1]; else root.dx = root.dy = 0;\n      if (stickies) hierarchy.revalue(root);\n      scale([ root ], root.dx * root.dy / root.value);\n      (stickies ? stickify : squarify)(root);\n      if (sticky) stickies = nodes;\n      return nodes;\n    }\n    treemap.size = function(x) {\n      if (!arguments.length) return size;\n      size = x;\n      return treemap;\n    };\n    treemap.padding = function(x) {\n      if (!arguments.length) return padding;\n      function padFunction(node) {\n        var p = x.call(treemap, node, node.depth);\n        return p == null ? d3_layout_treemapPadNull(node) : d3_layout_treemapPad(node, typeof p === \"number\" ? [ p, p, p, p ] : p);\n      }\n      function padConstant(node) {\n        return d3_layout_treemapPad(node, x);\n      }\n      var type;\n      pad = (padding = x) == null ? d3_layout_treemapPadNull : (type = typeof x) === \"function\" ? padFunction : type === \"number\" ? (x = [ x, x, x, x ], \n      padConstant) : padConstant;\n      return treemap;\n    };\n    treemap.round = function(x) {\n      if (!arguments.length) return round != Number;\n      round = x ? Math.round : Number;\n      return treemap;\n    };\n    treemap.sticky = function(x) {\n      if (!arguments.length) return sticky;\n      sticky = x;\n      stickies = null;\n      return treemap;\n    };\n    treemap.ratio = function(x) {\n      if (!arguments.length) return ratio;\n      ratio = x;\n      return treemap;\n    };\n    treemap.mode = function(x) {\n      if (!arguments.length) return mode;\n      mode = x + \"\";\n      return treemap;\n    };\n    return d3_layout_hierarchyRebind(treemap, hierarchy);\n  };\n  function d3_layout_treemapPadNull(node) {\n    return {\n      x: node.x,\n      y: node.y,\n      dx: node.dx,\n      dy: node.dy\n    };\n  }\n  function d3_layout_treemapPad(node, padding) {\n    var x = node.x + padding[3], y = node.y + padding[0], dx = node.dx - padding[1] - padding[3], dy = node.dy - padding[0] - padding[2];\n    if (dx < 0) {\n      x += dx / 2;\n      dx = 0;\n    }\n    if (dy < 0) {\n      y += dy / 2;\n      dy = 0;\n    }\n    return {\n      x: x,\n      y: y,\n      dx: dx,\n      dy: dy\n    };\n  }\n  d3.random = {\n    normal: function(µ, σ) {\n      var n = arguments.length;\n      if (n < 2) σ = 1;\n      if (n < 1) µ = 0;\n      return function() {\n        var x, y, r;\n        do {\n          x = Math.random() * 2 - 1;\n          y = Math.random() * 2 - 1;\n          r = x * x + y * y;\n        } while (!r || r > 1);\n        return µ + σ * x * Math.sqrt(-2 * Math.log(r) / r);\n      };\n    },\n    logNormal: function() {\n      var random = d3.random.normal.apply(d3, arguments);\n      return function() {\n        return Math.exp(random());\n      };\n    },\n    bates: function(m) {\n      var random = d3.random.irwinHall(m);\n      return function() {\n        return random() / m;\n      };\n    },\n    irwinHall: function(m) {\n      return function() {\n        for (var s = 0, j = 0; j < m; j++) s += Math.random();\n        return s;\n      };\n    }\n  };\n  d3.scale = {};\n  function d3_scaleExtent(domain) {\n    var start = domain[0], stop = domain[domain.length - 1];\n    return start < stop ? [ start, stop ] : [ stop, start ];\n  }\n  function d3_scaleRange(scale) {\n    return scale.rangeExtent ? scale.rangeExtent() : d3_scaleExtent(scale.range());\n  }\n  function d3_scale_bilinear(domain, range, uninterpolate, interpolate) {\n    var u = uninterpolate(domain[0], domain[1]), i = interpolate(range[0], range[1]);\n    return function(x) {\n      return i(u(x));\n    };\n  }\n  function d3_scale_nice(domain, nice) {\n    var i0 = 0, i1 = domain.length - 1, x0 = domain[i0], x1 = domain[i1], dx;\n    if (x1 < x0) {\n      dx = i0, i0 = i1, i1 = dx;\n      dx = x0, x0 = x1, x1 = dx;\n    }\n    domain[i0] = nice.floor(x0);\n    domain[i1] = nice.ceil(x1);\n    return domain;\n  }\n  function d3_scale_niceStep(step) {\n    return step ? {\n      floor: function(x) {\n        return Math.floor(x / step) * step;\n      },\n      ceil: function(x) {\n        return Math.ceil(x / step) * step;\n      }\n    } : d3_scale_niceIdentity;\n  }\n  var d3_scale_niceIdentity = {\n    floor: d3_identity,\n    ceil: d3_identity\n  };\n  function d3_scale_polylinear(domain, range, uninterpolate, interpolate) {\n    var u = [], i = [], j = 0, k = Math.min(domain.length, range.length) - 1;\n    if (domain[k] < domain[0]) {\n      domain = domain.slice().reverse();\n      range = range.slice().reverse();\n    }\n    while (++j <= k) {\n      u.push(uninterpolate(domain[j - 1], domain[j]));\n      i.push(interpolate(range[j - 1], range[j]));\n    }\n    return function(x) {\n      var j = d3.bisect(domain, x, 1, k) - 1;\n      return i[j](u[j](x));\n    };\n  }\n  d3.scale.linear = function() {\n    return d3_scale_linear([ 0, 1 ], [ 0, 1 ], d3_interpolate, false);\n  };\n  function d3_scale_linear(domain, range, interpolate, clamp) {\n    var output, input;\n    function rescale() {\n      var linear = Math.min(domain.length, range.length) > 2 ? d3_scale_polylinear : d3_scale_bilinear, uninterpolate = clamp ? d3_uninterpolateClamp : d3_uninterpolateNumber;\n      output = linear(domain, range, uninterpolate, interpolate);\n      input = linear(range, domain, uninterpolate, d3_interpolate);\n      return scale;\n    }\n    function scale(x) {\n      return output(x);\n    }\n    scale.invert = function(y) {\n      return input(y);\n    };\n    scale.domain = function(x) {\n      if (!arguments.length) return domain;\n      domain = x.map(Number);\n      return rescale();\n    };\n    scale.range = function(x) {\n      if (!arguments.length) return range;\n      range = x;\n      return rescale();\n    };\n    scale.rangeRound = function(x) {\n      return scale.range(x).interpolate(d3_interpolateRound);\n    };\n    scale.clamp = function(x) {\n      if (!arguments.length) return clamp;\n      clamp = x;\n      return rescale();\n    };\n    scale.interpolate = function(x) {\n      if (!arguments.length) return interpolate;\n      interpolate = x;\n      return rescale();\n    };\n    scale.ticks = function(m) {\n      return d3_scale_linearTicks(domain, m);\n    };\n    scale.tickFormat = function(m, format) {\n      return d3_scale_linearTickFormat(domain, m, format);\n    };\n    scale.nice = function(m) {\n      d3_scale_linearNice(domain, m);\n      return rescale();\n    };\n    scale.copy = function() {\n      return d3_scale_linear(domain, range, interpolate, clamp);\n    };\n    return rescale();\n  }\n  function d3_scale_linearRebind(scale, linear) {\n    return d3.rebind(scale, linear, \"range\", \"rangeRound\", \"interpolate\", \"clamp\");\n  }\n  function d3_scale_linearNice(domain, m) {\n    d3_scale_nice(domain, d3_scale_niceStep(d3_scale_linearTickRange(domain, m)[2]));\n    d3_scale_nice(domain, d3_scale_niceStep(d3_scale_linearTickRange(domain, m)[2]));\n    return domain;\n  }\n  function d3_scale_linearTickRange(domain, m) {\n    if (m == null) m = 10;\n    var extent = d3_scaleExtent(domain), span = extent[1] - extent[0], step = Math.pow(10, Math.floor(Math.log(span / m) / Math.LN10)), err = m / span * step;\n    if (err <= .15) step *= 10; else if (err <= .35) step *= 5; else if (err <= .75) step *= 2;\n    extent[0] = Math.ceil(extent[0] / step) * step;\n    extent[1] = Math.floor(extent[1] / step) * step + step * .5;\n    extent[2] = step;\n    return extent;\n  }\n  function d3_scale_linearTicks(domain, m) {\n    return d3.range.apply(d3, d3_scale_linearTickRange(domain, m));\n  }\n  function d3_scale_linearTickFormat(domain, m, format) {\n    var range = d3_scale_linearTickRange(domain, m);\n    if (format) {\n      var match = d3_format_re.exec(format);\n      match.shift();\n      if (match[8] === \"s\") {\n        var prefix = d3.formatPrefix(Math.max(abs(range[0]), abs(range[1])));\n        if (!match[7]) match[7] = \".\" + d3_scale_linearPrecision(prefix.scale(range[2]));\n        match[8] = \"f\";\n        format = d3.format(match.join(\"\"));\n        return function(d) {\n          return format(prefix.scale(d)) + prefix.symbol;\n        };\n      }\n      if (!match[7]) match[7] = \".\" + d3_scale_linearFormatPrecision(match[8], range);\n      format = match.join(\"\");\n    } else {\n      format = \",.\" + d3_scale_linearPrecision(range[2]) + \"f\";\n    }\n    return d3.format(format);\n  }\n  var d3_scale_linearFormatSignificant = {\n    s: 1,\n    g: 1,\n    p: 1,\n    r: 1,\n    e: 1\n  };\n  function d3_scale_linearPrecision(value) {\n    return -Math.floor(Math.log(value) / Math.LN10 + .01);\n  }\n  function d3_scale_linearFormatPrecision(type, range) {\n    var p = d3_scale_linearPrecision(range[2]);\n    return type in d3_scale_linearFormatSignificant ? Math.abs(p - d3_scale_linearPrecision(Math.max(abs(range[0]), abs(range[1])))) + +(type !== \"e\") : p - (type === \"%\") * 2;\n  }\n  d3.scale.log = function() {\n    return d3_scale_log(d3.scale.linear().domain([ 0, 1 ]), 10, true, [ 1, 10 ]);\n  };\n  function d3_scale_log(linear, base, positive, domain) {\n    function log(x) {\n      return (positive ? Math.log(x < 0 ? 0 : x) : -Math.log(x > 0 ? 0 : -x)) / Math.log(base);\n    }\n    function pow(x) {\n      return positive ? Math.pow(base, x) : -Math.pow(base, -x);\n    }\n    function scale(x) {\n      return linear(log(x));\n    }\n    scale.invert = function(x) {\n      return pow(linear.invert(x));\n    };\n    scale.domain = function(x) {\n      if (!arguments.length) return domain;\n      positive = x[0] >= 0;\n      linear.domain((domain = x.map(Number)).map(log));\n      return scale;\n    };\n    scale.base = function(_) {\n      if (!arguments.length) return base;\n      base = +_;\n      linear.domain(domain.map(log));\n      return scale;\n    };\n    scale.nice = function() {\n      var niced = d3_scale_nice(domain.map(log), positive ? Math : d3_scale_logNiceNegative);\n      linear.domain(niced);\n      domain = niced.map(pow);\n      return scale;\n    };\n    scale.ticks = function() {\n      var extent = d3_scaleExtent(domain), ticks = [], u = extent[0], v = extent[1], i = Math.floor(log(u)), j = Math.ceil(log(v)), n = base % 1 ? 2 : base;\n      if (isFinite(j - i)) {\n        if (positive) {\n          for (;i < j; i++) for (var k = 1; k < n; k++) ticks.push(pow(i) * k);\n          ticks.push(pow(i));\n        } else {\n          ticks.push(pow(i));\n          for (;i++ < j; ) for (var k = n - 1; k > 0; k--) ticks.push(pow(i) * k);\n        }\n        for (i = 0; ticks[i] < u; i++) {}\n        for (j = ticks.length; ticks[j - 1] > v; j--) {}\n        ticks = ticks.slice(i, j);\n      }\n      return ticks;\n    };\n    scale.tickFormat = function(n, format) {\n      if (!arguments.length) return d3_scale_logFormat;\n      if (arguments.length < 2) format = d3_scale_logFormat; else if (typeof format !== \"function\") format = d3.format(format);\n      var k = Math.max(1, base * n / scale.ticks().length);\n      return function(d) {\n        var i = d / pow(Math.round(log(d)));\n        if (i * base < base - .5) i *= base;\n        return i <= k ? format(d) : \"\";\n      };\n    };\n    scale.copy = function() {\n      return d3_scale_log(linear.copy(), base, positive, domain);\n    };\n    return d3_scale_linearRebind(scale, linear);\n  }\n  var d3_scale_logFormat = d3.format(\".0e\"), d3_scale_logNiceNegative = {\n    floor: function(x) {\n      return -Math.ceil(-x);\n    },\n    ceil: function(x) {\n      return -Math.floor(-x);\n    }\n  };\n  d3.scale.pow = function() {\n    return d3_scale_pow(d3.scale.linear(), 1, [ 0, 1 ]);\n  };\n  function d3_scale_pow(linear, exponent, domain) {\n    var powp = d3_scale_powPow(exponent), powb = d3_scale_powPow(1 / exponent);\n    function scale(x) {\n      return linear(powp(x));\n    }\n    scale.invert = function(x) {\n      return powb(linear.invert(x));\n    };\n    scale.domain = function(x) {\n      if (!arguments.length) return domain;\n      linear.domain((domain = x.map(Number)).map(powp));\n      return scale;\n    };\n    scale.ticks = function(m) {\n      return d3_scale_linearTicks(domain, m);\n    };\n    scale.tickFormat = function(m, format) {\n      return d3_scale_linearTickFormat(domain, m, format);\n    };\n    scale.nice = function(m) {\n      return scale.domain(d3_scale_linearNice(domain, m));\n    };\n    scale.exponent = function(x) {\n      if (!arguments.length) return exponent;\n      powp = d3_scale_powPow(exponent = x);\n      powb = d3_scale_powPow(1 / exponent);\n      linear.domain(domain.map(powp));\n      return scale;\n    };\n    scale.copy = function() {\n      return d3_scale_pow(linear.copy(), exponent, domain);\n    };\n    return d3_scale_linearRebind(scale, linear);\n  }\n  function d3_scale_powPow(e) {\n    return function(x) {\n      return x < 0 ? -Math.pow(-x, e) : Math.pow(x, e);\n    };\n  }\n  d3.scale.sqrt = function() {\n    return d3.scale.pow().exponent(.5);\n  };\n  d3.scale.ordinal = function() {\n    return d3_scale_ordinal([], {\n      t: \"range\",\n      a: [ [] ]\n    });\n  };\n  function d3_scale_ordinal(domain, ranger) {\n    var index, range, rangeBand;\n    function scale(x) {\n      return range[((index.get(x) || (ranger.t === \"range\" ? index.set(x, domain.push(x)) : NaN)) - 1) % range.length];\n    }\n    function steps(start, step) {\n      return d3.range(domain.length).map(function(i) {\n        return start + step * i;\n      });\n    }\n    scale.domain = function(x) {\n      if (!arguments.length) return domain;\n      domain = [];\n      index = new d3_Map();\n      var i = -1, n = x.length, xi;\n      while (++i < n) if (!index.has(xi = x[i])) index.set(xi, domain.push(xi));\n      return scale[ranger.t].apply(scale, ranger.a);\n    };\n    scale.range = function(x) {\n      if (!arguments.length) return range;\n      range = x;\n      rangeBand = 0;\n      ranger = {\n        t: \"range\",\n        a: arguments\n      };\n      return scale;\n    };\n    scale.rangePoints = function(x, padding) {\n      if (arguments.length < 2) padding = 0;\n      var start = x[0], stop = x[1], step = domain.length < 2 ? (start = (start + stop) / 2, \n      0) : (stop - start) / (domain.length - 1 + padding);\n      range = steps(start + step * padding / 2, step);\n      rangeBand = 0;\n      ranger = {\n        t: \"rangePoints\",\n        a: arguments\n      };\n      return scale;\n    };\n    scale.rangeRoundPoints = function(x, padding) {\n      if (arguments.length < 2) padding = 0;\n      var start = x[0], stop = x[1], step = domain.length < 2 ? (start = stop = Math.round((start + stop) / 2), \n      0) : (stop - start) / (domain.length - 1 + padding) | 0;\n      range = steps(start + Math.round(step * padding / 2 + (stop - start - (domain.length - 1 + padding) * step) / 2), step);\n      rangeBand = 0;\n      ranger = {\n        t: \"rangeRoundPoints\",\n        a: arguments\n      };\n      return scale;\n    };\n    scale.rangeBands = function(x, padding, outerPadding) {\n      if (arguments.length < 2) padding = 0;\n      if (arguments.length < 3) outerPadding = padding;\n      var reverse = x[1] < x[0], start = x[reverse - 0], stop = x[1 - reverse], step = (stop - start) / (domain.length - padding + 2 * outerPadding);\n      range = steps(start + step * outerPadding, step);\n      if (reverse) range.reverse();\n      rangeBand = step * (1 - padding);\n      ranger = {\n        t: \"rangeBands\",\n        a: arguments\n      };\n      return scale;\n    };\n    scale.rangeRoundBands = function(x, padding, outerPadding) {\n      if (arguments.length < 2) padding = 0;\n      if (arguments.length < 3) outerPadding = padding;\n      var reverse = x[1] < x[0], start = x[reverse - 0], stop = x[1 - reverse], step = Math.floor((stop - start) / (domain.length - padding + 2 * outerPadding));\n      range = steps(start + Math.round((stop - start - (domain.length - padding) * step) / 2), step);\n      if (reverse) range.reverse();\n      rangeBand = Math.round(step * (1 - padding));\n      ranger = {\n        t: \"rangeRoundBands\",\n        a: arguments\n      };\n      return scale;\n    };\n    scale.rangeBand = function() {\n      return rangeBand;\n    };\n    scale.rangeExtent = function() {\n      return d3_scaleExtent(ranger.a[0]);\n    };\n    scale.copy = function() {\n      return d3_scale_ordinal(domain, ranger);\n    };\n    return scale.domain(domain);\n  }\n  d3.scale.category10 = function() {\n    return d3.scale.ordinal().range(d3_category10);\n  };\n  d3.scale.category20 = function() {\n    return d3.scale.ordinal().range(d3_category20);\n  };\n  d3.scale.category20b = function() {\n    return d3.scale.ordinal().range(d3_category20b);\n  };\n  d3.scale.category20c = function() {\n    return d3.scale.ordinal().range(d3_category20c);\n  };\n  var d3_category10 = [ 2062260, 16744206, 2924588, 14034728, 9725885, 9197131, 14907330, 8355711, 12369186, 1556175 ].map(d3_rgbString);\n  var d3_category20 = [ 2062260, 11454440, 16744206, 16759672, 2924588, 10018698, 14034728, 16750742, 9725885, 12955861, 9197131, 12885140, 14907330, 16234194, 8355711, 13092807, 12369186, 14408589, 1556175, 10410725 ].map(d3_rgbString);\n  var d3_category20b = [ 3750777, 5395619, 7040719, 10264286, 6519097, 9216594, 11915115, 13556636, 9202993, 12426809, 15186514, 15190932, 8666169, 11356490, 14049643, 15177372, 8077683, 10834324, 13528509, 14589654 ].map(d3_rgbString);\n  var d3_category20c = [ 3244733, 7057110, 10406625, 13032431, 15095053, 16616764, 16625259, 16634018, 3253076, 7652470, 10607003, 13101504, 7695281, 10394312, 12369372, 14342891, 6513507, 9868950, 12434877, 14277081 ].map(d3_rgbString);\n  d3.scale.quantile = function() {\n    return d3_scale_quantile([], []);\n  };\n  function d3_scale_quantile(domain, range) {\n    var thresholds;\n    function rescale() {\n      var k = 0, q = range.length;\n      thresholds = [];\n      while (++k < q) thresholds[k - 1] = d3.quantile(domain, k / q);\n      return scale;\n    }\n    function scale(x) {\n      if (!isNaN(x = +x)) return range[d3.bisect(thresholds, x)];\n    }\n    scale.domain = function(x) {\n      if (!arguments.length) return domain;\n      domain = x.map(d3_number).filter(d3_numeric).sort(d3_ascending);\n      return rescale();\n    };\n    scale.range = function(x) {\n      if (!arguments.length) return range;\n      range = x;\n      return rescale();\n    };\n    scale.quantiles = function() {\n      return thresholds;\n    };\n    scale.invertExtent = function(y) {\n      y = range.indexOf(y);\n      return y < 0 ? [ NaN, NaN ] : [ y > 0 ? thresholds[y - 1] : domain[0], y < thresholds.length ? thresholds[y] : domain[domain.length - 1] ];\n    };\n    scale.copy = function() {\n      return d3_scale_quantile(domain, range);\n    };\n    return rescale();\n  }\n  d3.scale.quantize = function() {\n    return d3_scale_quantize(0, 1, [ 0, 1 ]);\n  };\n  function d3_scale_quantize(x0, x1, range) {\n    var kx, i;\n    function scale(x) {\n      return range[Math.max(0, Math.min(i, Math.floor(kx * (x - x0))))];\n    }\n    function rescale() {\n      kx = range.length / (x1 - x0);\n      i = range.length - 1;\n      return scale;\n    }\n    scale.domain = function(x) {\n      if (!arguments.length) return [ x0, x1 ];\n      x0 = +x[0];\n      x1 = +x[x.length - 1];\n      return rescale();\n    };\n    scale.range = function(x) {\n      if (!arguments.length) return range;\n      range = x;\n      return rescale();\n    };\n    scale.invertExtent = function(y) {\n      y = range.indexOf(y);\n      y = y < 0 ? NaN : y / kx + x0;\n      return [ y, y + 1 / kx ];\n    };\n    scale.copy = function() {\n      return d3_scale_quantize(x0, x1, range);\n    };\n    return rescale();\n  }\n  d3.scale.threshold = function() {\n    return d3_scale_threshold([ .5 ], [ 0, 1 ]);\n  };\n  function d3_scale_threshold(domain, range) {\n    function scale(x) {\n      if (x <= x) return range[d3.bisect(domain, x)];\n    }\n    scale.domain = function(_) {\n      if (!arguments.length) return domain;\n      domain = _;\n      return scale;\n    };\n    scale.range = function(_) {\n      if (!arguments.length) return range;\n      range = _;\n      return scale;\n    };\n    scale.invertExtent = function(y) {\n      y = range.indexOf(y);\n      return [ domain[y - 1], domain[y] ];\n    };\n    scale.copy = function() {\n      return d3_scale_threshold(domain, range);\n    };\n    return scale;\n  }\n  d3.scale.identity = function() {\n    return d3_scale_identity([ 0, 1 ]);\n  };\n  function d3_scale_identity(domain) {\n    function identity(x) {\n      return +x;\n    }\n    identity.invert = identity;\n    identity.domain = identity.range = function(x) {\n      if (!arguments.length) return domain;\n      domain = x.map(identity);\n      return identity;\n    };\n    identity.ticks = function(m) {\n      return d3_scale_linearTicks(domain, m);\n    };\n    identity.tickFormat = function(m, format) {\n      return d3_scale_linearTickFormat(domain, m, format);\n    };\n    identity.copy = function() {\n      return d3_scale_identity(domain);\n    };\n    return identity;\n  }\n  d3.svg = {};\n  function d3_zero() {\n    return 0;\n  }\n  d3.svg.arc = function() {\n    var innerRadius = d3_svg_arcInnerRadius, outerRadius = d3_svg_arcOuterRadius, cornerRadius = d3_zero, padRadius = d3_svg_arcAuto, startAngle = d3_svg_arcStartAngle, endAngle = d3_svg_arcEndAngle, padAngle = d3_svg_arcPadAngle;\n    function arc() {\n      var r0 = Math.max(0, +innerRadius.apply(this, arguments)), r1 = Math.max(0, +outerRadius.apply(this, arguments)), a0 = startAngle.apply(this, arguments) - halfπ, a1 = endAngle.apply(this, arguments) - halfπ, da = Math.abs(a1 - a0), cw = a0 > a1 ? 0 : 1;\n      if (r1 < r0) rc = r1, r1 = r0, r0 = rc;\n      if (da >= τε) return circleSegment(r1, cw) + (r0 ? circleSegment(r0, 1 - cw) : \"\") + \"Z\";\n      var rc, cr, rp, ap, p0 = 0, p1 = 0, x0, y0, x1, y1, x2, y2, x3, y3, path = [];\n      if (ap = (+padAngle.apply(this, arguments) || 0) / 2) {\n        rp = padRadius === d3_svg_arcAuto ? Math.sqrt(r0 * r0 + r1 * r1) : +padRadius.apply(this, arguments);\n        if (!cw) p1 *= -1;\n        if (r1) p1 = d3_asin(rp / r1 * Math.sin(ap));\n        if (r0) p0 = d3_asin(rp / r0 * Math.sin(ap));\n      }\n      if (r1) {\n        x0 = r1 * Math.cos(a0 + p1);\n        y0 = r1 * Math.sin(a0 + p1);\n        x1 = r1 * Math.cos(a1 - p1);\n        y1 = r1 * Math.sin(a1 - p1);\n        var l1 = Math.abs(a1 - a0 - 2 * p1) <= π ? 0 : 1;\n        if (p1 && d3_svg_arcSweep(x0, y0, x1, y1) === cw ^ l1) {\n          var h1 = (a0 + a1) / 2;\n          x0 = r1 * Math.cos(h1);\n          y0 = r1 * Math.sin(h1);\n          x1 = y1 = null;\n        }\n      } else {\n        x0 = y0 = 0;\n      }\n      if (r0) {\n        x2 = r0 * Math.cos(a1 - p0);\n        y2 = r0 * Math.sin(a1 - p0);\n        x3 = r0 * Math.cos(a0 + p0);\n        y3 = r0 * Math.sin(a0 + p0);\n        var l0 = Math.abs(a0 - a1 + 2 * p0) <= π ? 0 : 1;\n        if (p0 && d3_svg_arcSweep(x2, y2, x3, y3) === 1 - cw ^ l0) {\n          var h0 = (a0 + a1) / 2;\n          x2 = r0 * Math.cos(h0);\n          y2 = r0 * Math.sin(h0);\n          x3 = y3 = null;\n        }\n      } else {\n        x2 = y2 = 0;\n      }\n      if (da > ε && (rc = Math.min(Math.abs(r1 - r0) / 2, +cornerRadius.apply(this, arguments))) > .001) {\n        cr = r0 < r1 ^ cw ? 0 : 1;\n        var rc1 = rc, rc0 = rc;\n        if (da < π) {\n          var oc = x3 == null ? [ x2, y2 ] : x1 == null ? [ x0, y0 ] : d3_geom_polygonIntersect([ x0, y0 ], [ x3, y3 ], [ x1, y1 ], [ x2, y2 ]), ax = x0 - oc[0], ay = y0 - oc[1], bx = x1 - oc[0], by = y1 - oc[1], kc = 1 / Math.sin(Math.acos((ax * bx + ay * by) / (Math.sqrt(ax * ax + ay * ay) * Math.sqrt(bx * bx + by * by))) / 2), lc = Math.sqrt(oc[0] * oc[0] + oc[1] * oc[1]);\n          rc0 = Math.min(rc, (r0 - lc) / (kc - 1));\n          rc1 = Math.min(rc, (r1 - lc) / (kc + 1));\n        }\n        if (x1 != null) {\n          var t30 = d3_svg_arcCornerTangents(x3 == null ? [ x2, y2 ] : [ x3, y3 ], [ x0, y0 ], r1, rc1, cw), t12 = d3_svg_arcCornerTangents([ x1, y1 ], [ x2, y2 ], r1, rc1, cw);\n          if (rc === rc1) {\n            path.push(\"M\", t30[0], \"A\", rc1, \",\", rc1, \" 0 0,\", cr, \" \", t30[1], \"A\", r1, \",\", r1, \" 0 \", 1 - cw ^ d3_svg_arcSweep(t30[1][0], t30[1][1], t12[1][0], t12[1][1]), \",\", cw, \" \", t12[1], \"A\", rc1, \",\", rc1, \" 0 0,\", cr, \" \", t12[0]);\n          } else {\n            path.push(\"M\", t30[0], \"A\", rc1, \",\", rc1, \" 0 1,\", cr, \" \", t12[0]);\n          }\n        } else {\n          path.push(\"M\", x0, \",\", y0);\n        }\n        if (x3 != null) {\n          var t03 = d3_svg_arcCornerTangents([ x0, y0 ], [ x3, y3 ], r0, -rc0, cw), t21 = d3_svg_arcCornerTangents([ x2, y2 ], x1 == null ? [ x0, y0 ] : [ x1, y1 ], r0, -rc0, cw);\n          if (rc === rc0) {\n            path.push(\"L\", t21[0], \"A\", rc0, \",\", rc0, \" 0 0,\", cr, \" \", t21[1], \"A\", r0, \",\", r0, \" 0 \", cw ^ d3_svg_arcSweep(t21[1][0], t21[1][1], t03[1][0], t03[1][1]), \",\", 1 - cw, \" \", t03[1], \"A\", rc0, \",\", rc0, \" 0 0,\", cr, \" \", t03[0]);\n          } else {\n            path.push(\"L\", t21[0], \"A\", rc0, \",\", rc0, \" 0 0,\", cr, \" \", t03[0]);\n          }\n        } else {\n          path.push(\"L\", x2, \",\", y2);\n        }\n      } else {\n        path.push(\"M\", x0, \",\", y0);\n        if (x1 != null) path.push(\"A\", r1, \",\", r1, \" 0 \", l1, \",\", cw, \" \", x1, \",\", y1);\n        path.push(\"L\", x2, \",\", y2);\n        if (x3 != null) path.push(\"A\", r0, \",\", r0, \" 0 \", l0, \",\", 1 - cw, \" \", x3, \",\", y3);\n      }\n      path.push(\"Z\");\n      return path.join(\"\");\n    }\n    function circleSegment(r1, cw) {\n      return \"M0,\" + r1 + \"A\" + r1 + \",\" + r1 + \" 0 1,\" + cw + \" 0,\" + -r1 + \"A\" + r1 + \",\" + r1 + \" 0 1,\" + cw + \" 0,\" + r1;\n    }\n    arc.innerRadius = function(v) {\n      if (!arguments.length) return innerRadius;\n      innerRadius = d3_functor(v);\n      return arc;\n    };\n    arc.outerRadius = function(v) {\n      if (!arguments.length) return outerRadius;\n      outerRadius = d3_functor(v);\n      return arc;\n    };\n    arc.cornerRadius = function(v) {\n      if (!arguments.length) return cornerRadius;\n      cornerRadius = d3_functor(v);\n      return arc;\n    };\n    arc.padRadius = function(v) {\n      if (!arguments.length) return padRadius;\n      padRadius = v == d3_svg_arcAuto ? d3_svg_arcAuto : d3_functor(v);\n      return arc;\n    };\n    arc.startAngle = function(v) {\n      if (!arguments.length) return startAngle;\n      startAngle = d3_functor(v);\n      return arc;\n    };\n    arc.endAngle = function(v) {\n      if (!arguments.length) return endAngle;\n      endAngle = d3_functor(v);\n      return arc;\n    };\n    arc.padAngle = function(v) {\n      if (!arguments.length) return padAngle;\n      padAngle = d3_functor(v);\n      return arc;\n    };\n    arc.centroid = function() {\n      var r = (+innerRadius.apply(this, arguments) + +outerRadius.apply(this, arguments)) / 2, a = (+startAngle.apply(this, arguments) + +endAngle.apply(this, arguments)) / 2 - halfπ;\n      return [ Math.cos(a) * r, Math.sin(a) * r ];\n    };\n    return arc;\n  };\n  var d3_svg_arcAuto = \"auto\";\n  function d3_svg_arcInnerRadius(d) {\n    return d.innerRadius;\n  }\n  function d3_svg_arcOuterRadius(d) {\n    return d.outerRadius;\n  }\n  function d3_svg_arcStartAngle(d) {\n    return d.startAngle;\n  }\n  function d3_svg_arcEndAngle(d) {\n    return d.endAngle;\n  }\n  function d3_svg_arcPadAngle(d) {\n    return d && d.padAngle;\n  }\n  function d3_svg_arcSweep(x0, y0, x1, y1) {\n    return (x0 - x1) * y0 - (y0 - y1) * x0 > 0 ? 0 : 1;\n  }\n  function d3_svg_arcCornerTangents(p0, p1, r1, rc, cw) {\n    var x01 = p0[0] - p1[0], y01 = p0[1] - p1[1], lo = (cw ? rc : -rc) / Math.sqrt(x01 * x01 + y01 * y01), ox = lo * y01, oy = -lo * x01, x1 = p0[0] + ox, y1 = p0[1] + oy, x2 = p1[0] + ox, y2 = p1[1] + oy, x3 = (x1 + x2) / 2, y3 = (y1 + y2) / 2, dx = x2 - x1, dy = y2 - y1, d2 = dx * dx + dy * dy, r = r1 - rc, D = x1 * y2 - x2 * y1, d = (dy < 0 ? -1 : 1) * Math.sqrt(Math.max(0, r * r * d2 - D * D)), cx0 = (D * dy - dx * d) / d2, cy0 = (-D * dx - dy * d) / d2, cx1 = (D * dy + dx * d) / d2, cy1 = (-D * dx + dy * d) / d2, dx0 = cx0 - x3, dy0 = cy0 - y3, dx1 = cx1 - x3, dy1 = cy1 - y3;\n    if (dx0 * dx0 + dy0 * dy0 > dx1 * dx1 + dy1 * dy1) cx0 = cx1, cy0 = cy1;\n    return [ [ cx0 - ox, cy0 - oy ], [ cx0 * r1 / r, cy0 * r1 / r ] ];\n  }\n  function d3_svg_line(projection) {\n    var x = d3_geom_pointX, y = d3_geom_pointY, defined = d3_true, interpolate = d3_svg_lineLinear, interpolateKey = interpolate.key, tension = .7;\n    function line(data) {\n      var segments = [], points = [], i = -1, n = data.length, d, fx = d3_functor(x), fy = d3_functor(y);\n      function segment() {\n        segments.push(\"M\", interpolate(projection(points), tension));\n      }\n      while (++i < n) {\n        if (defined.call(this, d = data[i], i)) {\n          points.push([ +fx.call(this, d, i), +fy.call(this, d, i) ]);\n        } else if (points.length) {\n          segment();\n          points = [];\n        }\n      }\n      if (points.length) segment();\n      return segments.length ? segments.join(\"\") : null;\n    }\n    line.x = function(_) {\n      if (!arguments.length) return x;\n      x = _;\n      return line;\n    };\n    line.y = function(_) {\n      if (!arguments.length) return y;\n      y = _;\n      return line;\n    };\n    line.defined = function(_) {\n      if (!arguments.length) return defined;\n      defined = _;\n      return line;\n    };\n    line.interpolate = function(_) {\n      if (!arguments.length) return interpolateKey;\n      if (typeof _ === \"function\") interpolateKey = interpolate = _; else interpolateKey = (interpolate = d3_svg_lineInterpolators.get(_) || d3_svg_lineLinear).key;\n      return line;\n    };\n    line.tension = function(_) {\n      if (!arguments.length) return tension;\n      tension = _;\n      return line;\n    };\n    return line;\n  }\n  d3.svg.line = function() {\n    return d3_svg_line(d3_identity);\n  };\n  var d3_svg_lineInterpolators = d3.map({\n    linear: d3_svg_lineLinear,\n    \"linear-closed\": d3_svg_lineLinearClosed,\n    step: d3_svg_lineStep,\n    \"step-before\": d3_svg_lineStepBefore,\n    \"step-after\": d3_svg_lineStepAfter,\n    basis: d3_svg_lineBasis,\n    \"basis-open\": d3_svg_lineBasisOpen,\n    \"basis-closed\": d3_svg_lineBasisClosed,\n    bundle: d3_svg_lineBundle,\n    cardinal: d3_svg_lineCardinal,\n    \"cardinal-open\": d3_svg_lineCardinalOpen,\n    \"cardinal-closed\": d3_svg_lineCardinalClosed,\n    monotone: d3_svg_lineMonotone\n  });\n  d3_svg_lineInterpolators.forEach(function(key, value) {\n    value.key = key;\n    value.closed = /-closed$/.test(key);\n  });\n  function d3_svg_lineLinear(points) {\n    return points.length > 1 ? points.join(\"L\") : points + \"Z\";\n  }\n  function d3_svg_lineLinearClosed(points) {\n    return points.join(\"L\") + \"Z\";\n  }\n  function d3_svg_lineStep(points) {\n    var i = 0, n = points.length, p = points[0], path = [ p[0], \",\", p[1] ];\n    while (++i < n) path.push(\"H\", (p[0] + (p = points[i])[0]) / 2, \"V\", p[1]);\n    if (n > 1) path.push(\"H\", p[0]);\n    return path.join(\"\");\n  }\n  function d3_svg_lineStepBefore(points) {\n    var i = 0, n = points.length, p = points[0], path = [ p[0], \",\", p[1] ];\n    while (++i < n) path.push(\"V\", (p = points[i])[1], \"H\", p[0]);\n    return path.join(\"\");\n  }\n  function d3_svg_lineStepAfter(points) {\n    var i = 0, n = points.length, p = points[0], path = [ p[0], \",\", p[1] ];\n    while (++i < n) path.push(\"H\", (p = points[i])[0], \"V\", p[1]);\n    return path.join(\"\");\n  }\n  function d3_svg_lineCardinalOpen(points, tension) {\n    return points.length < 4 ? d3_svg_lineLinear(points) : points[1] + d3_svg_lineHermite(points.slice(1, -1), d3_svg_lineCardinalTangents(points, tension));\n  }\n  function d3_svg_lineCardinalClosed(points, tension) {\n    return points.length < 3 ? d3_svg_lineLinearClosed(points) : points[0] + d3_svg_lineHermite((points.push(points[0]), \n    points), d3_svg_lineCardinalTangents([ points[points.length - 2] ].concat(points, [ points[1] ]), tension));\n  }\n  function d3_svg_lineCardinal(points, tension) {\n    return points.length < 3 ? d3_svg_lineLinear(points) : points[0] + d3_svg_lineHermite(points, d3_svg_lineCardinalTangents(points, tension));\n  }\n  function d3_svg_lineHermite(points, tangents) {\n    if (tangents.length < 1 || points.length != tangents.length && points.length != tangents.length + 2) {\n      return d3_svg_lineLinear(points);\n    }\n    var quad = points.length != tangents.length, path = \"\", p0 = points[0], p = points[1], t0 = tangents[0], t = t0, pi = 1;\n    if (quad) {\n      path += \"Q\" + (p[0] - t0[0] * 2 / 3) + \",\" + (p[1] - t0[1] * 2 / 3) + \",\" + p[0] + \",\" + p[1];\n      p0 = points[1];\n      pi = 2;\n    }\n    if (tangents.length > 1) {\n      t = tangents[1];\n      p = points[pi];\n      pi++;\n      path += \"C\" + (p0[0] + t0[0]) + \",\" + (p0[1] + t0[1]) + \",\" + (p[0] - t[0]) + \",\" + (p[1] - t[1]) + \",\" + p[0] + \",\" + p[1];\n      for (var i = 2; i < tangents.length; i++, pi++) {\n        p = points[pi];\n        t = tangents[i];\n        path += \"S\" + (p[0] - t[0]) + \",\" + (p[1] - t[1]) + \",\" + p[0] + \",\" + p[1];\n      }\n    }\n    if (quad) {\n      var lp = points[pi];\n      path += \"Q\" + (p[0] + t[0] * 2 / 3) + \",\" + (p[1] + t[1] * 2 / 3) + \",\" + lp[0] + \",\" + lp[1];\n    }\n    return path;\n  }\n  function d3_svg_lineCardinalTangents(points, tension) {\n    var tangents = [], a = (1 - tension) / 2, p0, p1 = points[0], p2 = points[1], i = 1, n = points.length;\n    while (++i < n) {\n      p0 = p1;\n      p1 = p2;\n      p2 = points[i];\n      tangents.push([ a * (p2[0] - p0[0]), a * (p2[1] - p0[1]) ]);\n    }\n    return tangents;\n  }\n  function d3_svg_lineBasis(points) {\n    if (points.length < 3) return d3_svg_lineLinear(points);\n    var i = 1, n = points.length, pi = points[0], x0 = pi[0], y0 = pi[1], px = [ x0, x0, x0, (pi = points[1])[0] ], py = [ y0, y0, y0, pi[1] ], path = [ x0, \",\", y0, \"L\", d3_svg_lineDot4(d3_svg_lineBasisBezier3, px), \",\", d3_svg_lineDot4(d3_svg_lineBasisBezier3, py) ];\n    points.push(points[n - 1]);\n    while (++i <= n) {\n      pi = points[i];\n      px.shift();\n      px.push(pi[0]);\n      py.shift();\n      py.push(pi[1]);\n      d3_svg_lineBasisBezier(path, px, py);\n    }\n    points.pop();\n    path.push(\"L\", pi);\n    return path.join(\"\");\n  }\n  function d3_svg_lineBasisOpen(points) {\n    if (points.length < 4) return d3_svg_lineLinear(points);\n    var path = [], i = -1, n = points.length, pi, px = [ 0 ], py = [ 0 ];\n    while (++i < 3) {\n      pi = points[i];\n      px.push(pi[0]);\n      py.push(pi[1]);\n    }\n    path.push(d3_svg_lineDot4(d3_svg_lineBasisBezier3, px) + \",\" + d3_svg_lineDot4(d3_svg_lineBasisBezier3, py));\n    --i;\n    while (++i < n) {\n      pi = points[i];\n      px.shift();\n      px.push(pi[0]);\n      py.shift();\n      py.push(pi[1]);\n      d3_svg_lineBasisBezier(path, px, py);\n    }\n    return path.join(\"\");\n  }\n  function d3_svg_lineBasisClosed(points) {\n    var path, i = -1, n = points.length, m = n + 4, pi, px = [], py = [];\n    while (++i < 4) {\n      pi = points[i % n];\n      px.push(pi[0]);\n      py.push(pi[1]);\n    }\n    path = [ d3_svg_lineDot4(d3_svg_lineBasisBezier3, px), \",\", d3_svg_lineDot4(d3_svg_lineBasisBezier3, py) ];\n    --i;\n    while (++i < m) {\n      pi = points[i % n];\n      px.shift();\n      px.push(pi[0]);\n      py.shift();\n      py.push(pi[1]);\n      d3_svg_lineBasisBezier(path, px, py);\n    }\n    return path.join(\"\");\n  }\n  function d3_svg_lineBundle(points, tension) {\n    var n = points.length - 1;\n    if (n) {\n      var x0 = points[0][0], y0 = points[0][1], dx = points[n][0] - x0, dy = points[n][1] - y0, i = -1, p, t;\n      while (++i <= n) {\n        p = points[i];\n        t = i / n;\n        p[0] = tension * p[0] + (1 - tension) * (x0 + t * dx);\n        p[1] = tension * p[1] + (1 - tension) * (y0 + t * dy);\n      }\n    }\n    return d3_svg_lineBasis(points);\n  }\n  function d3_svg_lineDot4(a, b) {\n    return a[0] * b[0] + a[1] * b[1] + a[2] * b[2] + a[3] * b[3];\n  }\n  var d3_svg_lineBasisBezier1 = [ 0, 2 / 3, 1 / 3, 0 ], d3_svg_lineBasisBezier2 = [ 0, 1 / 3, 2 / 3, 0 ], d3_svg_lineBasisBezier3 = [ 0, 1 / 6, 2 / 3, 1 / 6 ];\n  function d3_svg_lineBasisBezier(path, x, y) {\n    path.push(\"C\", d3_svg_lineDot4(d3_svg_lineBasisBezier1, x), \",\", d3_svg_lineDot4(d3_svg_lineBasisBezier1, y), \",\", d3_svg_lineDot4(d3_svg_lineBasisBezier2, x), \",\", d3_svg_lineDot4(d3_svg_lineBasisBezier2, y), \",\", d3_svg_lineDot4(d3_svg_lineBasisBezier3, x), \",\", d3_svg_lineDot4(d3_svg_lineBasisBezier3, y));\n  }\n  function d3_svg_lineSlope(p0, p1) {\n    return (p1[1] - p0[1]) / (p1[0] - p0[0]);\n  }\n  function d3_svg_lineFiniteDifferences(points) {\n    var i = 0, j = points.length - 1, m = [], p0 = points[0], p1 = points[1], d = m[0] = d3_svg_lineSlope(p0, p1);\n    while (++i < j) {\n      m[i] = (d + (d = d3_svg_lineSlope(p0 = p1, p1 = points[i + 1]))) / 2;\n    }\n    m[i] = d;\n    return m;\n  }\n  function d3_svg_lineMonotoneTangents(points) {\n    var tangents = [], d, a, b, s, m = d3_svg_lineFiniteDifferences(points), i = -1, j = points.length - 1;\n    while (++i < j) {\n      d = d3_svg_lineSlope(points[i], points[i + 1]);\n      if (abs(d) < ε) {\n        m[i] = m[i + 1] = 0;\n      } else {\n        a = m[i] / d;\n        b = m[i + 1] / d;\n        s = a * a + b * b;\n        if (s > 9) {\n          s = d * 3 / Math.sqrt(s);\n          m[i] = s * a;\n          m[i + 1] = s * b;\n        }\n      }\n    }\n    i = -1;\n    while (++i <= j) {\n      s = (points[Math.min(j, i + 1)][0] - points[Math.max(0, i - 1)][0]) / (6 * (1 + m[i] * m[i]));\n      tangents.push([ s || 0, m[i] * s || 0 ]);\n    }\n    return tangents;\n  }\n  function d3_svg_lineMonotone(points) {\n    return points.length < 3 ? d3_svg_lineLinear(points) : points[0] + d3_svg_lineHermite(points, d3_svg_lineMonotoneTangents(points));\n  }\n  d3.svg.line.radial = function() {\n    var line = d3_svg_line(d3_svg_lineRadial);\n    line.radius = line.x, delete line.x;\n    line.angle = line.y, delete line.y;\n    return line;\n  };\n  function d3_svg_lineRadial(points) {\n    var point, i = -1, n = points.length, r, a;\n    while (++i < n) {\n      point = points[i];\n      r = point[0];\n      a = point[1] - halfπ;\n      point[0] = r * Math.cos(a);\n      point[1] = r * Math.sin(a);\n    }\n    return points;\n  }\n  function d3_svg_area(projection) {\n    var x0 = d3_geom_pointX, x1 = d3_geom_pointX, y0 = 0, y1 = d3_geom_pointY, defined = d3_true, interpolate = d3_svg_lineLinear, interpolateKey = interpolate.key, interpolateReverse = interpolate, L = \"L\", tension = .7;\n    function area(data) {\n      var segments = [], points0 = [], points1 = [], i = -1, n = data.length, d, fx0 = d3_functor(x0), fy0 = d3_functor(y0), fx1 = x0 === x1 ? function() {\n        return x;\n      } : d3_functor(x1), fy1 = y0 === y1 ? function() {\n        return y;\n      } : d3_functor(y1), x, y;\n      function segment() {\n        segments.push(\"M\", interpolate(projection(points1), tension), L, interpolateReverse(projection(points0.reverse()), tension), \"Z\");\n      }\n      while (++i < n) {\n        if (defined.call(this, d = data[i], i)) {\n          points0.push([ x = +fx0.call(this, d, i), y = +fy0.call(this, d, i) ]);\n          points1.push([ +fx1.call(this, d, i), +fy1.call(this, d, i) ]);\n        } else if (points0.length) {\n          segment();\n          points0 = [];\n          points1 = [];\n        }\n      }\n      if (points0.length) segment();\n      return segments.length ? segments.join(\"\") : null;\n    }\n    area.x = function(_) {\n      if (!arguments.length) return x1;\n      x0 = x1 = _;\n      return area;\n    };\n    area.x0 = function(_) {\n      if (!arguments.length) return x0;\n      x0 = _;\n      return area;\n    };\n    area.x1 = function(_) {\n      if (!arguments.length) return x1;\n      x1 = _;\n      return area;\n    };\n    area.y = function(_) {\n      if (!arguments.length) return y1;\n      y0 = y1 = _;\n      return area;\n    };\n    area.y0 = function(_) {\n      if (!arguments.length) return y0;\n      y0 = _;\n      return area;\n    };\n    area.y1 = function(_) {\n      if (!arguments.length) return y1;\n      y1 = _;\n      return area;\n    };\n    area.defined = function(_) {\n      if (!arguments.length) return defined;\n      defined = _;\n      return area;\n    };\n    area.interpolate = function(_) {\n      if (!arguments.length) return interpolateKey;\n      if (typeof _ === \"function\") interpolateKey = interpolate = _; else interpolateKey = (interpolate = d3_svg_lineInterpolators.get(_) || d3_svg_lineLinear).key;\n      interpolateReverse = interpolate.reverse || interpolate;\n      L = interpolate.closed ? \"M\" : \"L\";\n      return area;\n    };\n    area.tension = function(_) {\n      if (!arguments.length) return tension;\n      tension = _;\n      return area;\n    };\n    return area;\n  }\n  d3_svg_lineStepBefore.reverse = d3_svg_lineStepAfter;\n  d3_svg_lineStepAfter.reverse = d3_svg_lineStepBefore;\n  d3.svg.area = function() {\n    return d3_svg_area(d3_identity);\n  };\n  d3.svg.area.radial = function() {\n    var area = d3_svg_area(d3_svg_lineRadial);\n    area.radius = area.x, delete area.x;\n    area.innerRadius = area.x0, delete area.x0;\n    area.outerRadius = area.x1, delete area.x1;\n    area.angle = area.y, delete area.y;\n    area.startAngle = area.y0, delete area.y0;\n    area.endAngle = area.y1, delete area.y1;\n    return area;\n  };\n  d3.svg.chord = function() {\n    var source = d3_source, target = d3_target, radius = d3_svg_chordRadius, startAngle = d3_svg_arcStartAngle, endAngle = d3_svg_arcEndAngle;\n    function chord(d, i) {\n      var s = subgroup(this, source, d, i), t = subgroup(this, target, d, i);\n      return \"M\" + s.p0 + arc(s.r, s.p1, s.a1 - s.a0) + (equals(s, t) ? curve(s.r, s.p1, s.r, s.p0) : curve(s.r, s.p1, t.r, t.p0) + arc(t.r, t.p1, t.a1 - t.a0) + curve(t.r, t.p1, s.r, s.p0)) + \"Z\";\n    }\n    function subgroup(self, f, d, i) {\n      var subgroup = f.call(self, d, i), r = radius.call(self, subgroup, i), a0 = startAngle.call(self, subgroup, i) - halfπ, a1 = endAngle.call(self, subgroup, i) - halfπ;\n      return {\n        r: r,\n        a0: a0,\n        a1: a1,\n        p0: [ r * Math.cos(a0), r * Math.sin(a0) ],\n        p1: [ r * Math.cos(a1), r * Math.sin(a1) ]\n      };\n    }\n    function equals(a, b) {\n      return a.a0 == b.a0 && a.a1 == b.a1;\n    }\n    function arc(r, p, a) {\n      return \"A\" + r + \",\" + r + \" 0 \" + +(a > π) + \",1 \" + p;\n    }\n    function curve(r0, p0, r1, p1) {\n      return \"Q 0,0 \" + p1;\n    }\n    chord.radius = function(v) {\n      if (!arguments.length) return radius;\n      radius = d3_functor(v);\n      return chord;\n    };\n    chord.source = function(v) {\n      if (!arguments.length) return source;\n      source = d3_functor(v);\n      return chord;\n    };\n    chord.target = function(v) {\n      if (!arguments.length) return target;\n      target = d3_functor(v);\n      return chord;\n    };\n    chord.startAngle = function(v) {\n      if (!arguments.length) return startAngle;\n      startAngle = d3_functor(v);\n      return chord;\n    };\n    chord.endAngle = function(v) {\n      if (!arguments.length) return endAngle;\n      endAngle = d3_functor(v);\n      return chord;\n    };\n    return chord;\n  };\n  function d3_svg_chordRadius(d) {\n    return d.radius;\n  }\n  d3.svg.diagonal = function() {\n    var source = d3_source, target = d3_target, projection = d3_svg_diagonalProjection;\n    function diagonal(d, i) {\n      var p0 = source.call(this, d, i), p3 = target.call(this, d, i), m = (p0.y + p3.y) / 2, p = [ p0, {\n        x: p0.x,\n        y: m\n      }, {\n        x: p3.x,\n        y: m\n      }, p3 ];\n      p = p.map(projection);\n      return \"M\" + p[0] + \"C\" + p[1] + \" \" + p[2] + \" \" + p[3];\n    }\n    diagonal.source = function(x) {\n      if (!arguments.length) return source;\n      source = d3_functor(x);\n      return diagonal;\n    };\n    diagonal.target = function(x) {\n      if (!arguments.length) return target;\n      target = d3_functor(x);\n      return diagonal;\n    };\n    diagonal.projection = function(x) {\n      if (!arguments.length) return projection;\n      projection = x;\n      return diagonal;\n    };\n    return diagonal;\n  };\n  function d3_svg_diagonalProjection(d) {\n    return [ d.x, d.y ];\n  }\n  d3.svg.diagonal.radial = function() {\n    var diagonal = d3.svg.diagonal(), projection = d3_svg_diagonalProjection, projection_ = diagonal.projection;\n    diagonal.projection = function(x) {\n      return arguments.length ? projection_(d3_svg_diagonalRadialProjection(projection = x)) : projection;\n    };\n    return diagonal;\n  };\n  function d3_svg_diagonalRadialProjection(projection) {\n    return function() {\n      var d = projection.apply(this, arguments), r = d[0], a = d[1] - halfπ;\n      return [ r * Math.cos(a), r * Math.sin(a) ];\n    };\n  }\n  d3.svg.symbol = function() {\n    var type = d3_svg_symbolType, size = d3_svg_symbolSize;\n    function symbol(d, i) {\n      return (d3_svg_symbols.get(type.call(this, d, i)) || d3_svg_symbolCircle)(size.call(this, d, i));\n    }\n    symbol.type = function(x) {\n      if (!arguments.length) return type;\n      type = d3_functor(x);\n      return symbol;\n    };\n    symbol.size = function(x) {\n      if (!arguments.length) return size;\n      size = d3_functor(x);\n      return symbol;\n    };\n    return symbol;\n  };\n  function d3_svg_symbolSize() {\n    return 64;\n  }\n  function d3_svg_symbolType() {\n    return \"circle\";\n  }\n  function d3_svg_symbolCircle(size) {\n    var r = Math.sqrt(size / π);\n    return \"M0,\" + r + \"A\" + r + \",\" + r + \" 0 1,1 0,\" + -r + \"A\" + r + \",\" + r + \" 0 1,1 0,\" + r + \"Z\";\n  }\n  var d3_svg_symbols = d3.map({\n    circle: d3_svg_symbolCircle,\n    cross: function(size) {\n      var r = Math.sqrt(size / 5) / 2;\n      return \"M\" + -3 * r + \",\" + -r + \"H\" + -r + \"V\" + -3 * r + \"H\" + r + \"V\" + -r + \"H\" + 3 * r + \"V\" + r + \"H\" + r + \"V\" + 3 * r + \"H\" + -r + \"V\" + r + \"H\" + -3 * r + \"Z\";\n    },\n    diamond: function(size) {\n      var ry = Math.sqrt(size / (2 * d3_svg_symbolTan30)), rx = ry * d3_svg_symbolTan30;\n      return \"M0,\" + -ry + \"L\" + rx + \",0\" + \" 0,\" + ry + \" \" + -rx + \",0\" + \"Z\";\n    },\n    square: function(size) {\n      var r = Math.sqrt(size) / 2;\n      return \"M\" + -r + \",\" + -r + \"L\" + r + \",\" + -r + \" \" + r + \",\" + r + \" \" + -r + \",\" + r + \"Z\";\n    },\n    \"triangle-down\": function(size) {\n      var rx = Math.sqrt(size / d3_svg_symbolSqrt3), ry = rx * d3_svg_symbolSqrt3 / 2;\n      return \"M0,\" + ry + \"L\" + rx + \",\" + -ry + \" \" + -rx + \",\" + -ry + \"Z\";\n    },\n    \"triangle-up\": function(size) {\n      var rx = Math.sqrt(size / d3_svg_symbolSqrt3), ry = rx * d3_svg_symbolSqrt3 / 2;\n      return \"M0,\" + -ry + \"L\" + rx + \",\" + ry + \" \" + -rx + \",\" + ry + \"Z\";\n    }\n  });\n  d3.svg.symbolTypes = d3_svg_symbols.keys();\n  var d3_svg_symbolSqrt3 = Math.sqrt(3), d3_svg_symbolTan30 = Math.tan(30 * d3_radians);\n  d3_selectionPrototype.transition = function(name) {\n    var id = d3_transitionInheritId || ++d3_transitionId, ns = d3_transitionNamespace(name), subgroups = [], subgroup, node, transition = d3_transitionInherit || {\n      time: Date.now(),\n      ease: d3_ease_cubicInOut,\n      delay: 0,\n      duration: 250\n    };\n    for (var j = -1, m = this.length; ++j < m; ) {\n      subgroups.push(subgroup = []);\n      for (var group = this[j], i = -1, n = group.length; ++i < n; ) {\n        if (node = group[i]) d3_transitionNode(node, i, ns, id, transition);\n        subgroup.push(node);\n      }\n    }\n    return d3_transition(subgroups, ns, id);\n  };\n  d3_selectionPrototype.interrupt = function(name) {\n    return this.each(name == null ? d3_selection_interrupt : d3_selection_interruptNS(d3_transitionNamespace(name)));\n  };\n  var d3_selection_interrupt = d3_selection_interruptNS(d3_transitionNamespace());\n  function d3_selection_interruptNS(ns) {\n    return function() {\n      var lock, activeId, active;\n      if ((lock = this[ns]) && (active = lock[activeId = lock.active])) {\n        active.timer.c = null;\n        active.timer.t = NaN;\n        if (--lock.count) delete lock[activeId]; else delete this[ns];\n        lock.active += .5;\n        active.event && active.event.interrupt.call(this, this.__data__, active.index);\n      }\n    };\n  }\n  function d3_transition(groups, ns, id) {\n    d3_subclass(groups, d3_transitionPrototype);\n    groups.namespace = ns;\n    groups.id = id;\n    return groups;\n  }\n  var d3_transitionPrototype = [], d3_transitionId = 0, d3_transitionInheritId, d3_transitionInherit;\n  d3_transitionPrototype.call = d3_selectionPrototype.call;\n  d3_transitionPrototype.empty = d3_selectionPrototype.empty;\n  d3_transitionPrototype.node = d3_selectionPrototype.node;\n  d3_transitionPrototype.size = d3_selectionPrototype.size;\n  d3.transition = function(selection, name) {\n    return selection && selection.transition ? d3_transitionInheritId ? selection.transition(name) : selection : d3.selection().transition(selection);\n  };\n  d3.transition.prototype = d3_transitionPrototype;\n  d3_transitionPrototype.select = function(selector) {\n    var id = this.id, ns = this.namespace, subgroups = [], subgroup, subnode, node;\n    selector = d3_selection_selector(selector);\n    for (var j = -1, m = this.length; ++j < m; ) {\n      subgroups.push(subgroup = []);\n      for (var group = this[j], i = -1, n = group.length; ++i < n; ) {\n        if ((node = group[i]) && (subnode = selector.call(node, node.__data__, i, j))) {\n          if (\"__data__\" in node) subnode.__data__ = node.__data__;\n          d3_transitionNode(subnode, i, ns, id, node[ns][id]);\n          subgroup.push(subnode);\n        } else {\n          subgroup.push(null);\n        }\n      }\n    }\n    return d3_transition(subgroups, ns, id);\n  };\n  d3_transitionPrototype.selectAll = function(selector) {\n    var id = this.id, ns = this.namespace, subgroups = [], subgroup, subnodes, node, subnode, transition;\n    selector = d3_selection_selectorAll(selector);\n    for (var j = -1, m = this.length; ++j < m; ) {\n      for (var group = this[j], i = -1, n = group.length; ++i < n; ) {\n        if (node = group[i]) {\n          transition = node[ns][id];\n          subnodes = selector.call(node, node.__data__, i, j);\n          subgroups.push(subgroup = []);\n          for (var k = -1, o = subnodes.length; ++k < o; ) {\n            if (subnode = subnodes[k]) d3_transitionNode(subnode, k, ns, id, transition);\n            subgroup.push(subnode);\n          }\n        }\n      }\n    }\n    return d3_transition(subgroups, ns, id);\n  };\n  d3_transitionPrototype.filter = function(filter) {\n    var subgroups = [], subgroup, group, node;\n    if (typeof filter !== \"function\") filter = d3_selection_filter(filter);\n    for (var j = 0, m = this.length; j < m; j++) {\n      subgroups.push(subgroup = []);\n      for (var group = this[j], i = 0, n = group.length; i < n; i++) {\n        if ((node = group[i]) && filter.call(node, node.__data__, i, j)) {\n          subgroup.push(node);\n        }\n      }\n    }\n    return d3_transition(subgroups, this.namespace, this.id);\n  };\n  d3_transitionPrototype.tween = function(name, tween) {\n    var id = this.id, ns = this.namespace;\n    if (arguments.length < 2) return this.node()[ns][id].tween.get(name);\n    return d3_selection_each(this, tween == null ? function(node) {\n      node[ns][id].tween.remove(name);\n    } : function(node) {\n      node[ns][id].tween.set(name, tween);\n    });\n  };\n  function d3_transition_tween(groups, name, value, tween) {\n    var id = groups.id, ns = groups.namespace;\n    return d3_selection_each(groups, typeof value === \"function\" ? function(node, i, j) {\n      node[ns][id].tween.set(name, tween(value.call(node, node.__data__, i, j)));\n    } : (value = tween(value), function(node) {\n      node[ns][id].tween.set(name, value);\n    }));\n  }\n  d3_transitionPrototype.attr = function(nameNS, value) {\n    if (arguments.length < 2) {\n      for (value in nameNS) this.attr(value, nameNS[value]);\n      return this;\n    }\n    var interpolate = nameNS == \"transform\" ? d3_interpolateTransform : d3_interpolate, name = d3.ns.qualify(nameNS);\n    function attrNull() {\n      this.removeAttribute(name);\n    }\n    function attrNullNS() {\n      this.removeAttributeNS(name.space, name.local);\n    }\n    function attrTween(b) {\n      return b == null ? attrNull : (b += \"\", function() {\n        var a = this.getAttribute(name), i;\n        return a !== b && (i = interpolate(a, b), function(t) {\n          this.setAttribute(name, i(t));\n        });\n      });\n    }\n    function attrTweenNS(b) {\n      return b == null ? attrNullNS : (b += \"\", function() {\n        var a = this.getAttributeNS(name.space, name.local), i;\n        return a !== b && (i = interpolate(a, b), function(t) {\n          this.setAttributeNS(name.space, name.local, i(t));\n        });\n      });\n    }\n    return d3_transition_tween(this, \"attr.\" + nameNS, value, name.local ? attrTweenNS : attrTween);\n  };\n  d3_transitionPrototype.attrTween = function(nameNS, tween) {\n    var name = d3.ns.qualify(nameNS);\n    function attrTween(d, i) {\n      var f = tween.call(this, d, i, this.getAttribute(name));\n      return f && function(t) {\n        this.setAttribute(name, f(t));\n      };\n    }\n    function attrTweenNS(d, i) {\n      var f = tween.call(this, d, i, this.getAttributeNS(name.space, name.local));\n      return f && function(t) {\n        this.setAttributeNS(name.space, name.local, f(t));\n      };\n    }\n    return this.tween(\"attr.\" + nameNS, name.local ? attrTweenNS : attrTween);\n  };\n  d3_transitionPrototype.style = function(name, value, priority) {\n    var n = arguments.length;\n    if (n < 3) {\n      if (typeof name !== \"string\") {\n        if (n < 2) value = \"\";\n        for (priority in name) this.style(priority, name[priority], value);\n        return this;\n      }\n      priority = \"\";\n    }\n    function styleNull() {\n      this.style.removeProperty(name);\n    }\n    function styleString(b) {\n      return b == null ? styleNull : (b += \"\", function() {\n        var a = d3_window(this).getComputedStyle(this, null).getPropertyValue(name), i;\n        return a !== b && (i = d3_interpolate(a, b), function(t) {\n          this.style.setProperty(name, i(t), priority);\n        });\n      });\n    }\n    return d3_transition_tween(this, \"style.\" + name, value, styleString);\n  };\n  d3_transitionPrototype.styleTween = function(name, tween, priority) {\n    if (arguments.length < 3) priority = \"\";\n    function styleTween(d, i) {\n      var f = tween.call(this, d, i, d3_window(this).getComputedStyle(this, null).getPropertyValue(name));\n      return f && function(t) {\n        this.style.setProperty(name, f(t), priority);\n      };\n    }\n    return this.tween(\"style.\" + name, styleTween);\n  };\n  d3_transitionPrototype.text = function(value) {\n    return d3_transition_tween(this, \"text\", value, d3_transition_text);\n  };\n  function d3_transition_text(b) {\n    if (b == null) b = \"\";\n    return function() {\n      this.textContent = b;\n    };\n  }\n  d3_transitionPrototype.remove = function() {\n    var ns = this.namespace;\n    return this.each(\"end.transition\", function() {\n      var p;\n      if (this[ns].count < 2 && (p = this.parentNode)) p.removeChild(this);\n    });\n  };\n  d3_transitionPrototype.ease = function(value) {\n    var id = this.id, ns = this.namespace;\n    if (arguments.length < 1) return this.node()[ns][id].ease;\n    if (typeof value !== \"function\") value = d3.ease.apply(d3, arguments);\n    return d3_selection_each(this, function(node) {\n      node[ns][id].ease = value;\n    });\n  };\n  d3_transitionPrototype.delay = function(value) {\n    var id = this.id, ns = this.namespace;\n    if (arguments.length < 1) return this.node()[ns][id].delay;\n    return d3_selection_each(this, typeof value === \"function\" ? function(node, i, j) {\n      node[ns][id].delay = +value.call(node, node.__data__, i, j);\n    } : (value = +value, function(node) {\n      node[ns][id].delay = value;\n    }));\n  };\n  d3_transitionPrototype.duration = function(value) {\n    var id = this.id, ns = this.namespace;\n    if (arguments.length < 1) return this.node()[ns][id].duration;\n    return d3_selection_each(this, typeof value === \"function\" ? function(node, i, j) {\n      node[ns][id].duration = Math.max(1, value.call(node, node.__data__, i, j));\n    } : (value = Math.max(1, value), function(node) {\n      node[ns][id].duration = value;\n    }));\n  };\n  d3_transitionPrototype.each = function(type, listener) {\n    var id = this.id, ns = this.namespace;\n    if (arguments.length < 2) {\n      var inherit = d3_transitionInherit, inheritId = d3_transitionInheritId;\n      try {\n        d3_transitionInheritId = id;\n        d3_selection_each(this, function(node, i, j) {\n          d3_transitionInherit = node[ns][id];\n          type.call(node, node.__data__, i, j);\n        });\n      } finally {\n        d3_transitionInherit = inherit;\n        d3_transitionInheritId = inheritId;\n      }\n    } else {\n      d3_selection_each(this, function(node) {\n        var transition = node[ns][id];\n        (transition.event || (transition.event = d3.dispatch(\"start\", \"end\", \"interrupt\"))).on(type, listener);\n      });\n    }\n    return this;\n  };\n  d3_transitionPrototype.transition = function() {\n    var id0 = this.id, id1 = ++d3_transitionId, ns = this.namespace, subgroups = [], subgroup, group, node, transition;\n    for (var j = 0, m = this.length; j < m; j++) {\n      subgroups.push(subgroup = []);\n      for (var group = this[j], i = 0, n = group.length; i < n; i++) {\n        if (node = group[i]) {\n          transition = node[ns][id0];\n          d3_transitionNode(node, i, ns, id1, {\n            time: transition.time,\n            ease: transition.ease,\n            delay: transition.delay + transition.duration,\n            duration: transition.duration\n          });\n        }\n        subgroup.push(node);\n      }\n    }\n    return d3_transition(subgroups, ns, id1);\n  };\n  function d3_transitionNamespace(name) {\n    return name == null ? \"__transition__\" : \"__transition_\" + name + \"__\";\n  }\n  function d3_transitionNode(node, i, ns, id, inherit) {\n    var lock = node[ns] || (node[ns] = {\n      active: 0,\n      count: 0\n    }), transition = lock[id], time, timer, duration, ease, tweens;\n    function schedule(elapsed) {\n      var delay = transition.delay;\n      timer.t = delay + time;\n      if (delay <= elapsed) return start(elapsed - delay);\n      timer.c = start;\n    }\n    function start(elapsed) {\n      var activeId = lock.active, active = lock[activeId];\n      if (active) {\n        active.timer.c = null;\n        active.timer.t = NaN;\n        --lock.count;\n        delete lock[activeId];\n        active.event && active.event.interrupt.call(node, node.__data__, active.index);\n      }\n      for (var cancelId in lock) {\n        if (+cancelId < id) {\n          var cancel = lock[cancelId];\n          cancel.timer.c = null;\n          cancel.timer.t = NaN;\n          --lock.count;\n          delete lock[cancelId];\n        }\n      }\n      timer.c = tick;\n      d3_timer(function() {\n        if (timer.c && tick(elapsed || 1)) {\n          timer.c = null;\n          timer.t = NaN;\n        }\n        return 1;\n      }, 0, time);\n      lock.active = id;\n      transition.event && transition.event.start.call(node, node.__data__, i);\n      tweens = [];\n      transition.tween.forEach(function(key, value) {\n        if (value = value.call(node, node.__data__, i)) {\n          tweens.push(value);\n        }\n      });\n      ease = transition.ease;\n      duration = transition.duration;\n    }\n    function tick(elapsed) {\n      var t = elapsed / duration, e = ease(t), n = tweens.length;\n      while (n > 0) {\n        tweens[--n].call(node, e);\n      }\n      if (t >= 1) {\n        transition.event && transition.event.end.call(node, node.__data__, i);\n        if (--lock.count) delete lock[id]; else delete node[ns];\n        return 1;\n      }\n    }\n    if (!transition) {\n      time = inherit.time;\n      timer = d3_timer(schedule, 0, time);\n      transition = lock[id] = {\n        tween: new d3_Map(),\n        time: time,\n        timer: timer,\n        delay: inherit.delay,\n        duration: inherit.duration,\n        ease: inherit.ease,\n        index: i\n      };\n      inherit = null;\n      ++lock.count;\n    }\n  }\n  d3.svg.axis = function() {\n    var scale = d3.scale.linear(), orient = d3_svg_axisDefaultOrient, innerTickSize = 6, outerTickSize = 6, tickPadding = 3, tickArguments_ = [ 10 ], tickValues = null, tickFormat_;\n    function axis(g) {\n      g.each(function() {\n        var g = d3.select(this);\n        var scale0 = this.__chart__ || scale, scale1 = this.__chart__ = scale.copy();\n        var ticks = tickValues == null ? scale1.ticks ? scale1.ticks.apply(scale1, tickArguments_) : scale1.domain() : tickValues, tickFormat = tickFormat_ == null ? scale1.tickFormat ? scale1.tickFormat.apply(scale1, tickArguments_) : d3_identity : tickFormat_, tick = g.selectAll(\".tick\").data(ticks, scale1), tickEnter = tick.enter().insert(\"g\", \".domain\").attr(\"class\", \"tick\").style(\"opacity\", ε), tickExit = d3.transition(tick.exit()).style(\"opacity\", ε).remove(), tickUpdate = d3.transition(tick.order()).style(\"opacity\", 1), tickSpacing = Math.max(innerTickSize, 0) + tickPadding, tickTransform;\n        var range = d3_scaleRange(scale1), path = g.selectAll(\".domain\").data([ 0 ]), pathUpdate = (path.enter().append(\"path\").attr(\"class\", \"domain\"), \n        d3.transition(path));\n        tickEnter.append(\"line\");\n        tickEnter.append(\"text\");\n        var lineEnter = tickEnter.select(\"line\"), lineUpdate = tickUpdate.select(\"line\"), text = tick.select(\"text\").text(tickFormat), textEnter = tickEnter.select(\"text\"), textUpdate = tickUpdate.select(\"text\"), sign = orient === \"top\" || orient === \"left\" ? -1 : 1, x1, x2, y1, y2;\n        if (orient === \"bottom\" || orient === \"top\") {\n          tickTransform = d3_svg_axisX, x1 = \"x\", y1 = \"y\", x2 = \"x2\", y2 = \"y2\";\n          text.attr(\"dy\", sign < 0 ? \"0em\" : \".71em\").style(\"text-anchor\", \"middle\");\n          pathUpdate.attr(\"d\", \"M\" + range[0] + \",\" + sign * outerTickSize + \"V0H\" + range[1] + \"V\" + sign * outerTickSize);\n        } else {\n          tickTransform = d3_svg_axisY, x1 = \"y\", y1 = \"x\", x2 = \"y2\", y2 = \"x2\";\n          text.attr(\"dy\", \".32em\").style(\"text-anchor\", sign < 0 ? \"end\" : \"start\");\n          pathUpdate.attr(\"d\", \"M\" + sign * outerTickSize + \",\" + range[0] + \"H0V\" + range[1] + \"H\" + sign * outerTickSize);\n        }\n        lineEnter.attr(y2, sign * innerTickSize);\n        textEnter.attr(y1, sign * tickSpacing);\n        lineUpdate.attr(x2, 0).attr(y2, sign * innerTickSize);\n        textUpdate.attr(x1, 0).attr(y1, sign * tickSpacing);\n        if (scale1.rangeBand) {\n          var x = scale1, dx = x.rangeBand() / 2;\n          scale0 = scale1 = function(d) {\n            return x(d) + dx;\n          };\n        } else if (scale0.rangeBand) {\n          scale0 = scale1;\n        } else {\n          tickExit.call(tickTransform, scale1, scale0);\n        }\n        tickEnter.call(tickTransform, scale0, scale1);\n        tickUpdate.call(tickTransform, scale1, scale1);\n      });\n    }\n    axis.scale = function(x) {\n      if (!arguments.length) return scale;\n      scale = x;\n      return axis;\n    };\n    axis.orient = function(x) {\n      if (!arguments.length) return orient;\n      orient = x in d3_svg_axisOrients ? x + \"\" : d3_svg_axisDefaultOrient;\n      return axis;\n    };\n    axis.ticks = function() {\n      if (!arguments.length) return tickArguments_;\n      tickArguments_ = d3_array(arguments);\n      return axis;\n    };\n    axis.tickValues = function(x) {\n      if (!arguments.length) return tickValues;\n      tickValues = x;\n      return axis;\n    };\n    axis.tickFormat = function(x) {\n      if (!arguments.length) return tickFormat_;\n      tickFormat_ = x;\n      return axis;\n    };\n    axis.tickSize = function(x) {\n      var n = arguments.length;\n      if (!n) return innerTickSize;\n      innerTickSize = +x;\n      outerTickSize = +arguments[n - 1];\n      return axis;\n    };\n    axis.innerTickSize = function(x) {\n      if (!arguments.length) return innerTickSize;\n      innerTickSize = +x;\n      return axis;\n    };\n    axis.outerTickSize = function(x) {\n      if (!arguments.length) return outerTickSize;\n      outerTickSize = +x;\n      return axis;\n    };\n    axis.tickPadding = function(x) {\n      if (!arguments.length) return tickPadding;\n      tickPadding = +x;\n      return axis;\n    };\n    axis.tickSubdivide = function() {\n      return arguments.length && axis;\n    };\n    return axis;\n  };\n  var d3_svg_axisDefaultOrient = \"bottom\", d3_svg_axisOrients = {\n    top: 1,\n    right: 1,\n    bottom: 1,\n    left: 1\n  };\n  function d3_svg_axisX(selection, x0, x1) {\n    selection.attr(\"transform\", function(d) {\n      var v0 = x0(d);\n      return \"translate(\" + (isFinite(v0) ? v0 : x1(d)) + \",0)\";\n    });\n  }\n  function d3_svg_axisY(selection, y0, y1) {\n    selection.attr(\"transform\", function(d) {\n      var v0 = y0(d);\n      return \"translate(0,\" + (isFinite(v0) ? v0 : y1(d)) + \")\";\n    });\n  }\n  d3.svg.brush = function() {\n    var event = d3_eventDispatch(brush, \"brushstart\", \"brush\", \"brushend\"), x = null, y = null, xExtent = [ 0, 0 ], yExtent = [ 0, 0 ], xExtentDomain, yExtentDomain, xClamp = true, yClamp = true, resizes = d3_svg_brushResizes[0];\n    function brush(g) {\n      g.each(function() {\n        var g = d3.select(this).style(\"pointer-events\", \"all\").style(\"-webkit-tap-highlight-color\", \"rgba(0,0,0,0)\").on(\"mousedown.brush\", brushstart).on(\"touchstart.brush\", brushstart);\n        var background = g.selectAll(\".background\").data([ 0 ]);\n        background.enter().append(\"rect\").attr(\"class\", \"background\").style(\"visibility\", \"hidden\").style(\"cursor\", \"crosshair\");\n        g.selectAll(\".extent\").data([ 0 ]).enter().append(\"rect\").attr(\"class\", \"extent\").style(\"cursor\", \"move\");\n        var resize = g.selectAll(\".resize\").data(resizes, d3_identity);\n        resize.exit().remove();\n        resize.enter().append(\"g\").attr(\"class\", function(d) {\n          return \"resize \" + d;\n        }).style(\"cursor\", function(d) {\n          return d3_svg_brushCursor[d];\n        }).append(\"rect\").attr(\"x\", function(d) {\n          return /[ew]$/.test(d) ? -3 : null;\n        }).attr(\"y\", function(d) {\n          return /^[ns]/.test(d) ? -3 : null;\n        }).attr(\"width\", 6).attr(\"height\", 6).style(\"visibility\", \"hidden\");\n        resize.style(\"display\", brush.empty() ? \"none\" : null);\n        var gUpdate = d3.transition(g), backgroundUpdate = d3.transition(background), range;\n        if (x) {\n          range = d3_scaleRange(x);\n          backgroundUpdate.attr(\"x\", range[0]).attr(\"width\", range[1] - range[0]);\n          redrawX(gUpdate);\n        }\n        if (y) {\n          range = d3_scaleRange(y);\n          backgroundUpdate.attr(\"y\", range[0]).attr(\"height\", range[1] - range[0]);\n          redrawY(gUpdate);\n        }\n        redraw(gUpdate);\n      });\n    }\n    brush.event = function(g) {\n      g.each(function() {\n        var event_ = event.of(this, arguments), extent1 = {\n          x: xExtent,\n          y: yExtent,\n          i: xExtentDomain,\n          j: yExtentDomain\n        }, extent0 = this.__chart__ || extent1;\n        this.__chart__ = extent1;\n        if (d3_transitionInheritId) {\n          d3.select(this).transition().each(\"start.brush\", function() {\n            xExtentDomain = extent0.i;\n            yExtentDomain = extent0.j;\n            xExtent = extent0.x;\n            yExtent = extent0.y;\n            event_({\n              type: \"brushstart\"\n            });\n          }).tween(\"brush:brush\", function() {\n            var xi = d3_interpolateArray(xExtent, extent1.x), yi = d3_interpolateArray(yExtent, extent1.y);\n            xExtentDomain = yExtentDomain = null;\n            return function(t) {\n              xExtent = extent1.x = xi(t);\n              yExtent = extent1.y = yi(t);\n              event_({\n                type: \"brush\",\n                mode: \"resize\"\n              });\n            };\n          }).each(\"end.brush\", function() {\n            xExtentDomain = extent1.i;\n            yExtentDomain = extent1.j;\n            event_({\n              type: \"brush\",\n              mode: \"resize\"\n            });\n            event_({\n              type: \"brushend\"\n            });\n          });\n        } else {\n          event_({\n            type: \"brushstart\"\n          });\n          event_({\n            type: \"brush\",\n            mode: \"resize\"\n          });\n          event_({\n            type: \"brushend\"\n          });\n        }\n      });\n    };\n    function redraw(g) {\n      g.selectAll(\".resize\").attr(\"transform\", function(d) {\n        return \"translate(\" + xExtent[+/e$/.test(d)] + \",\" + yExtent[+/^s/.test(d)] + \")\";\n      });\n    }\n    function redrawX(g) {\n      g.select(\".extent\").attr(\"x\", xExtent[0]);\n      g.selectAll(\".extent,.n>rect,.s>rect\").attr(\"width\", xExtent[1] - xExtent[0]);\n    }\n    function redrawY(g) {\n      g.select(\".extent\").attr(\"y\", yExtent[0]);\n      g.selectAll(\".extent,.e>rect,.w>rect\").attr(\"height\", yExtent[1] - yExtent[0]);\n    }\n    function brushstart() {\n      var target = this, eventTarget = d3.select(d3.event.target), event_ = event.of(target, arguments), g = d3.select(target), resizing = eventTarget.datum(), resizingX = !/^(n|s)$/.test(resizing) && x, resizingY = !/^(e|w)$/.test(resizing) && y, dragging = eventTarget.classed(\"extent\"), dragRestore = d3_event_dragSuppress(target), center, origin = d3.mouse(target), offset;\n      var w = d3.select(d3_window(target)).on(\"keydown.brush\", keydown).on(\"keyup.brush\", keyup);\n      if (d3.event.changedTouches) {\n        w.on(\"touchmove.brush\", brushmove).on(\"touchend.brush\", brushend);\n      } else {\n        w.on(\"mousemove.brush\", brushmove).on(\"mouseup.brush\", brushend);\n      }\n      g.interrupt().selectAll(\"*\").interrupt();\n      if (dragging) {\n        origin[0] = xExtent[0] - origin[0];\n        origin[1] = yExtent[0] - origin[1];\n      } else if (resizing) {\n        var ex = +/w$/.test(resizing), ey = +/^n/.test(resizing);\n        offset = [ xExtent[1 - ex] - origin[0], yExtent[1 - ey] - origin[1] ];\n        origin[0] = xExtent[ex];\n        origin[1] = yExtent[ey];\n      } else if (d3.event.altKey) center = origin.slice();\n      g.style(\"pointer-events\", \"none\").selectAll(\".resize\").style(\"display\", null);\n      d3.select(\"body\").style(\"cursor\", eventTarget.style(\"cursor\"));\n      event_({\n        type: \"brushstart\"\n      });\n      brushmove();\n      function keydown() {\n        if (d3.event.keyCode == 32) {\n          if (!dragging) {\n            center = null;\n            origin[0] -= xExtent[1];\n            origin[1] -= yExtent[1];\n            dragging = 2;\n          }\n          d3_eventPreventDefault();\n        }\n      }\n      function keyup() {\n        if (d3.event.keyCode == 32 && dragging == 2) {\n          origin[0] += xExtent[1];\n          origin[1] += yExtent[1];\n          dragging = 0;\n          d3_eventPreventDefault();\n        }\n      }\n      function brushmove() {\n        var point = d3.mouse(target), moved = false;\n        if (offset) {\n          point[0] += offset[0];\n          point[1] += offset[1];\n        }\n        if (!dragging) {\n          if (d3.event.altKey) {\n            if (!center) center = [ (xExtent[0] + xExtent[1]) / 2, (yExtent[0] + yExtent[1]) / 2 ];\n            origin[0] = xExtent[+(point[0] < center[0])];\n            origin[1] = yExtent[+(point[1] < center[1])];\n          } else center = null;\n        }\n        if (resizingX && move1(point, x, 0)) {\n          redrawX(g);\n          moved = true;\n        }\n        if (resizingY && move1(point, y, 1)) {\n          redrawY(g);\n          moved = true;\n        }\n        if (moved) {\n          redraw(g);\n          event_({\n            type: \"brush\",\n            mode: dragging ? \"move\" : \"resize\"\n          });\n        }\n      }\n      function move1(point, scale, i) {\n        var range = d3_scaleRange(scale), r0 = range[0], r1 = range[1], position = origin[i], extent = i ? yExtent : xExtent, size = extent[1] - extent[0], min, max;\n        if (dragging) {\n          r0 -= position;\n          r1 -= size + position;\n        }\n        min = (i ? yClamp : xClamp) ? Math.max(r0, Math.min(r1, point[i])) : point[i];\n        if (dragging) {\n          max = (min += position) + size;\n        } else {\n          if (center) position = Math.max(r0, Math.min(r1, 2 * center[i] - min));\n          if (position < min) {\n            max = min;\n            min = position;\n          } else {\n            max = position;\n          }\n        }\n        if (extent[0] != min || extent[1] != max) {\n          if (i) yExtentDomain = null; else xExtentDomain = null;\n          extent[0] = min;\n          extent[1] = max;\n          return true;\n        }\n      }\n      function brushend() {\n        brushmove();\n        g.style(\"pointer-events\", \"all\").selectAll(\".resize\").style(\"display\", brush.empty() ? \"none\" : null);\n        d3.select(\"body\").style(\"cursor\", null);\n        w.on(\"mousemove.brush\", null).on(\"mouseup.brush\", null).on(\"touchmove.brush\", null).on(\"touchend.brush\", null).on(\"keydown.brush\", null).on(\"keyup.brush\", null);\n        dragRestore();\n        event_({\n          type: \"brushend\"\n        });\n      }\n    }\n    brush.x = function(z) {\n      if (!arguments.length) return x;\n      x = z;\n      resizes = d3_svg_brushResizes[!x << 1 | !y];\n      return brush;\n    };\n    brush.y = function(z) {\n      if (!arguments.length) return y;\n      y = z;\n      resizes = d3_svg_brushResizes[!x << 1 | !y];\n      return brush;\n    };\n    brush.clamp = function(z) {\n      if (!arguments.length) return x && y ? [ xClamp, yClamp ] : x ? xClamp : y ? yClamp : null;\n      if (x && y) xClamp = !!z[0], yClamp = !!z[1]; else if (x) xClamp = !!z; else if (y) yClamp = !!z;\n      return brush;\n    };\n    brush.extent = function(z) {\n      var x0, x1, y0, y1, t;\n      if (!arguments.length) {\n        if (x) {\n          if (xExtentDomain) {\n            x0 = xExtentDomain[0], x1 = xExtentDomain[1];\n          } else {\n            x0 = xExtent[0], x1 = xExtent[1];\n            if (x.invert) x0 = x.invert(x0), x1 = x.invert(x1);\n            if (x1 < x0) t = x0, x0 = x1, x1 = t;\n          }\n        }\n        if (y) {\n          if (yExtentDomain) {\n            y0 = yExtentDomain[0], y1 = yExtentDomain[1];\n          } else {\n            y0 = yExtent[0], y1 = yExtent[1];\n            if (y.invert) y0 = y.invert(y0), y1 = y.invert(y1);\n            if (y1 < y0) t = y0, y0 = y1, y1 = t;\n          }\n        }\n        return x && y ? [ [ x0, y0 ], [ x1, y1 ] ] : x ? [ x0, x1 ] : y && [ y0, y1 ];\n      }\n      if (x) {\n        x0 = z[0], x1 = z[1];\n        if (y) x0 = x0[0], x1 = x1[0];\n        xExtentDomain = [ x0, x1 ];\n        if (x.invert) x0 = x(x0), x1 = x(x1);\n        if (x1 < x0) t = x0, x0 = x1, x1 = t;\n        if (x0 != xExtent[0] || x1 != xExtent[1]) xExtent = [ x0, x1 ];\n      }\n      if (y) {\n        y0 = z[0], y1 = z[1];\n        if (x) y0 = y0[1], y1 = y1[1];\n        yExtentDomain = [ y0, y1 ];\n        if (y.invert) y0 = y(y0), y1 = y(y1);\n        if (y1 < y0) t = y0, y0 = y1, y1 = t;\n        if (y0 != yExtent[0] || y1 != yExtent[1]) yExtent = [ y0, y1 ];\n      }\n      return brush;\n    };\n    brush.clear = function() {\n      if (!brush.empty()) {\n        xExtent = [ 0, 0 ], yExtent = [ 0, 0 ];\n        xExtentDomain = yExtentDomain = null;\n      }\n      return brush;\n    };\n    brush.empty = function() {\n      return !!x && xExtent[0] == xExtent[1] || !!y && yExtent[0] == yExtent[1];\n    };\n    return d3.rebind(brush, event, \"on\");\n  };\n  var d3_svg_brushCursor = {\n    n: \"ns-resize\",\n    e: \"ew-resize\",\n    s: \"ns-resize\",\n    w: \"ew-resize\",\n    nw: \"nwse-resize\",\n    ne: \"nesw-resize\",\n    se: \"nwse-resize\",\n    sw: \"nesw-resize\"\n  };\n  var d3_svg_brushResizes = [ [ \"n\", \"e\", \"s\", \"w\", \"nw\", \"ne\", \"se\", \"sw\" ], [ \"e\", \"w\" ], [ \"n\", \"s\" ], [] ];\n  var d3_time_format = d3_time.format = d3_locale_enUS.timeFormat;\n  var d3_time_formatUtc = d3_time_format.utc;\n  var d3_time_formatIso = d3_time_formatUtc(\"%Y-%m-%dT%H:%M:%S.%LZ\");\n  d3_time_format.iso = Date.prototype.toISOString && +new Date(\"2000-01-01T00:00:00.000Z\") ? d3_time_formatIsoNative : d3_time_formatIso;\n  function d3_time_formatIsoNative(date) {\n    return date.toISOString();\n  }\n  d3_time_formatIsoNative.parse = function(string) {\n    var date = new Date(string);\n    return isNaN(date) ? null : date;\n  };\n  d3_time_formatIsoNative.toString = d3_time_formatIso.toString;\n  d3_time.second = d3_time_interval(function(date) {\n    return new d3_date(Math.floor(date / 1e3) * 1e3);\n  }, function(date, offset) {\n    date.setTime(date.getTime() + Math.floor(offset) * 1e3);\n  }, function(date) {\n    return date.getSeconds();\n  });\n  d3_time.seconds = d3_time.second.range;\n  d3_time.seconds.utc = d3_time.second.utc.range;\n  d3_time.minute = d3_time_interval(function(date) {\n    return new d3_date(Math.floor(date / 6e4) * 6e4);\n  }, function(date, offset) {\n    date.setTime(date.getTime() + Math.floor(offset) * 6e4);\n  }, function(date) {\n    return date.getMinutes();\n  });\n  d3_time.minutes = d3_time.minute.range;\n  d3_time.minutes.utc = d3_time.minute.utc.range;\n  d3_time.hour = d3_time_interval(function(date) {\n    var timezone = date.getTimezoneOffset() / 60;\n    return new d3_date((Math.floor(date / 36e5 - timezone) + timezone) * 36e5);\n  }, function(date, offset) {\n    date.setTime(date.getTime() + Math.floor(offset) * 36e5);\n  }, function(date) {\n    return date.getHours();\n  });\n  d3_time.hours = d3_time.hour.range;\n  d3_time.hours.utc = d3_time.hour.utc.range;\n  d3_time.month = d3_time_interval(function(date) {\n    date = d3_time.day(date);\n    date.setDate(1);\n    return date;\n  }, function(date, offset) {\n    date.setMonth(date.getMonth() + offset);\n  }, function(date) {\n    return date.getMonth();\n  });\n  d3_time.months = d3_time.month.range;\n  d3_time.months.utc = d3_time.month.utc.range;\n  function d3_time_scale(linear, methods, format) {\n    function scale(x) {\n      return linear(x);\n    }\n    scale.invert = function(x) {\n      return d3_time_scaleDate(linear.invert(x));\n    };\n    scale.domain = function(x) {\n      if (!arguments.length) return linear.domain().map(d3_time_scaleDate);\n      linear.domain(x);\n      return scale;\n    };\n    function tickMethod(extent, count) {\n      var span = extent[1] - extent[0], target = span / count, i = d3.bisect(d3_time_scaleSteps, target);\n      return i == d3_time_scaleSteps.length ? [ methods.year, d3_scale_linearTickRange(extent.map(function(d) {\n        return d / 31536e6;\n      }), count)[2] ] : !i ? [ d3_time_scaleMilliseconds, d3_scale_linearTickRange(extent, count)[2] ] : methods[target / d3_time_scaleSteps[i - 1] < d3_time_scaleSteps[i] / target ? i - 1 : i];\n    }\n    scale.nice = function(interval, skip) {\n      var domain = scale.domain(), extent = d3_scaleExtent(domain), method = interval == null ? tickMethod(extent, 10) : typeof interval === \"number\" && tickMethod(extent, interval);\n      if (method) interval = method[0], skip = method[1];\n      function skipped(date) {\n        return !isNaN(date) && !interval.range(date, d3_time_scaleDate(+date + 1), skip).length;\n      }\n      return scale.domain(d3_scale_nice(domain, skip > 1 ? {\n        floor: function(date) {\n          while (skipped(date = interval.floor(date))) date = d3_time_scaleDate(date - 1);\n          return date;\n        },\n        ceil: function(date) {\n          while (skipped(date = interval.ceil(date))) date = d3_time_scaleDate(+date + 1);\n          return date;\n        }\n      } : interval));\n    };\n    scale.ticks = function(interval, skip) {\n      var extent = d3_scaleExtent(scale.domain()), method = interval == null ? tickMethod(extent, 10) : typeof interval === \"number\" ? tickMethod(extent, interval) : !interval.range && [ {\n        range: interval\n      }, skip ];\n      if (method) interval = method[0], skip = method[1];\n      return interval.range(extent[0], d3_time_scaleDate(+extent[1] + 1), skip < 1 ? 1 : skip);\n    };\n    scale.tickFormat = function() {\n      return format;\n    };\n    scale.copy = function() {\n      return d3_time_scale(linear.copy(), methods, format);\n    };\n    return d3_scale_linearRebind(scale, linear);\n  }\n  function d3_time_scaleDate(t) {\n    return new Date(t);\n  }\n  var d3_time_scaleSteps = [ 1e3, 5e3, 15e3, 3e4, 6e4, 3e5, 9e5, 18e5, 36e5, 108e5, 216e5, 432e5, 864e5, 1728e5, 6048e5, 2592e6, 7776e6, 31536e6 ];\n  var d3_time_scaleLocalMethods = [ [ d3_time.second, 1 ], [ d3_time.second, 5 ], [ d3_time.second, 15 ], [ d3_time.second, 30 ], [ d3_time.minute, 1 ], [ d3_time.minute, 5 ], [ d3_time.minute, 15 ], [ d3_time.minute, 30 ], [ d3_time.hour, 1 ], [ d3_time.hour, 3 ], [ d3_time.hour, 6 ], [ d3_time.hour, 12 ], [ d3_time.day, 1 ], [ d3_time.day, 2 ], [ d3_time.week, 1 ], [ d3_time.month, 1 ], [ d3_time.month, 3 ], [ d3_time.year, 1 ] ];\n  var d3_time_scaleLocalFormat = d3_time_format.multi([ [ \".%L\", function(d) {\n    return d.getMilliseconds();\n  } ], [ \":%S\", function(d) {\n    return d.getSeconds();\n  } ], [ \"%I:%M\", function(d) {\n    return d.getMinutes();\n  } ], [ \"%I %p\", function(d) {\n    return d.getHours();\n  } ], [ \"%a %d\", function(d) {\n    return d.getDay() && d.getDate() != 1;\n  } ], [ \"%b %d\", function(d) {\n    return d.getDate() != 1;\n  } ], [ \"%B\", function(d) {\n    return d.getMonth();\n  } ], [ \"%Y\", d3_true ] ]);\n  var d3_time_scaleMilliseconds = {\n    range: function(start, stop, step) {\n      return d3.range(Math.ceil(start / step) * step, +stop, step).map(d3_time_scaleDate);\n    },\n    floor: d3_identity,\n    ceil: d3_identity\n  };\n  d3_time_scaleLocalMethods.year = d3_time.year;\n  d3_time.scale = function() {\n    return d3_time_scale(d3.scale.linear(), d3_time_scaleLocalMethods, d3_time_scaleLocalFormat);\n  };\n  var d3_time_scaleUtcMethods = d3_time_scaleLocalMethods.map(function(m) {\n    return [ m[0].utc, m[1] ];\n  });\n  var d3_time_scaleUtcFormat = d3_time_formatUtc.multi([ [ \".%L\", function(d) {\n    return d.getUTCMilliseconds();\n  } ], [ \":%S\", function(d) {\n    return d.getUTCSeconds();\n  } ], [ \"%I:%M\", function(d) {\n    return d.getUTCMinutes();\n  } ], [ \"%I %p\", function(d) {\n    return d.getUTCHours();\n  } ], [ \"%a %d\", function(d) {\n    return d.getUTCDay() && d.getUTCDate() != 1;\n  } ], [ \"%b %d\", function(d) {\n    return d.getUTCDate() != 1;\n  } ], [ \"%B\", function(d) {\n    return d.getUTCMonth();\n  } ], [ \"%Y\", d3_true ] ]);\n  d3_time_scaleUtcMethods.year = d3_time.year.utc;\n  d3_time.scale.utc = function() {\n    return d3_time_scale(d3.scale.linear(), d3_time_scaleUtcMethods, d3_time_scaleUtcFormat);\n  };\n  d3.text = d3_xhrType(function(request) {\n    return request.responseText;\n  });\n  d3.json = function(url, callback) {\n    return d3_xhr(url, \"application/json\", d3_json, callback);\n  };\n  function d3_json(request) {\n    return JSON.parse(request.responseText);\n  }\n  d3.html = function(url, callback) {\n    return d3_xhr(url, \"text/html\", d3_html, callback);\n  };\n  function d3_html(request) {\n    var range = d3_document.createRange();\n    range.selectNode(d3_document.body);\n    return range.createContextualFragment(request.responseText);\n  }\n  d3.xml = d3_xhrType(function(request) {\n    return request.responseXML;\n  });\n  if (true) this.d3 = d3, !(__WEBPACK_AMD_DEFINE_FACTORY__ = (d3),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) :\n\t\t\t\t__WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)); else {}\n}();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/d3/d3.js\n");

/***/ }),

/***/ "./node_modules/intersectionjs/intersection.js":
/*!*****************************************************!*\
  !*** ./node_modules/intersectionjs/intersection.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var Point2D = __webpack_require__(/*! point2d */ \"./node_modules/point2d/index.js\");\n\n/*****\n*\n*   Intersection.js\n*\n*   copyright 2002, Kevin Lindsey\n*\n*****/\n\n/*****\n*\n*   constructor\n*\n*****/\nfunction Intersection(status) {\n    if ( arguments.length > 0 ) {\n        this.init(status);\n    }\n}\n\n\n/*****\n*\n*   init\n*\n*****/\nIntersection.prototype.init = function(status) {\n    this.status = status;\n    this.points = new Array();\n};\n\n\n/*****\n*\n*   appendPoint\n*\n*****/\nIntersection.prototype.appendPoint = function(point) {\n    this.points.push(point);\n};\n\n\n/*****\n*\n*   appendPoints\n*\n*****/\nIntersection.prototype.appendPoints = function(points) {\n    this.points = this.points.concat(points);\n};\n\n\n/*****\n*\n*   class methods\n*\n*****/\n\n/*****\n*\n*   intersectShapes\n*\n*****/\nIntersection.intersectShapes = function(shape1, shape2) {\n    var ip1 = shape1.getIntersectionParams();\n    var ip2 = shape2.getIntersectionParams();\n    var result;\n\n    if ( ip1 != null && ip2 != null ) {\n        if ( ip1.name == \"Path\" ) {\n            result = Intersection.intersectPathShape(shape1, shape2);\n        } else if ( ip2.name == \"Path\" ) {\n            result = Intersection.intersectPathShape(shape2, shape1);\n        } else {\n            var method;\n            var params;\n\n            if ( ip1.name < ip2.name ) {\n                method = \"intersect\" + ip1.name + ip2.name;\n                params = ip1.params.concat( ip2.params );\n            } else {\n                method = \"intersect\" + ip2.name + ip1.name;\n                params = ip2.params.concat( ip1.params );\n            }\n\n            if ( !(method in Intersection) )\n                throw new Error(\"Intersection not available: \" + method);\n\n            result = Intersection[method].apply(null, params);\n        }\n    } else {\n        result = new Intersection(\"No Intersection\");\n    }\n\n    return result;\n};\n\n\n/*****\n*\n*   intersectPathShape\n*\n*****/\nIntersection.intersectPathShape = function(path, shape) {\n    return path.intersectShape(shape);\n};\n\n\n/*****\n*\n*   intersectBezier2Bezier2\n*\n*****/\nIntersection.intersectBezier2Bezier2 = function(a1, a2, a3, b1, b2, b3) {\n    var a, b;\n    var c12, c11, c10;\n    var c22, c21, c20;\n    var result = new Intersection(\"No Intersection\");\n    var poly;\n\n    a = a2.multiply(-2);\n    c12 = a1.add(a.add(a3));\n\n    a = a1.multiply(-2);\n    b = a2.multiply(2);\n    c11 = a.add(b);\n\n    c10 = new Point2D(a1.x, a1.y);\n\n    a = b2.multiply(-2);\n    c22 = b1.add(a.add(b3));\n\n    a = b1.multiply(-2);\n    b = b2.multiply(2);\n    c21 = a.add(b);\n\n    c20 = new Point2D(b1.x, b1.y);\n    \n    if ( c12.y == 0 ) {\n        var v0 = c12.x*(c10.y - c20.y);\n        var v1 = v0 - c11.x*c11.y;\n        var v2 = v0 + v1;\n        var v3 = c11.y*c11.y;\n\n        poly = new Polynomial(\n            c12.x*c22.y*c22.y,\n            2*c12.x*c21.y*c22.y,\n            c12.x*c21.y*c21.y - c22.x*v3 - c22.y*v0 - c22.y*v1,\n            -c21.x*v3 - c21.y*v0 - c21.y*v1,\n            (c10.x - c20.x)*v3 + (c10.y - c20.y)*v1\n        );\n    } else {\n        var v0 = c12.x*c22.y - c12.y*c22.x;\n        var v1 = c12.x*c21.y - c21.x*c12.y;\n        var v2 = c11.x*c12.y - c11.y*c12.x;\n        var v3 = c10.y - c20.y;\n        var v4 = c12.y*(c10.x - c20.x) - c12.x*v3;\n        var v5 = -c11.y*v2 + c12.y*v4;\n        var v6 = v2*v2;\n\n        poly = new Polynomial(\n            v0*v0,\n            2*v0*v1,\n            (-c22.y*v6 + c12.y*v1*v1 + c12.y*v0*v4 + v0*v5) / c12.y,\n            (-c21.y*v6 + c12.y*v1*v4 + v1*v5) / c12.y,\n            (v3*v6 + v4*v5) / c12.y\n        );\n    }\n\n    var roots = poly.getRoots();\n    for ( var i = 0; i < roots.length; i++ ) {\n        var s = roots[i];\n\n        if ( 0 <= s && s <= 1 ) {\n            var xRoots = new Polynomial(\n                c12.x,\n                c11.x,\n                c10.x - c20.x - s*c21.x - s*s*c22.x\n            ).getRoots();\n            var yRoots = new Polynomial(\n                c12.y,\n                c11.y,\n                c10.y - c20.y - s*c21.y - s*s*c22.y\n            ).getRoots();\n\n            if ( xRoots.length > 0 && yRoots.length > 0 ) {\n                var TOLERANCE = 1e-4;\n\n                checkRoots:\n                for ( var j = 0; j < xRoots.length; j++ ) {\n                    var xRoot = xRoots[j];\n\n                    if ( 0 <= xRoot && xRoot <= 1 ) {\n                        for ( var k = 0; k < yRoots.length; k++ ) {\n                            if ( Math.abs( xRoot - yRoots[k] ) < TOLERANCE ) {\n                                result.points.push( c22.multiply(s*s).add(c21.multiply(s).add(c20)) );\n                                break checkRoots;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    if ( result.points.length > 0 ) result.status = \"Intersection\";\n\n    return result;\n};\n\n\n/*****\n*\n*   intersectBezier2Bezier3\n*\n*****/\nIntersection.intersectBezier2Bezier3 = function(a1, a2, a3, b1, b2, b3, b4) {\n    var a, b,c, d;\n    var c12, c11, c10;\n    var c23, c22, c21, c20;\n    var result = new Intersection(\"No Intersection\");\n\n    a = a2.multiply(-2);\n    c12 = a1.add(a.add(a3));\n\n    a = a1.multiply(-2);\n    b = a2.multiply(2);\n    c11 = a.add(b);\n\n    c10 = new Point2D(a1.x, a1.y);\n\n    a = b1.multiply(-1);\n    b = b2.multiply(3);\n    c = b3.multiply(-3);\n    d = a.add(b.add(c.add(b4)));\n    c23 = new Vector2D(d.x, d.y);\n\n    a = b1.multiply(3);\n    b = b2.multiply(-6);\n    c = b3.multiply(3);\n    d = a.add(b.add(c));\n    c22 = new Vector2D(d.x, d.y);\n\n    a = b1.multiply(-3);\n    b = b2.multiply(3);\n    c = a.add(b);\n    c21 = new Vector2D(c.x, c.y);\n\n    c20 = new Vector2D(b1.x, b1.y);\n\n    var c10x2 = c10.x*c10.x;\n    var c10y2 = c10.y*c10.y;\n    var c11x2 = c11.x*c11.x;\n    var c11y2 = c11.y*c11.y;\n    var c12x2 = c12.x*c12.x;\n    var c12y2 = c12.y*c12.y;\n    var c20x2 = c20.x*c20.x;\n    var c20y2 = c20.y*c20.y;\n    var c21x2 = c21.x*c21.x;\n    var c21y2 = c21.y*c21.y;\n    var c22x2 = c22.x*c22.x;\n    var c22y2 = c22.y*c22.y;\n    var c23x2 = c23.x*c23.x;\n    var c23y2 = c23.y*c23.y;\n\n    var poly = new Polynomial(\n        -2*c12.x*c12.y*c23.x*c23.y + c12x2*c23y2 + c12y2*c23x2,\n        -2*c12.x*c12.y*c22.x*c23.y - 2*c12.x*c12.y*c22.y*c23.x + 2*c12y2*c22.x*c23.x +\n            2*c12x2*c22.y*c23.y,\n        -2*c12.x*c21.x*c12.y*c23.y - 2*c12.x*c12.y*c21.y*c23.x - 2*c12.x*c12.y*c22.x*c22.y +\n            2*c21.x*c12y2*c23.x + c12y2*c22x2 + c12x2*(2*c21.y*c23.y + c22y2),\n        2*c10.x*c12.x*c12.y*c23.y + 2*c10.y*c12.x*c12.y*c23.x + c11.x*c11.y*c12.x*c23.y +\n            c11.x*c11.y*c12.y*c23.x - 2*c20.x*c12.x*c12.y*c23.y - 2*c12.x*c20.y*c12.y*c23.x -\n            2*c12.x*c21.x*c12.y*c22.y - 2*c12.x*c12.y*c21.y*c22.x - 2*c10.x*c12y2*c23.x -\n            2*c10.y*c12x2*c23.y + 2*c20.x*c12y2*c23.x + 2*c21.x*c12y2*c22.x -\n            c11y2*c12.x*c23.x - c11x2*c12.y*c23.y + c12x2*(2*c20.y*c23.y + 2*c21.y*c22.y),\n        2*c10.x*c12.x*c12.y*c22.y + 2*c10.y*c12.x*c12.y*c22.x + c11.x*c11.y*c12.x*c22.y +\n            c11.x*c11.y*c12.y*c22.x - 2*c20.x*c12.x*c12.y*c22.y - 2*c12.x*c20.y*c12.y*c22.x -\n            2*c12.x*c21.x*c12.y*c21.y - 2*c10.x*c12y2*c22.x - 2*c10.y*c12x2*c22.y +\n            2*c20.x*c12y2*c22.x - c11y2*c12.x*c22.x - c11x2*c12.y*c22.y + c21x2*c12y2 +\n            c12x2*(2*c20.y*c22.y + c21y2),\n        2*c10.x*c12.x*c12.y*c21.y + 2*c10.y*c12.x*c21.x*c12.y + c11.x*c11.y*c12.x*c21.y +\n            c11.x*c11.y*c21.x*c12.y - 2*c20.x*c12.x*c12.y*c21.y - 2*c12.x*c20.y*c21.x*c12.y -\n            2*c10.x*c21.x*c12y2 - 2*c10.y*c12x2*c21.y + 2*c20.x*c21.x*c12y2 -\n            c11y2*c12.x*c21.x - c11x2*c12.y*c21.y + 2*c12x2*c20.y*c21.y,\n        -2*c10.x*c10.y*c12.x*c12.y - c10.x*c11.x*c11.y*c12.y - c10.y*c11.x*c11.y*c12.x +\n            2*c10.x*c12.x*c20.y*c12.y + 2*c10.y*c20.x*c12.x*c12.y + c11.x*c20.x*c11.y*c12.y +\n            c11.x*c11.y*c12.x*c20.y - 2*c20.x*c12.x*c20.y*c12.y - 2*c10.x*c20.x*c12y2 +\n            c10.x*c11y2*c12.x + c10.y*c11x2*c12.y - 2*c10.y*c12x2*c20.y -\n            c20.x*c11y2*c12.x - c11x2*c20.y*c12.y + c10x2*c12y2 + c10y2*c12x2 +\n            c20x2*c12y2 + c12x2*c20y2\n    );\n    var roots = poly.getRootsInInterval(0,1);\n\n    for ( var i = 0; i < roots.length; i++ ) {\n        var s = roots[i];\n        var xRoots = new Polynomial(\n            c12.x,\n            c11.x,\n            c10.x - c20.x - s*c21.x - s*s*c22.x - s*s*s*c23.x\n        ).getRoots();\n        var yRoots = new Polynomial(\n            c12.y,\n            c11.y,\n            c10.y - c20.y - s*c21.y - s*s*c22.y - s*s*s*c23.y\n        ).getRoots();\n\n        if ( xRoots.length > 0 && yRoots.length > 0 ) {\n            var TOLERANCE = 1e-4;\n\n            checkRoots:\n            for ( var j = 0; j < xRoots.length; j++ ) {\n                var xRoot = xRoots[j];\n                \n                if ( 0 <= xRoot && xRoot <= 1 ) {\n                    for ( var k = 0; k < yRoots.length; k++ ) {\n                        if ( Math.abs( xRoot - yRoots[k] ) < TOLERANCE ) {\n                            result.points.push(\n                                c23.multiply(s*s*s).add(c22.multiply(s*s).add(c21.multiply(s).add(c20)))\n                            );\n                            break checkRoots;\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    if ( result.points.length > 0 ) result.status = \"Intersection\";\n\n    return result;\n\n};\n\n\n/*****\n*\n*   intersectBezier2Circle\n*\n*****/\nIntersection.intersectBezier2Circle = function(p1, p2, p3, c, r) {\n    return Intersection.intersectBezier2Ellipse(p1, p2, p3, c, r, r);\n};\n\n\n/*****\n*\n*   intersectBezier2Ellipse\n*\n*****/\nIntersection.intersectBezier2Ellipse = function(p1, p2, p3, ec, rx, ry) {\n    var a, b;       // temporary variables\n    var c2, c1, c0; // coefficients of quadratic\n    var result = new Intersection(\"No Intersection\");\n\n    a = p2.multiply(-2);\n    c2 = p1.add(a.add(p3));\n\n    a = p1.multiply(-2);\n    b = p2.multiply(2);\n    c1 = a.add(b);\n\n    c0 = new Point2D(p1.x, p1.y);\n\n    var rxrx  = rx*rx;\n    var ryry  = ry*ry;\n    var roots = new Polynomial(\n        ryry*c2.x*c2.x + rxrx*c2.y*c2.y,\n        2*(ryry*c2.x*c1.x + rxrx*c2.y*c1.y),\n        ryry*(2*c2.x*c0.x + c1.x*c1.x) + rxrx*(2*c2.y*c0.y+c1.y*c1.y) -\n            2*(ryry*ec.x*c2.x + rxrx*ec.y*c2.y),\n        2*(ryry*c1.x*(c0.x-ec.x) + rxrx*c1.y*(c0.y-ec.y)),\n        ryry*(c0.x*c0.x+ec.x*ec.x) + rxrx*(c0.y*c0.y + ec.y*ec.y) -\n            2*(ryry*ec.x*c0.x + rxrx*ec.y*c0.y) - rxrx*ryry\n    ).getRoots();\n\n    for ( var i = 0; i < roots.length; i++ ) {\n        var t = roots[i];\n\n        if ( 0 <= t && t <= 1 )\n            result.points.push( c2.multiply(t*t).add(c1.multiply(t).add(c0)) );\n    }\n\n    if ( result.points.length > 0 ) result.status = \"Intersection\";\n\n    return result;\n};\n\n\n/*****\n*\n*   intersectBezier2Line\n*\n*****/\nIntersection.intersectBezier2Line = function(p1, p2, p3, a1, a2) {\n    var a, b;             // temporary variables\n    var c2, c1, c0;       // coefficients of quadratic\n    var cl;               // c coefficient for normal form of line\n    var n;                // normal for normal form of line\n    var min = a1.min(a2); // used to determine if point is on line segment\n    var max = a1.max(a2); // used to determine if point is on line segment\n    var result = new Intersection(\"No Intersection\");\n    \n    a = p2.multiply(-2);\n    c2 = p1.add(a.add(p3));\n\n    a = p1.multiply(-2);\n    b = p2.multiply(2);\n    c1 = a.add(b);\n\n    c0 = new Point2D(p1.x, p1.y);\n\n    // Convert line to normal form: ax + by + c = 0\n    // Find normal to line: negative inverse of original line's slope\n    n = new Vector2D(a1.y - a2.y, a2.x - a1.x);\n    \n    // Determine new c coefficient\n    cl = a1.x*a2.y - a2.x*a1.y;\n\n    // Transform cubic coefficients to line's coordinate system and find roots\n    // of cubic\n    roots = new Polynomial(\n        n.dot(c2),\n        n.dot(c1),\n        n.dot(c0) + cl\n    ).getRoots();\n\n    // Any roots in closed interval [0,1] are intersections on Bezier, but\n    // might not be on the line segment.\n    // Find intersections and calculate point coordinates\n    for ( var i = 0; i < roots.length; i++ ) {\n        var t = roots[i];\n\n        if ( 0 <= t && t <= 1 ) {\n            // We're within the Bezier curve\n            // Find point on Bezier\n            var p4 = p1.lerp(p2, t);\n            var p5 = p2.lerp(p3, t);\n\n            var p6 = p4.lerp(p5, t);\n\n            // See if point is on line segment\n            // Had to make special cases for vertical and horizontal lines due\n            // to slight errors in calculation of p6\n            if ( a1.x == a2.x ) {\n                if ( min.y <= p6.y && p6.y <= max.y ) {\n                    result.status = \"Intersection\";\n                    result.appendPoint( p6 );\n                }\n            } else if ( a1.y == a2.y ) {\n                if ( min.x <= p6.x && p6.x <= max.x ) {\n                    result.status = \"Intersection\";\n                    result.appendPoint( p6 );\n                }\n            } else if ( p6.gte(min) && p6.lte(max) ) {\n                result.status = \"Intersection\";\n                result.appendPoint( p6 );\n            }\n        }\n    }\n\n    return result;\n};\n\n\n/*****\n*\n*   intersectBezier2Polygon\n*\n*****/\nIntersection.intersectBezier2Polygon = function(p1, p2, p3, points) {\n    var result = new Intersection(\"No Intersection\");\n    var length = points.length;\n\n    for ( var i = 0; i < length; i++ ) {\n        var a1 = points[i];\n        var a2 = points[(i+1) % length];\n        var inter = Intersection.intersectBezier2Line(p1, p2, p3, a1, a2);\n\n        result.appendPoints(inter.points);\n    }\n\n    if ( result.points.length > 0 ) result.status = \"Intersection\";\n\n    return result;\n};\n\n\n/*****\n*\n*   intersectBezier2Rectangle\n*\n*****/\nIntersection.intersectBezier2Rectangle = function(p1, p2, p3, r1, r2) {\n    var min        = r1.min(r2);\n    var max        = r1.max(r2);\n    var topRight   = new Point2D( max.x, min.y );\n    var bottomLeft = new Point2D( min.x, max.y );\n    \n    var inter1 = Intersection.intersectBezier2Line(p1, p2, p3, min, topRight);\n    var inter2 = Intersection.intersectBezier2Line(p1, p2, p3, topRight, max);\n    var inter3 = Intersection.intersectBezier2Line(p1, p2, p3, max, bottomLeft);\n    var inter4 = Intersection.intersectBezier2Line(p1, p2, p3, bottomLeft, min);\n    \n    var result = new Intersection(\"No Intersection\");\n\n    result.appendPoints(inter1.points);\n    result.appendPoints(inter2.points);\n    result.appendPoints(inter3.points);\n    result.appendPoints(inter4.points);\n\n    if ( result.points.length > 0 ) result.status = \"Intersection\";\n\n    return result;\n};\n\n\n/*****\n*\n*   intersectBezier3Bezier3\n*\n*****/\nIntersection.intersectBezier3Bezier3 = function(a1, a2, a3, a4, b1, b2, b3, b4) {\n    var a, b, c, d;         // temporary variables\n    var c13, c12, c11, c10; // coefficients of cubic\n    var c23, c22, c21, c20; // coefficients of cubic\n    var result = new Intersection(\"No Intersection\");\n\n    // Calculate the coefficients of cubic polynomial\n    a = a1.multiply(-1);\n    b = a2.multiply(3);\n    c = a3.multiply(-3);\n    d = a.add(b.add(c.add(a4)));\n    c13 = new Vector2D(d.x, d.y);\n\n    a = a1.multiply(3);\n    b = a2.multiply(-6);\n    c = a3.multiply(3);\n    d = a.add(b.add(c));\n    c12 = new Vector2D(d.x, d.y);\n\n    a = a1.multiply(-3);\n    b = a2.multiply(3);\n    c = a.add(b);\n    c11 = new Vector2D(c.x, c.y);\n\n    c10 = new Vector2D(a1.x, a1.y);\n\n    a = b1.multiply(-1);\n    b = b2.multiply(3);\n    c = b3.multiply(-3);\n    d = a.add(b.add(c.add(b4)));\n    c23 = new Vector2D(d.x, d.y);\n\n    a = b1.multiply(3);\n    b = b2.multiply(-6);\n    c = b3.multiply(3);\n    d = a.add(b.add(c));\n    c22 = new Vector2D(d.x, d.y);\n\n    a = b1.multiply(-3);\n    b = b2.multiply(3);\n    c = a.add(b);\n    c21 = new Vector2D(c.x, c.y);\n\n    c20 = new Vector2D(b1.x, b1.y);\n\n    var c10x2 = c10.x*c10.x;\n    var c10x3 = c10.x*c10.x*c10.x;\n    var c10y2 = c10.y*c10.y;\n    var c10y3 = c10.y*c10.y*c10.y;\n    var c11x2 = c11.x*c11.x;\n    var c11x3 = c11.x*c11.x*c11.x;\n    var c11y2 = c11.y*c11.y;\n    var c11y3 = c11.y*c11.y*c11.y;\n    var c12x2 = c12.x*c12.x;\n    var c12x3 = c12.x*c12.x*c12.x;\n    var c12y2 = c12.y*c12.y;\n    var c12y3 = c12.y*c12.y*c12.y;\n    var c13x2 = c13.x*c13.x;\n    var c13x3 = c13.x*c13.x*c13.x;\n    var c13y2 = c13.y*c13.y;\n    var c13y3 = c13.y*c13.y*c13.y;\n    var c20x2 = c20.x*c20.x;\n    var c20x3 = c20.x*c20.x*c20.x;\n    var c20y2 = c20.y*c20.y;\n    var c20y3 = c20.y*c20.y*c20.y;\n    var c21x2 = c21.x*c21.x;\n    var c21x3 = c21.x*c21.x*c21.x;\n    var c21y2 = c21.y*c21.y;\n    var c22x2 = c22.x*c22.x;\n    var c22x3 = c22.x*c22.x*c22.x;\n    var c22y2 = c22.y*c22.y;\n    var c23x2 = c23.x*c23.x;\n    var c23x3 = c23.x*c23.x*c23.x;\n    var c23y2 = c23.y*c23.y;\n    var c23y3 = c23.y*c23.y*c23.y;\n    var poly = new Polynomial(\n        -c13x3*c23y3 + c13y3*c23x3 - 3*c13.x*c13y2*c23x2*c23.y +\n            3*c13x2*c13.y*c23.x*c23y2,\n        -6*c13.x*c22.x*c13y2*c23.x*c23.y + 6*c13x2*c13.y*c22.y*c23.x*c23.y + 3*c22.x*c13y3*c23x2 -\n            3*c13x3*c22.y*c23y2 - 3*c13.x*c13y2*c22.y*c23x2 + 3*c13x2*c22.x*c13.y*c23y2,\n        -6*c21.x*c13.x*c13y2*c23.x*c23.y - 6*c13.x*c22.x*c13y2*c22.y*c23.x + 6*c13x2*c22.x*c13.y*c22.y*c23.y +\n            3*c21.x*c13y3*c23x2 + 3*c22x2*c13y3*c23.x + 3*c21.x*c13x2*c13.y*c23y2 - 3*c13.x*c21.y*c13y2*c23x2 -\n            3*c13.x*c22x2*c13y2*c23.y + c13x2*c13.y*c23.x*(6*c21.y*c23.y + 3*c22y2) + c13x3*(-c21.y*c23y2 -\n            2*c22y2*c23.y - c23.y*(2*c21.y*c23.y + c22y2)),\n        c11.x*c12.y*c13.x*c13.y*c23.x*c23.y - c11.y*c12.x*c13.x*c13.y*c23.x*c23.y + 6*c21.x*c22.x*c13y3*c23.x +\n            3*c11.x*c12.x*c13.x*c13.y*c23y2 + 6*c10.x*c13.x*c13y2*c23.x*c23.y - 3*c11.x*c12.x*c13y2*c23.x*c23.y -\n            3*c11.y*c12.y*c13.x*c13.y*c23x2 - 6*c10.y*c13x2*c13.y*c23.x*c23.y - 6*c20.x*c13.x*c13y2*c23.x*c23.y +\n            3*c11.y*c12.y*c13x2*c23.x*c23.y - 2*c12.x*c12y2*c13.x*c23.x*c23.y - 6*c21.x*c13.x*c22.x*c13y2*c23.y -\n            6*c21.x*c13.x*c13y2*c22.y*c23.x - 6*c13.x*c21.y*c22.x*c13y2*c23.x + 6*c21.x*c13x2*c13.y*c22.y*c23.y +\n            2*c12x2*c12.y*c13.y*c23.x*c23.y + c22x3*c13y3 - 3*c10.x*c13y3*c23x2 + 3*c10.y*c13x3*c23y2 +\n            3*c20.x*c13y3*c23x2 + c12y3*c13.x*c23x2 - c12x3*c13.y*c23y2 - 3*c10.x*c13x2*c13.y*c23y2 +\n            3*c10.y*c13.x*c13y2*c23x2 - 2*c11.x*c12.y*c13x2*c23y2 + c11.x*c12.y*c13y2*c23x2 - c11.y*c12.x*c13x2*c23y2 +\n            2*c11.y*c12.x*c13y2*c23x2 + 3*c20.x*c13x2*c13.y*c23y2 - c12.x*c12y2*c13.y*c23x2 -\n            3*c20.y*c13.x*c13y2*c23x2 + c12x2*c12.y*c13.x*c23y2 - 3*c13.x*c22x2*c13y2*c22.y +\n            c13x2*c13.y*c23.x*(6*c20.y*c23.y + 6*c21.y*c22.y) + c13x2*c22.x*c13.y*(6*c21.y*c23.y + 3*c22y2) +\n            c13x3*(-2*c21.y*c22.y*c23.y - c20.y*c23y2 - c22.y*(2*c21.y*c23.y + c22y2) - c23.y*(2*c20.y*c23.y + 2*c21.y*c22.y)),\n        6*c11.x*c12.x*c13.x*c13.y*c22.y*c23.y + c11.x*c12.y*c13.x*c22.x*c13.y*c23.y + c11.x*c12.y*c13.x*c13.y*c22.y*c23.x -\n            c11.y*c12.x*c13.x*c22.x*c13.y*c23.y - c11.y*c12.x*c13.x*c13.y*c22.y*c23.x - 6*c11.y*c12.y*c13.x*c22.x*c13.y*c23.x -\n            6*c10.x*c22.x*c13y3*c23.x + 6*c20.x*c22.x*c13y3*c23.x + 6*c10.y*c13x3*c22.y*c23.y + 2*c12y3*c13.x*c22.x*c23.x -\n            2*c12x3*c13.y*c22.y*c23.y + 6*c10.x*c13.x*c22.x*c13y2*c23.y + 6*c10.x*c13.x*c13y2*c22.y*c23.x +\n            6*c10.y*c13.x*c22.x*c13y2*c23.x - 3*c11.x*c12.x*c22.x*c13y2*c23.y - 3*c11.x*c12.x*c13y2*c22.y*c23.x +\n            2*c11.x*c12.y*c22.x*c13y2*c23.x + 4*c11.y*c12.x*c22.x*c13y2*c23.x - 6*c10.x*c13x2*c13.y*c22.y*c23.y -\n            6*c10.y*c13x2*c22.x*c13.y*c23.y - 6*c10.y*c13x2*c13.y*c22.y*c23.x - 4*c11.x*c12.y*c13x2*c22.y*c23.y -\n            6*c20.x*c13.x*c22.x*c13y2*c23.y - 6*c20.x*c13.x*c13y2*c22.y*c23.x - 2*c11.y*c12.x*c13x2*c22.y*c23.y +\n            3*c11.y*c12.y*c13x2*c22.x*c23.y + 3*c11.y*c12.y*c13x2*c22.y*c23.x - 2*c12.x*c12y2*c13.x*c22.x*c23.y -\n            2*c12.x*c12y2*c13.x*c22.y*c23.x - 2*c12.x*c12y2*c22.x*c13.y*c23.x - 6*c20.y*c13.x*c22.x*c13y2*c23.x -\n            6*c21.x*c13.x*c21.y*c13y2*c23.x - 6*c21.x*c13.x*c22.x*c13y2*c22.y + 6*c20.x*c13x2*c13.y*c22.y*c23.y +\n            2*c12x2*c12.y*c13.x*c22.y*c23.y + 2*c12x2*c12.y*c22.x*c13.y*c23.y + 2*c12x2*c12.y*c13.y*c22.y*c23.x +\n            3*c21.x*c22x2*c13y3 + 3*c21x2*c13y3*c23.x - 3*c13.x*c21.y*c22x2*c13y2 - 3*c21x2*c13.x*c13y2*c23.y +\n            c13x2*c22.x*c13.y*(6*c20.y*c23.y + 6*c21.y*c22.y) + c13x2*c13.y*c23.x*(6*c20.y*c22.y + 3*c21y2) +\n            c21.x*c13x2*c13.y*(6*c21.y*c23.y + 3*c22y2) + c13x3*(-2*c20.y*c22.y*c23.y - c23.y*(2*c20.y*c22.y + c21y2) -\n            c21.y*(2*c21.y*c23.y + c22y2) - c22.y*(2*c20.y*c23.y + 2*c21.y*c22.y)),\n        c11.x*c21.x*c12.y*c13.x*c13.y*c23.y + c11.x*c12.y*c13.x*c21.y*c13.y*c23.x + c11.x*c12.y*c13.x*c22.x*c13.y*c22.y -\n            c11.y*c12.x*c21.x*c13.x*c13.y*c23.y - c11.y*c12.x*c13.x*c21.y*c13.y*c23.x - c11.y*c12.x*c13.x*c22.x*c13.y*c22.y -\n            6*c11.y*c21.x*c12.y*c13.x*c13.y*c23.x - 6*c10.x*c21.x*c13y3*c23.x + 6*c20.x*c21.x*c13y3*c23.x +\n            2*c21.x*c12y3*c13.x*c23.x + 6*c10.x*c21.x*c13.x*c13y2*c23.y + 6*c10.x*c13.x*c21.y*c13y2*c23.x +\n            6*c10.x*c13.x*c22.x*c13y2*c22.y + 6*c10.y*c21.x*c13.x*c13y2*c23.x - 3*c11.x*c12.x*c21.x*c13y2*c23.y -\n            3*c11.x*c12.x*c21.y*c13y2*c23.x - 3*c11.x*c12.x*c22.x*c13y2*c22.y + 2*c11.x*c21.x*c12.y*c13y2*c23.x +\n            4*c11.y*c12.x*c21.x*c13y2*c23.x - 6*c10.y*c21.x*c13x2*c13.y*c23.y - 6*c10.y*c13x2*c21.y*c13.y*c23.x -\n            6*c10.y*c13x2*c22.x*c13.y*c22.y - 6*c20.x*c21.x*c13.x*c13y2*c23.y - 6*c20.x*c13.x*c21.y*c13y2*c23.x -\n            6*c20.x*c13.x*c22.x*c13y2*c22.y + 3*c11.y*c21.x*c12.y*c13x2*c23.y - 3*c11.y*c12.y*c13.x*c22x2*c13.y +\n            3*c11.y*c12.y*c13x2*c21.y*c23.x + 3*c11.y*c12.y*c13x2*c22.x*c22.y - 2*c12.x*c21.x*c12y2*c13.x*c23.y -\n            2*c12.x*c21.x*c12y2*c13.y*c23.x - 2*c12.x*c12y2*c13.x*c21.y*c23.x - 2*c12.x*c12y2*c13.x*c22.x*c22.y -\n            6*c20.y*c21.x*c13.x*c13y2*c23.x - 6*c21.x*c13.x*c21.y*c22.x*c13y2 + 6*c20.y*c13x2*c21.y*c13.y*c23.x +\n            2*c12x2*c21.x*c12.y*c13.y*c23.y + 2*c12x2*c12.y*c21.y*c13.y*c23.x + 2*c12x2*c12.y*c22.x*c13.y*c22.y -\n            3*c10.x*c22x2*c13y3 + 3*c20.x*c22x2*c13y3 + 3*c21x2*c22.x*c13y3 + c12y3*c13.x*c22x2 +\n            3*c10.y*c13.x*c22x2*c13y2 + c11.x*c12.y*c22x2*c13y2 + 2*c11.y*c12.x*c22x2*c13y2 -\n            c12.x*c12y2*c22x2*c13.y - 3*c20.y*c13.x*c22x2*c13y2 - 3*c21x2*c13.x*c13y2*c22.y +\n            c12x2*c12.y*c13.x*(2*c21.y*c23.y + c22y2) + c11.x*c12.x*c13.x*c13.y*(6*c21.y*c23.y + 3*c22y2) +\n            c21.x*c13x2*c13.y*(6*c20.y*c23.y + 6*c21.y*c22.y) + c12x3*c13.y*(-2*c21.y*c23.y - c22y2) +\n            c10.y*c13x3*(6*c21.y*c23.y + 3*c22y2) + c11.y*c12.x*c13x2*(-2*c21.y*c23.y - c22y2) +\n            c11.x*c12.y*c13x2*(-4*c21.y*c23.y - 2*c22y2) + c10.x*c13x2*c13.y*(-6*c21.y*c23.y - 3*c22y2) +\n            c13x2*c22.x*c13.y*(6*c20.y*c22.y + 3*c21y2) + c20.x*c13x2*c13.y*(6*c21.y*c23.y + 3*c22y2) +\n            c13x3*(-2*c20.y*c21.y*c23.y - c22.y*(2*c20.y*c22.y + c21y2) - c20.y*(2*c21.y*c23.y + c22y2) -\n            c21.y*(2*c20.y*c23.y + 2*c21.y*c22.y)),\n        -c10.x*c11.x*c12.y*c13.x*c13.y*c23.y + c10.x*c11.y*c12.x*c13.x*c13.y*c23.y + 6*c10.x*c11.y*c12.y*c13.x*c13.y*c23.x -\n            6*c10.y*c11.x*c12.x*c13.x*c13.y*c23.y - c10.y*c11.x*c12.y*c13.x*c13.y*c23.x + c10.y*c11.y*c12.x*c13.x*c13.y*c23.x +\n            c11.x*c11.y*c12.x*c12.y*c13.x*c23.y - c11.x*c11.y*c12.x*c12.y*c13.y*c23.x + c11.x*c20.x*c12.y*c13.x*c13.y*c23.y +\n            c11.x*c20.y*c12.y*c13.x*c13.y*c23.x + c11.x*c21.x*c12.y*c13.x*c13.y*c22.y + c11.x*c12.y*c13.x*c21.y*c22.x*c13.y -\n            c20.x*c11.y*c12.x*c13.x*c13.y*c23.y - 6*c20.x*c11.y*c12.y*c13.x*c13.y*c23.x - c11.y*c12.x*c20.y*c13.x*c13.y*c23.x -\n            c11.y*c12.x*c21.x*c13.x*c13.y*c22.y - c11.y*c12.x*c13.x*c21.y*c22.x*c13.y - 6*c11.y*c21.x*c12.y*c13.x*c22.x*c13.y -\n            6*c10.x*c20.x*c13y3*c23.x - 6*c10.x*c21.x*c22.x*c13y3 - 2*c10.x*c12y3*c13.x*c23.x + 6*c20.x*c21.x*c22.x*c13y3 +\n            2*c20.x*c12y3*c13.x*c23.x + 2*c21.x*c12y3*c13.x*c22.x + 2*c10.y*c12x3*c13.y*c23.y - 6*c10.x*c10.y*c13.x*c13y2*c23.x +\n            3*c10.x*c11.x*c12.x*c13y2*c23.y - 2*c10.x*c11.x*c12.y*c13y2*c23.x - 4*c10.x*c11.y*c12.x*c13y2*c23.x +\n            3*c10.y*c11.x*c12.x*c13y2*c23.x + 6*c10.x*c10.y*c13x2*c13.y*c23.y + 6*c10.x*c20.x*c13.x*c13y2*c23.y -\n            3*c10.x*c11.y*c12.y*c13x2*c23.y + 2*c10.x*c12.x*c12y2*c13.x*c23.y + 2*c10.x*c12.x*c12y2*c13.y*c23.x +\n            6*c10.x*c20.y*c13.x*c13y2*c23.x + 6*c10.x*c21.x*c13.x*c13y2*c22.y + 6*c10.x*c13.x*c21.y*c22.x*c13y2 +\n            4*c10.y*c11.x*c12.y*c13x2*c23.y + 6*c10.y*c20.x*c13.x*c13y2*c23.x + 2*c10.y*c11.y*c12.x*c13x2*c23.y -\n            3*c10.y*c11.y*c12.y*c13x2*c23.x + 2*c10.y*c12.x*c12y2*c13.x*c23.x + 6*c10.y*c21.x*c13.x*c22.x*c13y2 -\n            3*c11.x*c20.x*c12.x*c13y2*c23.y + 2*c11.x*c20.x*c12.y*c13y2*c23.x + c11.x*c11.y*c12y2*c13.x*c23.x -\n            3*c11.x*c12.x*c20.y*c13y2*c23.x - 3*c11.x*c12.x*c21.x*c13y2*c22.y - 3*c11.x*c12.x*c21.y*c22.x*c13y2 +\n            2*c11.x*c21.x*c12.y*c22.x*c13y2 + 4*c20.x*c11.y*c12.x*c13y2*c23.x + 4*c11.y*c12.x*c21.x*c22.x*c13y2 -\n            2*c10.x*c12x2*c12.y*c13.y*c23.y - 6*c10.y*c20.x*c13x2*c13.y*c23.y - 6*c10.y*c20.y*c13x2*c13.y*c23.x -\n            6*c10.y*c21.x*c13x2*c13.y*c22.y - 2*c10.y*c12x2*c12.y*c13.x*c23.y - 2*c10.y*c12x2*c12.y*c13.y*c23.x -\n            6*c10.y*c13x2*c21.y*c22.x*c13.y - c11.x*c11.y*c12x2*c13.y*c23.y - 2*c11.x*c11y2*c13.x*c13.y*c23.x +\n            3*c20.x*c11.y*c12.y*c13x2*c23.y - 2*c20.x*c12.x*c12y2*c13.x*c23.y - 2*c20.x*c12.x*c12y2*c13.y*c23.x -\n            6*c20.x*c20.y*c13.x*c13y2*c23.x - 6*c20.x*c21.x*c13.x*c13y2*c22.y - 6*c20.x*c13.x*c21.y*c22.x*c13y2 +\n            3*c11.y*c20.y*c12.y*c13x2*c23.x + 3*c11.y*c21.x*c12.y*c13x2*c22.y + 3*c11.y*c12.y*c13x2*c21.y*c22.x -\n            2*c12.x*c20.y*c12y2*c13.x*c23.x - 2*c12.x*c21.x*c12y2*c13.x*c22.y - 2*c12.x*c21.x*c12y2*c22.x*c13.y -\n            2*c12.x*c12y2*c13.x*c21.y*c22.x - 6*c20.y*c21.x*c13.x*c22.x*c13y2 - c11y2*c12.x*c12.y*c13.x*c23.x +\n            2*c20.x*c12x2*c12.y*c13.y*c23.y + 6*c20.y*c13x2*c21.y*c22.x*c13.y + 2*c11x2*c11.y*c13.x*c13.y*c23.y +\n            c11x2*c12.x*c12.y*c13.y*c23.y + 2*c12x2*c20.y*c12.y*c13.y*c23.x + 2*c12x2*c21.x*c12.y*c13.y*c22.y +\n            2*c12x2*c12.y*c21.y*c22.x*c13.y + c21x3*c13y3 + 3*c10x2*c13y3*c23.x - 3*c10y2*c13x3*c23.y +\n            3*c20x2*c13y3*c23.x + c11y3*c13x2*c23.x - c11x3*c13y2*c23.y - c11.x*c11y2*c13x2*c23.y +\n            c11x2*c11.y*c13y2*c23.x - 3*c10x2*c13.x*c13y2*c23.y + 3*c10y2*c13x2*c13.y*c23.x - c11x2*c12y2*c13.x*c23.y +\n            c11y2*c12x2*c13.y*c23.x - 3*c21x2*c13.x*c21.y*c13y2 - 3*c20x2*c13.x*c13y2*c23.y + 3*c20y2*c13x2*c13.y*c23.x +\n            c11.x*c12.x*c13.x*c13.y*(6*c20.y*c23.y + 6*c21.y*c22.y) + c12x3*c13.y*(-2*c20.y*c23.y - 2*c21.y*c22.y) +\n            c10.y*c13x3*(6*c20.y*c23.y + 6*c21.y*c22.y) + c11.y*c12.x*c13x2*(-2*c20.y*c23.y - 2*c21.y*c22.y) +\n            c12x2*c12.y*c13.x*(2*c20.y*c23.y + 2*c21.y*c22.y) + c11.x*c12.y*c13x2*(-4*c20.y*c23.y - 4*c21.y*c22.y) +\n            c10.x*c13x2*c13.y*(-6*c20.y*c23.y - 6*c21.y*c22.y) + c20.x*c13x2*c13.y*(6*c20.y*c23.y + 6*c21.y*c22.y) +\n            c21.x*c13x2*c13.y*(6*c20.y*c22.y + 3*c21y2) + c13x3*(-2*c20.y*c21.y*c22.y - c20y2*c23.y -\n            c21.y*(2*c20.y*c22.y + c21y2) - c20.y*(2*c20.y*c23.y + 2*c21.y*c22.y)),\n        -c10.x*c11.x*c12.y*c13.x*c13.y*c22.y + c10.x*c11.y*c12.x*c13.x*c13.y*c22.y + 6*c10.x*c11.y*c12.y*c13.x*c22.x*c13.y -\n            6*c10.y*c11.x*c12.x*c13.x*c13.y*c22.y - c10.y*c11.x*c12.y*c13.x*c22.x*c13.y + c10.y*c11.y*c12.x*c13.x*c22.x*c13.y +\n            c11.x*c11.y*c12.x*c12.y*c13.x*c22.y - c11.x*c11.y*c12.x*c12.y*c22.x*c13.y + c11.x*c20.x*c12.y*c13.x*c13.y*c22.y +\n            c11.x*c20.y*c12.y*c13.x*c22.x*c13.y + c11.x*c21.x*c12.y*c13.x*c21.y*c13.y - c20.x*c11.y*c12.x*c13.x*c13.y*c22.y -\n            6*c20.x*c11.y*c12.y*c13.x*c22.x*c13.y - c11.y*c12.x*c20.y*c13.x*c22.x*c13.y - c11.y*c12.x*c21.x*c13.x*c21.y*c13.y -\n            6*c10.x*c20.x*c22.x*c13y3 - 2*c10.x*c12y3*c13.x*c22.x + 2*c20.x*c12y3*c13.x*c22.x + 2*c10.y*c12x3*c13.y*c22.y -\n            6*c10.x*c10.y*c13.x*c22.x*c13y2 + 3*c10.x*c11.x*c12.x*c13y2*c22.y - 2*c10.x*c11.x*c12.y*c22.x*c13y2 -\n            4*c10.x*c11.y*c12.x*c22.x*c13y2 + 3*c10.y*c11.x*c12.x*c22.x*c13y2 + 6*c10.x*c10.y*c13x2*c13.y*c22.y +\n            6*c10.x*c20.x*c13.x*c13y2*c22.y - 3*c10.x*c11.y*c12.y*c13x2*c22.y + 2*c10.x*c12.x*c12y2*c13.x*c22.y +\n            2*c10.x*c12.x*c12y2*c22.x*c13.y + 6*c10.x*c20.y*c13.x*c22.x*c13y2 + 6*c10.x*c21.x*c13.x*c21.y*c13y2 +\n            4*c10.y*c11.x*c12.y*c13x2*c22.y + 6*c10.y*c20.x*c13.x*c22.x*c13y2 + 2*c10.y*c11.y*c12.x*c13x2*c22.y -\n            3*c10.y*c11.y*c12.y*c13x2*c22.x + 2*c10.y*c12.x*c12y2*c13.x*c22.x - 3*c11.x*c20.x*c12.x*c13y2*c22.y +\n            2*c11.x*c20.x*c12.y*c22.x*c13y2 + c11.x*c11.y*c12y2*c13.x*c22.x - 3*c11.x*c12.x*c20.y*c22.x*c13y2 -\n            3*c11.x*c12.x*c21.x*c21.y*c13y2 + 4*c20.x*c11.y*c12.x*c22.x*c13y2 - 2*c10.x*c12x2*c12.y*c13.y*c22.y -\n            6*c10.y*c20.x*c13x2*c13.y*c22.y - 6*c10.y*c20.y*c13x2*c22.x*c13.y - 6*c10.y*c21.x*c13x2*c21.y*c13.y -\n            2*c10.y*c12x2*c12.y*c13.x*c22.y - 2*c10.y*c12x2*c12.y*c22.x*c13.y - c11.x*c11.y*c12x2*c13.y*c22.y -\n            2*c11.x*c11y2*c13.x*c22.x*c13.y + 3*c20.x*c11.y*c12.y*c13x2*c22.y - 2*c20.x*c12.x*c12y2*c13.x*c22.y -\n            2*c20.x*c12.x*c12y2*c22.x*c13.y - 6*c20.x*c20.y*c13.x*c22.x*c13y2 - 6*c20.x*c21.x*c13.x*c21.y*c13y2 +\n            3*c11.y*c20.y*c12.y*c13x2*c22.x + 3*c11.y*c21.x*c12.y*c13x2*c21.y - 2*c12.x*c20.y*c12y2*c13.x*c22.x -\n            2*c12.x*c21.x*c12y2*c13.x*c21.y - c11y2*c12.x*c12.y*c13.x*c22.x + 2*c20.x*c12x2*c12.y*c13.y*c22.y -\n            3*c11.y*c21x2*c12.y*c13.x*c13.y + 6*c20.y*c21.x*c13x2*c21.y*c13.y + 2*c11x2*c11.y*c13.x*c13.y*c22.y +\n            c11x2*c12.x*c12.y*c13.y*c22.y + 2*c12x2*c20.y*c12.y*c22.x*c13.y + 2*c12x2*c21.x*c12.y*c21.y*c13.y -\n            3*c10.x*c21x2*c13y3 + 3*c20.x*c21x2*c13y3 + 3*c10x2*c22.x*c13y3 - 3*c10y2*c13x3*c22.y + 3*c20x2*c22.x*c13y3 +\n            c21x2*c12y3*c13.x + c11y3*c13x2*c22.x - c11x3*c13y2*c22.y + 3*c10.y*c21x2*c13.x*c13y2 -\n            c11.x*c11y2*c13x2*c22.y + c11.x*c21x2*c12.y*c13y2 + 2*c11.y*c12.x*c21x2*c13y2 + c11x2*c11.y*c22.x*c13y2 -\n            c12.x*c21x2*c12y2*c13.y - 3*c20.y*c21x2*c13.x*c13y2 - 3*c10x2*c13.x*c13y2*c22.y + 3*c10y2*c13x2*c22.x*c13.y -\n            c11x2*c12y2*c13.x*c22.y + c11y2*c12x2*c22.x*c13.y - 3*c20x2*c13.x*c13y2*c22.y + 3*c20y2*c13x2*c22.x*c13.y +\n            c12x2*c12.y*c13.x*(2*c20.y*c22.y + c21y2) + c11.x*c12.x*c13.x*c13.y*(6*c20.y*c22.y + 3*c21y2) +\n            c12x3*c13.y*(-2*c20.y*c22.y - c21y2) + c10.y*c13x3*(6*c20.y*c22.y + 3*c21y2) +\n            c11.y*c12.x*c13x2*(-2*c20.y*c22.y - c21y2) + c11.x*c12.y*c13x2*(-4*c20.y*c22.y - 2*c21y2) +\n            c10.x*c13x2*c13.y*(-6*c20.y*c22.y - 3*c21y2) + c20.x*c13x2*c13.y*(6*c20.y*c22.y + 3*c21y2) +\n            c13x3*(-2*c20.y*c21y2 - c20y2*c22.y - c20.y*(2*c20.y*c22.y + c21y2)),\n        -c10.x*c11.x*c12.y*c13.x*c21.y*c13.y + c10.x*c11.y*c12.x*c13.x*c21.y*c13.y + 6*c10.x*c11.y*c21.x*c12.y*c13.x*c13.y -\n            6*c10.y*c11.x*c12.x*c13.x*c21.y*c13.y - c10.y*c11.x*c21.x*c12.y*c13.x*c13.y + c10.y*c11.y*c12.x*c21.x*c13.x*c13.y -\n            c11.x*c11.y*c12.x*c21.x*c12.y*c13.y + c11.x*c11.y*c12.x*c12.y*c13.x*c21.y + c11.x*c20.x*c12.y*c13.x*c21.y*c13.y +\n            6*c11.x*c12.x*c20.y*c13.x*c21.y*c13.y + c11.x*c20.y*c21.x*c12.y*c13.x*c13.y - c20.x*c11.y*c12.x*c13.x*c21.y*c13.y -\n            6*c20.x*c11.y*c21.x*c12.y*c13.x*c13.y - c11.y*c12.x*c20.y*c21.x*c13.x*c13.y - 6*c10.x*c20.x*c21.x*c13y3 -\n            2*c10.x*c21.x*c12y3*c13.x + 6*c10.y*c20.y*c13x3*c21.y + 2*c20.x*c21.x*c12y3*c13.x + 2*c10.y*c12x3*c21.y*c13.y -\n            2*c12x3*c20.y*c21.y*c13.y - 6*c10.x*c10.y*c21.x*c13.x*c13y2 + 3*c10.x*c11.x*c12.x*c21.y*c13y2 -\n            2*c10.x*c11.x*c21.x*c12.y*c13y2 - 4*c10.x*c11.y*c12.x*c21.x*c13y2 + 3*c10.y*c11.x*c12.x*c21.x*c13y2 +\n            6*c10.x*c10.y*c13x2*c21.y*c13.y + 6*c10.x*c20.x*c13.x*c21.y*c13y2 - 3*c10.x*c11.y*c12.y*c13x2*c21.y +\n            2*c10.x*c12.x*c21.x*c12y2*c13.y + 2*c10.x*c12.x*c12y2*c13.x*c21.y + 6*c10.x*c20.y*c21.x*c13.x*c13y2 +\n            4*c10.y*c11.x*c12.y*c13x2*c21.y + 6*c10.y*c20.x*c21.x*c13.x*c13y2 + 2*c10.y*c11.y*c12.x*c13x2*c21.y -\n            3*c10.y*c11.y*c21.x*c12.y*c13x2 + 2*c10.y*c12.x*c21.x*c12y2*c13.x - 3*c11.x*c20.x*c12.x*c21.y*c13y2 +\n            2*c11.x*c20.x*c21.x*c12.y*c13y2 + c11.x*c11.y*c21.x*c12y2*c13.x - 3*c11.x*c12.x*c20.y*c21.x*c13y2 +\n            4*c20.x*c11.y*c12.x*c21.x*c13y2 - 6*c10.x*c20.y*c13x2*c21.y*c13.y - 2*c10.x*c12x2*c12.y*c21.y*c13.y -\n            6*c10.y*c20.x*c13x2*c21.y*c13.y - 6*c10.y*c20.y*c21.x*c13x2*c13.y - 2*c10.y*c12x2*c21.x*c12.y*c13.y -\n            2*c10.y*c12x2*c12.y*c13.x*c21.y - c11.x*c11.y*c12x2*c21.y*c13.y - 4*c11.x*c20.y*c12.y*c13x2*c21.y -\n            2*c11.x*c11y2*c21.x*c13.x*c13.y + 3*c20.x*c11.y*c12.y*c13x2*c21.y - 2*c20.x*c12.x*c21.x*c12y2*c13.y -\n            2*c20.x*c12.x*c12y2*c13.x*c21.y - 6*c20.x*c20.y*c21.x*c13.x*c13y2 - 2*c11.y*c12.x*c20.y*c13x2*c21.y +\n            3*c11.y*c20.y*c21.x*c12.y*c13x2 - 2*c12.x*c20.y*c21.x*c12y2*c13.x - c11y2*c12.x*c21.x*c12.y*c13.x +\n            6*c20.x*c20.y*c13x2*c21.y*c13.y + 2*c20.x*c12x2*c12.y*c21.y*c13.y + 2*c11x2*c11.y*c13.x*c21.y*c13.y +\n            c11x2*c12.x*c12.y*c21.y*c13.y + 2*c12x2*c20.y*c21.x*c12.y*c13.y + 2*c12x2*c20.y*c12.y*c13.x*c21.y +\n            3*c10x2*c21.x*c13y3 - 3*c10y2*c13x3*c21.y + 3*c20x2*c21.x*c13y3 + c11y3*c21.x*c13x2 - c11x3*c21.y*c13y2 -\n            3*c20y2*c13x3*c21.y - c11.x*c11y2*c13x2*c21.y + c11x2*c11.y*c21.x*c13y2 - 3*c10x2*c13.x*c21.y*c13y2 +\n            3*c10y2*c21.x*c13x2*c13.y - c11x2*c12y2*c13.x*c21.y + c11y2*c12x2*c21.x*c13.y - 3*c20x2*c13.x*c21.y*c13y2 +\n            3*c20y2*c21.x*c13x2*c13.y,\n        c10.x*c10.y*c11.x*c12.y*c13.x*c13.y - c10.x*c10.y*c11.y*c12.x*c13.x*c13.y + c10.x*c11.x*c11.y*c12.x*c12.y*c13.y -\n            c10.y*c11.x*c11.y*c12.x*c12.y*c13.x - c10.x*c11.x*c20.y*c12.y*c13.x*c13.y + 6*c10.x*c20.x*c11.y*c12.y*c13.x*c13.y +\n            c10.x*c11.y*c12.x*c20.y*c13.x*c13.y - c10.y*c11.x*c20.x*c12.y*c13.x*c13.y - 6*c10.y*c11.x*c12.x*c20.y*c13.x*c13.y +\n            c10.y*c20.x*c11.y*c12.x*c13.x*c13.y - c11.x*c20.x*c11.y*c12.x*c12.y*c13.y + c11.x*c11.y*c12.x*c20.y*c12.y*c13.x +\n            c11.x*c20.x*c20.y*c12.y*c13.x*c13.y - c20.x*c11.y*c12.x*c20.y*c13.x*c13.y - 2*c10.x*c20.x*c12y3*c13.x +\n            2*c10.y*c12x3*c20.y*c13.y - 3*c10.x*c10.y*c11.x*c12.x*c13y2 - 6*c10.x*c10.y*c20.x*c13.x*c13y2 +\n            3*c10.x*c10.y*c11.y*c12.y*c13x2 - 2*c10.x*c10.y*c12.x*c12y2*c13.x - 2*c10.x*c11.x*c20.x*c12.y*c13y2 -\n            c10.x*c11.x*c11.y*c12y2*c13.x + 3*c10.x*c11.x*c12.x*c20.y*c13y2 - 4*c10.x*c20.x*c11.y*c12.x*c13y2 +\n            3*c10.y*c11.x*c20.x*c12.x*c13y2 + 6*c10.x*c10.y*c20.y*c13x2*c13.y + 2*c10.x*c10.y*c12x2*c12.y*c13.y +\n            2*c10.x*c11.x*c11y2*c13.x*c13.y + 2*c10.x*c20.x*c12.x*c12y2*c13.y + 6*c10.x*c20.x*c20.y*c13.x*c13y2 -\n            3*c10.x*c11.y*c20.y*c12.y*c13x2 + 2*c10.x*c12.x*c20.y*c12y2*c13.x + c10.x*c11y2*c12.x*c12.y*c13.x +\n            c10.y*c11.x*c11.y*c12x2*c13.y + 4*c10.y*c11.x*c20.y*c12.y*c13x2 - 3*c10.y*c20.x*c11.y*c12.y*c13x2 +\n            2*c10.y*c20.x*c12.x*c12y2*c13.x + 2*c10.y*c11.y*c12.x*c20.y*c13x2 + c11.x*c20.x*c11.y*c12y2*c13.x -\n            3*c11.x*c20.x*c12.x*c20.y*c13y2 - 2*c10.x*c12x2*c20.y*c12.y*c13.y - 6*c10.y*c20.x*c20.y*c13x2*c13.y -\n            2*c10.y*c20.x*c12x2*c12.y*c13.y - 2*c10.y*c11x2*c11.y*c13.x*c13.y - c10.y*c11x2*c12.x*c12.y*c13.y -\n            2*c10.y*c12x2*c20.y*c12.y*c13.x - 2*c11.x*c20.x*c11y2*c13.x*c13.y - c11.x*c11.y*c12x2*c20.y*c13.y +\n            3*c20.x*c11.y*c20.y*c12.y*c13x2 - 2*c20.x*c12.x*c20.y*c12y2*c13.x - c20.x*c11y2*c12.x*c12.y*c13.x +\n            3*c10y2*c11.x*c12.x*c13.x*c13.y + 3*c11.x*c12.x*c20y2*c13.x*c13.y + 2*c20.x*c12x2*c20.y*c12.y*c13.y -\n            3*c10x2*c11.y*c12.y*c13.x*c13.y + 2*c11x2*c11.y*c20.y*c13.x*c13.y + c11x2*c12.x*c20.y*c12.y*c13.y -\n            3*c20x2*c11.y*c12.y*c13.x*c13.y - c10x3*c13y3 + c10y3*c13x3 + c20x3*c13y3 - c20y3*c13x3 -\n            3*c10.x*c20x2*c13y3 - c10.x*c11y3*c13x2 + 3*c10x2*c20.x*c13y3 + c10.y*c11x3*c13y2 +\n            3*c10.y*c20y2*c13x3 + c20.x*c11y3*c13x2 + c10x2*c12y3*c13.x - 3*c10y2*c20.y*c13x3 - c10y2*c12x3*c13.y +\n            c20x2*c12y3*c13.x - c11x3*c20.y*c13y2 - c12x3*c20y2*c13.y - c10.x*c11x2*c11.y*c13y2 +\n            c10.y*c11.x*c11y2*c13x2 - 3*c10.x*c10y2*c13x2*c13.y - c10.x*c11y2*c12x2*c13.y + c10.y*c11x2*c12y2*c13.x -\n            c11.x*c11y2*c20.y*c13x2 + 3*c10x2*c10.y*c13.x*c13y2 + c10x2*c11.x*c12.y*c13y2 +\n            2*c10x2*c11.y*c12.x*c13y2 - 2*c10y2*c11.x*c12.y*c13x2 - c10y2*c11.y*c12.x*c13x2 + c11x2*c20.x*c11.y*c13y2 -\n            3*c10.x*c20y2*c13x2*c13.y + 3*c10.y*c20x2*c13.x*c13y2 + c11.x*c20x2*c12.y*c13y2 - 2*c11.x*c20y2*c12.y*c13x2 +\n            c20.x*c11y2*c12x2*c13.y - c11.y*c12.x*c20y2*c13x2 - c10x2*c12.x*c12y2*c13.y - 3*c10x2*c20.y*c13.x*c13y2 +\n            3*c10y2*c20.x*c13x2*c13.y + c10y2*c12x2*c12.y*c13.x - c11x2*c20.y*c12y2*c13.x + 2*c20x2*c11.y*c12.x*c13y2 +\n            3*c20.x*c20y2*c13x2*c13.y - c20x2*c12.x*c12y2*c13.y - 3*c20x2*c20.y*c13.x*c13y2 + c12x2*c20y2*c12.y*c13.x\n    );\n    var roots = poly.getRootsInInterval(0,1);\n\n    for ( var i = 0; i < roots.length; i++ ) {\n        var s = roots[i];\n        var xRoots = new Polynomial(\n            c13.x,\n            c12.x,\n            c11.x,\n            c10.x - c20.x - s*c21.x - s*s*c22.x - s*s*s*c23.x\n        ).getRoots();\n        var yRoots = new Polynomial(\n            c13.y,\n            c12.y,\n            c11.y,\n            c10.y - c20.y - s*c21.y - s*s*c22.y - s*s*s*c23.y\n        ).getRoots();\n\n        if ( xRoots.length > 0 && yRoots.length > 0 ) {\n            var TOLERANCE = 1e-4;\n\n            checkRoots:\n            for ( var j = 0; j < xRoots.length; j++ ) {\n                var xRoot = xRoots[j];\n                \n                if ( 0 <= xRoot && xRoot <= 1 ) {\n                    for ( var k = 0; k < yRoots.length; k++ ) {\n                        if ( Math.abs( xRoot - yRoots[k] ) < TOLERANCE ) {\n                            result.points.push(\n                                c23.multiply(s*s*s).add(c22.multiply(s*s).add(c21.multiply(s).add(c20)))\n                            );\n                            break checkRoots;\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    if ( result.points.length > 0 ) result.status = \"Intersection\";\n\n    return result;\n};\n\n\n/*****\n*\n*   intersectBezier3Circle\n*\n*****/\nIntersection.intersectBezier3Circle = function(p1, p2, p3, p4, c, r) {\n    return Intersection.intersectBezier3Ellipse(p1, p2, p3, p4, c, r, r);\n};\n\n\n/*****\n*\n*   intersectBezier3Ellipse\n*\n*****/\nIntersection.intersectBezier3Ellipse = function(p1, p2, p3, p4, ec, rx, ry) {\n    var a, b, c, d;       // temporary variables\n    var c3, c2, c1, c0;   // coefficients of cubic\n    var result = new Intersection(\"No Intersection\");\n\n    // Calculate the coefficients of cubic polynomial\n    a = p1.multiply(-1);\n    b = p2.multiply(3);\n    c = p3.multiply(-3);\n    d = a.add(b.add(c.add(p4)));\n    c3 = new Vector2D(d.x, d.y);\n\n    a = p1.multiply(3);\n    b = p2.multiply(-6);\n    c = p3.multiply(3);\n    d = a.add(b.add(c));\n    c2 = new Vector2D(d.x, d.y);\n\n    a = p1.multiply(-3);\n    b = p2.multiply(3);\n    c = a.add(b);\n    c1 = new Vector2D(c.x, c.y);\n\n    c0 = new Vector2D(p1.x, p1.y);\n\n    var rxrx  = rx*rx;\n    var ryry  = ry*ry;\n    var poly = new Polynomial(\n        c3.x*c3.x*ryry + c3.y*c3.y*rxrx,\n        2*(c3.x*c2.x*ryry + c3.y*c2.y*rxrx),\n        2*(c3.x*c1.x*ryry + c3.y*c1.y*rxrx) + c2.x*c2.x*ryry + c2.y*c2.y*rxrx,\n        2*c3.x*ryry*(c0.x - ec.x) + 2*c3.y*rxrx*(c0.y - ec.y) +\n            2*(c2.x*c1.x*ryry + c2.y*c1.y*rxrx),\n        2*c2.x*ryry*(c0.x - ec.x) + 2*c2.y*rxrx*(c0.y - ec.y) +\n            c1.x*c1.x*ryry + c1.y*c1.y*rxrx,\n        2*c1.x*ryry*(c0.x - ec.x) + 2*c1.y*rxrx*(c0.y - ec.y),\n        c0.x*c0.x*ryry - 2*c0.y*ec.y*rxrx - 2*c0.x*ec.x*ryry +\n            c0.y*c0.y*rxrx + ec.x*ec.x*ryry + ec.y*ec.y*rxrx - rxrx*ryry\n    );\n    var roots = poly.getRootsInInterval(0,1);\n\n    for ( var i = 0; i < roots.length; i++ ) {\n        var t = roots[i];\n\n        result.points.push(\n            c3.multiply(t*t*t).add(c2.multiply(t*t).add(c1.multiply(t).add(c0)))\n        );\n    }\n\n    if ( result.points.length > 0 ) result.status = \"Intersection\";\n\n    return result;\n};\n\n\n/*****\n*\n*   intersectBezier3Line\n*\n*   Many thanks to Dan Sunday at SoftSurfer.com.  He gave me a very thorough\n*   sketch of the algorithm used here.  Without his help, I'm not sure when I\n*   would have figured out this intersection problem.\n*\n*****/\nIntersection.intersectBezier3Line = function(p1, p2, p3, p4, a1, a2) {\n    var a, b, c, d;       // temporary variables\n    var c3, c2, c1, c0;   // coefficients of cubic\n    var cl;               // c coefficient for normal form of line\n    var n;                // normal for normal form of line\n    var min = a1.min(a2); // used to determine if point is on line segment\n    var max = a1.max(a2); // used to determine if point is on line segment\n    var result = new Intersection(\"No Intersection\");\n    \n    // Start with Bezier using Bernstein polynomials for weighting functions:\n    //     (1-t^3)P1 + 3t(1-t)^2P2 + 3t^2(1-t)P3 + t^3P4\n    //\n    // Expand and collect terms to form linear combinations of original Bezier\n    // controls.  This ends up with a vector cubic in t:\n    //     (-P1+3P2-3P3+P4)t^3 + (3P1-6P2+3P3)t^2 + (-3P1+3P2)t + P1\n    //             /\\                  /\\                /\\       /\\\n    //             ||                  ||                ||       ||\n    //             c3                  c2                c1       c0\n    \n    // Calculate the coefficients\n    a = p1.multiply(-1);\n    b = p2.multiply(3);\n    c = p3.multiply(-3);\n    d = a.add(b.add(c.add(p4)));\n    c3 = new Vector2D(d.x, d.y);\n\n    a = p1.multiply(3);\n    b = p2.multiply(-6);\n    c = p3.multiply(3);\n    d = a.add(b.add(c));\n    c2 = new Vector2D(d.x, d.y);\n\n    a = p1.multiply(-3);\n    b = p2.multiply(3);\n    c = a.add(b);\n    c1 = new Vector2D(c.x, c.y);\n\n    c0 = new Vector2D(p1.x, p1.y);\n    \n    // Convert line to normal form: ax + by + c = 0\n    // Find normal to line: negative inverse of original line's slope\n    n = new Vector2D(a1.y - a2.y, a2.x - a1.x);\n    \n    // Determine new c coefficient\n    cl = a1.x*a2.y - a2.x*a1.y;\n\n    // ?Rotate each cubic coefficient using line for new coordinate system?\n    // Find roots of rotated cubic\n    roots = new Polynomial(\n        n.dot(c3),\n        n.dot(c2),\n        n.dot(c1),\n        n.dot(c0) + cl\n    ).getRoots();\n\n    // Any roots in closed interval [0,1] are intersections on Bezier, but\n    // might not be on the line segment.\n    // Find intersections and calculate point coordinates\n    for ( var i = 0; i < roots.length; i++ ) {\n        var t = roots[i];\n\n        if ( 0 <= t && t <= 1 ) {\n            // We're within the Bezier curve\n            // Find point on Bezier\n            var p5 = p1.lerp(p2, t);\n            var p6 = p2.lerp(p3, t);\n            var p7 = p3.lerp(p4, t);\n\n            var p8 = p5.lerp(p6, t);\n            var p9 = p6.lerp(p7, t);\n\n            var p10 = p8.lerp(p9, t);\n\n            // See if point is on line segment\n            // Had to make special cases for vertical and horizontal lines due\n            // to slight errors in calculation of p10\n            if ( a1.x == a2.x ) {\n                if ( min.y <= p10.y && p10.y <= max.y ) {\n                    result.status = \"Intersection\";\n                    result.appendPoint( p10 );\n                }\n            } else if ( a1.y == a2.y ) {\n                if ( min.x <= p10.x && p10.x <= max.x ) {\n                    result.status = \"Intersection\";\n                    result.appendPoint( p10 );\n                }\n            } else if ( p10.gte(min) && p10.lte(max) ) {\n                result.status = \"Intersection\";\n                result.appendPoint( p10 );\n            }\n        }\n    }\n\n    return result;\n};\n\n\n/*****\n*\n*   intersectBezier3Polygon\n*\n*****/\nIntersection.intersectBezier3Polygon = function(p1, p2, p3, p4, points) {\n    var result = new Intersection(\"No Intersection\");\n    var length = points.length;\n\n    for ( var i = 0; i < length; i++ ) {\n        var a1 = points[i];\n        var a2 = points[(i+1) % length];\n        var inter = Intersection.intersectBezier3Line(p1, p2, p3, p4, a1, a2);\n\n        result.appendPoints(inter.points);\n    }\n\n    if ( result.points.length > 0 ) result.status = \"Intersection\";\n\n    return result;\n};\n\n\n/*****\n*\n*   intersectBezier3Rectangle\n*\n*****/\nIntersection.intersectBezier3Rectangle = function(p1, p2, p3, p4, r1, r2) {\n    var min        = r1.min(r2);\n    var max        = r1.max(r2);\n    var topRight   = new Point2D( max.x, min.y );\n    var bottomLeft = new Point2D( min.x, max.y );\n    \n    var inter1 = Intersection.intersectBezier3Line(p1, p2, p3, p4, min, topRight);\n    var inter2 = Intersection.intersectBezier3Line(p1, p2, p3, p4, topRight, max);\n    var inter3 = Intersection.intersectBezier3Line(p1, p2, p3, p4, max, bottomLeft);\n    var inter4 = Intersection.intersectBezier3Line(p1, p2, p3, p4, bottomLeft, min);\n    \n    var result = new Intersection(\"No Intersection\");\n\n    result.appendPoints(inter1.points);\n    result.appendPoints(inter2.points);\n    result.appendPoints(inter3.points);\n    result.appendPoints(inter4.points);\n\n    if ( result.points.length > 0 ) result.status = \"Intersection\";\n\n    return result;\n};\n\n\n/*****\n*\n*   intersectCircleCircle\n*\n*****/\nIntersection.intersectCircleCircle = function(c1, r1, c2, r2) {\n    var result;\n    \n    // Determine minimum and maximum radii where circles can intersect\n    var r_max = r1 + r2;\n    var r_min = Math.abs(r1 - r2);\n    \n    // Determine actual distance between circle circles\n    var c_dist = c1.distanceFrom( c2 );\n\n    if ( c_dist > r_max ) {\n        result = new Intersection(\"Outside\");\n    } else if ( c_dist < r_min ) {\n        result = new Intersection(\"Inside\");\n    } else {\n        result = new Intersection(\"Intersection\");\n\n        var a = (r1*r1 - r2*r2 + c_dist*c_dist) / ( 2*c_dist );\n        var h = Math.sqrt(r1*r1 - a*a);\n        var p = c1.lerp(c2, a/c_dist);\n        var b = h / c_dist;\n\n        result.points.push(\n            new Point2D(\n                p.x - b * (c2.y - c1.y),\n                p.y + b * (c2.x - c1.x)\n            )\n        );\n        result.points.push(\n            new Point2D(\n                p.x + b * (c2.y - c1.y),\n                p.y - b * (c2.x - c1.x)\n            )\n        );\n    }\n\n    return result;\n};\n\n\n/*****\n*\n*   intersectCircleEllipse\n*\n*****/\nIntersection.intersectCircleEllipse = function(cc, r, ec, rx, ry) {\n    return Intersection.intersectEllipseEllipse(cc, r, r, ec, rx, ry);\n};\n\n\n/*****\n*\n*   intersectCircleLine\n*\n*****/\nIntersection.intersectCircleLine = function(c, r, a1, a2) {\n    var result;\n    var a  = (a2.x - a1.x) * (a2.x - a1.x) +\n             (a2.y - a1.y) * (a2.y - a1.y);\n    var b  = 2 * ( (a2.x - a1.x) * (a1.x - c.x) +\n                   (a2.y - a1.y) * (a1.y - c.y)   );\n    var cc = c.x*c.x + c.y*c.y + a1.x*a1.x + a1.y*a1.y -\n             2 * (c.x * a1.x + c.y * a1.y) - r*r;\n    var deter = b*b - 4*a*cc;\n\n    if ( deter < 0 ) {\n        result = new Intersection(\"Outside\");\n    } else if ( deter == 0 ) {\n        result = new Intersection(\"Tangent\");\n        // NOTE: should calculate this point\n    } else {\n        var e  = Math.sqrt(deter);\n        var u1 = ( -b + e ) / ( 2*a );\n        var u2 = ( -b - e ) / ( 2*a );\n\n        if ( (u1 < 0 || u1 > 1) && (u2 < 0 || u2 > 1) ) {\n            if ( (u1 < 0 && u2 < 0) || (u1 > 1 && u2 > 1) ) {\n                result = new Intersection(\"Outside\");\n            } else {\n                result = new Intersection(\"Inside\");\n            }\n        } else {\n            result = new Intersection(\"Intersection\");\n\n            if ( 0 <= u1 && u1 <= 1)\n                result.points.push( a1.lerp(a2, u1) );\n\n            if ( 0 <= u2 && u2 <= 1)\n                result.points.push( a1.lerp(a2, u2) );\n        }\n    }\n    \n    return result;\n};\n\n\n/*****\n*\n*   intersectCirclePolygon\n*\n*****/\nIntersection.intersectCirclePolygon = function(c, r, points) {\n    var result = new Intersection(\"No Intersection\");\n    var length = points.length;\n    var inter;\n\n    for ( var i = 0; i < length; i++ ) {\n        var a1 = points[i];\n        var a2 = points[(i+1) % length];\n\n        inter = Intersection.intersectCircleLine(c, r, a1, a2);\n        result.appendPoints(inter.points);\n    }\n\n    if ( result.points.length > 0 )\n        result.status = \"Intersection\";\n    else\n        result.status = inter.status;\n\n    return result;\n};\n\n\n/*****\n*\n*   intersectCircleRectangle\n*\n*****/\nIntersection.intersectCircleRectangle = function(c, r, r1, r2) {\n    var min        = r1.min(r2);\n    var max        = r1.max(r2);\n    var topRight   = new Point2D( max.x, min.y );\n    var bottomLeft = new Point2D( min.x, max.y );\n    \n    var inter1 = Intersection.intersectCircleLine(c, r, min, topRight);\n    var inter2 = Intersection.intersectCircleLine(c, r, topRight, max);\n    var inter3 = Intersection.intersectCircleLine(c, r, max, bottomLeft);\n    var inter4 = Intersection.intersectCircleLine(c, r, bottomLeft, min);\n    \n    var result = new Intersection(\"No Intersection\");\n\n    result.appendPoints(inter1.points);\n    result.appendPoints(inter2.points);\n    result.appendPoints(inter3.points);\n    result.appendPoints(inter4.points);\n\n    if ( result.points.length > 0 )\n        result.status = \"Intersection\";\n    else\n        result.status = inter1.status;\n\n    return result;\n};\n\n\n/*****\n*\n*   intersectEllipseEllipse\n*   \n*   This code is based on MgcIntr2DElpElp.cpp written by David Eberly.  His\n*   code along with many other excellent examples are avaiable at his site:\n*   http://www.magic-software.com\n*\n*   NOTE: Rotation will need to be added to this function\n*\n*****/\nIntersection.intersectEllipseEllipse = function(c1, rx1, ry1, c2, rx2, ry2) {\n    var a = [\n        ry1*ry1, 0, rx1*rx1, -2*ry1*ry1*c1.x, -2*rx1*rx1*c1.y,\n        ry1*ry1*c1.x*c1.x + rx1*rx1*c1.y*c1.y - rx1*rx1*ry1*ry1\n    ];\n    var b = [\n        ry2*ry2, 0, rx2*rx2, -2*ry2*ry2*c2.x, -2*rx2*rx2*c2.y,\n        ry2*ry2*c2.x*c2.x + rx2*rx2*c2.y*c2.y - rx2*rx2*ry2*ry2\n    ];\n\n    var yPoly   = Intersection.bezout(a, b);\n    var yRoots  = yPoly.getRoots();\n    var epsilon = 1e-3;\n    var norm0   = ( a[0]*a[0] + 2*a[1]*a[1] + a[2]*a[2] ) * epsilon;\n    var norm1   = ( b[0]*b[0] + 2*b[1]*b[1] + b[2]*b[2] ) * epsilon;\n    var result  = new Intersection(\"No Intersection\");\n\n    for ( var y = 0; y < yRoots.length; y++ ) {\n        var xPoly = new Polynomial(\n            a[0],\n            a[3] + yRoots[y] * a[1],\n            a[5] + yRoots[y] * (a[4] + yRoots[y]*a[2])\n        );\n        var xRoots = xPoly.getRoots();\n\n        for ( var x = 0; x < xRoots.length; x++ ) {\n            var test =\n                ( a[0]*xRoots[x] + a[1]*yRoots[y] + a[3] ) * xRoots[x] + \n                ( a[2]*yRoots[y] + a[4] ) * yRoots[y] + a[5];\n            if ( Math.abs(test) < norm0 ) {\n                test =\n                    ( b[0]*xRoots[x] + b[1]*yRoots[y] + b[3] ) * xRoots[x] +\n                    ( b[2]*yRoots[y] + b[4] ) * yRoots[y] + b[5];\n                if ( Math.abs(test) < norm1 ) {\n                    result.appendPoint( new Point2D( xRoots[x], yRoots[y] ) );\n                }\n            }\n        }\n    }\n\n    if ( result.points.length > 0 ) result.status = \"Intersection\";\n\n    return result;\n};\n\n\n/*****\n*\n*   intersectEllipseLine\n*   \n*   NOTE: Rotation will need to be added to this function\n*\n*****/\nIntersection.intersectEllipseLine = function(c, rx, ry, a1, a2) {\n    var result;\n    var origin = new Vector2D(a1.x, a1.y);\n    var dir    = Vector2D.fromPoints(a1, a2);\n    var center = new Vector2D(c.x, c.y);\n    var diff   = origin.subtract(center);\n    var mDir   = new Vector2D( dir.x/(rx*rx),  dir.y/(ry*ry)  );\n    var mDiff  = new Vector2D( diff.x/(rx*rx), diff.y/(ry*ry) );\n\n    var a = dir.dot(mDir);\n    var b = dir.dot(mDiff);\n    var c = diff.dot(mDiff) - 1.0;\n    var d = b*b - a*c;\n\n    if ( d < 0 ) {\n        result = new Intersection(\"Outside\");\n    } else if ( d > 0 ) {\n        var root = Math.sqrt(d);\n        var t_a  = (-b - root) / a;\n        var t_b  = (-b + root) / a;\n\n        if ( (t_a < 0 || 1 < t_a) && (t_b < 0 || 1 < t_b) ) {\n            if ( (t_a < 0 && t_b < 0) || (t_a > 1 && t_b > 1) )\n                result = new Intersection(\"Outside\");\n            else\n                result = new Intersection(\"Inside\");\n        } else {\n            result = new Intersection(\"Intersection\");\n            if ( 0 <= t_a && t_a <= 1 )\n                result.appendPoint( a1.lerp(a2, t_a) );\n            if ( 0 <= t_b && t_b <= 1 )\n                result.appendPoint( a1.lerp(a2, t_b) );\n        }\n    } else {\n        var t = -b/a;\n        if ( 0 <= t && t <= 1 ) {\n            result = new Intersection(\"Intersection\");\n            result.appendPoint( a1.lerp(a2, t) );\n        } else {\n            result = new Intersection(\"Outside\");\n        }\n    }\n    \n    return result;\n};\n\n\n/*****\n*\n*   intersectEllipsePolygon\n*\n*****/\nIntersection.intersectEllipsePolygon = function(c, rx, ry, points) {\n    var result = new Intersection(\"No Intersection\");\n    var length = points.length;\n\n    for ( var i = 0; i < length; i++ ) {\n        var b1 = points[i];\n        var b2 = points[(i+1) % length];\n        var inter = Intersection.intersectEllipseLine(c, rx, ry, b1, b2);\n\n        result.appendPoints(inter.points);\n    }\n\n    if ( result.points.length > 0 )\n        result.status = \"Intersection\";\n\n    return result;\n};\n\n\n/*****\n*\n*   intersectEllipseRectangle\n*\n*****/\nIntersection.intersectEllipseRectangle = function(c, rx, ry, r1, r2) {\n    var min        = r1.min(r2);\n    var max        = r1.max(r2);\n    var topRight   = new Point2D( max.x, min.y );\n    var bottomLeft = new Point2D( min.x, max.y );\n    \n    var inter1 = Intersection.intersectEllipseLine(c, rx, ry, min, topRight);\n    var inter2 = Intersection.intersectEllipseLine(c, rx, ry, topRight, max);\n    var inter3 = Intersection.intersectEllipseLine(c, rx, ry, max, bottomLeft);\n    var inter4 = Intersection.intersectEllipseLine(c, rx, ry, bottomLeft, min);\n    \n    var result = new Intersection(\"No Intersection\");\n\n    result.appendPoints(inter1.points);\n    result.appendPoints(inter2.points);\n    result.appendPoints(inter3.points);\n    result.appendPoints(inter4.points);\n\n    if ( result.points.length > 0 )\n        result.status = \"Intersection\";\n\n    return result;\n};\n\n\n/*****\n*\n*   intersectLineLine\n*\n*****/\nIntersection.intersectLineLine = function(a1, a2, b1, b2) {\n    var result;\n    \n    var ua_t = (b2.x - b1.x) * (a1.y - b1.y) - (b2.y - b1.y) * (a1.x - b1.x);\n    var ub_t = (a2.x - a1.x) * (a1.y - b1.y) - (a2.y - a1.y) * (a1.x - b1.x);\n    var u_b  = (b2.y - b1.y) * (a2.x - a1.x) - (b2.x - b1.x) * (a2.y - a1.y);\n\n    if ( u_b != 0 ) {\n        var ua = ua_t / u_b;\n        var ub = ub_t / u_b;\n\n        if ( 0 <= ua && ua <= 1 && 0 <= ub && ub <= 1 ) {\n            result = new Intersection(\"Intersection\");\n            result.points.push(\n                new Point2D(\n                    a1.x + ua * (a2.x - a1.x),\n                    a1.y + ua * (a2.y - a1.y)\n                )\n            );\n        } else {\n            result = new Intersection(\"No Intersection\");\n        }\n    } else {\n        if ( ua_t == 0 || ub_t == 0 ) {\n            result = new Intersection(\"Coincident\");\n        } else {\n            result = new Intersection(\"Parallel\");\n        }\n    }\n\n    return result;\n};\n\n\n/*****\n*\n*   intersectLinePolygon\n*\n*****/\nIntersection.intersectLinePolygon = function(a1, a2, points) {\n    var result = new Intersection(\"No Intersection\");\n    var length = points.length;\n\n    for ( var i = 0; i < length; i++ ) {\n        var b1 = points[i];\n        var b2 = points[(i+1) % length];\n        var inter = Intersection.intersectLineLine(a1, a2, b1, b2);\n\n        result.appendPoints(inter.points);\n    }\n\n    if ( result.points.length > 0 ) result.status = \"Intersection\";\n\n    return result;\n};\n\n\n/*****\n*\n*   intersectLineRectangle\n*\n*****/\nIntersection.intersectLineRectangle = function(a1, a2, r1, r2) {\n    var min        = r1.min(r2);\n    var max        = r1.max(r2);\n    var topRight   = new Point2D( max.x, min.y );\n    var bottomLeft = new Point2D( min.x, max.y );\n    \n    var inter1 = Intersection.intersectLineLine(min, topRight, a1, a2);\n    var inter2 = Intersection.intersectLineLine(topRight, max, a1, a2);\n    var inter3 = Intersection.intersectLineLine(max, bottomLeft, a1, a2);\n    var inter4 = Intersection.intersectLineLine(bottomLeft, min, a1, a2);\n    \n    var result = new Intersection(\"No Intersection\");\n\n    result.appendPoints(inter1.points);\n    result.appendPoints(inter2.points);\n    result.appendPoints(inter3.points);\n    result.appendPoints(inter4.points);\n\n    if ( result.points.length > 0 )\n        result.status = \"Intersection\";\n\n    return result;\n};\n\n\n/*****\n*\n*   intersectPolygonPolygon\n*\n*****/\nIntersection.intersectPolygonPolygon = function(points1, points2) {\n    var result = new Intersection(\"No Intersection\");\n    var length = points1.length;\n\n    for ( var i = 0; i < length; i++ ) {\n        var a1 = points1[i];\n        var a2 = points1[(i+1) % length];\n        var inter = Intersection.intersectLinePolygon(a1, a2, points2);\n\n        result.appendPoints(inter.points);\n    }\n\n    if ( result.points.length > 0 )\n        result.status = \"Intersection\";\n\n    return result;\n\n};\n\n\n/*****\n*\n*   intersectPolygonRectangle\n*\n*****/\nIntersection.intersectPolygonRectangle = function(points, r1, r2) {\n    var min        = r1.min(r2);\n    var max        = r1.max(r2);\n    var topRight   = new Point2D( max.x, min.y );\n    var bottomLeft = new Point2D( min.x, max.y );\n    \n    var inter1 = Intersection.intersectLinePolygon(min, topRight, points);\n    var inter2 = Intersection.intersectLinePolygon(topRight, max, points);\n    var inter3 = Intersection.intersectLinePolygon(max, bottomLeft, points);\n    var inter4 = Intersection.intersectLinePolygon(bottomLeft, min, points);\n    \n    var result = new Intersection(\"No Intersection\");\n\n    result.appendPoints(inter1.points);\n    result.appendPoints(inter2.points);\n    result.appendPoints(inter3.points);\n    result.appendPoints(inter4.points);\n\n    if ( result.points.length > 0 )\n        result.status = \"Intersection\";\n\n    return result;\n};\n\n\n/*****\n*\n*   intersectRayRay\n*\n*****/\nIntersection.intersectRayRay = function(a1, a2, b1, b2) {\n    var result;\n    \n    var ua_t = (b2.x - b1.x) * (a1.y - b1.y) - (b2.y - b1.y) * (a1.x - b1.x);\n    var ub_t = (a2.x - a1.x) * (a1.y - b1.y) - (a2.y - a1.y) * (a1.x - b1.x);\n    var u_b  = (b2.y - b1.y) * (a2.x - a1.x) - (b2.x - b1.x) * (a2.y - a1.y);\n\n    if ( u_b != 0 ) {\n        var ua = ua_t / u_b;\n\n        result = new Intersection(\"Intersection\");\n        result.points.push(\n            new Point2D(\n                a1.x + ua * (a2.x - a1.x),\n                a1.y + ua * (a2.y - a1.y)\n            )\n        );\n    } else {\n        if ( ua_t == 0 || ub_t == 0 ) {\n            result = new Intersection(\"Coincident\");\n        } else {\n            result = new Intersection(\"Parallel\");\n        }\n    }\n\n    return result;\n};\n\n\n/*****\n*\n*   intersectRectangleRectangle\n*\n*****/\nIntersection.intersectRectangleRectangle = function(a1, a2, b1, b2) {\n    var min        = a1.min(a2);\n    var max        = a1.max(a2);\n    var topRight   = new Point2D( max.x, min.y );\n    var bottomLeft = new Point2D( min.x, max.y );\n    \n    var inter1 = Intersection.intersectLineRectangle(min, topRight, b1, b2);\n    var inter2 = Intersection.intersectLineRectangle(topRight, max, b1, b2);\n    var inter3 = Intersection.intersectLineRectangle(max, bottomLeft, b1, b2);\n    var inter4 = Intersection.intersectLineRectangle(bottomLeft, min, b1, b2);\n    \n    var result = new Intersection(\"No Intersection\");\n\n    result.appendPoints(inter1.points);\n    result.appendPoints(inter2.points);\n    result.appendPoints(inter3.points);\n    result.appendPoints(inter4.points);\n\n    if ( result.points.length > 0 )\n        result.status = \"Intersection\";\n\n    return result;\n};\n\n\n/*****\n*\n*   bezout\n*\n*   This code is based on MgcIntr2DElpElp.cpp written by David Eberly.  His\n*   code along with many other excellent examples are avaiable at his site:\n*   http://www.magic-software.com\n*\n*****/\nIntersection.bezout = function(e1, e2) {\n    var AB    = e1[0]*e2[1] - e2[0]*e1[1];\n    var AC    = e1[0]*e2[2] - e2[0]*e1[2];\n    var AD    = e1[0]*e2[3] - e2[0]*e1[3];\n    var AE    = e1[0]*e2[4] - e2[0]*e1[4];\n    var AF    = e1[0]*e2[5] - e2[0]*e1[5];\n    var BC    = e1[1]*e2[2] - e2[1]*e1[2];\n    var BE    = e1[1]*e2[4] - e2[1]*e1[4];\n    var BF    = e1[1]*e2[5] - e2[1]*e1[5];\n    var CD    = e1[2]*e2[3] - e2[2]*e1[3];\n    var DE    = e1[3]*e2[4] - e2[3]*e1[4];\n    var DF    = e1[3]*e2[5] - e2[3]*e1[5];\n    var BFpDE = BF + DE;\n    var BEmCD = BE - CD;\n\n    return new Polynomial(\n        AB*BC - AC*AC,\n        AB*BEmCD + AD*BC - 2*AC*AE,\n        AB*BFpDE + AD*BEmCD - AE*AE - 2*AC*AF,\n        AB*DF + AD*BFpDE - 2*AE*AF,\n        AD*DF - AF*AF\n    );\n};\n\nmodule.exports = Intersection//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvaW50ZXJzZWN0aW9uanMvaW50ZXJzZWN0aW9uLmpzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8veGlORVQvLi9ub2RlX21vZHVsZXMvaW50ZXJzZWN0aW9uanMvaW50ZXJzZWN0aW9uLmpzPzJhZWMiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIFBvaW50MkQgPSByZXF1aXJlKCdwb2ludDJkJyk7XG5cbi8qKioqKlxuKlxuKiAgIEludGVyc2VjdGlvbi5qc1xuKlxuKiAgIGNvcHlyaWdodCAyMDAyLCBLZXZpbiBMaW5kc2V5XG4qXG4qKioqKi9cblxuLyoqKioqXG4qXG4qICAgY29uc3RydWN0b3JcbipcbioqKioqL1xuZnVuY3Rpb24gSW50ZXJzZWN0aW9uKHN0YXR1cykge1xuICAgIGlmICggYXJndW1lbnRzLmxlbmd0aCA+IDAgKSB7XG4gICAgICAgIHRoaXMuaW5pdChzdGF0dXMpO1xuICAgIH1cbn1cblxuXG4vKioqKipcbipcbiogICBpbml0XG4qXG4qKioqKi9cbkludGVyc2VjdGlvbi5wcm90b3R5cGUuaW5pdCA9IGZ1bmN0aW9uKHN0YXR1cykge1xuICAgIHRoaXMuc3RhdHVzID0gc3RhdHVzO1xuICAgIHRoaXMucG9pbnRzID0gbmV3IEFycmF5KCk7XG59O1xuXG5cbi8qKioqKlxuKlxuKiAgIGFwcGVuZFBvaW50XG4qXG4qKioqKi9cbkludGVyc2VjdGlvbi5wcm90b3R5cGUuYXBwZW5kUG9pbnQgPSBmdW5jdGlvbihwb2ludCkge1xuICAgIHRoaXMucG9pbnRzLnB1c2gocG9pbnQpO1xufTtcblxuXG4vKioqKipcbipcbiogICBhcHBlbmRQb2ludHNcbipcbioqKioqL1xuSW50ZXJzZWN0aW9uLnByb3RvdHlwZS5hcHBlbmRQb2ludHMgPSBmdW5jdGlvbihwb2ludHMpIHtcbiAgICB0aGlzLnBvaW50cyA9IHRoaXMucG9pbnRzLmNvbmNhdChwb2ludHMpO1xufTtcblxuXG4vKioqKipcbipcbiogICBjbGFzcyBtZXRob2RzXG4qXG4qKioqKi9cblxuLyoqKioqXG4qXG4qICAgaW50ZXJzZWN0U2hhcGVzXG4qXG4qKioqKi9cbkludGVyc2VjdGlvbi5pbnRlcnNlY3RTaGFwZXMgPSBmdW5jdGlvbihzaGFwZTEsIHNoYXBlMikge1xuICAgIHZhciBpcDEgPSBzaGFwZTEuZ2V0SW50ZXJzZWN0aW9uUGFyYW1zKCk7XG4gICAgdmFyIGlwMiA9IHNoYXBlMi5nZXRJbnRlcnNlY3Rpb25QYXJhbXMoKTtcbiAgICB2YXIgcmVzdWx0O1xuXG4gICAgaWYgKCBpcDEgIT0gbnVsbCAmJiBpcDIgIT0gbnVsbCApIHtcbiAgICAgICAgaWYgKCBpcDEubmFtZSA9PSBcIlBhdGhcIiApIHtcbiAgICAgICAgICAgIHJlc3VsdCA9IEludGVyc2VjdGlvbi5pbnRlcnNlY3RQYXRoU2hhcGUoc2hhcGUxLCBzaGFwZTIpO1xuICAgICAgICB9IGVsc2UgaWYgKCBpcDIubmFtZSA9PSBcIlBhdGhcIiApIHtcbiAgICAgICAgICAgIHJlc3VsdCA9IEludGVyc2VjdGlvbi5pbnRlcnNlY3RQYXRoU2hhcGUoc2hhcGUyLCBzaGFwZTEpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdmFyIG1ldGhvZDtcbiAgICAgICAgICAgIHZhciBwYXJhbXM7XG5cbiAgICAgICAgICAgIGlmICggaXAxLm5hbWUgPCBpcDIubmFtZSApIHtcbiAgICAgICAgICAgICAgICBtZXRob2QgPSBcImludGVyc2VjdFwiICsgaXAxLm5hbWUgKyBpcDIubmFtZTtcbiAgICAgICAgICAgICAgICBwYXJhbXMgPSBpcDEucGFyYW1zLmNvbmNhdCggaXAyLnBhcmFtcyApO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBtZXRob2QgPSBcImludGVyc2VjdFwiICsgaXAyLm5hbWUgKyBpcDEubmFtZTtcbiAgICAgICAgICAgICAgICBwYXJhbXMgPSBpcDIucGFyYW1zLmNvbmNhdCggaXAxLnBhcmFtcyApO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoICEobWV0aG9kIGluIEludGVyc2VjdGlvbikgKVxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkludGVyc2VjdGlvbiBub3QgYXZhaWxhYmxlOiBcIiArIG1ldGhvZCk7XG5cbiAgICAgICAgICAgIHJlc3VsdCA9IEludGVyc2VjdGlvblttZXRob2RdLmFwcGx5KG51bGwsIHBhcmFtcyk7XG4gICAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgICByZXN1bHQgPSBuZXcgSW50ZXJzZWN0aW9uKFwiTm8gSW50ZXJzZWN0aW9uXCIpO1xuICAgIH1cblxuICAgIHJldHVybiByZXN1bHQ7XG59O1xuXG5cbi8qKioqKlxuKlxuKiAgIGludGVyc2VjdFBhdGhTaGFwZVxuKlxuKioqKiovXG5JbnRlcnNlY3Rpb24uaW50ZXJzZWN0UGF0aFNoYXBlID0gZnVuY3Rpb24ocGF0aCwgc2hhcGUpIHtcbiAgICByZXR1cm4gcGF0aC5pbnRlcnNlY3RTaGFwZShzaGFwZSk7XG59O1xuXG5cbi8qKioqKlxuKlxuKiAgIGludGVyc2VjdEJlemllcjJCZXppZXIyXG4qXG4qKioqKi9cbkludGVyc2VjdGlvbi5pbnRlcnNlY3RCZXppZXIyQmV6aWVyMiA9IGZ1bmN0aW9uKGExLCBhMiwgYTMsIGIxLCBiMiwgYjMpIHtcbiAgICB2YXIgYSwgYjtcbiAgICB2YXIgYzEyLCBjMTEsIGMxMDtcbiAgICB2YXIgYzIyLCBjMjEsIGMyMDtcbiAgICB2YXIgcmVzdWx0ID0gbmV3IEludGVyc2VjdGlvbihcIk5vIEludGVyc2VjdGlvblwiKTtcbiAgICB2YXIgcG9seTtcblxuICAgIGEgPSBhMi5tdWx0aXBseSgtMik7XG4gICAgYzEyID0gYTEuYWRkKGEuYWRkKGEzKSk7XG5cbiAgICBhID0gYTEubXVsdGlwbHkoLTIpO1xuICAgIGIgPSBhMi5tdWx0aXBseSgyKTtcbiAgICBjMTEgPSBhLmFkZChiKTtcblxuICAgIGMxMCA9IG5ldyBQb2ludDJEKGExLngsIGExLnkpO1xuXG4gICAgYSA9IGIyLm11bHRpcGx5KC0yKTtcbiAgICBjMjIgPSBiMS5hZGQoYS5hZGQoYjMpKTtcblxuICAgIGEgPSBiMS5tdWx0aXBseSgtMik7XG4gICAgYiA9IGIyLm11bHRpcGx5KDIpO1xuICAgIGMyMSA9IGEuYWRkKGIpO1xuXG4gICAgYzIwID0gbmV3IFBvaW50MkQoYjEueCwgYjEueSk7XG4gICAgXG4gICAgaWYgKCBjMTIueSA9PSAwICkge1xuICAgICAgICB2YXIgdjAgPSBjMTIueCooYzEwLnkgLSBjMjAueSk7XG4gICAgICAgIHZhciB2MSA9IHYwIC0gYzExLngqYzExLnk7XG4gICAgICAgIHZhciB2MiA9IHYwICsgdjE7XG4gICAgICAgIHZhciB2MyA9IGMxMS55KmMxMS55O1xuXG4gICAgICAgIHBvbHkgPSBuZXcgUG9seW5vbWlhbChcbiAgICAgICAgICAgIGMxMi54KmMyMi55KmMyMi55LFxuICAgICAgICAgICAgMipjMTIueCpjMjEueSpjMjIueSxcbiAgICAgICAgICAgIGMxMi54KmMyMS55KmMyMS55IC0gYzIyLngqdjMgLSBjMjIueSp2MCAtIGMyMi55KnYxLFxuICAgICAgICAgICAgLWMyMS54KnYzIC0gYzIxLnkqdjAgLSBjMjEueSp2MSxcbiAgICAgICAgICAgIChjMTAueCAtIGMyMC54KSp2MyArIChjMTAueSAtIGMyMC55KSp2MVxuICAgICAgICApO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciB2MCA9IGMxMi54KmMyMi55IC0gYzEyLnkqYzIyLng7XG4gICAgICAgIHZhciB2MSA9IGMxMi54KmMyMS55IC0gYzIxLngqYzEyLnk7XG4gICAgICAgIHZhciB2MiA9IGMxMS54KmMxMi55IC0gYzExLnkqYzEyLng7XG4gICAgICAgIHZhciB2MyA9IGMxMC55IC0gYzIwLnk7XG4gICAgICAgIHZhciB2NCA9IGMxMi55KihjMTAueCAtIGMyMC54KSAtIGMxMi54KnYzO1xuICAgICAgICB2YXIgdjUgPSAtYzExLnkqdjIgKyBjMTIueSp2NDtcbiAgICAgICAgdmFyIHY2ID0gdjIqdjI7XG5cbiAgICAgICAgcG9seSA9IG5ldyBQb2x5bm9taWFsKFxuICAgICAgICAgICAgdjAqdjAsXG4gICAgICAgICAgICAyKnYwKnYxLFxuICAgICAgICAgICAgKC1jMjIueSp2NiArIGMxMi55KnYxKnYxICsgYzEyLnkqdjAqdjQgKyB2MCp2NSkgLyBjMTIueSxcbiAgICAgICAgICAgICgtYzIxLnkqdjYgKyBjMTIueSp2MSp2NCArIHYxKnY1KSAvIGMxMi55LFxuICAgICAgICAgICAgKHYzKnY2ICsgdjQqdjUpIC8gYzEyLnlcbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICB2YXIgcm9vdHMgPSBwb2x5LmdldFJvb3RzKCk7XG4gICAgZm9yICggdmFyIGkgPSAwOyBpIDwgcm9vdHMubGVuZ3RoOyBpKysgKSB7XG4gICAgICAgIHZhciBzID0gcm9vdHNbaV07XG5cbiAgICAgICAgaWYgKCAwIDw9IHMgJiYgcyA8PSAxICkge1xuICAgICAgICAgICAgdmFyIHhSb290cyA9IG5ldyBQb2x5bm9taWFsKFxuICAgICAgICAgICAgICAgIGMxMi54LFxuICAgICAgICAgICAgICAgIGMxMS54LFxuICAgICAgICAgICAgICAgIGMxMC54IC0gYzIwLnggLSBzKmMyMS54IC0gcypzKmMyMi54XG4gICAgICAgICAgICApLmdldFJvb3RzKCk7XG4gICAgICAgICAgICB2YXIgeVJvb3RzID0gbmV3IFBvbHlub21pYWwoXG4gICAgICAgICAgICAgICAgYzEyLnksXG4gICAgICAgICAgICAgICAgYzExLnksXG4gICAgICAgICAgICAgICAgYzEwLnkgLSBjMjAueSAtIHMqYzIxLnkgLSBzKnMqYzIyLnlcbiAgICAgICAgICAgICkuZ2V0Um9vdHMoKTtcblxuICAgICAgICAgICAgaWYgKCB4Um9vdHMubGVuZ3RoID4gMCAmJiB5Um9vdHMubGVuZ3RoID4gMCApIHtcbiAgICAgICAgICAgICAgICB2YXIgVE9MRVJBTkNFID0gMWUtNDtcblxuICAgICAgICAgICAgICAgIGNoZWNrUm9vdHM6XG4gICAgICAgICAgICAgICAgZm9yICggdmFyIGogPSAwOyBqIDwgeFJvb3RzLmxlbmd0aDsgaisrICkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgeFJvb3QgPSB4Um9vdHNbal07XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKCAwIDw9IHhSb290ICYmIHhSb290IDw9IDEgKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKCB2YXIgayA9IDA7IGsgPCB5Um9vdHMubGVuZ3RoOyBrKysgKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCBNYXRoLmFicyggeFJvb3QgLSB5Um9vdHNba10gKSA8IFRPTEVSQU5DRSApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0LnBvaW50cy5wdXNoKCBjMjIubXVsdGlwbHkocypzKS5hZGQoYzIxLm11bHRpcGx5KHMpLmFkZChjMjApKSApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhayBjaGVja1Jvb3RzO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIGlmICggcmVzdWx0LnBvaW50cy5sZW5ndGggPiAwICkgcmVzdWx0LnN0YXR1cyA9IFwiSW50ZXJzZWN0aW9uXCI7XG5cbiAgICByZXR1cm4gcmVzdWx0O1xufTtcblxuXG4vKioqKipcbipcbiogICBpbnRlcnNlY3RCZXppZXIyQmV6aWVyM1xuKlxuKioqKiovXG5JbnRlcnNlY3Rpb24uaW50ZXJzZWN0QmV6aWVyMkJlemllcjMgPSBmdW5jdGlvbihhMSwgYTIsIGEzLCBiMSwgYjIsIGIzLCBiNCkge1xuICAgIHZhciBhLCBiLGMsIGQ7XG4gICAgdmFyIGMxMiwgYzExLCBjMTA7XG4gICAgdmFyIGMyMywgYzIyLCBjMjEsIGMyMDtcbiAgICB2YXIgcmVzdWx0ID0gbmV3IEludGVyc2VjdGlvbihcIk5vIEludGVyc2VjdGlvblwiKTtcblxuICAgIGEgPSBhMi5tdWx0aXBseSgtMik7XG4gICAgYzEyID0gYTEuYWRkKGEuYWRkKGEzKSk7XG5cbiAgICBhID0gYTEubXVsdGlwbHkoLTIpO1xuICAgIGIgPSBhMi5tdWx0aXBseSgyKTtcbiAgICBjMTEgPSBhLmFkZChiKTtcblxuICAgIGMxMCA9IG5ldyBQb2ludDJEKGExLngsIGExLnkpO1xuXG4gICAgYSA9IGIxLm11bHRpcGx5KC0xKTtcbiAgICBiID0gYjIubXVsdGlwbHkoMyk7XG4gICAgYyA9IGIzLm11bHRpcGx5KC0zKTtcbiAgICBkID0gYS5hZGQoYi5hZGQoYy5hZGQoYjQpKSk7XG4gICAgYzIzID0gbmV3IFZlY3RvcjJEKGQueCwgZC55KTtcblxuICAgIGEgPSBiMS5tdWx0aXBseSgzKTtcbiAgICBiID0gYjIubXVsdGlwbHkoLTYpO1xuICAgIGMgPSBiMy5tdWx0aXBseSgzKTtcbiAgICBkID0gYS5hZGQoYi5hZGQoYykpO1xuICAgIGMyMiA9IG5ldyBWZWN0b3IyRChkLngsIGQueSk7XG5cbiAgICBhID0gYjEubXVsdGlwbHkoLTMpO1xuICAgIGIgPSBiMi5tdWx0aXBseSgzKTtcbiAgICBjID0gYS5hZGQoYik7XG4gICAgYzIxID0gbmV3IFZlY3RvcjJEKGMueCwgYy55KTtcblxuICAgIGMyMCA9IG5ldyBWZWN0b3IyRChiMS54LCBiMS55KTtcblxuICAgIHZhciBjMTB4MiA9IGMxMC54KmMxMC54O1xuICAgIHZhciBjMTB5MiA9IGMxMC55KmMxMC55O1xuICAgIHZhciBjMTF4MiA9IGMxMS54KmMxMS54O1xuICAgIHZhciBjMTF5MiA9IGMxMS55KmMxMS55O1xuICAgIHZhciBjMTJ4MiA9IGMxMi54KmMxMi54O1xuICAgIHZhciBjMTJ5MiA9IGMxMi55KmMxMi55O1xuICAgIHZhciBjMjB4MiA9IGMyMC54KmMyMC54O1xuICAgIHZhciBjMjB5MiA9IGMyMC55KmMyMC55O1xuICAgIHZhciBjMjF4MiA9IGMyMS54KmMyMS54O1xuICAgIHZhciBjMjF5MiA9IGMyMS55KmMyMS55O1xuICAgIHZhciBjMjJ4MiA9IGMyMi54KmMyMi54O1xuICAgIHZhciBjMjJ5MiA9IGMyMi55KmMyMi55O1xuICAgIHZhciBjMjN4MiA9IGMyMy54KmMyMy54O1xuICAgIHZhciBjMjN5MiA9IGMyMy55KmMyMy55O1xuXG4gICAgdmFyIHBvbHkgPSBuZXcgUG9seW5vbWlhbChcbiAgICAgICAgLTIqYzEyLngqYzEyLnkqYzIzLngqYzIzLnkgKyBjMTJ4MipjMjN5MiArIGMxMnkyKmMyM3gyLFxuICAgICAgICAtMipjMTIueCpjMTIueSpjMjIueCpjMjMueSAtIDIqYzEyLngqYzEyLnkqYzIyLnkqYzIzLnggKyAyKmMxMnkyKmMyMi54KmMyMy54ICtcbiAgICAgICAgICAgIDIqYzEyeDIqYzIyLnkqYzIzLnksXG4gICAgICAgIC0yKmMxMi54KmMyMS54KmMxMi55KmMyMy55IC0gMipjMTIueCpjMTIueSpjMjEueSpjMjMueCAtIDIqYzEyLngqYzEyLnkqYzIyLngqYzIyLnkgK1xuICAgICAgICAgICAgMipjMjEueCpjMTJ5MipjMjMueCArIGMxMnkyKmMyMngyICsgYzEyeDIqKDIqYzIxLnkqYzIzLnkgKyBjMjJ5MiksXG4gICAgICAgIDIqYzEwLngqYzEyLngqYzEyLnkqYzIzLnkgKyAyKmMxMC55KmMxMi54KmMxMi55KmMyMy54ICsgYzExLngqYzExLnkqYzEyLngqYzIzLnkgK1xuICAgICAgICAgICAgYzExLngqYzExLnkqYzEyLnkqYzIzLnggLSAyKmMyMC54KmMxMi54KmMxMi55KmMyMy55IC0gMipjMTIueCpjMjAueSpjMTIueSpjMjMueCAtXG4gICAgICAgICAgICAyKmMxMi54KmMyMS54KmMxMi55KmMyMi55IC0gMipjMTIueCpjMTIueSpjMjEueSpjMjIueCAtIDIqYzEwLngqYzEyeTIqYzIzLnggLVxuICAgICAgICAgICAgMipjMTAueSpjMTJ4MipjMjMueSArIDIqYzIwLngqYzEyeTIqYzIzLnggKyAyKmMyMS54KmMxMnkyKmMyMi54IC1cbiAgICAgICAgICAgIGMxMXkyKmMxMi54KmMyMy54IC0gYzExeDIqYzEyLnkqYzIzLnkgKyBjMTJ4MiooMipjMjAueSpjMjMueSArIDIqYzIxLnkqYzIyLnkpLFxuICAgICAgICAyKmMxMC54KmMxMi54KmMxMi55KmMyMi55ICsgMipjMTAueSpjMTIueCpjMTIueSpjMjIueCArIGMxMS54KmMxMS55KmMxMi54KmMyMi55ICtcbiAgICAgICAgICAgIGMxMS54KmMxMS55KmMxMi55KmMyMi54IC0gMipjMjAueCpjMTIueCpjMTIueSpjMjIueSAtIDIqYzEyLngqYzIwLnkqYzEyLnkqYzIyLnggLVxuICAgICAgICAgICAgMipjMTIueCpjMjEueCpjMTIueSpjMjEueSAtIDIqYzEwLngqYzEyeTIqYzIyLnggLSAyKmMxMC55KmMxMngyKmMyMi55ICtcbiAgICAgICAgICAgIDIqYzIwLngqYzEyeTIqYzIyLnggLSBjMTF5MipjMTIueCpjMjIueCAtIGMxMXgyKmMxMi55KmMyMi55ICsgYzIxeDIqYzEyeTIgK1xuICAgICAgICAgICAgYzEyeDIqKDIqYzIwLnkqYzIyLnkgKyBjMjF5MiksXG4gICAgICAgIDIqYzEwLngqYzEyLngqYzEyLnkqYzIxLnkgKyAyKmMxMC55KmMxMi54KmMyMS54KmMxMi55ICsgYzExLngqYzExLnkqYzEyLngqYzIxLnkgK1xuICAgICAgICAgICAgYzExLngqYzExLnkqYzIxLngqYzEyLnkgLSAyKmMyMC54KmMxMi54KmMxMi55KmMyMS55IC0gMipjMTIueCpjMjAueSpjMjEueCpjMTIueSAtXG4gICAgICAgICAgICAyKmMxMC54KmMyMS54KmMxMnkyIC0gMipjMTAueSpjMTJ4MipjMjEueSArIDIqYzIwLngqYzIxLngqYzEyeTIgLVxuICAgICAgICAgICAgYzExeTIqYzEyLngqYzIxLnggLSBjMTF4MipjMTIueSpjMjEueSArIDIqYzEyeDIqYzIwLnkqYzIxLnksXG4gICAgICAgIC0yKmMxMC54KmMxMC55KmMxMi54KmMxMi55IC0gYzEwLngqYzExLngqYzExLnkqYzEyLnkgLSBjMTAueSpjMTEueCpjMTEueSpjMTIueCArXG4gICAgICAgICAgICAyKmMxMC54KmMxMi54KmMyMC55KmMxMi55ICsgMipjMTAueSpjMjAueCpjMTIueCpjMTIueSArIGMxMS54KmMyMC54KmMxMS55KmMxMi55ICtcbiAgICAgICAgICAgIGMxMS54KmMxMS55KmMxMi54KmMyMC55IC0gMipjMjAueCpjMTIueCpjMjAueSpjMTIueSAtIDIqYzEwLngqYzIwLngqYzEyeTIgK1xuICAgICAgICAgICAgYzEwLngqYzExeTIqYzEyLnggKyBjMTAueSpjMTF4MipjMTIueSAtIDIqYzEwLnkqYzEyeDIqYzIwLnkgLVxuICAgICAgICAgICAgYzIwLngqYzExeTIqYzEyLnggLSBjMTF4MipjMjAueSpjMTIueSArIGMxMHgyKmMxMnkyICsgYzEweTIqYzEyeDIgK1xuICAgICAgICAgICAgYzIweDIqYzEyeTIgKyBjMTJ4MipjMjB5MlxuICAgICk7XG4gICAgdmFyIHJvb3RzID0gcG9seS5nZXRSb290c0luSW50ZXJ2YWwoMCwxKTtcblxuICAgIGZvciAoIHZhciBpID0gMDsgaSA8IHJvb3RzLmxlbmd0aDsgaSsrICkge1xuICAgICAgICB2YXIgcyA9IHJvb3RzW2ldO1xuICAgICAgICB2YXIgeFJvb3RzID0gbmV3IFBvbHlub21pYWwoXG4gICAgICAgICAgICBjMTIueCxcbiAgICAgICAgICAgIGMxMS54LFxuICAgICAgICAgICAgYzEwLnggLSBjMjAueCAtIHMqYzIxLnggLSBzKnMqYzIyLnggLSBzKnMqcypjMjMueFxuICAgICAgICApLmdldFJvb3RzKCk7XG4gICAgICAgIHZhciB5Um9vdHMgPSBuZXcgUG9seW5vbWlhbChcbiAgICAgICAgICAgIGMxMi55LFxuICAgICAgICAgICAgYzExLnksXG4gICAgICAgICAgICBjMTAueSAtIGMyMC55IC0gcypjMjEueSAtIHMqcypjMjIueSAtIHMqcypzKmMyMy55XG4gICAgICAgICkuZ2V0Um9vdHMoKTtcblxuICAgICAgICBpZiAoIHhSb290cy5sZW5ndGggPiAwICYmIHlSb290cy5sZW5ndGggPiAwICkge1xuICAgICAgICAgICAgdmFyIFRPTEVSQU5DRSA9IDFlLTQ7XG5cbiAgICAgICAgICAgIGNoZWNrUm9vdHM6XG4gICAgICAgICAgICBmb3IgKCB2YXIgaiA9IDA7IGogPCB4Um9vdHMubGVuZ3RoOyBqKysgKSB7XG4gICAgICAgICAgICAgICAgdmFyIHhSb290ID0geFJvb3RzW2pdO1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIGlmICggMCA8PSB4Um9vdCAmJiB4Um9vdCA8PSAxICkge1xuICAgICAgICAgICAgICAgICAgICBmb3IgKCB2YXIgayA9IDA7IGsgPCB5Um9vdHMubGVuZ3RoOyBrKysgKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIE1hdGguYWJzKCB4Um9vdCAtIHlSb290c1trXSApIDwgVE9MRVJBTkNFICkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdC5wb2ludHMucHVzaChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYzIzLm11bHRpcGx5KHMqcypzKS5hZGQoYzIyLm11bHRpcGx5KHMqcykuYWRkKGMyMS5tdWx0aXBseShzKS5hZGQoYzIwKSkpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhayBjaGVja1Jvb3RzO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgaWYgKCByZXN1bHQucG9pbnRzLmxlbmd0aCA+IDAgKSByZXN1bHQuc3RhdHVzID0gXCJJbnRlcnNlY3Rpb25cIjtcblxuICAgIHJldHVybiByZXN1bHQ7XG5cbn07XG5cblxuLyoqKioqXG4qXG4qICAgaW50ZXJzZWN0QmV6aWVyMkNpcmNsZVxuKlxuKioqKiovXG5JbnRlcnNlY3Rpb24uaW50ZXJzZWN0QmV6aWVyMkNpcmNsZSA9IGZ1bmN0aW9uKHAxLCBwMiwgcDMsIGMsIHIpIHtcbiAgICByZXR1cm4gSW50ZXJzZWN0aW9uLmludGVyc2VjdEJlemllcjJFbGxpcHNlKHAxLCBwMiwgcDMsIGMsIHIsIHIpO1xufTtcblxuXG4vKioqKipcbipcbiogICBpbnRlcnNlY3RCZXppZXIyRWxsaXBzZVxuKlxuKioqKiovXG5JbnRlcnNlY3Rpb24uaW50ZXJzZWN0QmV6aWVyMkVsbGlwc2UgPSBmdW5jdGlvbihwMSwgcDIsIHAzLCBlYywgcngsIHJ5KSB7XG4gICAgdmFyIGEsIGI7ICAgICAgIC8vIHRlbXBvcmFyeSB2YXJpYWJsZXNcbiAgICB2YXIgYzIsIGMxLCBjMDsgLy8gY29lZmZpY2llbnRzIG9mIHF1YWRyYXRpY1xuICAgIHZhciByZXN1bHQgPSBuZXcgSW50ZXJzZWN0aW9uKFwiTm8gSW50ZXJzZWN0aW9uXCIpO1xuXG4gICAgYSA9IHAyLm11bHRpcGx5KC0yKTtcbiAgICBjMiA9IHAxLmFkZChhLmFkZChwMykpO1xuXG4gICAgYSA9IHAxLm11bHRpcGx5KC0yKTtcbiAgICBiID0gcDIubXVsdGlwbHkoMik7XG4gICAgYzEgPSBhLmFkZChiKTtcblxuICAgIGMwID0gbmV3IFBvaW50MkQocDEueCwgcDEueSk7XG5cbiAgICB2YXIgcnhyeCAgPSByeCpyeDtcbiAgICB2YXIgcnlyeSAgPSByeSpyeTtcbiAgICB2YXIgcm9vdHMgPSBuZXcgUG9seW5vbWlhbChcbiAgICAgICAgcnlyeSpjMi54KmMyLnggKyByeHJ4KmMyLnkqYzIueSxcbiAgICAgICAgMioocnlyeSpjMi54KmMxLnggKyByeHJ4KmMyLnkqYzEueSksXG4gICAgICAgIHJ5cnkqKDIqYzIueCpjMC54ICsgYzEueCpjMS54KSArIHJ4cngqKDIqYzIueSpjMC55K2MxLnkqYzEueSkgLVxuICAgICAgICAgICAgMioocnlyeSplYy54KmMyLnggKyByeHJ4KmVjLnkqYzIueSksXG4gICAgICAgIDIqKHJ5cnkqYzEueCooYzAueC1lYy54KSArIHJ4cngqYzEueSooYzAueS1lYy55KSksXG4gICAgICAgIHJ5cnkqKGMwLngqYzAueCtlYy54KmVjLngpICsgcnhyeCooYzAueSpjMC55ICsgZWMueSplYy55KSAtXG4gICAgICAgICAgICAyKihyeXJ5KmVjLngqYzAueCArIHJ4cngqZWMueSpjMC55KSAtIHJ4cngqcnlyeVxuICAgICkuZ2V0Um9vdHMoKTtcblxuICAgIGZvciAoIHZhciBpID0gMDsgaSA8IHJvb3RzLmxlbmd0aDsgaSsrICkge1xuICAgICAgICB2YXIgdCA9IHJvb3RzW2ldO1xuXG4gICAgICAgIGlmICggMCA8PSB0ICYmIHQgPD0gMSApXG4gICAgICAgICAgICByZXN1bHQucG9pbnRzLnB1c2goIGMyLm11bHRpcGx5KHQqdCkuYWRkKGMxLm11bHRpcGx5KHQpLmFkZChjMCkpICk7XG4gICAgfVxuXG4gICAgaWYgKCByZXN1bHQucG9pbnRzLmxlbmd0aCA+IDAgKSByZXN1bHQuc3RhdHVzID0gXCJJbnRlcnNlY3Rpb25cIjtcblxuICAgIHJldHVybiByZXN1bHQ7XG59O1xuXG5cbi8qKioqKlxuKlxuKiAgIGludGVyc2VjdEJlemllcjJMaW5lXG4qXG4qKioqKi9cbkludGVyc2VjdGlvbi5pbnRlcnNlY3RCZXppZXIyTGluZSA9IGZ1bmN0aW9uKHAxLCBwMiwgcDMsIGExLCBhMikge1xuICAgIHZhciBhLCBiOyAgICAgICAgICAgICAvLyB0ZW1wb3JhcnkgdmFyaWFibGVzXG4gICAgdmFyIGMyLCBjMSwgYzA7ICAgICAgIC8vIGNvZWZmaWNpZW50cyBvZiBxdWFkcmF0aWNcbiAgICB2YXIgY2w7ICAgICAgICAgICAgICAgLy8gYyBjb2VmZmljaWVudCBmb3Igbm9ybWFsIGZvcm0gb2YgbGluZVxuICAgIHZhciBuOyAgICAgICAgICAgICAgICAvLyBub3JtYWwgZm9yIG5vcm1hbCBmb3JtIG9mIGxpbmVcbiAgICB2YXIgbWluID0gYTEubWluKGEyKTsgLy8gdXNlZCB0byBkZXRlcm1pbmUgaWYgcG9pbnQgaXMgb24gbGluZSBzZWdtZW50XG4gICAgdmFyIG1heCA9IGExLm1heChhMik7IC8vIHVzZWQgdG8gZGV0ZXJtaW5lIGlmIHBvaW50IGlzIG9uIGxpbmUgc2VnbWVudFxuICAgIHZhciByZXN1bHQgPSBuZXcgSW50ZXJzZWN0aW9uKFwiTm8gSW50ZXJzZWN0aW9uXCIpO1xuICAgIFxuICAgIGEgPSBwMi5tdWx0aXBseSgtMik7XG4gICAgYzIgPSBwMS5hZGQoYS5hZGQocDMpKTtcblxuICAgIGEgPSBwMS5tdWx0aXBseSgtMik7XG4gICAgYiA9IHAyLm11bHRpcGx5KDIpO1xuICAgIGMxID0gYS5hZGQoYik7XG5cbiAgICBjMCA9IG5ldyBQb2ludDJEKHAxLngsIHAxLnkpO1xuXG4gICAgLy8gQ29udmVydCBsaW5lIHRvIG5vcm1hbCBmb3JtOiBheCArIGJ5ICsgYyA9IDBcbiAgICAvLyBGaW5kIG5vcm1hbCB0byBsaW5lOiBuZWdhdGl2ZSBpbnZlcnNlIG9mIG9yaWdpbmFsIGxpbmUncyBzbG9wZVxuICAgIG4gPSBuZXcgVmVjdG9yMkQoYTEueSAtIGEyLnksIGEyLnggLSBhMS54KTtcbiAgICBcbiAgICAvLyBEZXRlcm1pbmUgbmV3IGMgY29lZmZpY2llbnRcbiAgICBjbCA9IGExLngqYTIueSAtIGEyLngqYTEueTtcblxuICAgIC8vIFRyYW5zZm9ybSBjdWJpYyBjb2VmZmljaWVudHMgdG8gbGluZSdzIGNvb3JkaW5hdGUgc3lzdGVtIGFuZCBmaW5kIHJvb3RzXG4gICAgLy8gb2YgY3ViaWNcbiAgICByb290cyA9IG5ldyBQb2x5bm9taWFsKFxuICAgICAgICBuLmRvdChjMiksXG4gICAgICAgIG4uZG90KGMxKSxcbiAgICAgICAgbi5kb3QoYzApICsgY2xcbiAgICApLmdldFJvb3RzKCk7XG5cbiAgICAvLyBBbnkgcm9vdHMgaW4gY2xvc2VkIGludGVydmFsIFswLDFdIGFyZSBpbnRlcnNlY3Rpb25zIG9uIEJlemllciwgYnV0XG4gICAgLy8gbWlnaHQgbm90IGJlIG9uIHRoZSBsaW5lIHNlZ21lbnQuXG4gICAgLy8gRmluZCBpbnRlcnNlY3Rpb25zIGFuZCBjYWxjdWxhdGUgcG9pbnQgY29vcmRpbmF0ZXNcbiAgICBmb3IgKCB2YXIgaSA9IDA7IGkgPCByb290cy5sZW5ndGg7IGkrKyApIHtcbiAgICAgICAgdmFyIHQgPSByb290c1tpXTtcblxuICAgICAgICBpZiAoIDAgPD0gdCAmJiB0IDw9IDEgKSB7XG4gICAgICAgICAgICAvLyBXZSdyZSB3aXRoaW4gdGhlIEJlemllciBjdXJ2ZVxuICAgICAgICAgICAgLy8gRmluZCBwb2ludCBvbiBCZXppZXJcbiAgICAgICAgICAgIHZhciBwNCA9IHAxLmxlcnAocDIsIHQpO1xuICAgICAgICAgICAgdmFyIHA1ID0gcDIubGVycChwMywgdCk7XG5cbiAgICAgICAgICAgIHZhciBwNiA9IHA0LmxlcnAocDUsIHQpO1xuXG4gICAgICAgICAgICAvLyBTZWUgaWYgcG9pbnQgaXMgb24gbGluZSBzZWdtZW50XG4gICAgICAgICAgICAvLyBIYWQgdG8gbWFrZSBzcGVjaWFsIGNhc2VzIGZvciB2ZXJ0aWNhbCBhbmQgaG9yaXpvbnRhbCBsaW5lcyBkdWVcbiAgICAgICAgICAgIC8vIHRvIHNsaWdodCBlcnJvcnMgaW4gY2FsY3VsYXRpb24gb2YgcDZcbiAgICAgICAgICAgIGlmICggYTEueCA9PSBhMi54ICkge1xuICAgICAgICAgICAgICAgIGlmICggbWluLnkgPD0gcDYueSAmJiBwNi55IDw9IG1heC55ICkge1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQuc3RhdHVzID0gXCJJbnRlcnNlY3Rpb25cIjtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0LmFwcGVuZFBvaW50KCBwNiApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSBpZiAoIGExLnkgPT0gYTIueSApIHtcbiAgICAgICAgICAgICAgICBpZiAoIG1pbi54IDw9IHA2LnggJiYgcDYueCA8PSBtYXgueCApIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0LnN0YXR1cyA9IFwiSW50ZXJzZWN0aW9uXCI7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdC5hcHBlbmRQb2ludCggcDYgKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2UgaWYgKCBwNi5ndGUobWluKSAmJiBwNi5sdGUobWF4KSApIHtcbiAgICAgICAgICAgICAgICByZXN1bHQuc3RhdHVzID0gXCJJbnRlcnNlY3Rpb25cIjtcbiAgICAgICAgICAgICAgICByZXN1bHQuYXBwZW5kUG9pbnQoIHA2ICk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gcmVzdWx0O1xufTtcblxuXG4vKioqKipcbipcbiogICBpbnRlcnNlY3RCZXppZXIyUG9seWdvblxuKlxuKioqKiovXG5JbnRlcnNlY3Rpb24uaW50ZXJzZWN0QmV6aWVyMlBvbHlnb24gPSBmdW5jdGlvbihwMSwgcDIsIHAzLCBwb2ludHMpIHtcbiAgICB2YXIgcmVzdWx0ID0gbmV3IEludGVyc2VjdGlvbihcIk5vIEludGVyc2VjdGlvblwiKTtcbiAgICB2YXIgbGVuZ3RoID0gcG9pbnRzLmxlbmd0aDtcblxuICAgIGZvciAoIHZhciBpID0gMDsgaSA8IGxlbmd0aDsgaSsrICkge1xuICAgICAgICB2YXIgYTEgPSBwb2ludHNbaV07XG4gICAgICAgIHZhciBhMiA9IHBvaW50c1soaSsxKSAlIGxlbmd0aF07XG4gICAgICAgIHZhciBpbnRlciA9IEludGVyc2VjdGlvbi5pbnRlcnNlY3RCZXppZXIyTGluZShwMSwgcDIsIHAzLCBhMSwgYTIpO1xuXG4gICAgICAgIHJlc3VsdC5hcHBlbmRQb2ludHMoaW50ZXIucG9pbnRzKTtcbiAgICB9XG5cbiAgICBpZiAoIHJlc3VsdC5wb2ludHMubGVuZ3RoID4gMCApIHJlc3VsdC5zdGF0dXMgPSBcIkludGVyc2VjdGlvblwiO1xuXG4gICAgcmV0dXJuIHJlc3VsdDtcbn07XG5cblxuLyoqKioqXG4qXG4qICAgaW50ZXJzZWN0QmV6aWVyMlJlY3RhbmdsZVxuKlxuKioqKiovXG5JbnRlcnNlY3Rpb24uaW50ZXJzZWN0QmV6aWVyMlJlY3RhbmdsZSA9IGZ1bmN0aW9uKHAxLCBwMiwgcDMsIHIxLCByMikge1xuICAgIHZhciBtaW4gICAgICAgID0gcjEubWluKHIyKTtcbiAgICB2YXIgbWF4ICAgICAgICA9IHIxLm1heChyMik7XG4gICAgdmFyIHRvcFJpZ2h0ICAgPSBuZXcgUG9pbnQyRCggbWF4LngsIG1pbi55ICk7XG4gICAgdmFyIGJvdHRvbUxlZnQgPSBuZXcgUG9pbnQyRCggbWluLngsIG1heC55ICk7XG4gICAgXG4gICAgdmFyIGludGVyMSA9IEludGVyc2VjdGlvbi5pbnRlcnNlY3RCZXppZXIyTGluZShwMSwgcDIsIHAzLCBtaW4sIHRvcFJpZ2h0KTtcbiAgICB2YXIgaW50ZXIyID0gSW50ZXJzZWN0aW9uLmludGVyc2VjdEJlemllcjJMaW5lKHAxLCBwMiwgcDMsIHRvcFJpZ2h0LCBtYXgpO1xuICAgIHZhciBpbnRlcjMgPSBJbnRlcnNlY3Rpb24uaW50ZXJzZWN0QmV6aWVyMkxpbmUocDEsIHAyLCBwMywgbWF4LCBib3R0b21MZWZ0KTtcbiAgICB2YXIgaW50ZXI0ID0gSW50ZXJzZWN0aW9uLmludGVyc2VjdEJlemllcjJMaW5lKHAxLCBwMiwgcDMsIGJvdHRvbUxlZnQsIG1pbik7XG4gICAgXG4gICAgdmFyIHJlc3VsdCA9IG5ldyBJbnRlcnNlY3Rpb24oXCJObyBJbnRlcnNlY3Rpb25cIik7XG5cbiAgICByZXN1bHQuYXBwZW5kUG9pbnRzKGludGVyMS5wb2ludHMpO1xuICAgIHJlc3VsdC5hcHBlbmRQb2ludHMoaW50ZXIyLnBvaW50cyk7XG4gICAgcmVzdWx0LmFwcGVuZFBvaW50cyhpbnRlcjMucG9pbnRzKTtcbiAgICByZXN1bHQuYXBwZW5kUG9pbnRzKGludGVyNC5wb2ludHMpO1xuXG4gICAgaWYgKCByZXN1bHQucG9pbnRzLmxlbmd0aCA+IDAgKSByZXN1bHQuc3RhdHVzID0gXCJJbnRlcnNlY3Rpb25cIjtcblxuICAgIHJldHVybiByZXN1bHQ7XG59O1xuXG5cbi8qKioqKlxuKlxuKiAgIGludGVyc2VjdEJlemllcjNCZXppZXIzXG4qXG4qKioqKi9cbkludGVyc2VjdGlvbi5pbnRlcnNlY3RCZXppZXIzQmV6aWVyMyA9IGZ1bmN0aW9uKGExLCBhMiwgYTMsIGE0LCBiMSwgYjIsIGIzLCBiNCkge1xuICAgIHZhciBhLCBiLCBjLCBkOyAgICAgICAgIC8vIHRlbXBvcmFyeSB2YXJpYWJsZXNcbiAgICB2YXIgYzEzLCBjMTIsIGMxMSwgYzEwOyAvLyBjb2VmZmljaWVudHMgb2YgY3ViaWNcbiAgICB2YXIgYzIzLCBjMjIsIGMyMSwgYzIwOyAvLyBjb2VmZmljaWVudHMgb2YgY3ViaWNcbiAgICB2YXIgcmVzdWx0ID0gbmV3IEludGVyc2VjdGlvbihcIk5vIEludGVyc2VjdGlvblwiKTtcblxuICAgIC8vIENhbGN1bGF0ZSB0aGUgY29lZmZpY2llbnRzIG9mIGN1YmljIHBvbHlub21pYWxcbiAgICBhID0gYTEubXVsdGlwbHkoLTEpO1xuICAgIGIgPSBhMi5tdWx0aXBseSgzKTtcbiAgICBjID0gYTMubXVsdGlwbHkoLTMpO1xuICAgIGQgPSBhLmFkZChiLmFkZChjLmFkZChhNCkpKTtcbiAgICBjMTMgPSBuZXcgVmVjdG9yMkQoZC54LCBkLnkpO1xuXG4gICAgYSA9IGExLm11bHRpcGx5KDMpO1xuICAgIGIgPSBhMi5tdWx0aXBseSgtNik7XG4gICAgYyA9IGEzLm11bHRpcGx5KDMpO1xuICAgIGQgPSBhLmFkZChiLmFkZChjKSk7XG4gICAgYzEyID0gbmV3IFZlY3RvcjJEKGQueCwgZC55KTtcblxuICAgIGEgPSBhMS5tdWx0aXBseSgtMyk7XG4gICAgYiA9IGEyLm11bHRpcGx5KDMpO1xuICAgIGMgPSBhLmFkZChiKTtcbiAgICBjMTEgPSBuZXcgVmVjdG9yMkQoYy54LCBjLnkpO1xuXG4gICAgYzEwID0gbmV3IFZlY3RvcjJEKGExLngsIGExLnkpO1xuXG4gICAgYSA9IGIxLm11bHRpcGx5KC0xKTtcbiAgICBiID0gYjIubXVsdGlwbHkoMyk7XG4gICAgYyA9IGIzLm11bHRpcGx5KC0zKTtcbiAgICBkID0gYS5hZGQoYi5hZGQoYy5hZGQoYjQpKSk7XG4gICAgYzIzID0gbmV3IFZlY3RvcjJEKGQueCwgZC55KTtcblxuICAgIGEgPSBiMS5tdWx0aXBseSgzKTtcbiAgICBiID0gYjIubXVsdGlwbHkoLTYpO1xuICAgIGMgPSBiMy5tdWx0aXBseSgzKTtcbiAgICBkID0gYS5hZGQoYi5hZGQoYykpO1xuICAgIGMyMiA9IG5ldyBWZWN0b3IyRChkLngsIGQueSk7XG5cbiAgICBhID0gYjEubXVsdGlwbHkoLTMpO1xuICAgIGIgPSBiMi5tdWx0aXBseSgzKTtcbiAgICBjID0gYS5hZGQoYik7XG4gICAgYzIxID0gbmV3IFZlY3RvcjJEKGMueCwgYy55KTtcblxuICAgIGMyMCA9IG5ldyBWZWN0b3IyRChiMS54LCBiMS55KTtcblxuICAgIHZhciBjMTB4MiA9IGMxMC54KmMxMC54O1xuICAgIHZhciBjMTB4MyA9IGMxMC54KmMxMC54KmMxMC54O1xuICAgIHZhciBjMTB5MiA9IGMxMC55KmMxMC55O1xuICAgIHZhciBjMTB5MyA9IGMxMC55KmMxMC55KmMxMC55O1xuICAgIHZhciBjMTF4MiA9IGMxMS54KmMxMS54O1xuICAgIHZhciBjMTF4MyA9IGMxMS54KmMxMS54KmMxMS54O1xuICAgIHZhciBjMTF5MiA9IGMxMS55KmMxMS55O1xuICAgIHZhciBjMTF5MyA9IGMxMS55KmMxMS55KmMxMS55O1xuICAgIHZhciBjMTJ4MiA9IGMxMi54KmMxMi54O1xuICAgIHZhciBjMTJ4MyA9IGMxMi54KmMxMi54KmMxMi54O1xuICAgIHZhciBjMTJ5MiA9IGMxMi55KmMxMi55O1xuICAgIHZhciBjMTJ5MyA9IGMxMi55KmMxMi55KmMxMi55O1xuICAgIHZhciBjMTN4MiA9IGMxMy54KmMxMy54O1xuICAgIHZhciBjMTN4MyA9IGMxMy54KmMxMy54KmMxMy54O1xuICAgIHZhciBjMTN5MiA9IGMxMy55KmMxMy55O1xuICAgIHZhciBjMTN5MyA9IGMxMy55KmMxMy55KmMxMy55O1xuICAgIHZhciBjMjB4MiA9IGMyMC54KmMyMC54O1xuICAgIHZhciBjMjB4MyA9IGMyMC54KmMyMC54KmMyMC54O1xuICAgIHZhciBjMjB5MiA9IGMyMC55KmMyMC55O1xuICAgIHZhciBjMjB5MyA9IGMyMC55KmMyMC55KmMyMC55O1xuICAgIHZhciBjMjF4MiA9IGMyMS54KmMyMS54O1xuICAgIHZhciBjMjF4MyA9IGMyMS54KmMyMS54KmMyMS54O1xuICAgIHZhciBjMjF5MiA9IGMyMS55KmMyMS55O1xuICAgIHZhciBjMjJ4MiA9IGMyMi54KmMyMi54O1xuICAgIHZhciBjMjJ4MyA9IGMyMi54KmMyMi54KmMyMi54O1xuICAgIHZhciBjMjJ5MiA9IGMyMi55KmMyMi55O1xuICAgIHZhciBjMjN4MiA9IGMyMy54KmMyMy54O1xuICAgIHZhciBjMjN4MyA9IGMyMy54KmMyMy54KmMyMy54O1xuICAgIHZhciBjMjN5MiA9IGMyMy55KmMyMy55O1xuICAgIHZhciBjMjN5MyA9IGMyMy55KmMyMy55KmMyMy55O1xuICAgIHZhciBwb2x5ID0gbmV3IFBvbHlub21pYWwoXG4gICAgICAgIC1jMTN4MypjMjN5MyArIGMxM3kzKmMyM3gzIC0gMypjMTMueCpjMTN5MipjMjN4MipjMjMueSArXG4gICAgICAgICAgICAzKmMxM3gyKmMxMy55KmMyMy54KmMyM3kyLFxuICAgICAgICAtNipjMTMueCpjMjIueCpjMTN5MipjMjMueCpjMjMueSArIDYqYzEzeDIqYzEzLnkqYzIyLnkqYzIzLngqYzIzLnkgKyAzKmMyMi54KmMxM3kzKmMyM3gyIC1cbiAgICAgICAgICAgIDMqYzEzeDMqYzIyLnkqYzIzeTIgLSAzKmMxMy54KmMxM3kyKmMyMi55KmMyM3gyICsgMypjMTN4MipjMjIueCpjMTMueSpjMjN5MixcbiAgICAgICAgLTYqYzIxLngqYzEzLngqYzEzeTIqYzIzLngqYzIzLnkgLSA2KmMxMy54KmMyMi54KmMxM3kyKmMyMi55KmMyMy54ICsgNipjMTN4MipjMjIueCpjMTMueSpjMjIueSpjMjMueSArXG4gICAgICAgICAgICAzKmMyMS54KmMxM3kzKmMyM3gyICsgMypjMjJ4MipjMTN5MypjMjMueCArIDMqYzIxLngqYzEzeDIqYzEzLnkqYzIzeTIgLSAzKmMxMy54KmMyMS55KmMxM3kyKmMyM3gyIC1cbiAgICAgICAgICAgIDMqYzEzLngqYzIyeDIqYzEzeTIqYzIzLnkgKyBjMTN4MipjMTMueSpjMjMueCooNipjMjEueSpjMjMueSArIDMqYzIyeTIpICsgYzEzeDMqKC1jMjEueSpjMjN5MiAtXG4gICAgICAgICAgICAyKmMyMnkyKmMyMy55IC0gYzIzLnkqKDIqYzIxLnkqYzIzLnkgKyBjMjJ5MikpLFxuICAgICAgICBjMTEueCpjMTIueSpjMTMueCpjMTMueSpjMjMueCpjMjMueSAtIGMxMS55KmMxMi54KmMxMy54KmMxMy55KmMyMy54KmMyMy55ICsgNipjMjEueCpjMjIueCpjMTN5MypjMjMueCArXG4gICAgICAgICAgICAzKmMxMS54KmMxMi54KmMxMy54KmMxMy55KmMyM3kyICsgNipjMTAueCpjMTMueCpjMTN5MipjMjMueCpjMjMueSAtIDMqYzExLngqYzEyLngqYzEzeTIqYzIzLngqYzIzLnkgLVxuICAgICAgICAgICAgMypjMTEueSpjMTIueSpjMTMueCpjMTMueSpjMjN4MiAtIDYqYzEwLnkqYzEzeDIqYzEzLnkqYzIzLngqYzIzLnkgLSA2KmMyMC54KmMxMy54KmMxM3kyKmMyMy54KmMyMy55ICtcbiAgICAgICAgICAgIDMqYzExLnkqYzEyLnkqYzEzeDIqYzIzLngqYzIzLnkgLSAyKmMxMi54KmMxMnkyKmMxMy54KmMyMy54KmMyMy55IC0gNipjMjEueCpjMTMueCpjMjIueCpjMTN5MipjMjMueSAtXG4gICAgICAgICAgICA2KmMyMS54KmMxMy54KmMxM3kyKmMyMi55KmMyMy54IC0gNipjMTMueCpjMjEueSpjMjIueCpjMTN5MipjMjMueCArIDYqYzIxLngqYzEzeDIqYzEzLnkqYzIyLnkqYzIzLnkgK1xuICAgICAgICAgICAgMipjMTJ4MipjMTIueSpjMTMueSpjMjMueCpjMjMueSArIGMyMngzKmMxM3kzIC0gMypjMTAueCpjMTN5MypjMjN4MiArIDMqYzEwLnkqYzEzeDMqYzIzeTIgK1xuICAgICAgICAgICAgMypjMjAueCpjMTN5MypjMjN4MiArIGMxMnkzKmMxMy54KmMyM3gyIC0gYzEyeDMqYzEzLnkqYzIzeTIgLSAzKmMxMC54KmMxM3gyKmMxMy55KmMyM3kyICtcbiAgICAgICAgICAgIDMqYzEwLnkqYzEzLngqYzEzeTIqYzIzeDIgLSAyKmMxMS54KmMxMi55KmMxM3gyKmMyM3kyICsgYzExLngqYzEyLnkqYzEzeTIqYzIzeDIgLSBjMTEueSpjMTIueCpjMTN4MipjMjN5MiArXG4gICAgICAgICAgICAyKmMxMS55KmMxMi54KmMxM3kyKmMyM3gyICsgMypjMjAueCpjMTN4MipjMTMueSpjMjN5MiAtIGMxMi54KmMxMnkyKmMxMy55KmMyM3gyIC1cbiAgICAgICAgICAgIDMqYzIwLnkqYzEzLngqYzEzeTIqYzIzeDIgKyBjMTJ4MipjMTIueSpjMTMueCpjMjN5MiAtIDMqYzEzLngqYzIyeDIqYzEzeTIqYzIyLnkgK1xuICAgICAgICAgICAgYzEzeDIqYzEzLnkqYzIzLngqKDYqYzIwLnkqYzIzLnkgKyA2KmMyMS55KmMyMi55KSArIGMxM3gyKmMyMi54KmMxMy55Kig2KmMyMS55KmMyMy55ICsgMypjMjJ5MikgK1xuICAgICAgICAgICAgYzEzeDMqKC0yKmMyMS55KmMyMi55KmMyMy55IC0gYzIwLnkqYzIzeTIgLSBjMjIueSooMipjMjEueSpjMjMueSArIGMyMnkyKSAtIGMyMy55KigyKmMyMC55KmMyMy55ICsgMipjMjEueSpjMjIueSkpLFxuICAgICAgICA2KmMxMS54KmMxMi54KmMxMy54KmMxMy55KmMyMi55KmMyMy55ICsgYzExLngqYzEyLnkqYzEzLngqYzIyLngqYzEzLnkqYzIzLnkgKyBjMTEueCpjMTIueSpjMTMueCpjMTMueSpjMjIueSpjMjMueCAtXG4gICAgICAgICAgICBjMTEueSpjMTIueCpjMTMueCpjMjIueCpjMTMueSpjMjMueSAtIGMxMS55KmMxMi54KmMxMy54KmMxMy55KmMyMi55KmMyMy54IC0gNipjMTEueSpjMTIueSpjMTMueCpjMjIueCpjMTMueSpjMjMueCAtXG4gICAgICAgICAgICA2KmMxMC54KmMyMi54KmMxM3kzKmMyMy54ICsgNipjMjAueCpjMjIueCpjMTN5MypjMjMueCArIDYqYzEwLnkqYzEzeDMqYzIyLnkqYzIzLnkgKyAyKmMxMnkzKmMxMy54KmMyMi54KmMyMy54IC1cbiAgICAgICAgICAgIDIqYzEyeDMqYzEzLnkqYzIyLnkqYzIzLnkgKyA2KmMxMC54KmMxMy54KmMyMi54KmMxM3kyKmMyMy55ICsgNipjMTAueCpjMTMueCpjMTN5MipjMjIueSpjMjMueCArXG4gICAgICAgICAgICA2KmMxMC55KmMxMy54KmMyMi54KmMxM3kyKmMyMy54IC0gMypjMTEueCpjMTIueCpjMjIueCpjMTN5MipjMjMueSAtIDMqYzExLngqYzEyLngqYzEzeTIqYzIyLnkqYzIzLnggK1xuICAgICAgICAgICAgMipjMTEueCpjMTIueSpjMjIueCpjMTN5MipjMjMueCArIDQqYzExLnkqYzEyLngqYzIyLngqYzEzeTIqYzIzLnggLSA2KmMxMC54KmMxM3gyKmMxMy55KmMyMi55KmMyMy55IC1cbiAgICAgICAgICAgIDYqYzEwLnkqYzEzeDIqYzIyLngqYzEzLnkqYzIzLnkgLSA2KmMxMC55KmMxM3gyKmMxMy55KmMyMi55KmMyMy54IC0gNCpjMTEueCpjMTIueSpjMTN4MipjMjIueSpjMjMueSAtXG4gICAgICAgICAgICA2KmMyMC54KmMxMy54KmMyMi54KmMxM3kyKmMyMy55IC0gNipjMjAueCpjMTMueCpjMTN5MipjMjIueSpjMjMueCAtIDIqYzExLnkqYzEyLngqYzEzeDIqYzIyLnkqYzIzLnkgK1xuICAgICAgICAgICAgMypjMTEueSpjMTIueSpjMTN4MipjMjIueCpjMjMueSArIDMqYzExLnkqYzEyLnkqYzEzeDIqYzIyLnkqYzIzLnggLSAyKmMxMi54KmMxMnkyKmMxMy54KmMyMi54KmMyMy55IC1cbiAgICAgICAgICAgIDIqYzEyLngqYzEyeTIqYzEzLngqYzIyLnkqYzIzLnggLSAyKmMxMi54KmMxMnkyKmMyMi54KmMxMy55KmMyMy54IC0gNipjMjAueSpjMTMueCpjMjIueCpjMTN5MipjMjMueCAtXG4gICAgICAgICAgICA2KmMyMS54KmMxMy54KmMyMS55KmMxM3kyKmMyMy54IC0gNipjMjEueCpjMTMueCpjMjIueCpjMTN5MipjMjIueSArIDYqYzIwLngqYzEzeDIqYzEzLnkqYzIyLnkqYzIzLnkgK1xuICAgICAgICAgICAgMipjMTJ4MipjMTIueSpjMTMueCpjMjIueSpjMjMueSArIDIqYzEyeDIqYzEyLnkqYzIyLngqYzEzLnkqYzIzLnkgKyAyKmMxMngyKmMxMi55KmMxMy55KmMyMi55KmMyMy54ICtcbiAgICAgICAgICAgIDMqYzIxLngqYzIyeDIqYzEzeTMgKyAzKmMyMXgyKmMxM3kzKmMyMy54IC0gMypjMTMueCpjMjEueSpjMjJ4MipjMTN5MiAtIDMqYzIxeDIqYzEzLngqYzEzeTIqYzIzLnkgK1xuICAgICAgICAgICAgYzEzeDIqYzIyLngqYzEzLnkqKDYqYzIwLnkqYzIzLnkgKyA2KmMyMS55KmMyMi55KSArIGMxM3gyKmMxMy55KmMyMy54Kig2KmMyMC55KmMyMi55ICsgMypjMjF5MikgK1xuICAgICAgICAgICAgYzIxLngqYzEzeDIqYzEzLnkqKDYqYzIxLnkqYzIzLnkgKyAzKmMyMnkyKSArIGMxM3gzKigtMipjMjAueSpjMjIueSpjMjMueSAtIGMyMy55KigyKmMyMC55KmMyMi55ICsgYzIxeTIpIC1cbiAgICAgICAgICAgIGMyMS55KigyKmMyMS55KmMyMy55ICsgYzIyeTIpIC0gYzIyLnkqKDIqYzIwLnkqYzIzLnkgKyAyKmMyMS55KmMyMi55KSksXG4gICAgICAgIGMxMS54KmMyMS54KmMxMi55KmMxMy54KmMxMy55KmMyMy55ICsgYzExLngqYzEyLnkqYzEzLngqYzIxLnkqYzEzLnkqYzIzLnggKyBjMTEueCpjMTIueSpjMTMueCpjMjIueCpjMTMueSpjMjIueSAtXG4gICAgICAgICAgICBjMTEueSpjMTIueCpjMjEueCpjMTMueCpjMTMueSpjMjMueSAtIGMxMS55KmMxMi54KmMxMy54KmMyMS55KmMxMy55KmMyMy54IC0gYzExLnkqYzEyLngqYzEzLngqYzIyLngqYzEzLnkqYzIyLnkgLVxuICAgICAgICAgICAgNipjMTEueSpjMjEueCpjMTIueSpjMTMueCpjMTMueSpjMjMueCAtIDYqYzEwLngqYzIxLngqYzEzeTMqYzIzLnggKyA2KmMyMC54KmMyMS54KmMxM3kzKmMyMy54ICtcbiAgICAgICAgICAgIDIqYzIxLngqYzEyeTMqYzEzLngqYzIzLnggKyA2KmMxMC54KmMyMS54KmMxMy54KmMxM3kyKmMyMy55ICsgNipjMTAueCpjMTMueCpjMjEueSpjMTN5MipjMjMueCArXG4gICAgICAgICAgICA2KmMxMC54KmMxMy54KmMyMi54KmMxM3kyKmMyMi55ICsgNipjMTAueSpjMjEueCpjMTMueCpjMTN5MipjMjMueCAtIDMqYzExLngqYzEyLngqYzIxLngqYzEzeTIqYzIzLnkgLVxuICAgICAgICAgICAgMypjMTEueCpjMTIueCpjMjEueSpjMTN5MipjMjMueCAtIDMqYzExLngqYzEyLngqYzIyLngqYzEzeTIqYzIyLnkgKyAyKmMxMS54KmMyMS54KmMxMi55KmMxM3kyKmMyMy54ICtcbiAgICAgICAgICAgIDQqYzExLnkqYzEyLngqYzIxLngqYzEzeTIqYzIzLnggLSA2KmMxMC55KmMyMS54KmMxM3gyKmMxMy55KmMyMy55IC0gNipjMTAueSpjMTN4MipjMjEueSpjMTMueSpjMjMueCAtXG4gICAgICAgICAgICA2KmMxMC55KmMxM3gyKmMyMi54KmMxMy55KmMyMi55IC0gNipjMjAueCpjMjEueCpjMTMueCpjMTN5MipjMjMueSAtIDYqYzIwLngqYzEzLngqYzIxLnkqYzEzeTIqYzIzLnggLVxuICAgICAgICAgICAgNipjMjAueCpjMTMueCpjMjIueCpjMTN5MipjMjIueSArIDMqYzExLnkqYzIxLngqYzEyLnkqYzEzeDIqYzIzLnkgLSAzKmMxMS55KmMxMi55KmMxMy54KmMyMngyKmMxMy55ICtcbiAgICAgICAgICAgIDMqYzExLnkqYzEyLnkqYzEzeDIqYzIxLnkqYzIzLnggKyAzKmMxMS55KmMxMi55KmMxM3gyKmMyMi54KmMyMi55IC0gMipjMTIueCpjMjEueCpjMTJ5MipjMTMueCpjMjMueSAtXG4gICAgICAgICAgICAyKmMxMi54KmMyMS54KmMxMnkyKmMxMy55KmMyMy54IC0gMipjMTIueCpjMTJ5MipjMTMueCpjMjEueSpjMjMueCAtIDIqYzEyLngqYzEyeTIqYzEzLngqYzIyLngqYzIyLnkgLVxuICAgICAgICAgICAgNipjMjAueSpjMjEueCpjMTMueCpjMTN5MipjMjMueCAtIDYqYzIxLngqYzEzLngqYzIxLnkqYzIyLngqYzEzeTIgKyA2KmMyMC55KmMxM3gyKmMyMS55KmMxMy55KmMyMy54ICtcbiAgICAgICAgICAgIDIqYzEyeDIqYzIxLngqYzEyLnkqYzEzLnkqYzIzLnkgKyAyKmMxMngyKmMxMi55KmMyMS55KmMxMy55KmMyMy54ICsgMipjMTJ4MipjMTIueSpjMjIueCpjMTMueSpjMjIueSAtXG4gICAgICAgICAgICAzKmMxMC54KmMyMngyKmMxM3kzICsgMypjMjAueCpjMjJ4MipjMTN5MyArIDMqYzIxeDIqYzIyLngqYzEzeTMgKyBjMTJ5MypjMTMueCpjMjJ4MiArXG4gICAgICAgICAgICAzKmMxMC55KmMxMy54KmMyMngyKmMxM3kyICsgYzExLngqYzEyLnkqYzIyeDIqYzEzeTIgKyAyKmMxMS55KmMxMi54KmMyMngyKmMxM3kyIC1cbiAgICAgICAgICAgIGMxMi54KmMxMnkyKmMyMngyKmMxMy55IC0gMypjMjAueSpjMTMueCpjMjJ4MipjMTN5MiAtIDMqYzIxeDIqYzEzLngqYzEzeTIqYzIyLnkgK1xuICAgICAgICAgICAgYzEyeDIqYzEyLnkqYzEzLngqKDIqYzIxLnkqYzIzLnkgKyBjMjJ5MikgKyBjMTEueCpjMTIueCpjMTMueCpjMTMueSooNipjMjEueSpjMjMueSArIDMqYzIyeTIpICtcbiAgICAgICAgICAgIGMyMS54KmMxM3gyKmMxMy55Kig2KmMyMC55KmMyMy55ICsgNipjMjEueSpjMjIueSkgKyBjMTJ4MypjMTMueSooLTIqYzIxLnkqYzIzLnkgLSBjMjJ5MikgK1xuICAgICAgICAgICAgYzEwLnkqYzEzeDMqKDYqYzIxLnkqYzIzLnkgKyAzKmMyMnkyKSArIGMxMS55KmMxMi54KmMxM3gyKigtMipjMjEueSpjMjMueSAtIGMyMnkyKSArXG4gICAgICAgICAgICBjMTEueCpjMTIueSpjMTN4MiooLTQqYzIxLnkqYzIzLnkgLSAyKmMyMnkyKSArIGMxMC54KmMxM3gyKmMxMy55KigtNipjMjEueSpjMjMueSAtIDMqYzIyeTIpICtcbiAgICAgICAgICAgIGMxM3gyKmMyMi54KmMxMy55Kig2KmMyMC55KmMyMi55ICsgMypjMjF5MikgKyBjMjAueCpjMTN4MipjMTMueSooNipjMjEueSpjMjMueSArIDMqYzIyeTIpICtcbiAgICAgICAgICAgIGMxM3gzKigtMipjMjAueSpjMjEueSpjMjMueSAtIGMyMi55KigyKmMyMC55KmMyMi55ICsgYzIxeTIpIC0gYzIwLnkqKDIqYzIxLnkqYzIzLnkgKyBjMjJ5MikgLVxuICAgICAgICAgICAgYzIxLnkqKDIqYzIwLnkqYzIzLnkgKyAyKmMyMS55KmMyMi55KSksXG4gICAgICAgIC1jMTAueCpjMTEueCpjMTIueSpjMTMueCpjMTMueSpjMjMueSArIGMxMC54KmMxMS55KmMxMi54KmMxMy54KmMxMy55KmMyMy55ICsgNipjMTAueCpjMTEueSpjMTIueSpjMTMueCpjMTMueSpjMjMueCAtXG4gICAgICAgICAgICA2KmMxMC55KmMxMS54KmMxMi54KmMxMy54KmMxMy55KmMyMy55IC0gYzEwLnkqYzExLngqYzEyLnkqYzEzLngqYzEzLnkqYzIzLnggKyBjMTAueSpjMTEueSpjMTIueCpjMTMueCpjMTMueSpjMjMueCArXG4gICAgICAgICAgICBjMTEueCpjMTEueSpjMTIueCpjMTIueSpjMTMueCpjMjMueSAtIGMxMS54KmMxMS55KmMxMi54KmMxMi55KmMxMy55KmMyMy54ICsgYzExLngqYzIwLngqYzEyLnkqYzEzLngqYzEzLnkqYzIzLnkgK1xuICAgICAgICAgICAgYzExLngqYzIwLnkqYzEyLnkqYzEzLngqYzEzLnkqYzIzLnggKyBjMTEueCpjMjEueCpjMTIueSpjMTMueCpjMTMueSpjMjIueSArIGMxMS54KmMxMi55KmMxMy54KmMyMS55KmMyMi54KmMxMy55IC1cbiAgICAgICAgICAgIGMyMC54KmMxMS55KmMxMi54KmMxMy54KmMxMy55KmMyMy55IC0gNipjMjAueCpjMTEueSpjMTIueSpjMTMueCpjMTMueSpjMjMueCAtIGMxMS55KmMxMi54KmMyMC55KmMxMy54KmMxMy55KmMyMy54IC1cbiAgICAgICAgICAgIGMxMS55KmMxMi54KmMyMS54KmMxMy54KmMxMy55KmMyMi55IC0gYzExLnkqYzEyLngqYzEzLngqYzIxLnkqYzIyLngqYzEzLnkgLSA2KmMxMS55KmMyMS54KmMxMi55KmMxMy54KmMyMi54KmMxMy55IC1cbiAgICAgICAgICAgIDYqYzEwLngqYzIwLngqYzEzeTMqYzIzLnggLSA2KmMxMC54KmMyMS54KmMyMi54KmMxM3kzIC0gMipjMTAueCpjMTJ5MypjMTMueCpjMjMueCArIDYqYzIwLngqYzIxLngqYzIyLngqYzEzeTMgK1xuICAgICAgICAgICAgMipjMjAueCpjMTJ5MypjMTMueCpjMjMueCArIDIqYzIxLngqYzEyeTMqYzEzLngqYzIyLnggKyAyKmMxMC55KmMxMngzKmMxMy55KmMyMy55IC0gNipjMTAueCpjMTAueSpjMTMueCpjMTN5MipjMjMueCArXG4gICAgICAgICAgICAzKmMxMC54KmMxMS54KmMxMi54KmMxM3kyKmMyMy55IC0gMipjMTAueCpjMTEueCpjMTIueSpjMTN5MipjMjMueCAtIDQqYzEwLngqYzExLnkqYzEyLngqYzEzeTIqYzIzLnggK1xuICAgICAgICAgICAgMypjMTAueSpjMTEueCpjMTIueCpjMTN5MipjMjMueCArIDYqYzEwLngqYzEwLnkqYzEzeDIqYzEzLnkqYzIzLnkgKyA2KmMxMC54KmMyMC54KmMxMy54KmMxM3kyKmMyMy55IC1cbiAgICAgICAgICAgIDMqYzEwLngqYzExLnkqYzEyLnkqYzEzeDIqYzIzLnkgKyAyKmMxMC54KmMxMi54KmMxMnkyKmMxMy54KmMyMy55ICsgMipjMTAueCpjMTIueCpjMTJ5MipjMTMueSpjMjMueCArXG4gICAgICAgICAgICA2KmMxMC54KmMyMC55KmMxMy54KmMxM3kyKmMyMy54ICsgNipjMTAueCpjMjEueCpjMTMueCpjMTN5MipjMjIueSArIDYqYzEwLngqYzEzLngqYzIxLnkqYzIyLngqYzEzeTIgK1xuICAgICAgICAgICAgNCpjMTAueSpjMTEueCpjMTIueSpjMTN4MipjMjMueSArIDYqYzEwLnkqYzIwLngqYzEzLngqYzEzeTIqYzIzLnggKyAyKmMxMC55KmMxMS55KmMxMi54KmMxM3gyKmMyMy55IC1cbiAgICAgICAgICAgIDMqYzEwLnkqYzExLnkqYzEyLnkqYzEzeDIqYzIzLnggKyAyKmMxMC55KmMxMi54KmMxMnkyKmMxMy54KmMyMy54ICsgNipjMTAueSpjMjEueCpjMTMueCpjMjIueCpjMTN5MiAtXG4gICAgICAgICAgICAzKmMxMS54KmMyMC54KmMxMi54KmMxM3kyKmMyMy55ICsgMipjMTEueCpjMjAueCpjMTIueSpjMTN5MipjMjMueCArIGMxMS54KmMxMS55KmMxMnkyKmMxMy54KmMyMy54IC1cbiAgICAgICAgICAgIDMqYzExLngqYzEyLngqYzIwLnkqYzEzeTIqYzIzLnggLSAzKmMxMS54KmMxMi54KmMyMS54KmMxM3kyKmMyMi55IC0gMypjMTEueCpjMTIueCpjMjEueSpjMjIueCpjMTN5MiArXG4gICAgICAgICAgICAyKmMxMS54KmMyMS54KmMxMi55KmMyMi54KmMxM3kyICsgNCpjMjAueCpjMTEueSpjMTIueCpjMTN5MipjMjMueCArIDQqYzExLnkqYzEyLngqYzIxLngqYzIyLngqYzEzeTIgLVxuICAgICAgICAgICAgMipjMTAueCpjMTJ4MipjMTIueSpjMTMueSpjMjMueSAtIDYqYzEwLnkqYzIwLngqYzEzeDIqYzEzLnkqYzIzLnkgLSA2KmMxMC55KmMyMC55KmMxM3gyKmMxMy55KmMyMy54IC1cbiAgICAgICAgICAgIDYqYzEwLnkqYzIxLngqYzEzeDIqYzEzLnkqYzIyLnkgLSAyKmMxMC55KmMxMngyKmMxMi55KmMxMy54KmMyMy55IC0gMipjMTAueSpjMTJ4MipjMTIueSpjMTMueSpjMjMueCAtXG4gICAgICAgICAgICA2KmMxMC55KmMxM3gyKmMyMS55KmMyMi54KmMxMy55IC0gYzExLngqYzExLnkqYzEyeDIqYzEzLnkqYzIzLnkgLSAyKmMxMS54KmMxMXkyKmMxMy54KmMxMy55KmMyMy54ICtcbiAgICAgICAgICAgIDMqYzIwLngqYzExLnkqYzEyLnkqYzEzeDIqYzIzLnkgLSAyKmMyMC54KmMxMi54KmMxMnkyKmMxMy54KmMyMy55IC0gMipjMjAueCpjMTIueCpjMTJ5MipjMTMueSpjMjMueCAtXG4gICAgICAgICAgICA2KmMyMC54KmMyMC55KmMxMy54KmMxM3kyKmMyMy54IC0gNipjMjAueCpjMjEueCpjMTMueCpjMTN5MipjMjIueSAtIDYqYzIwLngqYzEzLngqYzIxLnkqYzIyLngqYzEzeTIgK1xuICAgICAgICAgICAgMypjMTEueSpjMjAueSpjMTIueSpjMTN4MipjMjMueCArIDMqYzExLnkqYzIxLngqYzEyLnkqYzEzeDIqYzIyLnkgKyAzKmMxMS55KmMxMi55KmMxM3gyKmMyMS55KmMyMi54IC1cbiAgICAgICAgICAgIDIqYzEyLngqYzIwLnkqYzEyeTIqYzEzLngqYzIzLnggLSAyKmMxMi54KmMyMS54KmMxMnkyKmMxMy54KmMyMi55IC0gMipjMTIueCpjMjEueCpjMTJ5MipjMjIueCpjMTMueSAtXG4gICAgICAgICAgICAyKmMxMi54KmMxMnkyKmMxMy54KmMyMS55KmMyMi54IC0gNipjMjAueSpjMjEueCpjMTMueCpjMjIueCpjMTN5MiAtIGMxMXkyKmMxMi54KmMxMi55KmMxMy54KmMyMy54ICtcbiAgICAgICAgICAgIDIqYzIwLngqYzEyeDIqYzEyLnkqYzEzLnkqYzIzLnkgKyA2KmMyMC55KmMxM3gyKmMyMS55KmMyMi54KmMxMy55ICsgMipjMTF4MipjMTEueSpjMTMueCpjMTMueSpjMjMueSArXG4gICAgICAgICAgICBjMTF4MipjMTIueCpjMTIueSpjMTMueSpjMjMueSArIDIqYzEyeDIqYzIwLnkqYzEyLnkqYzEzLnkqYzIzLnggKyAyKmMxMngyKmMyMS54KmMxMi55KmMxMy55KmMyMi55ICtcbiAgICAgICAgICAgIDIqYzEyeDIqYzEyLnkqYzIxLnkqYzIyLngqYzEzLnkgKyBjMjF4MypjMTN5MyArIDMqYzEweDIqYzEzeTMqYzIzLnggLSAzKmMxMHkyKmMxM3gzKmMyMy55ICtcbiAgICAgICAgICAgIDMqYzIweDIqYzEzeTMqYzIzLnggKyBjMTF5MypjMTN4MipjMjMueCAtIGMxMXgzKmMxM3kyKmMyMy55IC0gYzExLngqYzExeTIqYzEzeDIqYzIzLnkgK1xuICAgICAgICAgICAgYzExeDIqYzExLnkqYzEzeTIqYzIzLnggLSAzKmMxMHgyKmMxMy54KmMxM3kyKmMyMy55ICsgMypjMTB5MipjMTN4MipjMTMueSpjMjMueCAtIGMxMXgyKmMxMnkyKmMxMy54KmMyMy55ICtcbiAgICAgICAgICAgIGMxMXkyKmMxMngyKmMxMy55KmMyMy54IC0gMypjMjF4MipjMTMueCpjMjEueSpjMTN5MiAtIDMqYzIweDIqYzEzLngqYzEzeTIqYzIzLnkgKyAzKmMyMHkyKmMxM3gyKmMxMy55KmMyMy54ICtcbiAgICAgICAgICAgIGMxMS54KmMxMi54KmMxMy54KmMxMy55Kig2KmMyMC55KmMyMy55ICsgNipjMjEueSpjMjIueSkgKyBjMTJ4MypjMTMueSooLTIqYzIwLnkqYzIzLnkgLSAyKmMyMS55KmMyMi55KSArXG4gICAgICAgICAgICBjMTAueSpjMTN4MyooNipjMjAueSpjMjMueSArIDYqYzIxLnkqYzIyLnkpICsgYzExLnkqYzEyLngqYzEzeDIqKC0yKmMyMC55KmMyMy55IC0gMipjMjEueSpjMjIueSkgK1xuICAgICAgICAgICAgYzEyeDIqYzEyLnkqYzEzLngqKDIqYzIwLnkqYzIzLnkgKyAyKmMyMS55KmMyMi55KSArIGMxMS54KmMxMi55KmMxM3gyKigtNCpjMjAueSpjMjMueSAtIDQqYzIxLnkqYzIyLnkpICtcbiAgICAgICAgICAgIGMxMC54KmMxM3gyKmMxMy55KigtNipjMjAueSpjMjMueSAtIDYqYzIxLnkqYzIyLnkpICsgYzIwLngqYzEzeDIqYzEzLnkqKDYqYzIwLnkqYzIzLnkgKyA2KmMyMS55KmMyMi55KSArXG4gICAgICAgICAgICBjMjEueCpjMTN4MipjMTMueSooNipjMjAueSpjMjIueSArIDMqYzIxeTIpICsgYzEzeDMqKC0yKmMyMC55KmMyMS55KmMyMi55IC0gYzIweTIqYzIzLnkgLVxuICAgICAgICAgICAgYzIxLnkqKDIqYzIwLnkqYzIyLnkgKyBjMjF5MikgLSBjMjAueSooMipjMjAueSpjMjMueSArIDIqYzIxLnkqYzIyLnkpKSxcbiAgICAgICAgLWMxMC54KmMxMS54KmMxMi55KmMxMy54KmMxMy55KmMyMi55ICsgYzEwLngqYzExLnkqYzEyLngqYzEzLngqYzEzLnkqYzIyLnkgKyA2KmMxMC54KmMxMS55KmMxMi55KmMxMy54KmMyMi54KmMxMy55IC1cbiAgICAgICAgICAgIDYqYzEwLnkqYzExLngqYzEyLngqYzEzLngqYzEzLnkqYzIyLnkgLSBjMTAueSpjMTEueCpjMTIueSpjMTMueCpjMjIueCpjMTMueSArIGMxMC55KmMxMS55KmMxMi54KmMxMy54KmMyMi54KmMxMy55ICtcbiAgICAgICAgICAgIGMxMS54KmMxMS55KmMxMi54KmMxMi55KmMxMy54KmMyMi55IC0gYzExLngqYzExLnkqYzEyLngqYzEyLnkqYzIyLngqYzEzLnkgKyBjMTEueCpjMjAueCpjMTIueSpjMTMueCpjMTMueSpjMjIueSArXG4gICAgICAgICAgICBjMTEueCpjMjAueSpjMTIueSpjMTMueCpjMjIueCpjMTMueSArIGMxMS54KmMyMS54KmMxMi55KmMxMy54KmMyMS55KmMxMy55IC0gYzIwLngqYzExLnkqYzEyLngqYzEzLngqYzEzLnkqYzIyLnkgLVxuICAgICAgICAgICAgNipjMjAueCpjMTEueSpjMTIueSpjMTMueCpjMjIueCpjMTMueSAtIGMxMS55KmMxMi54KmMyMC55KmMxMy54KmMyMi54KmMxMy55IC0gYzExLnkqYzEyLngqYzIxLngqYzEzLngqYzIxLnkqYzEzLnkgLVxuICAgICAgICAgICAgNipjMTAueCpjMjAueCpjMjIueCpjMTN5MyAtIDIqYzEwLngqYzEyeTMqYzEzLngqYzIyLnggKyAyKmMyMC54KmMxMnkzKmMxMy54KmMyMi54ICsgMipjMTAueSpjMTJ4MypjMTMueSpjMjIueSAtXG4gICAgICAgICAgICA2KmMxMC54KmMxMC55KmMxMy54KmMyMi54KmMxM3kyICsgMypjMTAueCpjMTEueCpjMTIueCpjMTN5MipjMjIueSAtIDIqYzEwLngqYzExLngqYzEyLnkqYzIyLngqYzEzeTIgLVxuICAgICAgICAgICAgNCpjMTAueCpjMTEueSpjMTIueCpjMjIueCpjMTN5MiArIDMqYzEwLnkqYzExLngqYzEyLngqYzIyLngqYzEzeTIgKyA2KmMxMC54KmMxMC55KmMxM3gyKmMxMy55KmMyMi55ICtcbiAgICAgICAgICAgIDYqYzEwLngqYzIwLngqYzEzLngqYzEzeTIqYzIyLnkgLSAzKmMxMC54KmMxMS55KmMxMi55KmMxM3gyKmMyMi55ICsgMipjMTAueCpjMTIueCpjMTJ5MipjMTMueCpjMjIueSArXG4gICAgICAgICAgICAyKmMxMC54KmMxMi54KmMxMnkyKmMyMi54KmMxMy55ICsgNipjMTAueCpjMjAueSpjMTMueCpjMjIueCpjMTN5MiArIDYqYzEwLngqYzIxLngqYzEzLngqYzIxLnkqYzEzeTIgK1xuICAgICAgICAgICAgNCpjMTAueSpjMTEueCpjMTIueSpjMTN4MipjMjIueSArIDYqYzEwLnkqYzIwLngqYzEzLngqYzIyLngqYzEzeTIgKyAyKmMxMC55KmMxMS55KmMxMi54KmMxM3gyKmMyMi55IC1cbiAgICAgICAgICAgIDMqYzEwLnkqYzExLnkqYzEyLnkqYzEzeDIqYzIyLnggKyAyKmMxMC55KmMxMi54KmMxMnkyKmMxMy54KmMyMi54IC0gMypjMTEueCpjMjAueCpjMTIueCpjMTN5MipjMjIueSArXG4gICAgICAgICAgICAyKmMxMS54KmMyMC54KmMxMi55KmMyMi54KmMxM3kyICsgYzExLngqYzExLnkqYzEyeTIqYzEzLngqYzIyLnggLSAzKmMxMS54KmMxMi54KmMyMC55KmMyMi54KmMxM3kyIC1cbiAgICAgICAgICAgIDMqYzExLngqYzEyLngqYzIxLngqYzIxLnkqYzEzeTIgKyA0KmMyMC54KmMxMS55KmMxMi54KmMyMi54KmMxM3kyIC0gMipjMTAueCpjMTJ4MipjMTIueSpjMTMueSpjMjIueSAtXG4gICAgICAgICAgICA2KmMxMC55KmMyMC54KmMxM3gyKmMxMy55KmMyMi55IC0gNipjMTAueSpjMjAueSpjMTN4MipjMjIueCpjMTMueSAtIDYqYzEwLnkqYzIxLngqYzEzeDIqYzIxLnkqYzEzLnkgLVxuICAgICAgICAgICAgMipjMTAueSpjMTJ4MipjMTIueSpjMTMueCpjMjIueSAtIDIqYzEwLnkqYzEyeDIqYzEyLnkqYzIyLngqYzEzLnkgLSBjMTEueCpjMTEueSpjMTJ4MipjMTMueSpjMjIueSAtXG4gICAgICAgICAgICAyKmMxMS54KmMxMXkyKmMxMy54KmMyMi54KmMxMy55ICsgMypjMjAueCpjMTEueSpjMTIueSpjMTN4MipjMjIueSAtIDIqYzIwLngqYzEyLngqYzEyeTIqYzEzLngqYzIyLnkgLVxuICAgICAgICAgICAgMipjMjAueCpjMTIueCpjMTJ5MipjMjIueCpjMTMueSAtIDYqYzIwLngqYzIwLnkqYzEzLngqYzIyLngqYzEzeTIgLSA2KmMyMC54KmMyMS54KmMxMy54KmMyMS55KmMxM3kyICtcbiAgICAgICAgICAgIDMqYzExLnkqYzIwLnkqYzEyLnkqYzEzeDIqYzIyLnggKyAzKmMxMS55KmMyMS54KmMxMi55KmMxM3gyKmMyMS55IC0gMipjMTIueCpjMjAueSpjMTJ5MipjMTMueCpjMjIueCAtXG4gICAgICAgICAgICAyKmMxMi54KmMyMS54KmMxMnkyKmMxMy54KmMyMS55IC0gYzExeTIqYzEyLngqYzEyLnkqYzEzLngqYzIyLnggKyAyKmMyMC54KmMxMngyKmMxMi55KmMxMy55KmMyMi55IC1cbiAgICAgICAgICAgIDMqYzExLnkqYzIxeDIqYzEyLnkqYzEzLngqYzEzLnkgKyA2KmMyMC55KmMyMS54KmMxM3gyKmMyMS55KmMxMy55ICsgMipjMTF4MipjMTEueSpjMTMueCpjMTMueSpjMjIueSArXG4gICAgICAgICAgICBjMTF4MipjMTIueCpjMTIueSpjMTMueSpjMjIueSArIDIqYzEyeDIqYzIwLnkqYzEyLnkqYzIyLngqYzEzLnkgKyAyKmMxMngyKmMyMS54KmMxMi55KmMyMS55KmMxMy55IC1cbiAgICAgICAgICAgIDMqYzEwLngqYzIxeDIqYzEzeTMgKyAzKmMyMC54KmMyMXgyKmMxM3kzICsgMypjMTB4MipjMjIueCpjMTN5MyAtIDMqYzEweTIqYzEzeDMqYzIyLnkgKyAzKmMyMHgyKmMyMi54KmMxM3kzICtcbiAgICAgICAgICAgIGMyMXgyKmMxMnkzKmMxMy54ICsgYzExeTMqYzEzeDIqYzIyLnggLSBjMTF4MypjMTN5MipjMjIueSArIDMqYzEwLnkqYzIxeDIqYzEzLngqYzEzeTIgLVxuICAgICAgICAgICAgYzExLngqYzExeTIqYzEzeDIqYzIyLnkgKyBjMTEueCpjMjF4MipjMTIueSpjMTN5MiArIDIqYzExLnkqYzEyLngqYzIxeDIqYzEzeTIgKyBjMTF4MipjMTEueSpjMjIueCpjMTN5MiAtXG4gICAgICAgICAgICBjMTIueCpjMjF4MipjMTJ5MipjMTMueSAtIDMqYzIwLnkqYzIxeDIqYzEzLngqYzEzeTIgLSAzKmMxMHgyKmMxMy54KmMxM3kyKmMyMi55ICsgMypjMTB5MipjMTN4MipjMjIueCpjMTMueSAtXG4gICAgICAgICAgICBjMTF4MipjMTJ5MipjMTMueCpjMjIueSArIGMxMXkyKmMxMngyKmMyMi54KmMxMy55IC0gMypjMjB4MipjMTMueCpjMTN5MipjMjIueSArIDMqYzIweTIqYzEzeDIqYzIyLngqYzEzLnkgK1xuICAgICAgICAgICAgYzEyeDIqYzEyLnkqYzEzLngqKDIqYzIwLnkqYzIyLnkgKyBjMjF5MikgKyBjMTEueCpjMTIueCpjMTMueCpjMTMueSooNipjMjAueSpjMjIueSArIDMqYzIxeTIpICtcbiAgICAgICAgICAgIGMxMngzKmMxMy55KigtMipjMjAueSpjMjIueSAtIGMyMXkyKSArIGMxMC55KmMxM3gzKig2KmMyMC55KmMyMi55ICsgMypjMjF5MikgK1xuICAgICAgICAgICAgYzExLnkqYzEyLngqYzEzeDIqKC0yKmMyMC55KmMyMi55IC0gYzIxeTIpICsgYzExLngqYzEyLnkqYzEzeDIqKC00KmMyMC55KmMyMi55IC0gMipjMjF5MikgK1xuICAgICAgICAgICAgYzEwLngqYzEzeDIqYzEzLnkqKC02KmMyMC55KmMyMi55IC0gMypjMjF5MikgKyBjMjAueCpjMTN4MipjMTMueSooNipjMjAueSpjMjIueSArIDMqYzIxeTIpICtcbiAgICAgICAgICAgIGMxM3gzKigtMipjMjAueSpjMjF5MiAtIGMyMHkyKmMyMi55IC0gYzIwLnkqKDIqYzIwLnkqYzIyLnkgKyBjMjF5MikpLFxuICAgICAgICAtYzEwLngqYzExLngqYzEyLnkqYzEzLngqYzIxLnkqYzEzLnkgKyBjMTAueCpjMTEueSpjMTIueCpjMTMueCpjMjEueSpjMTMueSArIDYqYzEwLngqYzExLnkqYzIxLngqYzEyLnkqYzEzLngqYzEzLnkgLVxuICAgICAgICAgICAgNipjMTAueSpjMTEueCpjMTIueCpjMTMueCpjMjEueSpjMTMueSAtIGMxMC55KmMxMS54KmMyMS54KmMxMi55KmMxMy54KmMxMy55ICsgYzEwLnkqYzExLnkqYzEyLngqYzIxLngqYzEzLngqYzEzLnkgLVxuICAgICAgICAgICAgYzExLngqYzExLnkqYzEyLngqYzIxLngqYzEyLnkqYzEzLnkgKyBjMTEueCpjMTEueSpjMTIueCpjMTIueSpjMTMueCpjMjEueSArIGMxMS54KmMyMC54KmMxMi55KmMxMy54KmMyMS55KmMxMy55ICtcbiAgICAgICAgICAgIDYqYzExLngqYzEyLngqYzIwLnkqYzEzLngqYzIxLnkqYzEzLnkgKyBjMTEueCpjMjAueSpjMjEueCpjMTIueSpjMTMueCpjMTMueSAtIGMyMC54KmMxMS55KmMxMi54KmMxMy54KmMyMS55KmMxMy55IC1cbiAgICAgICAgICAgIDYqYzIwLngqYzExLnkqYzIxLngqYzEyLnkqYzEzLngqYzEzLnkgLSBjMTEueSpjMTIueCpjMjAueSpjMjEueCpjMTMueCpjMTMueSAtIDYqYzEwLngqYzIwLngqYzIxLngqYzEzeTMgLVxuICAgICAgICAgICAgMipjMTAueCpjMjEueCpjMTJ5MypjMTMueCArIDYqYzEwLnkqYzIwLnkqYzEzeDMqYzIxLnkgKyAyKmMyMC54KmMyMS54KmMxMnkzKmMxMy54ICsgMipjMTAueSpjMTJ4MypjMjEueSpjMTMueSAtXG4gICAgICAgICAgICAyKmMxMngzKmMyMC55KmMyMS55KmMxMy55IC0gNipjMTAueCpjMTAueSpjMjEueCpjMTMueCpjMTN5MiArIDMqYzEwLngqYzExLngqYzEyLngqYzIxLnkqYzEzeTIgLVxuICAgICAgICAgICAgMipjMTAueCpjMTEueCpjMjEueCpjMTIueSpjMTN5MiAtIDQqYzEwLngqYzExLnkqYzEyLngqYzIxLngqYzEzeTIgKyAzKmMxMC55KmMxMS54KmMxMi54KmMyMS54KmMxM3kyICtcbiAgICAgICAgICAgIDYqYzEwLngqYzEwLnkqYzEzeDIqYzIxLnkqYzEzLnkgKyA2KmMxMC54KmMyMC54KmMxMy54KmMyMS55KmMxM3kyIC0gMypjMTAueCpjMTEueSpjMTIueSpjMTN4MipjMjEueSArXG4gICAgICAgICAgICAyKmMxMC54KmMxMi54KmMyMS54KmMxMnkyKmMxMy55ICsgMipjMTAueCpjMTIueCpjMTJ5MipjMTMueCpjMjEueSArIDYqYzEwLngqYzIwLnkqYzIxLngqYzEzLngqYzEzeTIgK1xuICAgICAgICAgICAgNCpjMTAueSpjMTEueCpjMTIueSpjMTN4MipjMjEueSArIDYqYzEwLnkqYzIwLngqYzIxLngqYzEzLngqYzEzeTIgKyAyKmMxMC55KmMxMS55KmMxMi54KmMxM3gyKmMyMS55IC1cbiAgICAgICAgICAgIDMqYzEwLnkqYzExLnkqYzIxLngqYzEyLnkqYzEzeDIgKyAyKmMxMC55KmMxMi54KmMyMS54KmMxMnkyKmMxMy54IC0gMypjMTEueCpjMjAueCpjMTIueCpjMjEueSpjMTN5MiArXG4gICAgICAgICAgICAyKmMxMS54KmMyMC54KmMyMS54KmMxMi55KmMxM3kyICsgYzExLngqYzExLnkqYzIxLngqYzEyeTIqYzEzLnggLSAzKmMxMS54KmMxMi54KmMyMC55KmMyMS54KmMxM3kyICtcbiAgICAgICAgICAgIDQqYzIwLngqYzExLnkqYzEyLngqYzIxLngqYzEzeTIgLSA2KmMxMC54KmMyMC55KmMxM3gyKmMyMS55KmMxMy55IC0gMipjMTAueCpjMTJ4MipjMTIueSpjMjEueSpjMTMueSAtXG4gICAgICAgICAgICA2KmMxMC55KmMyMC54KmMxM3gyKmMyMS55KmMxMy55IC0gNipjMTAueSpjMjAueSpjMjEueCpjMTN4MipjMTMueSAtIDIqYzEwLnkqYzEyeDIqYzIxLngqYzEyLnkqYzEzLnkgLVxuICAgICAgICAgICAgMipjMTAueSpjMTJ4MipjMTIueSpjMTMueCpjMjEueSAtIGMxMS54KmMxMS55KmMxMngyKmMyMS55KmMxMy55IC0gNCpjMTEueCpjMjAueSpjMTIueSpjMTN4MipjMjEueSAtXG4gICAgICAgICAgICAyKmMxMS54KmMxMXkyKmMyMS54KmMxMy54KmMxMy55ICsgMypjMjAueCpjMTEueSpjMTIueSpjMTN4MipjMjEueSAtIDIqYzIwLngqYzEyLngqYzIxLngqYzEyeTIqYzEzLnkgLVxuICAgICAgICAgICAgMipjMjAueCpjMTIueCpjMTJ5MipjMTMueCpjMjEueSAtIDYqYzIwLngqYzIwLnkqYzIxLngqYzEzLngqYzEzeTIgLSAyKmMxMS55KmMxMi54KmMyMC55KmMxM3gyKmMyMS55ICtcbiAgICAgICAgICAgIDMqYzExLnkqYzIwLnkqYzIxLngqYzEyLnkqYzEzeDIgLSAyKmMxMi54KmMyMC55KmMyMS54KmMxMnkyKmMxMy54IC0gYzExeTIqYzEyLngqYzIxLngqYzEyLnkqYzEzLnggK1xuICAgICAgICAgICAgNipjMjAueCpjMjAueSpjMTN4MipjMjEueSpjMTMueSArIDIqYzIwLngqYzEyeDIqYzEyLnkqYzIxLnkqYzEzLnkgKyAyKmMxMXgyKmMxMS55KmMxMy54KmMyMS55KmMxMy55ICtcbiAgICAgICAgICAgIGMxMXgyKmMxMi54KmMxMi55KmMyMS55KmMxMy55ICsgMipjMTJ4MipjMjAueSpjMjEueCpjMTIueSpjMTMueSArIDIqYzEyeDIqYzIwLnkqYzEyLnkqYzEzLngqYzIxLnkgK1xuICAgICAgICAgICAgMypjMTB4MipjMjEueCpjMTN5MyAtIDMqYzEweTIqYzEzeDMqYzIxLnkgKyAzKmMyMHgyKmMyMS54KmMxM3kzICsgYzExeTMqYzIxLngqYzEzeDIgLSBjMTF4MypjMjEueSpjMTN5MiAtXG4gICAgICAgICAgICAzKmMyMHkyKmMxM3gzKmMyMS55IC0gYzExLngqYzExeTIqYzEzeDIqYzIxLnkgKyBjMTF4MipjMTEueSpjMjEueCpjMTN5MiAtIDMqYzEweDIqYzEzLngqYzIxLnkqYzEzeTIgK1xuICAgICAgICAgICAgMypjMTB5MipjMjEueCpjMTN4MipjMTMueSAtIGMxMXgyKmMxMnkyKmMxMy54KmMyMS55ICsgYzExeTIqYzEyeDIqYzIxLngqYzEzLnkgLSAzKmMyMHgyKmMxMy54KmMyMS55KmMxM3kyICtcbiAgICAgICAgICAgIDMqYzIweTIqYzIxLngqYzEzeDIqYzEzLnksXG4gICAgICAgIGMxMC54KmMxMC55KmMxMS54KmMxMi55KmMxMy54KmMxMy55IC0gYzEwLngqYzEwLnkqYzExLnkqYzEyLngqYzEzLngqYzEzLnkgKyBjMTAueCpjMTEueCpjMTEueSpjMTIueCpjMTIueSpjMTMueSAtXG4gICAgICAgICAgICBjMTAueSpjMTEueCpjMTEueSpjMTIueCpjMTIueSpjMTMueCAtIGMxMC54KmMxMS54KmMyMC55KmMxMi55KmMxMy54KmMxMy55ICsgNipjMTAueCpjMjAueCpjMTEueSpjMTIueSpjMTMueCpjMTMueSArXG4gICAgICAgICAgICBjMTAueCpjMTEueSpjMTIueCpjMjAueSpjMTMueCpjMTMueSAtIGMxMC55KmMxMS54KmMyMC54KmMxMi55KmMxMy54KmMxMy55IC0gNipjMTAueSpjMTEueCpjMTIueCpjMjAueSpjMTMueCpjMTMueSArXG4gICAgICAgICAgICBjMTAueSpjMjAueCpjMTEueSpjMTIueCpjMTMueCpjMTMueSAtIGMxMS54KmMyMC54KmMxMS55KmMxMi54KmMxMi55KmMxMy55ICsgYzExLngqYzExLnkqYzEyLngqYzIwLnkqYzEyLnkqYzEzLnggK1xuICAgICAgICAgICAgYzExLngqYzIwLngqYzIwLnkqYzEyLnkqYzEzLngqYzEzLnkgLSBjMjAueCpjMTEueSpjMTIueCpjMjAueSpjMTMueCpjMTMueSAtIDIqYzEwLngqYzIwLngqYzEyeTMqYzEzLnggK1xuICAgICAgICAgICAgMipjMTAueSpjMTJ4MypjMjAueSpjMTMueSAtIDMqYzEwLngqYzEwLnkqYzExLngqYzEyLngqYzEzeTIgLSA2KmMxMC54KmMxMC55KmMyMC54KmMxMy54KmMxM3kyICtcbiAgICAgICAgICAgIDMqYzEwLngqYzEwLnkqYzExLnkqYzEyLnkqYzEzeDIgLSAyKmMxMC54KmMxMC55KmMxMi54KmMxMnkyKmMxMy54IC0gMipjMTAueCpjMTEueCpjMjAueCpjMTIueSpjMTN5MiAtXG4gICAgICAgICAgICBjMTAueCpjMTEueCpjMTEueSpjMTJ5MipjMTMueCArIDMqYzEwLngqYzExLngqYzEyLngqYzIwLnkqYzEzeTIgLSA0KmMxMC54KmMyMC54KmMxMS55KmMxMi54KmMxM3kyICtcbiAgICAgICAgICAgIDMqYzEwLnkqYzExLngqYzIwLngqYzEyLngqYzEzeTIgKyA2KmMxMC54KmMxMC55KmMyMC55KmMxM3gyKmMxMy55ICsgMipjMTAueCpjMTAueSpjMTJ4MipjMTIueSpjMTMueSArXG4gICAgICAgICAgICAyKmMxMC54KmMxMS54KmMxMXkyKmMxMy54KmMxMy55ICsgMipjMTAueCpjMjAueCpjMTIueCpjMTJ5MipjMTMueSArIDYqYzEwLngqYzIwLngqYzIwLnkqYzEzLngqYzEzeTIgLVxuICAgICAgICAgICAgMypjMTAueCpjMTEueSpjMjAueSpjMTIueSpjMTN4MiArIDIqYzEwLngqYzEyLngqYzIwLnkqYzEyeTIqYzEzLnggKyBjMTAueCpjMTF5MipjMTIueCpjMTIueSpjMTMueCArXG4gICAgICAgICAgICBjMTAueSpjMTEueCpjMTEueSpjMTJ4MipjMTMueSArIDQqYzEwLnkqYzExLngqYzIwLnkqYzEyLnkqYzEzeDIgLSAzKmMxMC55KmMyMC54KmMxMS55KmMxMi55KmMxM3gyICtcbiAgICAgICAgICAgIDIqYzEwLnkqYzIwLngqYzEyLngqYzEyeTIqYzEzLnggKyAyKmMxMC55KmMxMS55KmMxMi54KmMyMC55KmMxM3gyICsgYzExLngqYzIwLngqYzExLnkqYzEyeTIqYzEzLnggLVxuICAgICAgICAgICAgMypjMTEueCpjMjAueCpjMTIueCpjMjAueSpjMTN5MiAtIDIqYzEwLngqYzEyeDIqYzIwLnkqYzEyLnkqYzEzLnkgLSA2KmMxMC55KmMyMC54KmMyMC55KmMxM3gyKmMxMy55IC1cbiAgICAgICAgICAgIDIqYzEwLnkqYzIwLngqYzEyeDIqYzEyLnkqYzEzLnkgLSAyKmMxMC55KmMxMXgyKmMxMS55KmMxMy54KmMxMy55IC0gYzEwLnkqYzExeDIqYzEyLngqYzEyLnkqYzEzLnkgLVxuICAgICAgICAgICAgMipjMTAueSpjMTJ4MipjMjAueSpjMTIueSpjMTMueCAtIDIqYzExLngqYzIwLngqYzExeTIqYzEzLngqYzEzLnkgLSBjMTEueCpjMTEueSpjMTJ4MipjMjAueSpjMTMueSArXG4gICAgICAgICAgICAzKmMyMC54KmMxMS55KmMyMC55KmMxMi55KmMxM3gyIC0gMipjMjAueCpjMTIueCpjMjAueSpjMTJ5MipjMTMueCAtIGMyMC54KmMxMXkyKmMxMi54KmMxMi55KmMxMy54ICtcbiAgICAgICAgICAgIDMqYzEweTIqYzExLngqYzEyLngqYzEzLngqYzEzLnkgKyAzKmMxMS54KmMxMi54KmMyMHkyKmMxMy54KmMxMy55ICsgMipjMjAueCpjMTJ4MipjMjAueSpjMTIueSpjMTMueSAtXG4gICAgICAgICAgICAzKmMxMHgyKmMxMS55KmMxMi55KmMxMy54KmMxMy55ICsgMipjMTF4MipjMTEueSpjMjAueSpjMTMueCpjMTMueSArIGMxMXgyKmMxMi54KmMyMC55KmMxMi55KmMxMy55IC1cbiAgICAgICAgICAgIDMqYzIweDIqYzExLnkqYzEyLnkqYzEzLngqYzEzLnkgLSBjMTB4MypjMTN5MyArIGMxMHkzKmMxM3gzICsgYzIweDMqYzEzeTMgLSBjMjB5MypjMTN4MyAtXG4gICAgICAgICAgICAzKmMxMC54KmMyMHgyKmMxM3kzIC0gYzEwLngqYzExeTMqYzEzeDIgKyAzKmMxMHgyKmMyMC54KmMxM3kzICsgYzEwLnkqYzExeDMqYzEzeTIgK1xuICAgICAgICAgICAgMypjMTAueSpjMjB5MipjMTN4MyArIGMyMC54KmMxMXkzKmMxM3gyICsgYzEweDIqYzEyeTMqYzEzLnggLSAzKmMxMHkyKmMyMC55KmMxM3gzIC0gYzEweTIqYzEyeDMqYzEzLnkgK1xuICAgICAgICAgICAgYzIweDIqYzEyeTMqYzEzLnggLSBjMTF4MypjMjAueSpjMTN5MiAtIGMxMngzKmMyMHkyKmMxMy55IC0gYzEwLngqYzExeDIqYzExLnkqYzEzeTIgK1xuICAgICAgICAgICAgYzEwLnkqYzExLngqYzExeTIqYzEzeDIgLSAzKmMxMC54KmMxMHkyKmMxM3gyKmMxMy55IC0gYzEwLngqYzExeTIqYzEyeDIqYzEzLnkgKyBjMTAueSpjMTF4MipjMTJ5MipjMTMueCAtXG4gICAgICAgICAgICBjMTEueCpjMTF5MipjMjAueSpjMTN4MiArIDMqYzEweDIqYzEwLnkqYzEzLngqYzEzeTIgKyBjMTB4MipjMTEueCpjMTIueSpjMTN5MiArXG4gICAgICAgICAgICAyKmMxMHgyKmMxMS55KmMxMi54KmMxM3kyIC0gMipjMTB5MipjMTEueCpjMTIueSpjMTN4MiAtIGMxMHkyKmMxMS55KmMxMi54KmMxM3gyICsgYzExeDIqYzIwLngqYzExLnkqYzEzeTIgLVxuICAgICAgICAgICAgMypjMTAueCpjMjB5MipjMTN4MipjMTMueSArIDMqYzEwLnkqYzIweDIqYzEzLngqYzEzeTIgKyBjMTEueCpjMjB4MipjMTIueSpjMTN5MiAtIDIqYzExLngqYzIweTIqYzEyLnkqYzEzeDIgK1xuICAgICAgICAgICAgYzIwLngqYzExeTIqYzEyeDIqYzEzLnkgLSBjMTEueSpjMTIueCpjMjB5MipjMTN4MiAtIGMxMHgyKmMxMi54KmMxMnkyKmMxMy55IC0gMypjMTB4MipjMjAueSpjMTMueCpjMTN5MiArXG4gICAgICAgICAgICAzKmMxMHkyKmMyMC54KmMxM3gyKmMxMy55ICsgYzEweTIqYzEyeDIqYzEyLnkqYzEzLnggLSBjMTF4MipjMjAueSpjMTJ5MipjMTMueCArIDIqYzIweDIqYzExLnkqYzEyLngqYzEzeTIgK1xuICAgICAgICAgICAgMypjMjAueCpjMjB5MipjMTN4MipjMTMueSAtIGMyMHgyKmMxMi54KmMxMnkyKmMxMy55IC0gMypjMjB4MipjMjAueSpjMTMueCpjMTN5MiArIGMxMngyKmMyMHkyKmMxMi55KmMxMy54XG4gICAgKTtcbiAgICB2YXIgcm9vdHMgPSBwb2x5LmdldFJvb3RzSW5JbnRlcnZhbCgwLDEpO1xuXG4gICAgZm9yICggdmFyIGkgPSAwOyBpIDwgcm9vdHMubGVuZ3RoOyBpKysgKSB7XG4gICAgICAgIHZhciBzID0gcm9vdHNbaV07XG4gICAgICAgIHZhciB4Um9vdHMgPSBuZXcgUG9seW5vbWlhbChcbiAgICAgICAgICAgIGMxMy54LFxuICAgICAgICAgICAgYzEyLngsXG4gICAgICAgICAgICBjMTEueCxcbiAgICAgICAgICAgIGMxMC54IC0gYzIwLnggLSBzKmMyMS54IC0gcypzKmMyMi54IC0gcypzKnMqYzIzLnhcbiAgICAgICAgKS5nZXRSb290cygpO1xuICAgICAgICB2YXIgeVJvb3RzID0gbmV3IFBvbHlub21pYWwoXG4gICAgICAgICAgICBjMTMueSxcbiAgICAgICAgICAgIGMxMi55LFxuICAgICAgICAgICAgYzExLnksXG4gICAgICAgICAgICBjMTAueSAtIGMyMC55IC0gcypjMjEueSAtIHMqcypjMjIueSAtIHMqcypzKmMyMy55XG4gICAgICAgICkuZ2V0Um9vdHMoKTtcblxuICAgICAgICBpZiAoIHhSb290cy5sZW5ndGggPiAwICYmIHlSb290cy5sZW5ndGggPiAwICkge1xuICAgICAgICAgICAgdmFyIFRPTEVSQU5DRSA9IDFlLTQ7XG5cbiAgICAgICAgICAgIGNoZWNrUm9vdHM6XG4gICAgICAgICAgICBmb3IgKCB2YXIgaiA9IDA7IGogPCB4Um9vdHMubGVuZ3RoOyBqKysgKSB7XG4gICAgICAgICAgICAgICAgdmFyIHhSb290ID0geFJvb3RzW2pdO1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIGlmICggMCA8PSB4Um9vdCAmJiB4Um9vdCA8PSAxICkge1xuICAgICAgICAgICAgICAgICAgICBmb3IgKCB2YXIgayA9IDA7IGsgPCB5Um9vdHMubGVuZ3RoOyBrKysgKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIE1hdGguYWJzKCB4Um9vdCAtIHlSb290c1trXSApIDwgVE9MRVJBTkNFICkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdC5wb2ludHMucHVzaChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYzIzLm11bHRpcGx5KHMqcypzKS5hZGQoYzIyLm11bHRpcGx5KHMqcykuYWRkKGMyMS5tdWx0aXBseShzKS5hZGQoYzIwKSkpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhayBjaGVja1Jvb3RzO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgaWYgKCByZXN1bHQucG9pbnRzLmxlbmd0aCA+IDAgKSByZXN1bHQuc3RhdHVzID0gXCJJbnRlcnNlY3Rpb25cIjtcblxuICAgIHJldHVybiByZXN1bHQ7XG59O1xuXG5cbi8qKioqKlxuKlxuKiAgIGludGVyc2VjdEJlemllcjNDaXJjbGVcbipcbioqKioqL1xuSW50ZXJzZWN0aW9uLmludGVyc2VjdEJlemllcjNDaXJjbGUgPSBmdW5jdGlvbihwMSwgcDIsIHAzLCBwNCwgYywgcikge1xuICAgIHJldHVybiBJbnRlcnNlY3Rpb24uaW50ZXJzZWN0QmV6aWVyM0VsbGlwc2UocDEsIHAyLCBwMywgcDQsIGMsIHIsIHIpO1xufTtcblxuXG4vKioqKipcbipcbiogICBpbnRlcnNlY3RCZXppZXIzRWxsaXBzZVxuKlxuKioqKiovXG5JbnRlcnNlY3Rpb24uaW50ZXJzZWN0QmV6aWVyM0VsbGlwc2UgPSBmdW5jdGlvbihwMSwgcDIsIHAzLCBwNCwgZWMsIHJ4LCByeSkge1xuICAgIHZhciBhLCBiLCBjLCBkOyAgICAgICAvLyB0ZW1wb3JhcnkgdmFyaWFibGVzXG4gICAgdmFyIGMzLCBjMiwgYzEsIGMwOyAgIC8vIGNvZWZmaWNpZW50cyBvZiBjdWJpY1xuICAgIHZhciByZXN1bHQgPSBuZXcgSW50ZXJzZWN0aW9uKFwiTm8gSW50ZXJzZWN0aW9uXCIpO1xuXG4gICAgLy8gQ2FsY3VsYXRlIHRoZSBjb2VmZmljaWVudHMgb2YgY3ViaWMgcG9seW5vbWlhbFxuICAgIGEgPSBwMS5tdWx0aXBseSgtMSk7XG4gICAgYiA9IHAyLm11bHRpcGx5KDMpO1xuICAgIGMgPSBwMy5tdWx0aXBseSgtMyk7XG4gICAgZCA9IGEuYWRkKGIuYWRkKGMuYWRkKHA0KSkpO1xuICAgIGMzID0gbmV3IFZlY3RvcjJEKGQueCwgZC55KTtcblxuICAgIGEgPSBwMS5tdWx0aXBseSgzKTtcbiAgICBiID0gcDIubXVsdGlwbHkoLTYpO1xuICAgIGMgPSBwMy5tdWx0aXBseSgzKTtcbiAgICBkID0gYS5hZGQoYi5hZGQoYykpO1xuICAgIGMyID0gbmV3IFZlY3RvcjJEKGQueCwgZC55KTtcblxuICAgIGEgPSBwMS5tdWx0aXBseSgtMyk7XG4gICAgYiA9IHAyLm11bHRpcGx5KDMpO1xuICAgIGMgPSBhLmFkZChiKTtcbiAgICBjMSA9IG5ldyBWZWN0b3IyRChjLngsIGMueSk7XG5cbiAgICBjMCA9IG5ldyBWZWN0b3IyRChwMS54LCBwMS55KTtcblxuICAgIHZhciByeHJ4ICA9IHJ4KnJ4O1xuICAgIHZhciByeXJ5ICA9IHJ5KnJ5O1xuICAgIHZhciBwb2x5ID0gbmV3IFBvbHlub21pYWwoXG4gICAgICAgIGMzLngqYzMueCpyeXJ5ICsgYzMueSpjMy55KnJ4cngsXG4gICAgICAgIDIqKGMzLngqYzIueCpyeXJ5ICsgYzMueSpjMi55KnJ4cngpLFxuICAgICAgICAyKihjMy54KmMxLngqcnlyeSArIGMzLnkqYzEueSpyeHJ4KSArIGMyLngqYzIueCpyeXJ5ICsgYzIueSpjMi55KnJ4cngsXG4gICAgICAgIDIqYzMueCpyeXJ5KihjMC54IC0gZWMueCkgKyAyKmMzLnkqcnhyeCooYzAueSAtIGVjLnkpICtcbiAgICAgICAgICAgIDIqKGMyLngqYzEueCpyeXJ5ICsgYzIueSpjMS55KnJ4cngpLFxuICAgICAgICAyKmMyLngqcnlyeSooYzAueCAtIGVjLngpICsgMipjMi55KnJ4cngqKGMwLnkgLSBlYy55KSArXG4gICAgICAgICAgICBjMS54KmMxLngqcnlyeSArIGMxLnkqYzEueSpyeHJ4LFxuICAgICAgICAyKmMxLngqcnlyeSooYzAueCAtIGVjLngpICsgMipjMS55KnJ4cngqKGMwLnkgLSBlYy55KSxcbiAgICAgICAgYzAueCpjMC54KnJ5cnkgLSAyKmMwLnkqZWMueSpyeHJ4IC0gMipjMC54KmVjLngqcnlyeSArXG4gICAgICAgICAgICBjMC55KmMwLnkqcnhyeCArIGVjLngqZWMueCpyeXJ5ICsgZWMueSplYy55KnJ4cnggLSByeHJ4KnJ5cnlcbiAgICApO1xuICAgIHZhciByb290cyA9IHBvbHkuZ2V0Um9vdHNJbkludGVydmFsKDAsMSk7XG5cbiAgICBmb3IgKCB2YXIgaSA9IDA7IGkgPCByb290cy5sZW5ndGg7IGkrKyApIHtcbiAgICAgICAgdmFyIHQgPSByb290c1tpXTtcblxuICAgICAgICByZXN1bHQucG9pbnRzLnB1c2goXG4gICAgICAgICAgICBjMy5tdWx0aXBseSh0KnQqdCkuYWRkKGMyLm11bHRpcGx5KHQqdCkuYWRkKGMxLm11bHRpcGx5KHQpLmFkZChjMCkpKVxuICAgICAgICApO1xuICAgIH1cblxuICAgIGlmICggcmVzdWx0LnBvaW50cy5sZW5ndGggPiAwICkgcmVzdWx0LnN0YXR1cyA9IFwiSW50ZXJzZWN0aW9uXCI7XG5cbiAgICByZXR1cm4gcmVzdWx0O1xufTtcblxuXG4vKioqKipcbipcbiogICBpbnRlcnNlY3RCZXppZXIzTGluZVxuKlxuKiAgIE1hbnkgdGhhbmtzIHRvIERhbiBTdW5kYXkgYXQgU29mdFN1cmZlci5jb20uICBIZSBnYXZlIG1lIGEgdmVyeSB0aG9yb3VnaFxuKiAgIHNrZXRjaCBvZiB0aGUgYWxnb3JpdGhtIHVzZWQgaGVyZS4gIFdpdGhvdXQgaGlzIGhlbHAsIEknbSBub3Qgc3VyZSB3aGVuIElcbiogICB3b3VsZCBoYXZlIGZpZ3VyZWQgb3V0IHRoaXMgaW50ZXJzZWN0aW9uIHByb2JsZW0uXG4qXG4qKioqKi9cbkludGVyc2VjdGlvbi5pbnRlcnNlY3RCZXppZXIzTGluZSA9IGZ1bmN0aW9uKHAxLCBwMiwgcDMsIHA0LCBhMSwgYTIpIHtcbiAgICB2YXIgYSwgYiwgYywgZDsgICAgICAgLy8gdGVtcG9yYXJ5IHZhcmlhYmxlc1xuICAgIHZhciBjMywgYzIsIGMxLCBjMDsgICAvLyBjb2VmZmljaWVudHMgb2YgY3ViaWNcbiAgICB2YXIgY2w7ICAgICAgICAgICAgICAgLy8gYyBjb2VmZmljaWVudCBmb3Igbm9ybWFsIGZvcm0gb2YgbGluZVxuICAgIHZhciBuOyAgICAgICAgICAgICAgICAvLyBub3JtYWwgZm9yIG5vcm1hbCBmb3JtIG9mIGxpbmVcbiAgICB2YXIgbWluID0gYTEubWluKGEyKTsgLy8gdXNlZCB0byBkZXRlcm1pbmUgaWYgcG9pbnQgaXMgb24gbGluZSBzZWdtZW50XG4gICAgdmFyIG1heCA9IGExLm1heChhMik7IC8vIHVzZWQgdG8gZGV0ZXJtaW5lIGlmIHBvaW50IGlzIG9uIGxpbmUgc2VnbWVudFxuICAgIHZhciByZXN1bHQgPSBuZXcgSW50ZXJzZWN0aW9uKFwiTm8gSW50ZXJzZWN0aW9uXCIpO1xuICAgIFxuICAgIC8vIFN0YXJ0IHdpdGggQmV6aWVyIHVzaW5nIEJlcm5zdGVpbiBwb2x5bm9taWFscyBmb3Igd2VpZ2h0aW5nIGZ1bmN0aW9uczpcbiAgICAvLyAgICAgKDEtdF4zKVAxICsgM3QoMS10KV4yUDIgKyAzdF4yKDEtdClQMyArIHReM1A0XG4gICAgLy9cbiAgICAvLyBFeHBhbmQgYW5kIGNvbGxlY3QgdGVybXMgdG8gZm9ybSBsaW5lYXIgY29tYmluYXRpb25zIG9mIG9yaWdpbmFsIEJlemllclxuICAgIC8vIGNvbnRyb2xzLiAgVGhpcyBlbmRzIHVwIHdpdGggYSB2ZWN0b3IgY3ViaWMgaW4gdDpcbiAgICAvLyAgICAgKC1QMSszUDItM1AzK1A0KXReMyArICgzUDEtNlAyKzNQMyl0XjIgKyAoLTNQMSszUDIpdCArIFAxXG4gICAgLy8gICAgICAgICAgICAgL1xcICAgICAgICAgICAgICAgICAgL1xcICAgICAgICAgICAgICAgIC9cXCAgICAgICAvXFxcbiAgICAvLyAgICAgICAgICAgICB8fCAgICAgICAgICAgICAgICAgIHx8ICAgICAgICAgICAgICAgIHx8ICAgICAgIHx8XG4gICAgLy8gICAgICAgICAgICAgYzMgICAgICAgICAgICAgICAgICBjMiAgICAgICAgICAgICAgICBjMSAgICAgICBjMFxuICAgIFxuICAgIC8vIENhbGN1bGF0ZSB0aGUgY29lZmZpY2llbnRzXG4gICAgYSA9IHAxLm11bHRpcGx5KC0xKTtcbiAgICBiID0gcDIubXVsdGlwbHkoMyk7XG4gICAgYyA9IHAzLm11bHRpcGx5KC0zKTtcbiAgICBkID0gYS5hZGQoYi5hZGQoYy5hZGQocDQpKSk7XG4gICAgYzMgPSBuZXcgVmVjdG9yMkQoZC54LCBkLnkpO1xuXG4gICAgYSA9IHAxLm11bHRpcGx5KDMpO1xuICAgIGIgPSBwMi5tdWx0aXBseSgtNik7XG4gICAgYyA9IHAzLm11bHRpcGx5KDMpO1xuICAgIGQgPSBhLmFkZChiLmFkZChjKSk7XG4gICAgYzIgPSBuZXcgVmVjdG9yMkQoZC54LCBkLnkpO1xuXG4gICAgYSA9IHAxLm11bHRpcGx5KC0zKTtcbiAgICBiID0gcDIubXVsdGlwbHkoMyk7XG4gICAgYyA9IGEuYWRkKGIpO1xuICAgIGMxID0gbmV3IFZlY3RvcjJEKGMueCwgYy55KTtcblxuICAgIGMwID0gbmV3IFZlY3RvcjJEKHAxLngsIHAxLnkpO1xuICAgIFxuICAgIC8vIENvbnZlcnQgbGluZSB0byBub3JtYWwgZm9ybTogYXggKyBieSArIGMgPSAwXG4gICAgLy8gRmluZCBub3JtYWwgdG8gbGluZTogbmVnYXRpdmUgaW52ZXJzZSBvZiBvcmlnaW5hbCBsaW5lJ3Mgc2xvcGVcbiAgICBuID0gbmV3IFZlY3RvcjJEKGExLnkgLSBhMi55LCBhMi54IC0gYTEueCk7XG4gICAgXG4gICAgLy8gRGV0ZXJtaW5lIG5ldyBjIGNvZWZmaWNpZW50XG4gICAgY2wgPSBhMS54KmEyLnkgLSBhMi54KmExLnk7XG5cbiAgICAvLyA/Um90YXRlIGVhY2ggY3ViaWMgY29lZmZpY2llbnQgdXNpbmcgbGluZSBmb3IgbmV3IGNvb3JkaW5hdGUgc3lzdGVtP1xuICAgIC8vIEZpbmQgcm9vdHMgb2Ygcm90YXRlZCBjdWJpY1xuICAgIHJvb3RzID0gbmV3IFBvbHlub21pYWwoXG4gICAgICAgIG4uZG90KGMzKSxcbiAgICAgICAgbi5kb3QoYzIpLFxuICAgICAgICBuLmRvdChjMSksXG4gICAgICAgIG4uZG90KGMwKSArIGNsXG4gICAgKS5nZXRSb290cygpO1xuXG4gICAgLy8gQW55IHJvb3RzIGluIGNsb3NlZCBpbnRlcnZhbCBbMCwxXSBhcmUgaW50ZXJzZWN0aW9ucyBvbiBCZXppZXIsIGJ1dFxuICAgIC8vIG1pZ2h0IG5vdCBiZSBvbiB0aGUgbGluZSBzZWdtZW50LlxuICAgIC8vIEZpbmQgaW50ZXJzZWN0aW9ucyBhbmQgY2FsY3VsYXRlIHBvaW50IGNvb3JkaW5hdGVzXG4gICAgZm9yICggdmFyIGkgPSAwOyBpIDwgcm9vdHMubGVuZ3RoOyBpKysgKSB7XG4gICAgICAgIHZhciB0ID0gcm9vdHNbaV07XG5cbiAgICAgICAgaWYgKCAwIDw9IHQgJiYgdCA8PSAxICkge1xuICAgICAgICAgICAgLy8gV2UncmUgd2l0aGluIHRoZSBCZXppZXIgY3VydmVcbiAgICAgICAgICAgIC8vIEZpbmQgcG9pbnQgb24gQmV6aWVyXG4gICAgICAgICAgICB2YXIgcDUgPSBwMS5sZXJwKHAyLCB0KTtcbiAgICAgICAgICAgIHZhciBwNiA9IHAyLmxlcnAocDMsIHQpO1xuICAgICAgICAgICAgdmFyIHA3ID0gcDMubGVycChwNCwgdCk7XG5cbiAgICAgICAgICAgIHZhciBwOCA9IHA1LmxlcnAocDYsIHQpO1xuICAgICAgICAgICAgdmFyIHA5ID0gcDYubGVycChwNywgdCk7XG5cbiAgICAgICAgICAgIHZhciBwMTAgPSBwOC5sZXJwKHA5LCB0KTtcblxuICAgICAgICAgICAgLy8gU2VlIGlmIHBvaW50IGlzIG9uIGxpbmUgc2VnbWVudFxuICAgICAgICAgICAgLy8gSGFkIHRvIG1ha2Ugc3BlY2lhbCBjYXNlcyBmb3IgdmVydGljYWwgYW5kIGhvcml6b250YWwgbGluZXMgZHVlXG4gICAgICAgICAgICAvLyB0byBzbGlnaHQgZXJyb3JzIGluIGNhbGN1bGF0aW9uIG9mIHAxMFxuICAgICAgICAgICAgaWYgKCBhMS54ID09IGEyLnggKSB7XG4gICAgICAgICAgICAgICAgaWYgKCBtaW4ueSA8PSBwMTAueSAmJiBwMTAueSA8PSBtYXgueSApIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0LnN0YXR1cyA9IFwiSW50ZXJzZWN0aW9uXCI7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdC5hcHBlbmRQb2ludCggcDEwICk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIGlmICggYTEueSA9PSBhMi55ICkge1xuICAgICAgICAgICAgICAgIGlmICggbWluLnggPD0gcDEwLnggJiYgcDEwLnggPD0gbWF4LnggKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdC5zdGF0dXMgPSBcIkludGVyc2VjdGlvblwiO1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQuYXBwZW5kUG9pbnQoIHAxMCApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSBpZiAoIHAxMC5ndGUobWluKSAmJiBwMTAubHRlKG1heCkgKSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0LnN0YXR1cyA9IFwiSW50ZXJzZWN0aW9uXCI7XG4gICAgICAgICAgICAgICAgcmVzdWx0LmFwcGVuZFBvaW50KCBwMTAgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiByZXN1bHQ7XG59O1xuXG5cbi8qKioqKlxuKlxuKiAgIGludGVyc2VjdEJlemllcjNQb2x5Z29uXG4qXG4qKioqKi9cbkludGVyc2VjdGlvbi5pbnRlcnNlY3RCZXppZXIzUG9seWdvbiA9IGZ1bmN0aW9uKHAxLCBwMiwgcDMsIHA0LCBwb2ludHMpIHtcbiAgICB2YXIgcmVzdWx0ID0gbmV3IEludGVyc2VjdGlvbihcIk5vIEludGVyc2VjdGlvblwiKTtcbiAgICB2YXIgbGVuZ3RoID0gcG9pbnRzLmxlbmd0aDtcblxuICAgIGZvciAoIHZhciBpID0gMDsgaSA8IGxlbmd0aDsgaSsrICkge1xuICAgICAgICB2YXIgYTEgPSBwb2ludHNbaV07XG4gICAgICAgIHZhciBhMiA9IHBvaW50c1soaSsxKSAlIGxlbmd0aF07XG4gICAgICAgIHZhciBpbnRlciA9IEludGVyc2VjdGlvbi5pbnRlcnNlY3RCZXppZXIzTGluZShwMSwgcDIsIHAzLCBwNCwgYTEsIGEyKTtcblxuICAgICAgICByZXN1bHQuYXBwZW5kUG9pbnRzKGludGVyLnBvaW50cyk7XG4gICAgfVxuXG4gICAgaWYgKCByZXN1bHQucG9pbnRzLmxlbmd0aCA+IDAgKSByZXN1bHQuc3RhdHVzID0gXCJJbnRlcnNlY3Rpb25cIjtcblxuICAgIHJldHVybiByZXN1bHQ7XG59O1xuXG5cbi8qKioqKlxuKlxuKiAgIGludGVyc2VjdEJlemllcjNSZWN0YW5nbGVcbipcbioqKioqL1xuSW50ZXJzZWN0aW9uLmludGVyc2VjdEJlemllcjNSZWN0YW5nbGUgPSBmdW5jdGlvbihwMSwgcDIsIHAzLCBwNCwgcjEsIHIyKSB7XG4gICAgdmFyIG1pbiAgICAgICAgPSByMS5taW4ocjIpO1xuICAgIHZhciBtYXggICAgICAgID0gcjEubWF4KHIyKTtcbiAgICB2YXIgdG9wUmlnaHQgICA9IG5ldyBQb2ludDJEKCBtYXgueCwgbWluLnkgKTtcbiAgICB2YXIgYm90dG9tTGVmdCA9IG5ldyBQb2ludDJEKCBtaW4ueCwgbWF4LnkgKTtcbiAgICBcbiAgICB2YXIgaW50ZXIxID0gSW50ZXJzZWN0aW9uLmludGVyc2VjdEJlemllcjNMaW5lKHAxLCBwMiwgcDMsIHA0LCBtaW4sIHRvcFJpZ2h0KTtcbiAgICB2YXIgaW50ZXIyID0gSW50ZXJzZWN0aW9uLmludGVyc2VjdEJlemllcjNMaW5lKHAxLCBwMiwgcDMsIHA0LCB0b3BSaWdodCwgbWF4KTtcbiAgICB2YXIgaW50ZXIzID0gSW50ZXJzZWN0aW9uLmludGVyc2VjdEJlemllcjNMaW5lKHAxLCBwMiwgcDMsIHA0LCBtYXgsIGJvdHRvbUxlZnQpO1xuICAgIHZhciBpbnRlcjQgPSBJbnRlcnNlY3Rpb24uaW50ZXJzZWN0QmV6aWVyM0xpbmUocDEsIHAyLCBwMywgcDQsIGJvdHRvbUxlZnQsIG1pbik7XG4gICAgXG4gICAgdmFyIHJlc3VsdCA9IG5ldyBJbnRlcnNlY3Rpb24oXCJObyBJbnRlcnNlY3Rpb25cIik7XG5cbiAgICByZXN1bHQuYXBwZW5kUG9pbnRzKGludGVyMS5wb2ludHMpO1xuICAgIHJlc3VsdC5hcHBlbmRQb2ludHMoaW50ZXIyLnBvaW50cyk7XG4gICAgcmVzdWx0LmFwcGVuZFBvaW50cyhpbnRlcjMucG9pbnRzKTtcbiAgICByZXN1bHQuYXBwZW5kUG9pbnRzKGludGVyNC5wb2ludHMpO1xuXG4gICAgaWYgKCByZXN1bHQucG9pbnRzLmxlbmd0aCA+IDAgKSByZXN1bHQuc3RhdHVzID0gXCJJbnRlcnNlY3Rpb25cIjtcblxuICAgIHJldHVybiByZXN1bHQ7XG59O1xuXG5cbi8qKioqKlxuKlxuKiAgIGludGVyc2VjdENpcmNsZUNpcmNsZVxuKlxuKioqKiovXG5JbnRlcnNlY3Rpb24uaW50ZXJzZWN0Q2lyY2xlQ2lyY2xlID0gZnVuY3Rpb24oYzEsIHIxLCBjMiwgcjIpIHtcbiAgICB2YXIgcmVzdWx0O1xuICAgIFxuICAgIC8vIERldGVybWluZSBtaW5pbXVtIGFuZCBtYXhpbXVtIHJhZGlpIHdoZXJlIGNpcmNsZXMgY2FuIGludGVyc2VjdFxuICAgIHZhciByX21heCA9IHIxICsgcjI7XG4gICAgdmFyIHJfbWluID0gTWF0aC5hYnMocjEgLSByMik7XG4gICAgXG4gICAgLy8gRGV0ZXJtaW5lIGFjdHVhbCBkaXN0YW5jZSBiZXR3ZWVuIGNpcmNsZSBjaXJjbGVzXG4gICAgdmFyIGNfZGlzdCA9IGMxLmRpc3RhbmNlRnJvbSggYzIgKTtcblxuICAgIGlmICggY19kaXN0ID4gcl9tYXggKSB7XG4gICAgICAgIHJlc3VsdCA9IG5ldyBJbnRlcnNlY3Rpb24oXCJPdXRzaWRlXCIpO1xuICAgIH0gZWxzZSBpZiAoIGNfZGlzdCA8IHJfbWluICkge1xuICAgICAgICByZXN1bHQgPSBuZXcgSW50ZXJzZWN0aW9uKFwiSW5zaWRlXCIpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHJlc3VsdCA9IG5ldyBJbnRlcnNlY3Rpb24oXCJJbnRlcnNlY3Rpb25cIik7XG5cbiAgICAgICAgdmFyIGEgPSAocjEqcjEgLSByMipyMiArIGNfZGlzdCpjX2Rpc3QpIC8gKCAyKmNfZGlzdCApO1xuICAgICAgICB2YXIgaCA9IE1hdGguc3FydChyMSpyMSAtIGEqYSk7XG4gICAgICAgIHZhciBwID0gYzEubGVycChjMiwgYS9jX2Rpc3QpO1xuICAgICAgICB2YXIgYiA9IGggLyBjX2Rpc3Q7XG5cbiAgICAgICAgcmVzdWx0LnBvaW50cy5wdXNoKFxuICAgICAgICAgICAgbmV3IFBvaW50MkQoXG4gICAgICAgICAgICAgICAgcC54IC0gYiAqIChjMi55IC0gYzEueSksXG4gICAgICAgICAgICAgICAgcC55ICsgYiAqIChjMi54IC0gYzEueClcbiAgICAgICAgICAgIClcbiAgICAgICAgKTtcbiAgICAgICAgcmVzdWx0LnBvaW50cy5wdXNoKFxuICAgICAgICAgICAgbmV3IFBvaW50MkQoXG4gICAgICAgICAgICAgICAgcC54ICsgYiAqIChjMi55IC0gYzEueSksXG4gICAgICAgICAgICAgICAgcC55IC0gYiAqIChjMi54IC0gYzEueClcbiAgICAgICAgICAgIClcbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICByZXR1cm4gcmVzdWx0O1xufTtcblxuXG4vKioqKipcbipcbiogICBpbnRlcnNlY3RDaXJjbGVFbGxpcHNlXG4qXG4qKioqKi9cbkludGVyc2VjdGlvbi5pbnRlcnNlY3RDaXJjbGVFbGxpcHNlID0gZnVuY3Rpb24oY2MsIHIsIGVjLCByeCwgcnkpIHtcbiAgICByZXR1cm4gSW50ZXJzZWN0aW9uLmludGVyc2VjdEVsbGlwc2VFbGxpcHNlKGNjLCByLCByLCBlYywgcngsIHJ5KTtcbn07XG5cblxuLyoqKioqXG4qXG4qICAgaW50ZXJzZWN0Q2lyY2xlTGluZVxuKlxuKioqKiovXG5JbnRlcnNlY3Rpb24uaW50ZXJzZWN0Q2lyY2xlTGluZSA9IGZ1bmN0aW9uKGMsIHIsIGExLCBhMikge1xuICAgIHZhciByZXN1bHQ7XG4gICAgdmFyIGEgID0gKGEyLnggLSBhMS54KSAqIChhMi54IC0gYTEueCkgK1xuICAgICAgICAgICAgIChhMi55IC0gYTEueSkgKiAoYTIueSAtIGExLnkpO1xuICAgIHZhciBiICA9IDIgKiAoIChhMi54IC0gYTEueCkgKiAoYTEueCAtIGMueCkgK1xuICAgICAgICAgICAgICAgICAgIChhMi55IC0gYTEueSkgKiAoYTEueSAtIGMueSkgICApO1xuICAgIHZhciBjYyA9IGMueCpjLnggKyBjLnkqYy55ICsgYTEueCphMS54ICsgYTEueSphMS55IC1cbiAgICAgICAgICAgICAyICogKGMueCAqIGExLnggKyBjLnkgKiBhMS55KSAtIHIqcjtcbiAgICB2YXIgZGV0ZXIgPSBiKmIgLSA0KmEqY2M7XG5cbiAgICBpZiAoIGRldGVyIDwgMCApIHtcbiAgICAgICAgcmVzdWx0ID0gbmV3IEludGVyc2VjdGlvbihcIk91dHNpZGVcIik7XG4gICAgfSBlbHNlIGlmICggZGV0ZXIgPT0gMCApIHtcbiAgICAgICAgcmVzdWx0ID0gbmV3IEludGVyc2VjdGlvbihcIlRhbmdlbnRcIik7XG4gICAgICAgIC8vIE5PVEU6IHNob3VsZCBjYWxjdWxhdGUgdGhpcyBwb2ludFxuICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciBlICA9IE1hdGguc3FydChkZXRlcik7XG4gICAgICAgIHZhciB1MSA9ICggLWIgKyBlICkgLyAoIDIqYSApO1xuICAgICAgICB2YXIgdTIgPSAoIC1iIC0gZSApIC8gKCAyKmEgKTtcblxuICAgICAgICBpZiAoICh1MSA8IDAgfHwgdTEgPiAxKSAmJiAodTIgPCAwIHx8IHUyID4gMSkgKSB7XG4gICAgICAgICAgICBpZiAoICh1MSA8IDAgJiYgdTIgPCAwKSB8fCAodTEgPiAxICYmIHUyID4gMSkgKSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0ID0gbmV3IEludGVyc2VjdGlvbihcIk91dHNpZGVcIik7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJlc3VsdCA9IG5ldyBJbnRlcnNlY3Rpb24oXCJJbnNpZGVcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXN1bHQgPSBuZXcgSW50ZXJzZWN0aW9uKFwiSW50ZXJzZWN0aW9uXCIpO1xuXG4gICAgICAgICAgICBpZiAoIDAgPD0gdTEgJiYgdTEgPD0gMSlcbiAgICAgICAgICAgICAgICByZXN1bHQucG9pbnRzLnB1c2goIGExLmxlcnAoYTIsIHUxKSApO1xuXG4gICAgICAgICAgICBpZiAoIDAgPD0gdTIgJiYgdTIgPD0gMSlcbiAgICAgICAgICAgICAgICByZXN1bHQucG9pbnRzLnB1c2goIGExLmxlcnAoYTIsIHUyKSApO1xuICAgICAgICB9XG4gICAgfVxuICAgIFxuICAgIHJldHVybiByZXN1bHQ7XG59O1xuXG5cbi8qKioqKlxuKlxuKiAgIGludGVyc2VjdENpcmNsZVBvbHlnb25cbipcbioqKioqL1xuSW50ZXJzZWN0aW9uLmludGVyc2VjdENpcmNsZVBvbHlnb24gPSBmdW5jdGlvbihjLCByLCBwb2ludHMpIHtcbiAgICB2YXIgcmVzdWx0ID0gbmV3IEludGVyc2VjdGlvbihcIk5vIEludGVyc2VjdGlvblwiKTtcbiAgICB2YXIgbGVuZ3RoID0gcG9pbnRzLmxlbmd0aDtcbiAgICB2YXIgaW50ZXI7XG5cbiAgICBmb3IgKCB2YXIgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKyApIHtcbiAgICAgICAgdmFyIGExID0gcG9pbnRzW2ldO1xuICAgICAgICB2YXIgYTIgPSBwb2ludHNbKGkrMSkgJSBsZW5ndGhdO1xuXG4gICAgICAgIGludGVyID0gSW50ZXJzZWN0aW9uLmludGVyc2VjdENpcmNsZUxpbmUoYywgciwgYTEsIGEyKTtcbiAgICAgICAgcmVzdWx0LmFwcGVuZFBvaW50cyhpbnRlci5wb2ludHMpO1xuICAgIH1cblxuICAgIGlmICggcmVzdWx0LnBvaW50cy5sZW5ndGggPiAwIClcbiAgICAgICAgcmVzdWx0LnN0YXR1cyA9IFwiSW50ZXJzZWN0aW9uXCI7XG4gICAgZWxzZVxuICAgICAgICByZXN1bHQuc3RhdHVzID0gaW50ZXIuc3RhdHVzO1xuXG4gICAgcmV0dXJuIHJlc3VsdDtcbn07XG5cblxuLyoqKioqXG4qXG4qICAgaW50ZXJzZWN0Q2lyY2xlUmVjdGFuZ2xlXG4qXG4qKioqKi9cbkludGVyc2VjdGlvbi5pbnRlcnNlY3RDaXJjbGVSZWN0YW5nbGUgPSBmdW5jdGlvbihjLCByLCByMSwgcjIpIHtcbiAgICB2YXIgbWluICAgICAgICA9IHIxLm1pbihyMik7XG4gICAgdmFyIG1heCAgICAgICAgPSByMS5tYXgocjIpO1xuICAgIHZhciB0b3BSaWdodCAgID0gbmV3IFBvaW50MkQoIG1heC54LCBtaW4ueSApO1xuICAgIHZhciBib3R0b21MZWZ0ID0gbmV3IFBvaW50MkQoIG1pbi54LCBtYXgueSApO1xuICAgIFxuICAgIHZhciBpbnRlcjEgPSBJbnRlcnNlY3Rpb24uaW50ZXJzZWN0Q2lyY2xlTGluZShjLCByLCBtaW4sIHRvcFJpZ2h0KTtcbiAgICB2YXIgaW50ZXIyID0gSW50ZXJzZWN0aW9uLmludGVyc2VjdENpcmNsZUxpbmUoYywgciwgdG9wUmlnaHQsIG1heCk7XG4gICAgdmFyIGludGVyMyA9IEludGVyc2VjdGlvbi5pbnRlcnNlY3RDaXJjbGVMaW5lKGMsIHIsIG1heCwgYm90dG9tTGVmdCk7XG4gICAgdmFyIGludGVyNCA9IEludGVyc2VjdGlvbi5pbnRlcnNlY3RDaXJjbGVMaW5lKGMsIHIsIGJvdHRvbUxlZnQsIG1pbik7XG4gICAgXG4gICAgdmFyIHJlc3VsdCA9IG5ldyBJbnRlcnNlY3Rpb24oXCJObyBJbnRlcnNlY3Rpb25cIik7XG5cbiAgICByZXN1bHQuYXBwZW5kUG9pbnRzKGludGVyMS5wb2ludHMpO1xuICAgIHJlc3VsdC5hcHBlbmRQb2ludHMoaW50ZXIyLnBvaW50cyk7XG4gICAgcmVzdWx0LmFwcGVuZFBvaW50cyhpbnRlcjMucG9pbnRzKTtcbiAgICByZXN1bHQuYXBwZW5kUG9pbnRzKGludGVyNC5wb2ludHMpO1xuXG4gICAgaWYgKCByZXN1bHQucG9pbnRzLmxlbmd0aCA+IDAgKVxuICAgICAgICByZXN1bHQuc3RhdHVzID0gXCJJbnRlcnNlY3Rpb25cIjtcbiAgICBlbHNlXG4gICAgICAgIHJlc3VsdC5zdGF0dXMgPSBpbnRlcjEuc3RhdHVzO1xuXG4gICAgcmV0dXJuIHJlc3VsdDtcbn07XG5cblxuLyoqKioqXG4qXG4qICAgaW50ZXJzZWN0RWxsaXBzZUVsbGlwc2VcbiogICBcbiogICBUaGlzIGNvZGUgaXMgYmFzZWQgb24gTWdjSW50cjJERWxwRWxwLmNwcCB3cml0dGVuIGJ5IERhdmlkIEViZXJseS4gIEhpc1xuKiAgIGNvZGUgYWxvbmcgd2l0aCBtYW55IG90aGVyIGV4Y2VsbGVudCBleGFtcGxlcyBhcmUgYXZhaWFibGUgYXQgaGlzIHNpdGU6XG4qICAgaHR0cDovL3d3dy5tYWdpYy1zb2Z0d2FyZS5jb21cbipcbiogICBOT1RFOiBSb3RhdGlvbiB3aWxsIG5lZWQgdG8gYmUgYWRkZWQgdG8gdGhpcyBmdW5jdGlvblxuKlxuKioqKiovXG5JbnRlcnNlY3Rpb24uaW50ZXJzZWN0RWxsaXBzZUVsbGlwc2UgPSBmdW5jdGlvbihjMSwgcngxLCByeTEsIGMyLCByeDIsIHJ5Mikge1xuICAgIHZhciBhID0gW1xuICAgICAgICByeTEqcnkxLCAwLCByeDEqcngxLCAtMipyeTEqcnkxKmMxLngsIC0yKnJ4MSpyeDEqYzEueSxcbiAgICAgICAgcnkxKnJ5MSpjMS54KmMxLnggKyByeDEqcngxKmMxLnkqYzEueSAtIHJ4MSpyeDEqcnkxKnJ5MVxuICAgIF07XG4gICAgdmFyIGIgPSBbXG4gICAgICAgIHJ5MipyeTIsIDAsIHJ4MipyeDIsIC0yKnJ5MipyeTIqYzIueCwgLTIqcngyKnJ4MipjMi55LFxuICAgICAgICByeTIqcnkyKmMyLngqYzIueCArIHJ4MipyeDIqYzIueSpjMi55IC0gcngyKnJ4MipyeTIqcnkyXG4gICAgXTtcblxuICAgIHZhciB5UG9seSAgID0gSW50ZXJzZWN0aW9uLmJlem91dChhLCBiKTtcbiAgICB2YXIgeVJvb3RzICA9IHlQb2x5LmdldFJvb3RzKCk7XG4gICAgdmFyIGVwc2lsb24gPSAxZS0zO1xuICAgIHZhciBub3JtMCAgID0gKCBhWzBdKmFbMF0gKyAyKmFbMV0qYVsxXSArIGFbMl0qYVsyXSApICogZXBzaWxvbjtcbiAgICB2YXIgbm9ybTEgICA9ICggYlswXSpiWzBdICsgMipiWzFdKmJbMV0gKyBiWzJdKmJbMl0gKSAqIGVwc2lsb247XG4gICAgdmFyIHJlc3VsdCAgPSBuZXcgSW50ZXJzZWN0aW9uKFwiTm8gSW50ZXJzZWN0aW9uXCIpO1xuXG4gICAgZm9yICggdmFyIHkgPSAwOyB5IDwgeVJvb3RzLmxlbmd0aDsgeSsrICkge1xuICAgICAgICB2YXIgeFBvbHkgPSBuZXcgUG9seW5vbWlhbChcbiAgICAgICAgICAgIGFbMF0sXG4gICAgICAgICAgICBhWzNdICsgeVJvb3RzW3ldICogYVsxXSxcbiAgICAgICAgICAgIGFbNV0gKyB5Um9vdHNbeV0gKiAoYVs0XSArIHlSb290c1t5XSphWzJdKVxuICAgICAgICApO1xuICAgICAgICB2YXIgeFJvb3RzID0geFBvbHkuZ2V0Um9vdHMoKTtcblxuICAgICAgICBmb3IgKCB2YXIgeCA9IDA7IHggPCB4Um9vdHMubGVuZ3RoOyB4KysgKSB7XG4gICAgICAgICAgICB2YXIgdGVzdCA9XG4gICAgICAgICAgICAgICAgKCBhWzBdKnhSb290c1t4XSArIGFbMV0qeVJvb3RzW3ldICsgYVszXSApICogeFJvb3RzW3hdICsgXG4gICAgICAgICAgICAgICAgKCBhWzJdKnlSb290c1t5XSArIGFbNF0gKSAqIHlSb290c1t5XSArIGFbNV07XG4gICAgICAgICAgICBpZiAoIE1hdGguYWJzKHRlc3QpIDwgbm9ybTAgKSB7XG4gICAgICAgICAgICAgICAgdGVzdCA9XG4gICAgICAgICAgICAgICAgICAgICggYlswXSp4Um9vdHNbeF0gKyBiWzFdKnlSb290c1t5XSArIGJbM10gKSAqIHhSb290c1t4XSArXG4gICAgICAgICAgICAgICAgICAgICggYlsyXSp5Um9vdHNbeV0gKyBiWzRdICkgKiB5Um9vdHNbeV0gKyBiWzVdO1xuICAgICAgICAgICAgICAgIGlmICggTWF0aC5hYnModGVzdCkgPCBub3JtMSApIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0LmFwcGVuZFBvaW50KCBuZXcgUG9pbnQyRCggeFJvb3RzW3hdLCB5Um9vdHNbeV0gKSApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIGlmICggcmVzdWx0LnBvaW50cy5sZW5ndGggPiAwICkgcmVzdWx0LnN0YXR1cyA9IFwiSW50ZXJzZWN0aW9uXCI7XG5cbiAgICByZXR1cm4gcmVzdWx0O1xufTtcblxuXG4vKioqKipcbipcbiogICBpbnRlcnNlY3RFbGxpcHNlTGluZVxuKiAgIFxuKiAgIE5PVEU6IFJvdGF0aW9uIHdpbGwgbmVlZCB0byBiZSBhZGRlZCB0byB0aGlzIGZ1bmN0aW9uXG4qXG4qKioqKi9cbkludGVyc2VjdGlvbi5pbnRlcnNlY3RFbGxpcHNlTGluZSA9IGZ1bmN0aW9uKGMsIHJ4LCByeSwgYTEsIGEyKSB7XG4gICAgdmFyIHJlc3VsdDtcbiAgICB2YXIgb3JpZ2luID0gbmV3IFZlY3RvcjJEKGExLngsIGExLnkpO1xuICAgIHZhciBkaXIgICAgPSBWZWN0b3IyRC5mcm9tUG9pbnRzKGExLCBhMik7XG4gICAgdmFyIGNlbnRlciA9IG5ldyBWZWN0b3IyRChjLngsIGMueSk7XG4gICAgdmFyIGRpZmYgICA9IG9yaWdpbi5zdWJ0cmFjdChjZW50ZXIpO1xuICAgIHZhciBtRGlyICAgPSBuZXcgVmVjdG9yMkQoIGRpci54LyhyeCpyeCksICBkaXIueS8ocnkqcnkpICApO1xuICAgIHZhciBtRGlmZiAgPSBuZXcgVmVjdG9yMkQoIGRpZmYueC8ocngqcngpLCBkaWZmLnkvKHJ5KnJ5KSApO1xuXG4gICAgdmFyIGEgPSBkaXIuZG90KG1EaXIpO1xuICAgIHZhciBiID0gZGlyLmRvdChtRGlmZik7XG4gICAgdmFyIGMgPSBkaWZmLmRvdChtRGlmZikgLSAxLjA7XG4gICAgdmFyIGQgPSBiKmIgLSBhKmM7XG5cbiAgICBpZiAoIGQgPCAwICkge1xuICAgICAgICByZXN1bHQgPSBuZXcgSW50ZXJzZWN0aW9uKFwiT3V0c2lkZVwiKTtcbiAgICB9IGVsc2UgaWYgKCBkID4gMCApIHtcbiAgICAgICAgdmFyIHJvb3QgPSBNYXRoLnNxcnQoZCk7XG4gICAgICAgIHZhciB0X2EgID0gKC1iIC0gcm9vdCkgLyBhO1xuICAgICAgICB2YXIgdF9iICA9ICgtYiArIHJvb3QpIC8gYTtcblxuICAgICAgICBpZiAoICh0X2EgPCAwIHx8IDEgPCB0X2EpICYmICh0X2IgPCAwIHx8IDEgPCB0X2IpICkge1xuICAgICAgICAgICAgaWYgKCAodF9hIDwgMCAmJiB0X2IgPCAwKSB8fCAodF9hID4gMSAmJiB0X2IgPiAxKSApXG4gICAgICAgICAgICAgICAgcmVzdWx0ID0gbmV3IEludGVyc2VjdGlvbihcIk91dHNpZGVcIik7XG4gICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgcmVzdWx0ID0gbmV3IEludGVyc2VjdGlvbihcIkluc2lkZVwiKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJlc3VsdCA9IG5ldyBJbnRlcnNlY3Rpb24oXCJJbnRlcnNlY3Rpb25cIik7XG4gICAgICAgICAgICBpZiAoIDAgPD0gdF9hICYmIHRfYSA8PSAxIClcbiAgICAgICAgICAgICAgICByZXN1bHQuYXBwZW5kUG9pbnQoIGExLmxlcnAoYTIsIHRfYSkgKTtcbiAgICAgICAgICAgIGlmICggMCA8PSB0X2IgJiYgdF9iIDw9IDEgKVxuICAgICAgICAgICAgICAgIHJlc3VsdC5hcHBlbmRQb2ludCggYTEubGVycChhMiwgdF9iKSApO1xuICAgICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIHQgPSAtYi9hO1xuICAgICAgICBpZiAoIDAgPD0gdCAmJiB0IDw9IDEgKSB7XG4gICAgICAgICAgICByZXN1bHQgPSBuZXcgSW50ZXJzZWN0aW9uKFwiSW50ZXJzZWN0aW9uXCIpO1xuICAgICAgICAgICAgcmVzdWx0LmFwcGVuZFBvaW50KCBhMS5sZXJwKGEyLCB0KSApO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmVzdWx0ID0gbmV3IEludGVyc2VjdGlvbihcIk91dHNpZGVcIik7XG4gICAgICAgIH1cbiAgICB9XG4gICAgXG4gICAgcmV0dXJuIHJlc3VsdDtcbn07XG5cblxuLyoqKioqXG4qXG4qICAgaW50ZXJzZWN0RWxsaXBzZVBvbHlnb25cbipcbioqKioqL1xuSW50ZXJzZWN0aW9uLmludGVyc2VjdEVsbGlwc2VQb2x5Z29uID0gZnVuY3Rpb24oYywgcngsIHJ5LCBwb2ludHMpIHtcbiAgICB2YXIgcmVzdWx0ID0gbmV3IEludGVyc2VjdGlvbihcIk5vIEludGVyc2VjdGlvblwiKTtcbiAgICB2YXIgbGVuZ3RoID0gcG9pbnRzLmxlbmd0aDtcblxuICAgIGZvciAoIHZhciBpID0gMDsgaSA8IGxlbmd0aDsgaSsrICkge1xuICAgICAgICB2YXIgYjEgPSBwb2ludHNbaV07XG4gICAgICAgIHZhciBiMiA9IHBvaW50c1soaSsxKSAlIGxlbmd0aF07XG4gICAgICAgIHZhciBpbnRlciA9IEludGVyc2VjdGlvbi5pbnRlcnNlY3RFbGxpcHNlTGluZShjLCByeCwgcnksIGIxLCBiMik7XG5cbiAgICAgICAgcmVzdWx0LmFwcGVuZFBvaW50cyhpbnRlci5wb2ludHMpO1xuICAgIH1cblxuICAgIGlmICggcmVzdWx0LnBvaW50cy5sZW5ndGggPiAwIClcbiAgICAgICAgcmVzdWx0LnN0YXR1cyA9IFwiSW50ZXJzZWN0aW9uXCI7XG5cbiAgICByZXR1cm4gcmVzdWx0O1xufTtcblxuXG4vKioqKipcbipcbiogICBpbnRlcnNlY3RFbGxpcHNlUmVjdGFuZ2xlXG4qXG4qKioqKi9cbkludGVyc2VjdGlvbi5pbnRlcnNlY3RFbGxpcHNlUmVjdGFuZ2xlID0gZnVuY3Rpb24oYywgcngsIHJ5LCByMSwgcjIpIHtcbiAgICB2YXIgbWluICAgICAgICA9IHIxLm1pbihyMik7XG4gICAgdmFyIG1heCAgICAgICAgPSByMS5tYXgocjIpO1xuICAgIHZhciB0b3BSaWdodCAgID0gbmV3IFBvaW50MkQoIG1heC54LCBtaW4ueSApO1xuICAgIHZhciBib3R0b21MZWZ0ID0gbmV3IFBvaW50MkQoIG1pbi54LCBtYXgueSApO1xuICAgIFxuICAgIHZhciBpbnRlcjEgPSBJbnRlcnNlY3Rpb24uaW50ZXJzZWN0RWxsaXBzZUxpbmUoYywgcngsIHJ5LCBtaW4sIHRvcFJpZ2h0KTtcbiAgICB2YXIgaW50ZXIyID0gSW50ZXJzZWN0aW9uLmludGVyc2VjdEVsbGlwc2VMaW5lKGMsIHJ4LCByeSwgdG9wUmlnaHQsIG1heCk7XG4gICAgdmFyIGludGVyMyA9IEludGVyc2VjdGlvbi5pbnRlcnNlY3RFbGxpcHNlTGluZShjLCByeCwgcnksIG1heCwgYm90dG9tTGVmdCk7XG4gICAgdmFyIGludGVyNCA9IEludGVyc2VjdGlvbi5pbnRlcnNlY3RFbGxpcHNlTGluZShjLCByeCwgcnksIGJvdHRvbUxlZnQsIG1pbik7XG4gICAgXG4gICAgdmFyIHJlc3VsdCA9IG5ldyBJbnRlcnNlY3Rpb24oXCJObyBJbnRlcnNlY3Rpb25cIik7XG5cbiAgICByZXN1bHQuYXBwZW5kUG9pbnRzKGludGVyMS5wb2ludHMpO1xuICAgIHJlc3VsdC5hcHBlbmRQb2ludHMoaW50ZXIyLnBvaW50cyk7XG4gICAgcmVzdWx0LmFwcGVuZFBvaW50cyhpbnRlcjMucG9pbnRzKTtcbiAgICByZXN1bHQuYXBwZW5kUG9pbnRzKGludGVyNC5wb2ludHMpO1xuXG4gICAgaWYgKCByZXN1bHQucG9pbnRzLmxlbmd0aCA+IDAgKVxuICAgICAgICByZXN1bHQuc3RhdHVzID0gXCJJbnRlcnNlY3Rpb25cIjtcblxuICAgIHJldHVybiByZXN1bHQ7XG59O1xuXG5cbi8qKioqKlxuKlxuKiAgIGludGVyc2VjdExpbmVMaW5lXG4qXG4qKioqKi9cbkludGVyc2VjdGlvbi5pbnRlcnNlY3RMaW5lTGluZSA9IGZ1bmN0aW9uKGExLCBhMiwgYjEsIGIyKSB7XG4gICAgdmFyIHJlc3VsdDtcbiAgICBcbiAgICB2YXIgdWFfdCA9IChiMi54IC0gYjEueCkgKiAoYTEueSAtIGIxLnkpIC0gKGIyLnkgLSBiMS55KSAqIChhMS54IC0gYjEueCk7XG4gICAgdmFyIHViX3QgPSAoYTIueCAtIGExLngpICogKGExLnkgLSBiMS55KSAtIChhMi55IC0gYTEueSkgKiAoYTEueCAtIGIxLngpO1xuICAgIHZhciB1X2IgID0gKGIyLnkgLSBiMS55KSAqIChhMi54IC0gYTEueCkgLSAoYjIueCAtIGIxLngpICogKGEyLnkgLSBhMS55KTtcblxuICAgIGlmICggdV9iICE9IDAgKSB7XG4gICAgICAgIHZhciB1YSA9IHVhX3QgLyB1X2I7XG4gICAgICAgIHZhciB1YiA9IHViX3QgLyB1X2I7XG5cbiAgICAgICAgaWYgKCAwIDw9IHVhICYmIHVhIDw9IDEgJiYgMCA8PSB1YiAmJiB1YiA8PSAxICkge1xuICAgICAgICAgICAgcmVzdWx0ID0gbmV3IEludGVyc2VjdGlvbihcIkludGVyc2VjdGlvblwiKTtcbiAgICAgICAgICAgIHJlc3VsdC5wb2ludHMucHVzaChcbiAgICAgICAgICAgICAgICBuZXcgUG9pbnQyRChcbiAgICAgICAgICAgICAgICAgICAgYTEueCArIHVhICogKGEyLnggLSBhMS54KSxcbiAgICAgICAgICAgICAgICAgICAgYTEueSArIHVhICogKGEyLnkgLSBhMS55KVxuICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXN1bHQgPSBuZXcgSW50ZXJzZWN0aW9uKFwiTm8gSW50ZXJzZWN0aW9uXCIpO1xuICAgICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKCB1YV90ID09IDAgfHwgdWJfdCA9PSAwICkge1xuICAgICAgICAgICAgcmVzdWx0ID0gbmV3IEludGVyc2VjdGlvbihcIkNvaW5jaWRlbnRcIik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXN1bHQgPSBuZXcgSW50ZXJzZWN0aW9uKFwiUGFyYWxsZWxcIik7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gcmVzdWx0O1xufTtcblxuXG4vKioqKipcbipcbiogICBpbnRlcnNlY3RMaW5lUG9seWdvblxuKlxuKioqKiovXG5JbnRlcnNlY3Rpb24uaW50ZXJzZWN0TGluZVBvbHlnb24gPSBmdW5jdGlvbihhMSwgYTIsIHBvaW50cykge1xuICAgIHZhciByZXN1bHQgPSBuZXcgSW50ZXJzZWN0aW9uKFwiTm8gSW50ZXJzZWN0aW9uXCIpO1xuICAgIHZhciBsZW5ndGggPSBwb2ludHMubGVuZ3RoO1xuXG4gICAgZm9yICggdmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyBpKysgKSB7XG4gICAgICAgIHZhciBiMSA9IHBvaW50c1tpXTtcbiAgICAgICAgdmFyIGIyID0gcG9pbnRzWyhpKzEpICUgbGVuZ3RoXTtcbiAgICAgICAgdmFyIGludGVyID0gSW50ZXJzZWN0aW9uLmludGVyc2VjdExpbmVMaW5lKGExLCBhMiwgYjEsIGIyKTtcblxuICAgICAgICByZXN1bHQuYXBwZW5kUG9pbnRzKGludGVyLnBvaW50cyk7XG4gICAgfVxuXG4gICAgaWYgKCByZXN1bHQucG9pbnRzLmxlbmd0aCA+IDAgKSByZXN1bHQuc3RhdHVzID0gXCJJbnRlcnNlY3Rpb25cIjtcblxuICAgIHJldHVybiByZXN1bHQ7XG59O1xuXG5cbi8qKioqKlxuKlxuKiAgIGludGVyc2VjdExpbmVSZWN0YW5nbGVcbipcbioqKioqL1xuSW50ZXJzZWN0aW9uLmludGVyc2VjdExpbmVSZWN0YW5nbGUgPSBmdW5jdGlvbihhMSwgYTIsIHIxLCByMikge1xuICAgIHZhciBtaW4gICAgICAgID0gcjEubWluKHIyKTtcbiAgICB2YXIgbWF4ICAgICAgICA9IHIxLm1heChyMik7XG4gICAgdmFyIHRvcFJpZ2h0ICAgPSBuZXcgUG9pbnQyRCggbWF4LngsIG1pbi55ICk7XG4gICAgdmFyIGJvdHRvbUxlZnQgPSBuZXcgUG9pbnQyRCggbWluLngsIG1heC55ICk7XG4gICAgXG4gICAgdmFyIGludGVyMSA9IEludGVyc2VjdGlvbi5pbnRlcnNlY3RMaW5lTGluZShtaW4sIHRvcFJpZ2h0LCBhMSwgYTIpO1xuICAgIHZhciBpbnRlcjIgPSBJbnRlcnNlY3Rpb24uaW50ZXJzZWN0TGluZUxpbmUodG9wUmlnaHQsIG1heCwgYTEsIGEyKTtcbiAgICB2YXIgaW50ZXIzID0gSW50ZXJzZWN0aW9uLmludGVyc2VjdExpbmVMaW5lKG1heCwgYm90dG9tTGVmdCwgYTEsIGEyKTtcbiAgICB2YXIgaW50ZXI0ID0gSW50ZXJzZWN0aW9uLmludGVyc2VjdExpbmVMaW5lKGJvdHRvbUxlZnQsIG1pbiwgYTEsIGEyKTtcbiAgICBcbiAgICB2YXIgcmVzdWx0ID0gbmV3IEludGVyc2VjdGlvbihcIk5vIEludGVyc2VjdGlvblwiKTtcblxuICAgIHJlc3VsdC5hcHBlbmRQb2ludHMoaW50ZXIxLnBvaW50cyk7XG4gICAgcmVzdWx0LmFwcGVuZFBvaW50cyhpbnRlcjIucG9pbnRzKTtcbiAgICByZXN1bHQuYXBwZW5kUG9pbnRzKGludGVyMy5wb2ludHMpO1xuICAgIHJlc3VsdC5hcHBlbmRQb2ludHMoaW50ZXI0LnBvaW50cyk7XG5cbiAgICBpZiAoIHJlc3VsdC5wb2ludHMubGVuZ3RoID4gMCApXG4gICAgICAgIHJlc3VsdC5zdGF0dXMgPSBcIkludGVyc2VjdGlvblwiO1xuXG4gICAgcmV0dXJuIHJlc3VsdDtcbn07XG5cblxuLyoqKioqXG4qXG4qICAgaW50ZXJzZWN0UG9seWdvblBvbHlnb25cbipcbioqKioqL1xuSW50ZXJzZWN0aW9uLmludGVyc2VjdFBvbHlnb25Qb2x5Z29uID0gZnVuY3Rpb24ocG9pbnRzMSwgcG9pbnRzMikge1xuICAgIHZhciByZXN1bHQgPSBuZXcgSW50ZXJzZWN0aW9uKFwiTm8gSW50ZXJzZWN0aW9uXCIpO1xuICAgIHZhciBsZW5ndGggPSBwb2ludHMxLmxlbmd0aDtcblxuICAgIGZvciAoIHZhciBpID0gMDsgaSA8IGxlbmd0aDsgaSsrICkge1xuICAgICAgICB2YXIgYTEgPSBwb2ludHMxW2ldO1xuICAgICAgICB2YXIgYTIgPSBwb2ludHMxWyhpKzEpICUgbGVuZ3RoXTtcbiAgICAgICAgdmFyIGludGVyID0gSW50ZXJzZWN0aW9uLmludGVyc2VjdExpbmVQb2x5Z29uKGExLCBhMiwgcG9pbnRzMik7XG5cbiAgICAgICAgcmVzdWx0LmFwcGVuZFBvaW50cyhpbnRlci5wb2ludHMpO1xuICAgIH1cblxuICAgIGlmICggcmVzdWx0LnBvaW50cy5sZW5ndGggPiAwIClcbiAgICAgICAgcmVzdWx0LnN0YXR1cyA9IFwiSW50ZXJzZWN0aW9uXCI7XG5cbiAgICByZXR1cm4gcmVzdWx0O1xuXG59O1xuXG5cbi8qKioqKlxuKlxuKiAgIGludGVyc2VjdFBvbHlnb25SZWN0YW5nbGVcbipcbioqKioqL1xuSW50ZXJzZWN0aW9uLmludGVyc2VjdFBvbHlnb25SZWN0YW5nbGUgPSBmdW5jdGlvbihwb2ludHMsIHIxLCByMikge1xuICAgIHZhciBtaW4gICAgICAgID0gcjEubWluKHIyKTtcbiAgICB2YXIgbWF4ICAgICAgICA9IHIxLm1heChyMik7XG4gICAgdmFyIHRvcFJpZ2h0ICAgPSBuZXcgUG9pbnQyRCggbWF4LngsIG1pbi55ICk7XG4gICAgdmFyIGJvdHRvbUxlZnQgPSBuZXcgUG9pbnQyRCggbWluLngsIG1heC55ICk7XG4gICAgXG4gICAgdmFyIGludGVyMSA9IEludGVyc2VjdGlvbi5pbnRlcnNlY3RMaW5lUG9seWdvbihtaW4sIHRvcFJpZ2h0LCBwb2ludHMpO1xuICAgIHZhciBpbnRlcjIgPSBJbnRlcnNlY3Rpb24uaW50ZXJzZWN0TGluZVBvbHlnb24odG9wUmlnaHQsIG1heCwgcG9pbnRzKTtcbiAgICB2YXIgaW50ZXIzID0gSW50ZXJzZWN0aW9uLmludGVyc2VjdExpbmVQb2x5Z29uKG1heCwgYm90dG9tTGVmdCwgcG9pbnRzKTtcbiAgICB2YXIgaW50ZXI0ID0gSW50ZXJzZWN0aW9uLmludGVyc2VjdExpbmVQb2x5Z29uKGJvdHRvbUxlZnQsIG1pbiwgcG9pbnRzKTtcbiAgICBcbiAgICB2YXIgcmVzdWx0ID0gbmV3IEludGVyc2VjdGlvbihcIk5vIEludGVyc2VjdGlvblwiKTtcblxuICAgIHJlc3VsdC5hcHBlbmRQb2ludHMoaW50ZXIxLnBvaW50cyk7XG4gICAgcmVzdWx0LmFwcGVuZFBvaW50cyhpbnRlcjIucG9pbnRzKTtcbiAgICByZXN1bHQuYXBwZW5kUG9pbnRzKGludGVyMy5wb2ludHMpO1xuICAgIHJlc3VsdC5hcHBlbmRQb2ludHMoaW50ZXI0LnBvaW50cyk7XG5cbiAgICBpZiAoIHJlc3VsdC5wb2ludHMubGVuZ3RoID4gMCApXG4gICAgICAgIHJlc3VsdC5zdGF0dXMgPSBcIkludGVyc2VjdGlvblwiO1xuXG4gICAgcmV0dXJuIHJlc3VsdDtcbn07XG5cblxuLyoqKioqXG4qXG4qICAgaW50ZXJzZWN0UmF5UmF5XG4qXG4qKioqKi9cbkludGVyc2VjdGlvbi5pbnRlcnNlY3RSYXlSYXkgPSBmdW5jdGlvbihhMSwgYTIsIGIxLCBiMikge1xuICAgIHZhciByZXN1bHQ7XG4gICAgXG4gICAgdmFyIHVhX3QgPSAoYjIueCAtIGIxLngpICogKGExLnkgLSBiMS55KSAtIChiMi55IC0gYjEueSkgKiAoYTEueCAtIGIxLngpO1xuICAgIHZhciB1Yl90ID0gKGEyLnggLSBhMS54KSAqIChhMS55IC0gYjEueSkgLSAoYTIueSAtIGExLnkpICogKGExLnggLSBiMS54KTtcbiAgICB2YXIgdV9iICA9IChiMi55IC0gYjEueSkgKiAoYTIueCAtIGExLngpIC0gKGIyLnggLSBiMS54KSAqIChhMi55IC0gYTEueSk7XG5cbiAgICBpZiAoIHVfYiAhPSAwICkge1xuICAgICAgICB2YXIgdWEgPSB1YV90IC8gdV9iO1xuXG4gICAgICAgIHJlc3VsdCA9IG5ldyBJbnRlcnNlY3Rpb24oXCJJbnRlcnNlY3Rpb25cIik7XG4gICAgICAgIHJlc3VsdC5wb2ludHMucHVzaChcbiAgICAgICAgICAgIG5ldyBQb2ludDJEKFxuICAgICAgICAgICAgICAgIGExLnggKyB1YSAqIChhMi54IC0gYTEueCksXG4gICAgICAgICAgICAgICAgYTEueSArIHVhICogKGEyLnkgLSBhMS55KVxuICAgICAgICAgICAgKVxuICAgICAgICApO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIGlmICggdWFfdCA9PSAwIHx8IHViX3QgPT0gMCApIHtcbiAgICAgICAgICAgIHJlc3VsdCA9IG5ldyBJbnRlcnNlY3Rpb24oXCJDb2luY2lkZW50XCIpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmVzdWx0ID0gbmV3IEludGVyc2VjdGlvbihcIlBhcmFsbGVsXCIpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlc3VsdDtcbn07XG5cblxuLyoqKioqXG4qXG4qICAgaW50ZXJzZWN0UmVjdGFuZ2xlUmVjdGFuZ2xlXG4qXG4qKioqKi9cbkludGVyc2VjdGlvbi5pbnRlcnNlY3RSZWN0YW5nbGVSZWN0YW5nbGUgPSBmdW5jdGlvbihhMSwgYTIsIGIxLCBiMikge1xuICAgIHZhciBtaW4gICAgICAgID0gYTEubWluKGEyKTtcbiAgICB2YXIgbWF4ICAgICAgICA9IGExLm1heChhMik7XG4gICAgdmFyIHRvcFJpZ2h0ICAgPSBuZXcgUG9pbnQyRCggbWF4LngsIG1pbi55ICk7XG4gICAgdmFyIGJvdHRvbUxlZnQgPSBuZXcgUG9pbnQyRCggbWluLngsIG1heC55ICk7XG4gICAgXG4gICAgdmFyIGludGVyMSA9IEludGVyc2VjdGlvbi5pbnRlcnNlY3RMaW5lUmVjdGFuZ2xlKG1pbiwgdG9wUmlnaHQsIGIxLCBiMik7XG4gICAgdmFyIGludGVyMiA9IEludGVyc2VjdGlvbi5pbnRlcnNlY3RMaW5lUmVjdGFuZ2xlKHRvcFJpZ2h0LCBtYXgsIGIxLCBiMik7XG4gICAgdmFyIGludGVyMyA9IEludGVyc2VjdGlvbi5pbnRlcnNlY3RMaW5lUmVjdGFuZ2xlKG1heCwgYm90dG9tTGVmdCwgYjEsIGIyKTtcbiAgICB2YXIgaW50ZXI0ID0gSW50ZXJzZWN0aW9uLmludGVyc2VjdExpbmVSZWN0YW5nbGUoYm90dG9tTGVmdCwgbWluLCBiMSwgYjIpO1xuICAgIFxuICAgIHZhciByZXN1bHQgPSBuZXcgSW50ZXJzZWN0aW9uKFwiTm8gSW50ZXJzZWN0aW9uXCIpO1xuXG4gICAgcmVzdWx0LmFwcGVuZFBvaW50cyhpbnRlcjEucG9pbnRzKTtcbiAgICByZXN1bHQuYXBwZW5kUG9pbnRzKGludGVyMi5wb2ludHMpO1xuICAgIHJlc3VsdC5hcHBlbmRQb2ludHMoaW50ZXIzLnBvaW50cyk7XG4gICAgcmVzdWx0LmFwcGVuZFBvaW50cyhpbnRlcjQucG9pbnRzKTtcblxuICAgIGlmICggcmVzdWx0LnBvaW50cy5sZW5ndGggPiAwIClcbiAgICAgICAgcmVzdWx0LnN0YXR1cyA9IFwiSW50ZXJzZWN0aW9uXCI7XG5cbiAgICByZXR1cm4gcmVzdWx0O1xufTtcblxuXG4vKioqKipcbipcbiogICBiZXpvdXRcbipcbiogICBUaGlzIGNvZGUgaXMgYmFzZWQgb24gTWdjSW50cjJERWxwRWxwLmNwcCB3cml0dGVuIGJ5IERhdmlkIEViZXJseS4gIEhpc1xuKiAgIGNvZGUgYWxvbmcgd2l0aCBtYW55IG90aGVyIGV4Y2VsbGVudCBleGFtcGxlcyBhcmUgYXZhaWFibGUgYXQgaGlzIHNpdGU6XG4qICAgaHR0cDovL3d3dy5tYWdpYy1zb2Z0d2FyZS5jb21cbipcbioqKioqL1xuSW50ZXJzZWN0aW9uLmJlem91dCA9IGZ1bmN0aW9uKGUxLCBlMikge1xuICAgIHZhciBBQiAgICA9IGUxWzBdKmUyWzFdIC0gZTJbMF0qZTFbMV07XG4gICAgdmFyIEFDICAgID0gZTFbMF0qZTJbMl0gLSBlMlswXSplMVsyXTtcbiAgICB2YXIgQUQgICAgPSBlMVswXSplMlszXSAtIGUyWzBdKmUxWzNdO1xuICAgIHZhciBBRSAgICA9IGUxWzBdKmUyWzRdIC0gZTJbMF0qZTFbNF07XG4gICAgdmFyIEFGICAgID0gZTFbMF0qZTJbNV0gLSBlMlswXSplMVs1XTtcbiAgICB2YXIgQkMgICAgPSBlMVsxXSplMlsyXSAtIGUyWzFdKmUxWzJdO1xuICAgIHZhciBCRSAgICA9IGUxWzFdKmUyWzRdIC0gZTJbMV0qZTFbNF07XG4gICAgdmFyIEJGICAgID0gZTFbMV0qZTJbNV0gLSBlMlsxXSplMVs1XTtcbiAgICB2YXIgQ0QgICAgPSBlMVsyXSplMlszXSAtIGUyWzJdKmUxWzNdO1xuICAgIHZhciBERSAgICA9IGUxWzNdKmUyWzRdIC0gZTJbM10qZTFbNF07XG4gICAgdmFyIERGICAgID0gZTFbM10qZTJbNV0gLSBlMlszXSplMVs1XTtcbiAgICB2YXIgQkZwREUgPSBCRiArIERFO1xuICAgIHZhciBCRW1DRCA9IEJFIC0gQ0Q7XG5cbiAgICByZXR1cm4gbmV3IFBvbHlub21pYWwoXG4gICAgICAgIEFCKkJDIC0gQUMqQUMsXG4gICAgICAgIEFCKkJFbUNEICsgQUQqQkMgLSAyKkFDKkFFLFxuICAgICAgICBBQipCRnBERSArIEFEKkJFbUNEIC0gQUUqQUUgLSAyKkFDKkFGLFxuICAgICAgICBBQipERiArIEFEKkJGcERFIC0gMipBRSpBRixcbiAgICAgICAgQUQqREYgLSBBRipBRlxuICAgICk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IEludGVyc2VjdGlvbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/intersectionjs/intersection.js\n");

/***/ }),

/***/ "./node_modules/point2d/index.js":
/*!***************************************!*\
  !*** ./node_modules/point2d/index.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("\n/**\n * An immutable point in 2d space\n * @param {Number} x The x coordinate\n * @param {Number} y The y coordinate\n */\nfunction Point (x, y) {\n  this.x = x || 0;\n  this.y = y || 0;\n  Object.freeze(this);\n}\n\n/**\n * Returns the Euclidean distance between this point and another point\n * @param {Point} point The other point\n * @returns {Number} The Euclidean distance\n */\nPoint.prototype.distance = function (point) {\n  return Math.sqrt(Math.pow(this.x - point.x, 2) + Math.pow(this.y - point.y, 2));\n};\n\n/**\n * Returns the Manhattan distance between this point and another point\n * @param {Point} point The other point\n * @returns {Number} The Manhattan distance\n */\nPoint.prototype.manhattanDistance = function (point) {\n  var scalePoint = this.sub(point).abs();\n  return scalePoint.x + scalePoint.y;\n};\n\n/**\n * Returns a new point with coordinates in absolute value\n * @returns {Point} The new point\n */\nPoint.prototype.abs = function () {\n  return new Point(Math.abs(this.x), Math.abs(this.y));\n};\n\n/**\n * Returns true if the x and y coordinate of this point equals the x and y coordinate of the other point\n * @param {Point} point The other point\n * @returns {Boolean} If the points equal\n */\nPoint.prototype.equals = function (point) {\n  return this.x === point.x && this.y === point.y;\n};\n\n/**\n * Returns a new point with the coordinates added together\n * @param {Point} point The other point\n * @returns {Point} A new point\n */\nPoint.prototype.add = function (point) {\n  return new Point(this.x + point.x, this.y + point.y);\n};\n\n/**\n * Returns a new point with the coordinates of this point subtracted by the other point\n * @param {Point} point The other point\n * @returns {Point} The new point\n */\nPoint.prototype.sub = function (point) {\n  return new Point(this.x - point.x, this.y - point.y);\n};\n\nmodule.exports = Point;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvcG9pbnQyZC9pbmRleC5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovL3hpTkVULy4vbm9kZV9tb2R1bGVzL3BvaW50MmQvaW5kZXguanM/ZGQ3YiJdLCJzb3VyY2VzQ29udGVudCI6WyJcbi8qKlxuICogQW4gaW1tdXRhYmxlIHBvaW50IGluIDJkIHNwYWNlXG4gKiBAcGFyYW0ge051bWJlcn0geCBUaGUgeCBjb29yZGluYXRlXG4gKiBAcGFyYW0ge051bWJlcn0geSBUaGUgeSBjb29yZGluYXRlXG4gKi9cbmZ1bmN0aW9uIFBvaW50ICh4LCB5KSB7XG4gIHRoaXMueCA9IHggfHwgMDtcbiAgdGhpcy55ID0geSB8fCAwO1xuICBPYmplY3QuZnJlZXplKHRoaXMpO1xufVxuXG4vKipcbiAqIFJldHVybnMgdGhlIEV1Y2xpZGVhbiBkaXN0YW5jZSBiZXR3ZWVuIHRoaXMgcG9pbnQgYW5kIGFub3RoZXIgcG9pbnRcbiAqIEBwYXJhbSB7UG9pbnR9IHBvaW50IFRoZSBvdGhlciBwb2ludFxuICogQHJldHVybnMge051bWJlcn0gVGhlIEV1Y2xpZGVhbiBkaXN0YW5jZVxuICovXG5Qb2ludC5wcm90b3R5cGUuZGlzdGFuY2UgPSBmdW5jdGlvbiAocG9pbnQpIHtcbiAgcmV0dXJuIE1hdGguc3FydChNYXRoLnBvdyh0aGlzLnggLSBwb2ludC54LCAyKSArIE1hdGgucG93KHRoaXMueSAtIHBvaW50LnksIDIpKTtcbn07XG5cbi8qKlxuICogUmV0dXJucyB0aGUgTWFuaGF0dGFuIGRpc3RhbmNlIGJldHdlZW4gdGhpcyBwb2ludCBhbmQgYW5vdGhlciBwb2ludFxuICogQHBhcmFtIHtQb2ludH0gcG9pbnQgVGhlIG90aGVyIHBvaW50XG4gKiBAcmV0dXJucyB7TnVtYmVyfSBUaGUgTWFuaGF0dGFuIGRpc3RhbmNlXG4gKi9cblBvaW50LnByb3RvdHlwZS5tYW5oYXR0YW5EaXN0YW5jZSA9IGZ1bmN0aW9uIChwb2ludCkge1xuICB2YXIgc2NhbGVQb2ludCA9IHRoaXMuc3ViKHBvaW50KS5hYnMoKTtcbiAgcmV0dXJuIHNjYWxlUG9pbnQueCArIHNjYWxlUG9pbnQueTtcbn07XG5cbi8qKlxuICogUmV0dXJucyBhIG5ldyBwb2ludCB3aXRoIGNvb3JkaW5hdGVzIGluIGFic29sdXRlIHZhbHVlXG4gKiBAcmV0dXJucyB7UG9pbnR9IFRoZSBuZXcgcG9pbnRcbiAqL1xuUG9pbnQucHJvdG90eXBlLmFicyA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIG5ldyBQb2ludChNYXRoLmFicyh0aGlzLngpLCBNYXRoLmFicyh0aGlzLnkpKTtcbn07XG5cbi8qKlxuICogUmV0dXJucyB0cnVlIGlmIHRoZSB4IGFuZCB5IGNvb3JkaW5hdGUgb2YgdGhpcyBwb2ludCBlcXVhbHMgdGhlIHggYW5kIHkgY29vcmRpbmF0ZSBvZiB0aGUgb3RoZXIgcG9pbnRcbiAqIEBwYXJhbSB7UG9pbnR9IHBvaW50IFRoZSBvdGhlciBwb2ludFxuICogQHJldHVybnMge0Jvb2xlYW59IElmIHRoZSBwb2ludHMgZXF1YWxcbiAqL1xuUG9pbnQucHJvdG90eXBlLmVxdWFscyA9IGZ1bmN0aW9uIChwb2ludCkge1xuICByZXR1cm4gdGhpcy54ID09PSBwb2ludC54ICYmIHRoaXMueSA9PT0gcG9pbnQueTtcbn07XG5cbi8qKlxuICogUmV0dXJucyBhIG5ldyBwb2ludCB3aXRoIHRoZSBjb29yZGluYXRlcyBhZGRlZCB0b2dldGhlclxuICogQHBhcmFtIHtQb2ludH0gcG9pbnQgVGhlIG90aGVyIHBvaW50XG4gKiBAcmV0dXJucyB7UG9pbnR9IEEgbmV3IHBvaW50XG4gKi9cblBvaW50LnByb3RvdHlwZS5hZGQgPSBmdW5jdGlvbiAocG9pbnQpIHtcbiAgcmV0dXJuIG5ldyBQb2ludCh0aGlzLnggKyBwb2ludC54LCB0aGlzLnkgKyBwb2ludC55KTtcbn07XG5cbi8qKlxuICogUmV0dXJucyBhIG5ldyBwb2ludCB3aXRoIHRoZSBjb29yZGluYXRlcyBvZiB0aGlzIHBvaW50IHN1YnRyYWN0ZWQgYnkgdGhlIG90aGVyIHBvaW50XG4gKiBAcGFyYW0ge1BvaW50fSBwb2ludCBUaGUgb3RoZXIgcG9pbnRcbiAqIEByZXR1cm5zIHtQb2ludH0gVGhlIG5ldyBwb2ludFxuICovXG5Qb2ludC5wcm90b3R5cGUuc3ViID0gZnVuY3Rpb24gKHBvaW50KSB7XG4gIHJldHVybiBuZXcgUG9pbnQodGhpcy54IC0gcG9pbnQueCwgdGhpcy55IC0gcG9pbnQueSk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFBvaW50OyJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/point2d/index.js\n");

/***/ }),

/***/ "./node_modules/webcola/dist/index.js":
/*!********************************************!*\
  !*** ./node_modules/webcola/dist/index.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nfunction __export(m) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n__export(__webpack_require__(/*! ./src/adaptor */ \"./node_modules/webcola/dist/src/adaptor.js\"));\r\n__export(__webpack_require__(/*! ./src/d3adaptor */ \"./node_modules/webcola/dist/src/d3adaptor.js\"));\r\n__export(__webpack_require__(/*! ./src/descent */ \"./node_modules/webcola/dist/src/descent.js\"));\r\n__export(__webpack_require__(/*! ./src/geom */ \"./node_modules/webcola/dist/src/geom.js\"));\r\n__export(__webpack_require__(/*! ./src/gridrouter */ \"./node_modules/webcola/dist/src/gridrouter.js\"));\r\n__export(__webpack_require__(/*! ./src/handledisconnected */ \"./node_modules/webcola/dist/src/handledisconnected.js\"));\r\n__export(__webpack_require__(/*! ./src/layout */ \"./node_modules/webcola/dist/src/layout.js\"));\r\n__export(__webpack_require__(/*! ./src/layout3d */ \"./node_modules/webcola/dist/src/layout3d.js\"));\r\n__export(__webpack_require__(/*! ./src/linklengths */ \"./node_modules/webcola/dist/src/linklengths.js\"));\r\n__export(__webpack_require__(/*! ./src/powergraph */ \"./node_modules/webcola/dist/src/powergraph.js\"));\r\n__export(__webpack_require__(/*! ./src/pqueue */ \"./node_modules/webcola/dist/src/pqueue.js\"));\r\n__export(__webpack_require__(/*! ./src/rbtree */ \"./node_modules/webcola/dist/src/rbtree.js\"));\r\n__export(__webpack_require__(/*! ./src/rectangle */ \"./node_modules/webcola/dist/src/rectangle.js\"));\r\n__export(__webpack_require__(/*! ./src/shortestpaths */ \"./node_modules/webcola/dist/src/shortestpaths.js\"));\r\n__export(__webpack_require__(/*! ./src/vpsc */ \"./node_modules/webcola/dist/src/vpsc.js\"));\r\n__export(__webpack_require__(/*! ./src/batch */ \"./node_modules/webcola/dist/src/batch.js\"));\r\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9XZWJDb2xhL2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsbUNBQTZCO0FBQzdCLHFDQUErQjtBQUMvQixtQ0FBNkI7QUFDN0IsZ0NBQTBCO0FBQzFCLHNDQUFnQztBQUNoQyw4Q0FBd0M7QUFDeEMsa0NBQTRCO0FBQzVCLG9DQUE4QjtBQUM5Qix1Q0FBaUM7QUFDakMsc0NBQWdDO0FBQ2hDLGtDQUE0QjtBQUM1QixrQ0FBNEI7QUFDNUIscUNBQStCO0FBQy9CLHlDQUFtQztBQUNuQyxnQ0FBMEI7QUFDMUIsaUNBQTJCIn0=//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvd2ViY29sYS9kaXN0L2luZGV4LmpzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8veGlORVQvLi9ub2RlX21vZHVsZXMvd2ViY29sYS9kaXN0L2luZGV4LmpzP2NjZWQiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XHJcbmZ1bmN0aW9uIF9fZXhwb3J0KG0pIHtcclxuICAgIGZvciAodmFyIHAgaW4gbSkgaWYgKCFleHBvcnRzLmhhc093blByb3BlcnR5KHApKSBleHBvcnRzW3BdID0gbVtwXTtcclxufVxyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbl9fZXhwb3J0KHJlcXVpcmUoXCIuL3NyYy9hZGFwdG9yXCIpKTtcclxuX19leHBvcnQocmVxdWlyZShcIi4vc3JjL2QzYWRhcHRvclwiKSk7XHJcbl9fZXhwb3J0KHJlcXVpcmUoXCIuL3NyYy9kZXNjZW50XCIpKTtcclxuX19leHBvcnQocmVxdWlyZShcIi4vc3JjL2dlb21cIikpO1xyXG5fX2V4cG9ydChyZXF1aXJlKFwiLi9zcmMvZ3JpZHJvdXRlclwiKSk7XHJcbl9fZXhwb3J0KHJlcXVpcmUoXCIuL3NyYy9oYW5kbGVkaXNjb25uZWN0ZWRcIikpO1xyXG5fX2V4cG9ydChyZXF1aXJlKFwiLi9zcmMvbGF5b3V0XCIpKTtcclxuX19leHBvcnQocmVxdWlyZShcIi4vc3JjL2xheW91dDNkXCIpKTtcclxuX19leHBvcnQocmVxdWlyZShcIi4vc3JjL2xpbmtsZW5ndGhzXCIpKTtcclxuX19leHBvcnQocmVxdWlyZShcIi4vc3JjL3Bvd2VyZ3JhcGhcIikpO1xyXG5fX2V4cG9ydChyZXF1aXJlKFwiLi9zcmMvcHF1ZXVlXCIpKTtcclxuX19leHBvcnQocmVxdWlyZShcIi4vc3JjL3JidHJlZVwiKSk7XHJcbl9fZXhwb3J0KHJlcXVpcmUoXCIuL3NyYy9yZWN0YW5nbGVcIikpO1xyXG5fX2V4cG9ydChyZXF1aXJlKFwiLi9zcmMvc2hvcnRlc3RwYXRoc1wiKSk7XHJcbl9fZXhwb3J0KHJlcXVpcmUoXCIuL3NyYy92cHNjXCIpKTtcclxuX19leHBvcnQocmVxdWlyZShcIi4vc3JjL2JhdGNoXCIpKTtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKbWFXeGxJam9pYVc1a1pYZ3Vhbk1pTENKemIzVnlZMlZTYjI5MElqb2lJaXdpYzI5MWNtTmxjeUk2V3lJdUxpOVhaV0pEYjJ4aEwybHVaR1Y0TG5SeklsMHNJbTVoYldWeklqcGJYU3dpYldGd2NHbHVaM01pT2lJN096czdPMEZCUVVFc2JVTkJRVFpDTzBGQlF6ZENMSEZEUVVFclFqdEJRVU12UWl4dFEwRkJOa0k3UVVGRE4wSXNaME5CUVRCQ08wRkJRekZDTEhORFFVRm5RenRCUVVOb1F5dzRRMEZCZDBNN1FVRkRlRU1zYTBOQlFUUkNPMEZCUXpWQ0xHOURRVUU0UWp0QlFVTTVRaXgxUTBGQmFVTTdRVUZEYWtNc2MwTkJRV2RETzBGQlEyaERMR3REUVVFMFFqdEJRVU0xUWl4clEwRkJORUk3UVVGRE5VSXNjVU5CUVN0Q08wRkJReTlDTEhsRFFVRnRRenRCUVVOdVF5eG5RMEZCTUVJN1FVRkRNVUlzYVVOQlFUSkNJbjA9Il0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/webcola/dist/index.js\n");

/***/ }),

/***/ "./node_modules/webcola/dist/src/adaptor.js":
/*!**************************************************!*\
  !*** ./node_modules/webcola/dist/src/adaptor.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = function (d, b) {\r\n        extendStatics = Object.setPrototypeOf ||\r\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n        return extendStatics(d, b);\r\n    };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar layout_1 = __webpack_require__(/*! ./layout */ \"./node_modules/webcola/dist/src/layout.js\");\r\nvar LayoutAdaptor = (function (_super) {\r\n    __extends(LayoutAdaptor, _super);\r\n    function LayoutAdaptor(options) {\r\n        var _this = _super.call(this) || this;\r\n        var self = _this;\r\n        var o = options;\r\n        if (o.trigger) {\r\n            _this.trigger = o.trigger;\r\n        }\r\n        if (o.kick) {\r\n            _this.kick = o.kick;\r\n        }\r\n        if (o.drag) {\r\n            _this.drag = o.drag;\r\n        }\r\n        if (o.on) {\r\n            _this.on = o.on;\r\n        }\r\n        _this.dragstart = _this.dragStart = layout_1.Layout.dragStart;\r\n        _this.dragend = _this.dragEnd = layout_1.Layout.dragEnd;\r\n        return _this;\r\n    }\r\n    LayoutAdaptor.prototype.trigger = function (e) { };\r\n    ;\r\n    LayoutAdaptor.prototype.kick = function () { };\r\n    ;\r\n    LayoutAdaptor.prototype.drag = function () { };\r\n    ;\r\n    LayoutAdaptor.prototype.on = function (eventType, listener) { return this; };\r\n    ;\r\n    return LayoutAdaptor;\r\n}(layout_1.Layout));\r\nexports.LayoutAdaptor = LayoutAdaptor;\r\nfunction adaptor(options) {\r\n    return new LayoutAdaptor(options);\r\n}\r\nexports.adaptor = adaptor;\r\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWRhcHRvci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL1dlYkNvbGEvc3JjL2FkYXB0b3IudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7O0FBQUEsbUNBQWlEO0FBRTdDO0lBQW1DLGlDQUFNO0lBYXJDLHVCQUFhLE9BQU87UUFBcEIsWUFDSSxpQkFBTyxTQXlCVjtRQXJCRyxJQUFJLElBQUksR0FBRyxLQUFJLENBQUM7UUFDaEIsSUFBSSxDQUFDLEdBQUcsT0FBTyxDQUFDO1FBRWhCLElBQUssQ0FBQyxDQUFDLE9BQU8sRUFBRztZQUNiLEtBQUksQ0FBQyxPQUFPLEdBQUcsQ0FBQyxDQUFDLE9BQU8sQ0FBQztTQUM1QjtRQUVELElBQUssQ0FBQyxDQUFDLElBQUksRUFBRTtZQUNULEtBQUksQ0FBQyxJQUFJLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQztTQUN0QjtRQUVELElBQUssQ0FBQyxDQUFDLElBQUksRUFBRTtZQUNULEtBQUksQ0FBQyxJQUFJLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQztTQUN0QjtRQUVELElBQUssQ0FBQyxDQUFDLEVBQUUsRUFBRTtZQUNQLEtBQUksQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQztTQUNsQjtRQUVELEtBQUksQ0FBQyxTQUFTLEdBQUcsS0FBSSxDQUFDLFNBQVMsR0FBRyxlQUFNLENBQUMsU0FBUyxDQUFDO1FBQ25ELEtBQUksQ0FBQyxPQUFPLEdBQUcsS0FBSSxDQUFDLE9BQU8sR0FBRyxlQUFNLENBQUMsT0FBTyxDQUFDOztJQUNqRCxDQUFDO0lBcENELCtCQUFPLEdBQVAsVUFBUSxDQUFRLElBQUcsQ0FBQztJQUFBLENBQUM7SUFDckIsNEJBQUksR0FBSixjQUFRLENBQUM7SUFBQSxDQUFDO0lBQ1YsNEJBQUksR0FBSixjQUFRLENBQUM7SUFBQSxDQUFDO0lBQ1YsMEJBQUUsR0FBRixVQUFHLFNBQTZCLEVBQUUsUUFBb0IsSUFBVyxPQUFPLElBQUksQ0FBQyxDQUFDLENBQUM7SUFBQSxDQUFDO0lBa0NwRixvQkFBQztBQUFELENBQUMsQUF4Q0QsQ0FBbUMsZUFBTSxHQXdDeEM7QUF4Q1ksc0NBQWE7QUE2QzFCLFNBQWdCLE9BQU8sQ0FBRSxPQUFPO0lBQzVCLE9BQU8sSUFBSSxhQUFhLENBQUUsT0FBTyxDQUFFLENBQUM7QUFDeEMsQ0FBQztBQUZELDBCQUVDIn0=//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvd2ViY29sYS9kaXN0L3NyYy9hZGFwdG9yLmpzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8veGlORVQvLi9ub2RlX21vZHVsZXMvd2ViY29sYS9kaXN0L3NyYy9hZGFwdG9yLmpzPzczYTQiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XHJcbnZhciBfX2V4dGVuZHMgPSAodGhpcyAmJiB0aGlzLl9fZXh0ZW5kcykgfHwgKGZ1bmN0aW9uICgpIHtcclxuICAgIHZhciBleHRlbmRTdGF0aWNzID0gZnVuY3Rpb24gKGQsIGIpIHtcclxuICAgICAgICBleHRlbmRTdGF0aWNzID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8XHJcbiAgICAgICAgICAgICh7IF9fcHJvdG9fXzogW10gfSBpbnN0YW5jZW9mIEFycmF5ICYmIGZ1bmN0aW9uIChkLCBiKSB7IGQuX19wcm90b19fID0gYjsgfSkgfHxcclxuICAgICAgICAgICAgZnVuY3Rpb24gKGQsIGIpIHsgZm9yICh2YXIgcCBpbiBiKSBpZiAoYi5oYXNPd25Qcm9wZXJ0eShwKSkgZFtwXSA9IGJbcF07IH07XHJcbiAgICAgICAgcmV0dXJuIGV4dGVuZFN0YXRpY3MoZCwgYik7XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIGZ1bmN0aW9uIChkLCBiKSB7XHJcbiAgICAgICAgZXh0ZW5kU3RhdGljcyhkLCBiKTtcclxuICAgICAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cclxuICAgICAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XHJcbiAgICB9O1xyXG59KSgpO1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbnZhciBsYXlvdXRfMSA9IHJlcXVpcmUoXCIuL2xheW91dFwiKTtcclxudmFyIExheW91dEFkYXB0b3IgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xyXG4gICAgX19leHRlbmRzKExheW91dEFkYXB0b3IsIF9zdXBlcik7XHJcbiAgICBmdW5jdGlvbiBMYXlvdXRBZGFwdG9yKG9wdGlvbnMpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzKSB8fCB0aGlzO1xyXG4gICAgICAgIHZhciBzZWxmID0gX3RoaXM7XHJcbiAgICAgICAgdmFyIG8gPSBvcHRpb25zO1xyXG4gICAgICAgIGlmIChvLnRyaWdnZXIpIHtcclxuICAgICAgICAgICAgX3RoaXMudHJpZ2dlciA9IG8udHJpZ2dlcjtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKG8ua2ljaykge1xyXG4gICAgICAgICAgICBfdGhpcy5raWNrID0gby5raWNrO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoby5kcmFnKSB7XHJcbiAgICAgICAgICAgIF90aGlzLmRyYWcgPSBvLmRyYWc7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChvLm9uKSB7XHJcbiAgICAgICAgICAgIF90aGlzLm9uID0gby5vbjtcclxuICAgICAgICB9XHJcbiAgICAgICAgX3RoaXMuZHJhZ3N0YXJ0ID0gX3RoaXMuZHJhZ1N0YXJ0ID0gbGF5b3V0XzEuTGF5b3V0LmRyYWdTdGFydDtcclxuICAgICAgICBfdGhpcy5kcmFnZW5kID0gX3RoaXMuZHJhZ0VuZCA9IGxheW91dF8xLkxheW91dC5kcmFnRW5kO1xyXG4gICAgICAgIHJldHVybiBfdGhpcztcclxuICAgIH1cclxuICAgIExheW91dEFkYXB0b3IucHJvdG90eXBlLnRyaWdnZXIgPSBmdW5jdGlvbiAoZSkgeyB9O1xyXG4gICAgO1xyXG4gICAgTGF5b3V0QWRhcHRvci5wcm90b3R5cGUua2ljayA9IGZ1bmN0aW9uICgpIHsgfTtcclxuICAgIDtcclxuICAgIExheW91dEFkYXB0b3IucHJvdG90eXBlLmRyYWcgPSBmdW5jdGlvbiAoKSB7IH07XHJcbiAgICA7XHJcbiAgICBMYXlvdXRBZGFwdG9yLnByb3RvdHlwZS5vbiA9IGZ1bmN0aW9uIChldmVudFR5cGUsIGxpc3RlbmVyKSB7IHJldHVybiB0aGlzOyB9O1xyXG4gICAgO1xyXG4gICAgcmV0dXJuIExheW91dEFkYXB0b3I7XHJcbn0obGF5b3V0XzEuTGF5b3V0KSk7XHJcbmV4cG9ydHMuTGF5b3V0QWRhcHRvciA9IExheW91dEFkYXB0b3I7XHJcbmZ1bmN0aW9uIGFkYXB0b3Iob3B0aW9ucykge1xyXG4gICAgcmV0dXJuIG5ldyBMYXlvdXRBZGFwdG9yKG9wdGlvbnMpO1xyXG59XHJcbmV4cG9ydHMuYWRhcHRvciA9IGFkYXB0b3I7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaVlXUmhjSFJ2Y2k1cWN5SXNJbk52ZFhKalpWSnZiM1FpT2lJaUxDSnpiM1Z5WTJWeklqcGJJaTR1THk0dUwxZGxZa052YkdFdmMzSmpMMkZrWVhCMGIzSXVkSE1pWFN3aWJtRnRaWE1pT2x0ZExDSnRZWEJ3YVc1bmN5STZJanM3T3pzN096czdPenM3T3pzN08wRkJRVUVzYlVOQlFXbEVPMEZCUlRkRE8wbEJRVzFETEdsRFFVRk5PMGxCWVhKRExIVkNRVUZoTEU5QlFVODdVVUZCY0VJc1dVRkRTU3hwUWtGQlR5eFRRWGxDVmp0UlFYSkNSeXhKUVVGSkxFbEJRVWtzUjBGQlJ5eExRVUZKTEVOQlFVTTdVVUZEYUVJc1NVRkJTU3hEUVVGRExFZEJRVWNzVDBGQlR5eERRVUZETzFGQlJXaENMRWxCUVVzc1EwRkJReXhEUVVGRExFOUJRVThzUlVGQlJ6dFpRVU5pTEV0QlFVa3NRMEZCUXl4UFFVRlBMRWRCUVVjc1EwRkJReXhEUVVGRExFOUJRVThzUTBGQlF6dFRRVU0xUWp0UlFVVkVMRWxCUVVzc1EwRkJReXhEUVVGRExFbEJRVWtzUlVGQlJUdFpRVU5VTEV0QlFVa3NRMEZCUXl4SlFVRkpMRWRCUVVjc1EwRkJReXhEUVVGRExFbEJRVWtzUTBGQlF6dFRRVU4wUWp0UlFVVkVMRWxCUVVzc1EwRkJReXhEUVVGRExFbEJRVWtzUlVGQlJUdFpRVU5VTEV0QlFVa3NRMEZCUXl4SlFVRkpMRWRCUVVjc1EwRkJReXhEUVVGRExFbEJRVWtzUTBGQlF6dFRRVU4wUWp0UlFVVkVMRWxCUVVzc1EwRkJReXhEUVVGRExFVkJRVVVzUlVGQlJUdFpRVU5RTEV0QlFVa3NRMEZCUXl4RlFVRkZMRWRCUVVjc1EwRkJReXhEUVVGRExFVkJRVVVzUTBGQlF6dFRRVU5zUWp0UlFVVkVMRXRCUVVrc1EwRkJReXhUUVVGVExFZEJRVWNzUzBGQlNTeERRVUZETEZOQlFWTXNSMEZCUnl4bFFVRk5MRU5CUVVNc1UwRkJVeXhEUVVGRE8xRkJRMjVFTEV0QlFVa3NRMEZCUXl4UFFVRlBMRWRCUVVjc1MwRkJTU3hEUVVGRExFOUJRVThzUjBGQlJ5eGxRVUZOTEVOQlFVTXNUMEZCVHl4RFFVRkRPenRKUVVOcVJDeERRVUZETzBsQmNFTkVMQ3RDUVVGUExFZEJRVkFzVlVGQlVTeERRVUZSTEVsQlFVY3NRMEZCUXp0SlFVRkJMRU5CUVVNN1NVRkRja0lzTkVKQlFVa3NSMEZCU2l4alFVRlJMRU5CUVVNN1NVRkJRU3hEUVVGRE8wbEJRMVlzTkVKQlFVa3NSMEZCU2l4alFVRlJMRU5CUVVNN1NVRkJRU3hEUVVGRE8wbEJRMVlzTUVKQlFVVXNSMEZCUml4VlFVRkhMRk5CUVRaQ0xFVkJRVVVzVVVGQmIwSXNTVUZCVnl4UFFVRlBMRWxCUVVrc1EwRkJReXhEUVVGRExFTkJRVU03U1VGQlFTeERRVUZETzBsQmEwTndSaXh2UWtGQlF6dEJRVUZFTEVOQlFVTXNRVUY0UTBRc1EwRkJiVU1zWlVGQlRTeEhRWGREZUVNN1FVRjRRMWtzYzBOQlFXRTdRVUUyUXpGQ0xGTkJRV2RDTEU5QlFVOHNRMEZCUlN4UFFVRlBPMGxCUXpWQ0xFOUJRVThzU1VGQlNTeGhRVUZoTEVOQlFVVXNUMEZCVHl4RFFVRkZMRU5CUVVNN1FVRkRlRU1zUTBGQlF6dEJRVVpFTERCQ1FVVkRJbjA9Il0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/webcola/dist/src/adaptor.js\n");

/***/ }),

/***/ "./node_modules/webcola/dist/src/batch.js":
/*!************************************************!*\
  !*** ./node_modules/webcola/dist/src/batch.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar layout_1 = __webpack_require__(/*! ./layout */ \"./node_modules/webcola/dist/src/layout.js\");\r\nvar gridrouter_1 = __webpack_require__(/*! ./gridrouter */ \"./node_modules/webcola/dist/src/gridrouter.js\");\r\nfunction gridify(pgLayout, nudgeGap, margin, groupMargin) {\r\n    pgLayout.cola.start(0, 0, 0, 10, false);\r\n    var gridrouter = route(pgLayout.cola.nodes(), pgLayout.cola.groups(), margin, groupMargin);\r\n    return gridrouter.routeEdges(pgLayout.powerGraph.powerEdges, nudgeGap, function (e) { return e.source.routerNode.id; }, function (e) { return e.target.routerNode.id; });\r\n}\r\nexports.gridify = gridify;\r\nfunction route(nodes, groups, margin, groupMargin) {\r\n    nodes.forEach(function (d) {\r\n        d.routerNode = {\r\n            name: d.name,\r\n            bounds: d.bounds.inflate(-margin)\r\n        };\r\n    });\r\n    groups.forEach(function (d) {\r\n        d.routerNode = {\r\n            bounds: d.bounds.inflate(-groupMargin),\r\n            children: (typeof d.groups !== 'undefined' ? d.groups.map(function (c) { return nodes.length + c.id; }) : [])\r\n                .concat(typeof d.leaves !== 'undefined' ? d.leaves.map(function (c) { return c.index; }) : [])\r\n        };\r\n    });\r\n    var gridRouterNodes = nodes.concat(groups).map(function (d, i) {\r\n        d.routerNode.id = i;\r\n        return d.routerNode;\r\n    });\r\n    return new gridrouter_1.GridRouter(gridRouterNodes, {\r\n        getChildren: function (v) { return v.children; },\r\n        getBounds: function (v) { return v.bounds; }\r\n    }, margin - groupMargin);\r\n}\r\nfunction powerGraphGridLayout(graph, size, grouppadding) {\r\n    var powerGraph;\r\n    graph.nodes.forEach(function (v, i) { return v.index = i; });\r\n    new layout_1.Layout()\r\n        .avoidOverlaps(false)\r\n        .nodes(graph.nodes)\r\n        .links(graph.links)\r\n        .powerGraphGroups(function (d) {\r\n        powerGraph = d;\r\n        powerGraph.groups.forEach(function (v) { return v.padding = grouppadding; });\r\n    });\r\n    var n = graph.nodes.length;\r\n    var edges = [];\r\n    var vs = graph.nodes.slice(0);\r\n    vs.forEach(function (v, i) { return v.index = i; });\r\n    powerGraph.groups.forEach(function (g) {\r\n        var sourceInd = g.index = g.id + n;\r\n        vs.push(g);\r\n        if (typeof g.leaves !== 'undefined')\r\n            g.leaves.forEach(function (v) { return edges.push({ source: sourceInd, target: v.index }); });\r\n        if (typeof g.groups !== 'undefined')\r\n            g.groups.forEach(function (gg) { return edges.push({ source: sourceInd, target: gg.id + n }); });\r\n    });\r\n    powerGraph.powerEdges.forEach(function (e) {\r\n        edges.push({ source: e.source.index, target: e.target.index });\r\n    });\r\n    new layout_1.Layout()\r\n        .size(size)\r\n        .nodes(vs)\r\n        .links(edges)\r\n        .avoidOverlaps(false)\r\n        .linkDistance(30)\r\n        .symmetricDiffLinkLengths(5)\r\n        .convergenceThreshold(1e-4)\r\n        .start(100, 0, 0, 0, false);\r\n    return {\r\n        cola: new layout_1.Layout()\r\n            .convergenceThreshold(1e-3)\r\n            .size(size)\r\n            .avoidOverlaps(true)\r\n            .nodes(graph.nodes)\r\n            .links(graph.links)\r\n            .groupCompactness(1e-4)\r\n            .linkDistance(30)\r\n            .symmetricDiffLinkLengths(5)\r\n            .powerGraphGroups(function (d) {\r\n            powerGraph = d;\r\n            powerGraph.groups.forEach(function (v) {\r\n                v.padding = grouppadding;\r\n            });\r\n        }).start(50, 0, 100, 0, false),\r\n        powerGraph: powerGraph\r\n    };\r\n}\r\nexports.powerGraphGridLayout = powerGraphGridLayout;\r\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmF0Y2guanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9XZWJDb2xhL3NyYy9iYXRjaC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLG1DQUEyQztBQUMzQywyQ0FBdUM7QUFRdkMsU0FBZ0IsT0FBTyxDQUFDLFFBQVEsRUFBRSxRQUFnQixFQUFFLE1BQWMsRUFBRSxXQUFtQjtJQUNuRixRQUFRLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFLEVBQUUsS0FBSyxDQUFDLENBQUM7SUFDeEMsSUFBSSxVQUFVLEdBQUcsS0FBSyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLEVBQUUsUUFBUSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsRUFBRSxNQUFNLEVBQUUsV0FBVyxDQUFDLENBQUM7SUFDM0YsT0FBTyxVQUFVLENBQUMsVUFBVSxDQUFNLFFBQVEsQ0FBQyxVQUFVLENBQUMsVUFBVSxFQUFFLFFBQVEsRUFBRSxVQUFBLENBQUMsSUFBRyxPQUFBLENBQUMsQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLEVBQUUsRUFBdEIsQ0FBc0IsRUFBRSxVQUFBLENBQUMsSUFBRyxPQUFBLENBQUMsQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLEVBQUUsRUFBdEIsQ0FBc0IsQ0FBQyxDQUFDO0FBQ3hJLENBQUM7QUFKRCwwQkFJQztBQUVELFNBQVMsS0FBSyxDQUFDLEtBQUssRUFBRSxNQUFNLEVBQUUsTUFBYyxFQUFFLFdBQW1CO0lBQzdELEtBQUssQ0FBQyxPQUFPLENBQUMsVUFBQSxDQUFDO1FBQ1gsQ0FBQyxDQUFDLFVBQVUsR0FBUTtZQUNoQixJQUFJLEVBQUUsQ0FBQyxDQUFDLElBQUk7WUFDWixNQUFNLEVBQUUsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQyxNQUFNLENBQUM7U0FDcEMsQ0FBQztJQUNOLENBQUMsQ0FBQyxDQUFDO0lBQ0gsTUFBTSxDQUFDLE9BQU8sQ0FBQyxVQUFBLENBQUM7UUFDWixDQUFDLENBQUMsVUFBVSxHQUFRO1lBQ2hCLE1BQU0sRUFBRSxDQUFDLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDLFdBQVcsQ0FBQztZQUN0QyxRQUFRLEVBQUUsQ0FBQyxPQUFPLENBQUMsQ0FBQyxNQUFNLEtBQUssV0FBVyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxVQUFBLENBQUMsSUFBRyxPQUFBLEtBQUssQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLEVBQUUsRUFBbkIsQ0FBbUIsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7aUJBQ25GLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQyxNQUFNLEtBQUssV0FBVyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxVQUFBLENBQUMsSUFBRyxPQUFBLENBQUMsQ0FBQyxLQUFLLEVBQVAsQ0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQztTQUNoRixDQUFDO0lBQ04sQ0FBQyxDQUFDLENBQUM7SUFDSCxJQUFJLGVBQWUsR0FBRyxLQUFLLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLEdBQUcsQ0FBQyxVQUFDLENBQUMsRUFBRSxDQUFDO1FBQ2hELENBQUMsQ0FBQyxVQUFVLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQztRQUNwQixPQUFPLENBQUMsQ0FBQyxVQUFVLENBQUM7SUFDeEIsQ0FBQyxDQUFDLENBQUM7SUFDSCxPQUFPLElBQUksdUJBQVUsQ0FBQyxlQUFlLEVBQUU7UUFDbkMsV0FBVyxFQUFFLFVBQUMsQ0FBTSxJQUFLLE9BQUEsQ0FBQyxDQUFDLFFBQVEsRUFBVixDQUFVO1FBQ25DLFNBQVMsRUFBRSxVQUFBLENBQUMsSUFBSSxPQUFBLENBQUMsQ0FBQyxNQUFNLEVBQVIsQ0FBUTtLQUMzQixFQUFFLE1BQU0sR0FBRyxXQUFXLENBQUMsQ0FBQztBQUM3QixDQUFDO0FBRUQsU0FBZ0Isb0JBQW9CLENBQ2hDLEtBQTZDLEVBQzdDLElBQWMsRUFDZCxZQUFvQjtJQUdwQixJQUFJLFVBQVUsQ0FBQztJQUNmLEtBQUssQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLFVBQUMsQ0FBQyxFQUFDLENBQUMsSUFBSyxPQUFNLENBQUUsQ0FBQyxLQUFLLEdBQUcsQ0FBQyxFQUFsQixDQUFrQixDQUFDLENBQUM7SUFDakQsSUFBSSxlQUFNLEVBQUU7U0FDUCxhQUFhLENBQUMsS0FBSyxDQUFDO1NBQ3BCLEtBQUssQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDO1NBQ2xCLEtBQUssQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDO1NBQ2xCLGdCQUFnQixDQUFDLFVBQVUsQ0FBQztRQUN6QixVQUFVLEdBQUcsQ0FBQyxDQUFDO1FBQ2YsVUFBVSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsVUFBQSxDQUFDLElBQUcsT0FBQSxDQUFDLENBQUMsT0FBTyxHQUFHLFlBQVksRUFBeEIsQ0FBd0IsQ0FBQyxDQUFDO0lBQzVELENBQUMsQ0FBQyxDQUFDO0lBSVAsSUFBSSxDQUFDLEdBQUcsS0FBSyxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUM7SUFDM0IsSUFBSSxLQUFLLEdBQUcsRUFBRSxDQUFDO0lBQ2YsSUFBSSxFQUFFLEdBQUcsS0FBSyxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDOUIsRUFBRSxDQUFDLE9BQU8sQ0FBQyxVQUFDLENBQUMsRUFBRSxDQUFDLElBQUssT0FBTSxDQUFFLENBQUMsS0FBSyxHQUFHLENBQUMsRUFBbEIsQ0FBa0IsQ0FBQyxDQUFDO0lBQ3pDLFVBQVUsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLFVBQUEsQ0FBQztRQUN2QixJQUFJLFNBQVMsR0FBRyxDQUFDLENBQUMsS0FBSyxHQUFHLENBQUMsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDO1FBQ25DLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDWCxJQUFJLE9BQU8sQ0FBQyxDQUFDLE1BQU0sS0FBSyxXQUFXO1lBQy9CLENBQUMsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLFVBQUEsQ0FBQyxJQUFJLE9BQUEsS0FBSyxDQUFDLElBQUksQ0FBQyxFQUFFLE1BQU0sRUFBRSxTQUFTLEVBQUUsTUFBTSxFQUFFLENBQUMsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxFQUFsRCxDQUFrRCxDQUFDLENBQUM7UUFDOUUsSUFBSSxPQUFPLENBQUMsQ0FBQyxNQUFNLEtBQUssV0FBVztZQUMvQixDQUFDLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxVQUFBLEVBQUUsSUFBSSxPQUFBLEtBQUssQ0FBQyxJQUFJLENBQUMsRUFBRSxNQUFNLEVBQUUsU0FBUyxFQUFFLE1BQU0sRUFBRSxFQUFFLENBQUMsRUFBRSxHQUFHLENBQUMsRUFBRSxDQUFDLEVBQXBELENBQW9ELENBQUMsQ0FBQztJQUNyRixDQUFDLENBQUMsQ0FBQztJQUNILFVBQVUsQ0FBQyxVQUFVLENBQUMsT0FBTyxDQUFDLFVBQUEsQ0FBQztRQUMzQixLQUFLLENBQUMsSUFBSSxDQUFDLEVBQUUsTUFBTSxFQUFFLENBQUMsQ0FBQyxNQUFNLENBQUMsS0FBSyxFQUFFLE1BQU0sRUFBRSxDQUFDLENBQUMsTUFBTSxDQUFDLEtBQUssRUFBRSxDQUFDLENBQUM7SUFDbkUsQ0FBQyxDQUFDLENBQUM7SUFHSCxJQUFJLGVBQU0sRUFBRTtTQUNQLElBQUksQ0FBQyxJQUFJLENBQUM7U0FDVixLQUFLLENBQUMsRUFBRSxDQUFDO1NBQ1QsS0FBSyxDQUFDLEtBQUssQ0FBQztTQUNaLGFBQWEsQ0FBQyxLQUFLLENBQUM7U0FDcEIsWUFBWSxDQUFDLEVBQUUsQ0FBQztTQUNoQix3QkFBd0IsQ0FBQyxDQUFDLENBQUM7U0FDM0Isb0JBQW9CLENBQUMsSUFBSSxDQUFDO1NBQzFCLEtBQUssQ0FBQyxHQUFHLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsS0FBSyxDQUFDLENBQUM7SUFLaEMsT0FBTztRQUNILElBQUksRUFDQSxJQUFJLGVBQU0sRUFBRTthQUNYLG9CQUFvQixDQUFDLElBQUksQ0FBQzthQUMxQixJQUFJLENBQUMsSUFBSSxDQUFDO2FBQ1YsYUFBYSxDQUFDLElBQUksQ0FBQzthQUNuQixLQUFLLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQzthQUNsQixLQUFLLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQzthQUVsQixnQkFBZ0IsQ0FBQyxJQUFJLENBQUM7YUFDdEIsWUFBWSxDQUFDLEVBQUUsQ0FBQzthQUNoQix3QkFBd0IsQ0FBQyxDQUFDLENBQUM7YUFDM0IsZ0JBQWdCLENBQUMsVUFBVSxDQUFDO1lBQ3pCLFVBQVUsR0FBRyxDQUFDLENBQUM7WUFDZixVQUFVLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUM7Z0JBQ2pDLENBQUMsQ0FBQyxPQUFPLEdBQUcsWUFBWSxDQUFBO1lBQzVCLENBQUMsQ0FBQyxDQUFDO1FBQ1AsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLEVBQUUsRUFBRSxDQUFDLEVBQUUsR0FBRyxFQUFFLENBQUMsRUFBRSxLQUFLLENBQUM7UUFDbEMsVUFBVSxFQUFFLFVBQVU7S0FDekIsQ0FBQztBQUNOLENBQUM7QUFyRUQsb0RBcUVDIn0=//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/webcola/dist/src/batch.js\n");

/***/ }),

/***/ "./node_modules/webcola/dist/src/d3adaptor.js":
/*!****************************************************!*\
  !*** ./node_modules/webcola/dist/src/d3adaptor.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar d3v3 = __webpack_require__(/*! ./d3v3adaptor */ \"./node_modules/webcola/dist/src/d3v3adaptor.js\");\r\nvar d3v4 = __webpack_require__(/*! ./d3v4adaptor */ \"./node_modules/webcola/dist/src/d3v4adaptor.js\");\r\n;\r\nfunction d3adaptor(d3Context) {\r\n    if (!d3Context || isD3V3(d3Context)) {\r\n        return new d3v3.D3StyleLayoutAdaptor();\r\n    }\r\n    return new d3v4.D3StyleLayoutAdaptor(d3Context);\r\n}\r\nexports.d3adaptor = d3adaptor;\r\nfunction isD3V3(d3Context) {\r\n    var v3exp = /^3\\./;\r\n    return d3Context.version && d3Context.version.match(v3exp) !== null;\r\n}\r\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZDNhZGFwdG9yLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vV2ViQ29sYS9zcmMvZDNhZGFwdG9yLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsb0NBQXFDO0FBQ3JDLG9DQUFxQztBQUdVLENBQUM7QUE0QmhELFNBQWdCLFNBQVMsQ0FBQyxTQUF3QztJQUM5RCxJQUFJLENBQUMsU0FBUyxJQUFJLE1BQU0sQ0FBQyxTQUFTLENBQUMsRUFBRTtRQUNqQyxPQUFPLElBQUksSUFBSSxDQUFDLG9CQUFvQixFQUFFLENBQUM7S0FDMUM7SUFDRCxPQUFPLElBQUksSUFBSSxDQUFDLG9CQUFvQixDQUFDLFNBQVMsQ0FBQyxDQUFDO0FBQ3BELENBQUM7QUFMRCw4QkFLQztBQUVELFNBQVMsTUFBTSxDQUFDLFNBQXVDO0lBQ25ELElBQU0sS0FBSyxHQUFHLE1BQU0sQ0FBQztJQUNyQixPQUFhLFNBQVUsQ0FBQyxPQUFPLElBQVUsU0FBVSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLEtBQUssSUFBSSxDQUFDO0FBQ3RGLENBQUMifQ==//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvd2ViY29sYS9kaXN0L3NyYy9kM2FkYXB0b3IuanMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly94aU5FVC8uL25vZGVfbW9kdWxlcy93ZWJjb2xhL2Rpc3Qvc3JjL2QzYWRhcHRvci5qcz8yYTZkIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbnZhciBkM3YzID0gcmVxdWlyZShcIi4vZDN2M2FkYXB0b3JcIik7XHJcbnZhciBkM3Y0ID0gcmVxdWlyZShcIi4vZDN2NGFkYXB0b3JcIik7XHJcbjtcclxuZnVuY3Rpb24gZDNhZGFwdG9yKGQzQ29udGV4dCkge1xyXG4gICAgaWYgKCFkM0NvbnRleHQgfHwgaXNEM1YzKGQzQ29udGV4dCkpIHtcclxuICAgICAgICByZXR1cm4gbmV3IGQzdjMuRDNTdHlsZUxheW91dEFkYXB0b3IoKTtcclxuICAgIH1cclxuICAgIHJldHVybiBuZXcgZDN2NC5EM1N0eWxlTGF5b3V0QWRhcHRvcihkM0NvbnRleHQpO1xyXG59XHJcbmV4cG9ydHMuZDNhZGFwdG9yID0gZDNhZGFwdG9yO1xyXG5mdW5jdGlvbiBpc0QzVjMoZDNDb250ZXh0KSB7XHJcbiAgICB2YXIgdjNleHAgPSAvXjNcXC4vO1xyXG4gICAgcmV0dXJuIGQzQ29udGV4dC52ZXJzaW9uICYmIGQzQ29udGV4dC52ZXJzaW9uLm1hdGNoKHYzZXhwKSAhPT0gbnVsbDtcclxufVxyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0ptYVd4bElqb2laRE5oWkdGd2RHOXlMbXB6SWl3aWMyOTFjbU5sVW05dmRDSTZJaUlzSW5OdmRYSmpaWE1pT2xzaUxpNHZMaTR2VjJWaVEyOXNZUzl6Y21NdlpETmhaR0Z3ZEc5eUxuUnpJbDBzSW01aGJXVnpJanBiWFN3aWJXRndjR2x1WjNNaU9pSTdPMEZCUVVFc2IwTkJRWEZETzBGQlEzSkRMRzlEUVVGeFF6dEJRVWRWTEVOQlFVTTdRVUUwUW1oRUxGTkJRV2RDTEZOQlFWTXNRMEZCUXl4VFFVRjNRenRKUVVNNVJDeEpRVUZKTEVOQlFVTXNVMEZCVXl4SlFVRkpMRTFCUVUwc1EwRkJReXhUUVVGVExFTkJRVU1zUlVGQlJUdFJRVU5xUXl4UFFVRlBMRWxCUVVrc1NVRkJTU3hEUVVGRExHOUNRVUZ2UWl4RlFVRkZMRU5CUVVNN1MwRkRNVU03U1VGRFJDeFBRVUZQTEVsQlFVa3NTVUZCU1N4RFFVRkRMRzlDUVVGdlFpeERRVUZETEZOQlFWTXNRMEZCUXl4RFFVRkRPMEZCUTNCRUxFTkJRVU03UVVGTVJDdzRRa0ZMUXp0QlFVVkVMRk5CUVZNc1RVRkJUU3hEUVVGRExGTkJRWFZETzBsQlEyNUVMRWxCUVUwc1MwRkJTeXhIUVVGSExFMUJRVTBzUTBGQlF6dEpRVU55UWl4UFFVRmhMRk5CUVZVc1EwRkJReXhQUVVGUExFbEJRVlVzVTBGQlZTeERRVUZETEU5QlFVOHNRMEZCUXl4TFFVRkxMRU5CUVVNc1MwRkJTeXhEUVVGRExFdEJRVXNzU1VGQlNTeERRVUZETzBGQlEzUkdMRU5CUVVNaWZRPT0iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/webcola/dist/src/d3adaptor.js\n");

/***/ }),

/***/ "./node_modules/webcola/dist/src/d3v3adaptor.js":
/*!******************************************************!*\
  !*** ./node_modules/webcola/dist/src/d3v3adaptor.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = function (d, b) {\r\n        extendStatics = Object.setPrototypeOf ||\r\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n        return extendStatics(d, b);\r\n    };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar layout_1 = __webpack_require__(/*! ./layout */ \"./node_modules/webcola/dist/src/layout.js\");\r\nvar D3StyleLayoutAdaptor = (function (_super) {\r\n    __extends(D3StyleLayoutAdaptor, _super);\r\n    function D3StyleLayoutAdaptor() {\r\n        var _this = _super.call(this) || this;\r\n        _this.event = d3.dispatch(layout_1.EventType[layout_1.EventType.start], layout_1.EventType[layout_1.EventType.tick], layout_1.EventType[layout_1.EventType.end]);\r\n        var d3layout = _this;\r\n        var drag;\r\n        _this.drag = function () {\r\n            if (!drag) {\r\n                var drag = d3.behavior.drag()\r\n                    .origin(layout_1.Layout.dragOrigin)\r\n                    .on(\"dragstart.d3adaptor\", layout_1.Layout.dragStart)\r\n                    .on(\"drag.d3adaptor\", function (d) {\r\n                    layout_1.Layout.drag(d, d3.event);\r\n                    d3layout.resume();\r\n                })\r\n                    .on(\"dragend.d3adaptor\", layout_1.Layout.dragEnd);\r\n            }\r\n            if (!arguments.length)\r\n                return drag;\r\n            this\r\n                .call(drag);\r\n        };\r\n        return _this;\r\n    }\r\n    D3StyleLayoutAdaptor.prototype.trigger = function (e) {\r\n        var d3event = { type: layout_1.EventType[e.type], alpha: e.alpha, stress: e.stress };\r\n        this.event[d3event.type](d3event);\r\n    };\r\n    D3StyleLayoutAdaptor.prototype.kick = function () {\r\n        var _this = this;\r\n        d3.timer(function () { return _super.prototype.tick.call(_this); });\r\n    };\r\n    D3StyleLayoutAdaptor.prototype.on = function (eventType, listener) {\r\n        if (typeof eventType === 'string') {\r\n            this.event.on(eventType, listener);\r\n        }\r\n        else {\r\n            this.event.on(layout_1.EventType[eventType], listener);\r\n        }\r\n        return this;\r\n    };\r\n    return D3StyleLayoutAdaptor;\r\n}(layout_1.Layout));\r\nexports.D3StyleLayoutAdaptor = D3StyleLayoutAdaptor;\r\nfunction d3adaptor() {\r\n    return new D3StyleLayoutAdaptor();\r\n}\r\nexports.d3adaptor = d3adaptor;\r\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZDN2M2FkYXB0b3IuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9XZWJDb2xhL3NyYy9kM3YzYWRhcHRvci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7QUFNQSxtQ0FBa0Q7QUFHOUM7SUFBMEMsd0NBQU07SUFnQjVDO1FBQUEsWUFDSSxpQkFBTyxTQXVCVjtRQXZDRCxXQUFLLEdBQUcsRUFBRSxDQUFDLFFBQVEsQ0FBQyxrQkFBUyxDQUFDLGtCQUFTLENBQUMsS0FBSyxDQUFDLEVBQUUsa0JBQVMsQ0FBQyxrQkFBUyxDQUFDLElBQUksQ0FBQyxFQUFFLGtCQUFTLENBQUMsa0JBQVMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO1FBa0JqRyxJQUFJLFFBQVEsR0FBRyxLQUFJLENBQUM7UUFDcEIsSUFBSSxJQUFJLENBQUM7UUFDVCxLQUFJLENBQUMsSUFBSSxHQUFHO1lBQ1IsSUFBSSxDQUFDLElBQUksRUFBRTtnQkFDUCxJQUFJLElBQUksR0FBRyxFQUFFLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRTtxQkFDeEIsTUFBTSxDQUFDLGVBQU0sQ0FBQyxVQUFVLENBQUM7cUJBQ3pCLEVBQUUsQ0FBQyxxQkFBcUIsRUFBRSxlQUFNLENBQUMsU0FBUyxDQUFDO3FCQUMzQyxFQUFFLENBQUMsZ0JBQWdCLEVBQUUsVUFBQSxDQUFDO29CQUNuQixlQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBTyxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUM7b0JBQzlCLFFBQVEsQ0FBQyxNQUFNLEVBQUUsQ0FBQztnQkFDdEIsQ0FBQyxDQUFDO3FCQUNELEVBQUUsQ0FBQyxtQkFBbUIsRUFBRSxlQUFNLENBQUMsT0FBTyxDQUFDLENBQUM7YUFDaEQ7WUFFRCxJQUFJLENBQUMsU0FBUyxDQUFDLE1BQU07Z0JBQUUsT0FBTyxJQUFJLENBQUM7WUFHbkMsSUFBSTtpQkFFQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxDQUFBOztJQUNMLENBQUM7SUFyQ0Qsc0NBQU8sR0FBUCxVQUFRLENBQVE7UUFDWixJQUFJLE9BQU8sR0FBRyxFQUFFLElBQUksRUFBRSxrQkFBUyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsRUFBRSxLQUFLLEVBQUUsQ0FBQyxDQUFDLEtBQUssRUFBRSxNQUFNLEVBQUUsQ0FBQyxDQUFDLE1BQU0sRUFBRSxDQUFDO1FBQzVFLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQ3RDLENBQUM7SUFHRCxtQ0FBSSxHQUFKO1FBQUEsaUJBRUM7UUFERyxFQUFFLENBQUMsS0FBSyxDQUFDLGNBQU0sT0FBQSxpQkFBTSxJQUFJLFlBQUUsRUFBWixDQUFZLENBQUMsQ0FBQztJQUNqQyxDQUFDO0lBZ0NELGlDQUFFLEdBQUYsVUFBRyxTQUE2QixFQUFFLFFBQW9CO1FBQ2xELElBQUksT0FBTyxTQUFTLEtBQUssUUFBUSxFQUFFO1lBQy9CLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLFNBQVMsRUFBRSxRQUFRLENBQUMsQ0FBQztTQUN0QzthQUFNO1lBQ0gsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsa0JBQVMsQ0FBQyxTQUFTLENBQUMsRUFBRSxRQUFRLENBQUMsQ0FBQztTQUNqRDtRQUNELE9BQU8sSUFBSSxDQUFDO0lBQ2hCLENBQUM7SUFDTCwyQkFBQztBQUFELENBQUMsQUFuREQsQ0FBMEMsZUFBTSxHQW1EL0M7QUFuRFksb0RBQW9CO0FBaUVqQyxTQUFnQixTQUFTO0lBQ3JCLE9BQU8sSUFBSSxvQkFBb0IsRUFBRSxDQUFDO0FBQ3RDLENBQUM7QUFGRCw4QkFFQyJ9//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvd2ViY29sYS9kaXN0L3NyYy9kM3YzYWRhcHRvci5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovL3hpTkVULy4vbm9kZV9tb2R1bGVzL3dlYmNvbGEvZGlzdC9zcmMvZDN2M2FkYXB0b3IuanM/YTEwZCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcclxudmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCAoZnVuY3Rpb24gKCkge1xyXG4gICAgdmFyIGV4dGVuZFN0YXRpY3MgPSBmdW5jdGlvbiAoZCwgYikge1xyXG4gICAgICAgIGV4dGVuZFN0YXRpY3MgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHxcclxuICAgICAgICAgICAgKHsgX19wcm90b19fOiBbXSB9IGluc3RhbmNlb2YgQXJyYXkgJiYgZnVuY3Rpb24gKGQsIGIpIHsgZC5fX3Byb3RvX18gPSBiOyB9KSB8fFxyXG4gICAgICAgICAgICBmdW5jdGlvbiAoZCwgYikgeyBmb3IgKHZhciBwIGluIGIpIGlmIChiLmhhc093blByb3BlcnR5KHApKSBkW3BdID0gYltwXTsgfTtcclxuICAgICAgICByZXR1cm4gZXh0ZW5kU3RhdGljcyhkLCBiKTtcclxuICAgIH07XHJcbiAgICByZXR1cm4gZnVuY3Rpb24gKGQsIGIpIHtcclxuICAgICAgICBleHRlbmRTdGF0aWNzKGQsIGIpO1xyXG4gICAgICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxyXG4gICAgICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcclxuICAgIH07XHJcbn0pKCk7XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxudmFyIGxheW91dF8xID0gcmVxdWlyZShcIi4vbGF5b3V0XCIpO1xyXG52YXIgRDNTdHlsZUxheW91dEFkYXB0b3IgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xyXG4gICAgX19leHRlbmRzKEQzU3R5bGVMYXlvdXRBZGFwdG9yLCBfc3VwZXIpO1xyXG4gICAgZnVuY3Rpb24gRDNTdHlsZUxheW91dEFkYXB0b3IoKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcykgfHwgdGhpcztcclxuICAgICAgICBfdGhpcy5ldmVudCA9IGQzLmRpc3BhdGNoKGxheW91dF8xLkV2ZW50VHlwZVtsYXlvdXRfMS5FdmVudFR5cGUuc3RhcnRdLCBsYXlvdXRfMS5FdmVudFR5cGVbbGF5b3V0XzEuRXZlbnRUeXBlLnRpY2tdLCBsYXlvdXRfMS5FdmVudFR5cGVbbGF5b3V0XzEuRXZlbnRUeXBlLmVuZF0pO1xyXG4gICAgICAgIHZhciBkM2xheW91dCA9IF90aGlzO1xyXG4gICAgICAgIHZhciBkcmFnO1xyXG4gICAgICAgIF90aGlzLmRyYWcgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGlmICghZHJhZykge1xyXG4gICAgICAgICAgICAgICAgdmFyIGRyYWcgPSBkMy5iZWhhdmlvci5kcmFnKClcclxuICAgICAgICAgICAgICAgICAgICAub3JpZ2luKGxheW91dF8xLkxheW91dC5kcmFnT3JpZ2luKVxyXG4gICAgICAgICAgICAgICAgICAgIC5vbihcImRyYWdzdGFydC5kM2FkYXB0b3JcIiwgbGF5b3V0XzEuTGF5b3V0LmRyYWdTdGFydClcclxuICAgICAgICAgICAgICAgICAgICAub24oXCJkcmFnLmQzYWRhcHRvclwiLCBmdW5jdGlvbiAoZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGxheW91dF8xLkxheW91dC5kcmFnKGQsIGQzLmV2ZW50KTtcclxuICAgICAgICAgICAgICAgICAgICBkM2xheW91dC5yZXN1bWUoKTtcclxuICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAgICAgLm9uKFwiZHJhZ2VuZC5kM2FkYXB0b3JcIiwgbGF5b3V0XzEuTGF5b3V0LmRyYWdFbmQpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aClcclxuICAgICAgICAgICAgICAgIHJldHVybiBkcmFnO1xyXG4gICAgICAgICAgICB0aGlzXHJcbiAgICAgICAgICAgICAgICAuY2FsbChkcmFnKTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIHJldHVybiBfdGhpcztcclxuICAgIH1cclxuICAgIEQzU3R5bGVMYXlvdXRBZGFwdG9yLnByb3RvdHlwZS50cmlnZ2VyID0gZnVuY3Rpb24gKGUpIHtcclxuICAgICAgICB2YXIgZDNldmVudCA9IHsgdHlwZTogbGF5b3V0XzEuRXZlbnRUeXBlW2UudHlwZV0sIGFscGhhOiBlLmFscGhhLCBzdHJlc3M6IGUuc3RyZXNzIH07XHJcbiAgICAgICAgdGhpcy5ldmVudFtkM2V2ZW50LnR5cGVdKGQzZXZlbnQpO1xyXG4gICAgfTtcclxuICAgIEQzU3R5bGVMYXlvdXRBZGFwdG9yLnByb3RvdHlwZS5raWNrID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgZDMudGltZXIoZnVuY3Rpb24gKCkgeyByZXR1cm4gX3N1cGVyLnByb3RvdHlwZS50aWNrLmNhbGwoX3RoaXMpOyB9KTtcclxuICAgIH07XHJcbiAgICBEM1N0eWxlTGF5b3V0QWRhcHRvci5wcm90b3R5cGUub24gPSBmdW5jdGlvbiAoZXZlbnRUeXBlLCBsaXN0ZW5lcikge1xyXG4gICAgICAgIGlmICh0eXBlb2YgZXZlbnRUeXBlID09PSAnc3RyaW5nJykge1xyXG4gICAgICAgICAgICB0aGlzLmV2ZW50Lm9uKGV2ZW50VHlwZSwgbGlzdGVuZXIpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5ldmVudC5vbihsYXlvdXRfMS5FdmVudFR5cGVbZXZlbnRUeXBlXSwgbGlzdGVuZXIpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH07XHJcbiAgICByZXR1cm4gRDNTdHlsZUxheW91dEFkYXB0b3I7XHJcbn0obGF5b3V0XzEuTGF5b3V0KSk7XHJcbmV4cG9ydHMuRDNTdHlsZUxheW91dEFkYXB0b3IgPSBEM1N0eWxlTGF5b3V0QWRhcHRvcjtcclxuZnVuY3Rpb24gZDNhZGFwdG9yKCkge1xyXG4gICAgcmV0dXJuIG5ldyBEM1N0eWxlTGF5b3V0QWRhcHRvcigpO1xyXG59XHJcbmV4cG9ydHMuZDNhZGFwdG9yID0gZDNhZGFwdG9yO1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0ptYVd4bElqb2laRE4yTTJGa1lYQjBiM0l1YW5NaUxDSnpiM1Z5WTJWU2IyOTBJam9pSWl3aWMyOTFjbU5sY3lJNld5SXVMaTh1TGk5WFpXSkRiMnhoTDNOeVl5OWtNM1l6WVdSaGNIUnZjaTUwY3lKZExDSnVZVzFsY3lJNlcxMHNJbTFoY0hCcGJtZHpJam9pT3pzN096czdPenM3T3pzN096czdRVUZOUVN4dFEwRkJhMFE3UVVGSE9VTTdTVUZCTUVNc2QwTkJRVTA3U1VGblFqVkRPMUZCUVVFc1dVRkRTU3hwUWtGQlR5eFRRWFZDVmp0UlFYWkRSQ3hYUVVGTExFZEJRVWNzUlVGQlJTeERRVUZETEZGQlFWRXNRMEZCUXl4clFrRkJVeXhEUVVGRExHdENRVUZUTEVOQlFVTXNTMEZCU3l4RFFVRkRMRVZCUVVVc2EwSkJRVk1zUTBGQlF5eHJRa0ZCVXl4RFFVRkRMRWxCUVVrc1EwRkJReXhGUVVGRkxHdENRVUZUTEVOQlFVTXNhMEpCUVZNc1EwRkJReXhIUVVGSExFTkJRVU1zUTBGQlF5eERRVUZETzFGQmEwSnFSeXhKUVVGSkxGRkJRVkVzUjBGQlJ5eExRVUZKTEVOQlFVTTdVVUZEY0VJc1NVRkJTU3hKUVVGSkxFTkJRVU03VVVGRFZDeExRVUZKTEVOQlFVTXNTVUZCU1N4SFFVRkhPMWxCUTFJc1NVRkJTU3hEUVVGRExFbEJRVWtzUlVGQlJUdG5Ra0ZEVUN4SlFVRkpMRWxCUVVrc1IwRkJSeXhGUVVGRkxFTkJRVU1zVVVGQlVTeERRVUZETEVsQlFVa3NSVUZCUlR0eFFrRkRlRUlzVFVGQlRTeERRVUZETEdWQlFVMHNRMEZCUXl4VlFVRlZMRU5CUVVNN2NVSkJRM3BDTEVWQlFVVXNRMEZCUXl4eFFrRkJjVUlzUlVGQlJTeGxRVUZOTEVOQlFVTXNVMEZCVXl4RFFVRkRPM0ZDUVVNelF5eEZRVUZGTEVOQlFVTXNaMEpCUVdkQ0xFVkJRVVVzVlVGQlFTeERRVUZETzI5Q1FVTnVRaXhsUVVGTkxFTkJRVU1zU1VGQlNTeERRVUZETEVOQlFVTXNSVUZCVHl4RlFVRkZMRU5CUVVNc1MwRkJTeXhEUVVGRExFTkJRVU03YjBKQlF6bENMRkZCUVZFc1EwRkJReXhOUVVGTkxFVkJRVVVzUTBGQlF6dG5Ra0ZEZEVJc1EwRkJReXhEUVVGRE8zRkNRVU5FTEVWQlFVVXNRMEZCUXl4dFFrRkJiVUlzUlVGQlJTeGxRVUZOTEVOQlFVTXNUMEZCVHl4RFFVRkRMRU5CUVVNN1lVRkRhRVE3V1VGRlJDeEpRVUZKTEVOQlFVTXNVMEZCVXl4RFFVRkRMRTFCUVUwN1owSkJRVVVzVDBGQlR5eEpRVUZKTEVOQlFVTTdXVUZIYmtNc1NVRkJTVHRwUWtGRlF5eEpRVUZKTEVOQlFVTXNTVUZCU1N4RFFVRkRMRU5CUVVNN1VVRkRjRUlzUTBGQlF5eERRVUZCT3p0SlFVTk1MRU5CUVVNN1NVRnlRMFFzYzBOQlFVOHNSMEZCVUN4VlFVRlJMRU5CUVZFN1VVRkRXaXhKUVVGSkxFOUJRVThzUjBGQlJ5eEZRVUZGTEVsQlFVa3NSVUZCUlN4clFrRkJVeXhEUVVGRExFTkJRVU1zUTBGQlF5eEpRVUZKTEVOQlFVTXNSVUZCUlN4TFFVRkxMRVZCUVVVc1EwRkJReXhEUVVGRExFdEJRVXNzUlVGQlJTeE5RVUZOTEVWQlFVVXNRMEZCUXl4RFFVRkRMRTFCUVUwc1JVRkJSU3hEUVVGRE8xRkJRelZGTEVsQlFVa3NRMEZCUXl4TFFVRkxMRU5CUVVNc1QwRkJUeXhEUVVGRExFbEJRVWtzUTBGQlF5eERRVUZETEU5QlFVOHNRMEZCUXl4RFFVRkRPMGxCUTNSRExFTkJRVU03U1VGSFJDeHRRMEZCU1N4SFFVRktPMUZCUVVFc2FVSkJSVU03VVVGRVJ5eEZRVUZGTEVOQlFVTXNTMEZCU3l4RFFVRkRMR05CUVUwc1QwRkJRU3hwUWtGQlRTeEpRVUZKTEZsQlFVVXNSVUZCV2l4RFFVRlpMRU5CUVVNc1EwRkJRenRKUVVOcVF5eERRVUZETzBsQlowTkVMR2xEUVVGRkxFZEJRVVlzVlVGQlJ5eFRRVUUyUWl4RlFVRkZMRkZCUVc5Q08xRkJRMnhFTEVsQlFVa3NUMEZCVHl4VFFVRlRMRXRCUVVzc1VVRkJVU3hGUVVGRk8xbEJReTlDTEVsQlFVa3NRMEZCUXl4TFFVRkxMRU5CUVVNc1JVRkJSU3hEUVVGRExGTkJRVk1zUlVGQlJTeFJRVUZSTEVOQlFVTXNRMEZCUXp0VFFVTjBRenRoUVVGTk8xbEJRMGdzU1VGQlNTeERRVUZETEV0QlFVc3NRMEZCUXl4RlFVRkZMRU5CUVVNc2EwSkJRVk1zUTBGQlF5eFRRVUZUTEVOQlFVTXNSVUZCUlN4UlFVRlJMRU5CUVVNc1EwRkJRenRUUVVOcVJEdFJRVU5FTEU5QlFVOHNTVUZCU1N4RFFVRkRPMGxCUTJoQ0xFTkJRVU03U1VGRFRDd3lRa0ZCUXp0QlFVRkVMRU5CUVVNc1FVRnVSRVFzUTBGQk1FTXNaVUZCVFN4SFFXMUVMME03UVVGdVJGa3NiMFJCUVc5Q08wRkJhVVZxUXl4VFFVRm5RaXhUUVVGVE8wbEJRM0pDTEU5QlFVOHNTVUZCU1N4dlFrRkJiMElzUlVGQlJTeERRVUZETzBGQlEzUkRMRU5CUVVNN1FVRkdSQ3c0UWtGRlF5SjkiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/webcola/dist/src/d3v3adaptor.js\n");

/***/ }),

/***/ "./node_modules/webcola/dist/src/d3v4adaptor.js":
/*!******************************************************!*\
  !*** ./node_modules/webcola/dist/src/d3v4adaptor.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = function (d, b) {\r\n        extendStatics = Object.setPrototypeOf ||\r\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n        return extendStatics(d, b);\r\n    };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar layout_1 = __webpack_require__(/*! ./layout */ \"./node_modules/webcola/dist/src/layout.js\");\r\nvar D3StyleLayoutAdaptor = (function (_super) {\r\n    __extends(D3StyleLayoutAdaptor, _super);\r\n    function D3StyleLayoutAdaptor(d3Context) {\r\n        var _this = _super.call(this) || this;\r\n        _this.d3Context = d3Context;\r\n        _this.event = d3Context.dispatch(layout_1.EventType[layout_1.EventType.start], layout_1.EventType[layout_1.EventType.tick], layout_1.EventType[layout_1.EventType.end]);\r\n        var d3layout = _this;\r\n        var drag;\r\n        _this.drag = function () {\r\n            if (!drag) {\r\n                var drag = d3Context.drag()\r\n                    .subject(layout_1.Layout.dragOrigin)\r\n                    .on(\"start.d3adaptor\", layout_1.Layout.dragStart)\r\n                    .on(\"drag.d3adaptor\", function (d) {\r\n                    layout_1.Layout.drag(d, d3Context.event);\r\n                    d3layout.resume();\r\n                })\r\n                    .on(\"end.d3adaptor\", layout_1.Layout.dragEnd);\r\n            }\r\n            if (!arguments.length)\r\n                return drag;\r\n            arguments[0].call(drag);\r\n        };\r\n        return _this;\r\n    }\r\n    D3StyleLayoutAdaptor.prototype.trigger = function (e) {\r\n        var d3event = { type: layout_1.EventType[e.type], alpha: e.alpha, stress: e.stress };\r\n        this.event.call(d3event.type, d3event);\r\n    };\r\n    D3StyleLayoutAdaptor.prototype.kick = function () {\r\n        var _this = this;\r\n        var t = this.d3Context.timer(function () { return _super.prototype.tick.call(_this) && t.stop(); });\r\n    };\r\n    D3StyleLayoutAdaptor.prototype.on = function (eventType, listener) {\r\n        if (typeof eventType === 'string') {\r\n            this.event.on(eventType, listener);\r\n        }\r\n        else {\r\n            this.event.on(layout_1.EventType[eventType], listener);\r\n        }\r\n        return this;\r\n    };\r\n    return D3StyleLayoutAdaptor;\r\n}(layout_1.Layout));\r\nexports.D3StyleLayoutAdaptor = D3StyleLayoutAdaptor;\r\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZDN2NGFkYXB0b3IuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9XZWJDb2xhL3NyYy9kM3Y0YWRhcHRvci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7QUFHQSxtQ0FBaUQ7QUFVakQ7SUFBMEMsd0NBQU07SUFpQjVDLDhCQUFvQixTQUFvQjtRQUF4QyxZQUNJLGlCQUFPLFNBeUJWO1FBMUJtQixlQUFTLEdBQVQsU0FBUyxDQUFXO1FBRXBDLEtBQUksQ0FBQyxLQUFLLEdBQUcsU0FBUyxDQUFDLFFBQVEsQ0FBQyxrQkFBUyxDQUFDLGtCQUFTLENBQUMsS0FBSyxDQUFDLEVBQUUsa0JBQVMsQ0FBQyxrQkFBUyxDQUFDLElBQUksQ0FBQyxFQUFFLGtCQUFTLENBQUMsa0JBQVMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO1FBR2pILElBQUksUUFBUSxHQUFHLEtBQUksQ0FBQztRQUNwQixJQUFJLElBQUksQ0FBQztRQUNULEtBQUksQ0FBQyxJQUFJLEdBQUc7WUFDUixJQUFJLENBQUMsSUFBSSxFQUFFO2dCQUNQLElBQUksSUFBSSxHQUFHLFNBQVMsQ0FBQyxJQUFJLEVBQUU7cUJBQ3RCLE9BQU8sQ0FBQyxlQUFNLENBQUMsVUFBVSxDQUFDO3FCQUMxQixFQUFFLENBQUMsaUJBQWlCLEVBQUUsZUFBTSxDQUFDLFNBQVMsQ0FBQztxQkFDdkMsRUFBRSxDQUFDLGdCQUFnQixFQUFFLFVBQUEsQ0FBQztvQkFDbkIsZUFBTSxDQUFDLElBQUksQ0FBTSxDQUFDLEVBQUUsU0FBUyxDQUFDLEtBQUssQ0FBQyxDQUFDO29CQUNyQyxRQUFRLENBQUMsTUFBTSxFQUFFLENBQUM7Z0JBQ3RCLENBQUMsQ0FBQztxQkFDRCxFQUFFLENBQUMsZUFBZSxFQUFFLGVBQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQzthQUM1QztZQUVELElBQUksQ0FBQyxTQUFTLENBQUMsTUFBTTtnQkFBRSxPQUFPLElBQUksQ0FBQztZQUtuQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQzVCLENBQUMsQ0FBQTs7SUFDTCxDQUFDO0lBekNELHNDQUFPLEdBQVAsVUFBUSxDQUFRO1FBQ1osSUFBSSxPQUFPLEdBQUcsRUFBRSxJQUFJLEVBQUUsa0JBQVMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQyxLQUFLLEVBQUUsTUFBTSxFQUFFLENBQUMsQ0FBQyxNQUFNLEVBQUUsQ0FBQztRQUc1RSxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxFQUFPLE9BQU8sQ0FBQyxDQUFDO0lBQ2hELENBQUM7SUFHRCxtQ0FBSSxHQUFKO1FBQUEsaUJBRUM7UUFERyxJQUFJLENBQUMsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxjQUFNLE9BQUEsaUJBQU0sSUFBSSxZQUFFLElBQUksQ0FBQyxDQUFDLElBQUksRUFBRSxFQUF4QixDQUF3QixDQUFDLENBQUM7SUFDakUsQ0FBQztJQWtDRCxpQ0FBRSxHQUFGLFVBQUcsU0FBNkIsRUFBRSxRQUFvQjtRQUNsRCxJQUFJLE9BQU8sU0FBUyxLQUFLLFFBQVEsRUFBRTtZQUMvQixJQUFJLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxTQUFTLEVBQUUsUUFBUSxDQUFDLENBQUM7U0FDdEM7YUFBTTtZQUNILElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLGtCQUFTLENBQUMsU0FBUyxDQUFDLEVBQUUsUUFBUSxDQUFDLENBQUM7U0FDakQ7UUFDRCxPQUFPLElBQUksQ0FBQztJQUNoQixDQUFDO0lBQ0wsMkJBQUM7QUFBRCxDQUFDLEFBdERELENBQTBDLGVBQU0sR0FzRC9DO0FBdERZLG9EQUFvQiJ9//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvd2ViY29sYS9kaXN0L3NyYy9kM3Y0YWRhcHRvci5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovL3hpTkVULy4vbm9kZV9tb2R1bGVzL3dlYmNvbGEvZGlzdC9zcmMvZDN2NGFkYXB0b3IuanM/M2Y5ZiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcclxudmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCAoZnVuY3Rpb24gKCkge1xyXG4gICAgdmFyIGV4dGVuZFN0YXRpY3MgPSBmdW5jdGlvbiAoZCwgYikge1xyXG4gICAgICAgIGV4dGVuZFN0YXRpY3MgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHxcclxuICAgICAgICAgICAgKHsgX19wcm90b19fOiBbXSB9IGluc3RhbmNlb2YgQXJyYXkgJiYgZnVuY3Rpb24gKGQsIGIpIHsgZC5fX3Byb3RvX18gPSBiOyB9KSB8fFxyXG4gICAgICAgICAgICBmdW5jdGlvbiAoZCwgYikgeyBmb3IgKHZhciBwIGluIGIpIGlmIChiLmhhc093blByb3BlcnR5KHApKSBkW3BdID0gYltwXTsgfTtcclxuICAgICAgICByZXR1cm4gZXh0ZW5kU3RhdGljcyhkLCBiKTtcclxuICAgIH07XHJcbiAgICByZXR1cm4gZnVuY3Rpb24gKGQsIGIpIHtcclxuICAgICAgICBleHRlbmRTdGF0aWNzKGQsIGIpO1xyXG4gICAgICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxyXG4gICAgICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcclxuICAgIH07XHJcbn0pKCk7XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxudmFyIGxheW91dF8xID0gcmVxdWlyZShcIi4vbGF5b3V0XCIpO1xyXG52YXIgRDNTdHlsZUxheW91dEFkYXB0b3IgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xyXG4gICAgX19leHRlbmRzKEQzU3R5bGVMYXlvdXRBZGFwdG9yLCBfc3VwZXIpO1xyXG4gICAgZnVuY3Rpb24gRDNTdHlsZUxheW91dEFkYXB0b3IoZDNDb250ZXh0KSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcykgfHwgdGhpcztcclxuICAgICAgICBfdGhpcy5kM0NvbnRleHQgPSBkM0NvbnRleHQ7XHJcbiAgICAgICAgX3RoaXMuZXZlbnQgPSBkM0NvbnRleHQuZGlzcGF0Y2gobGF5b3V0XzEuRXZlbnRUeXBlW2xheW91dF8xLkV2ZW50VHlwZS5zdGFydF0sIGxheW91dF8xLkV2ZW50VHlwZVtsYXlvdXRfMS5FdmVudFR5cGUudGlja10sIGxheW91dF8xLkV2ZW50VHlwZVtsYXlvdXRfMS5FdmVudFR5cGUuZW5kXSk7XHJcbiAgICAgICAgdmFyIGQzbGF5b3V0ID0gX3RoaXM7XHJcbiAgICAgICAgdmFyIGRyYWc7XHJcbiAgICAgICAgX3RoaXMuZHJhZyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgaWYgKCFkcmFnKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgZHJhZyA9IGQzQ29udGV4dC5kcmFnKClcclxuICAgICAgICAgICAgICAgICAgICAuc3ViamVjdChsYXlvdXRfMS5MYXlvdXQuZHJhZ09yaWdpbilcclxuICAgICAgICAgICAgICAgICAgICAub24oXCJzdGFydC5kM2FkYXB0b3JcIiwgbGF5b3V0XzEuTGF5b3V0LmRyYWdTdGFydClcclxuICAgICAgICAgICAgICAgICAgICAub24oXCJkcmFnLmQzYWRhcHRvclwiLCBmdW5jdGlvbiAoZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGxheW91dF8xLkxheW91dC5kcmFnKGQsIGQzQ29udGV4dC5ldmVudCk7XHJcbiAgICAgICAgICAgICAgICAgICAgZDNsYXlvdXQucmVzdW1lKCk7XHJcbiAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgICAgIC5vbihcImVuZC5kM2FkYXB0b3JcIiwgbGF5b3V0XzEuTGF5b3V0LmRyYWdFbmQpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aClcclxuICAgICAgICAgICAgICAgIHJldHVybiBkcmFnO1xyXG4gICAgICAgICAgICBhcmd1bWVudHNbMF0uY2FsbChkcmFnKTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIHJldHVybiBfdGhpcztcclxuICAgIH1cclxuICAgIEQzU3R5bGVMYXlvdXRBZGFwdG9yLnByb3RvdHlwZS50cmlnZ2VyID0gZnVuY3Rpb24gKGUpIHtcclxuICAgICAgICB2YXIgZDNldmVudCA9IHsgdHlwZTogbGF5b3V0XzEuRXZlbnRUeXBlW2UudHlwZV0sIGFscGhhOiBlLmFscGhhLCBzdHJlc3M6IGUuc3RyZXNzIH07XHJcbiAgICAgICAgdGhpcy5ldmVudC5jYWxsKGQzZXZlbnQudHlwZSwgZDNldmVudCk7XHJcbiAgICB9O1xyXG4gICAgRDNTdHlsZUxheW91dEFkYXB0b3IucHJvdG90eXBlLmtpY2sgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICB2YXIgdCA9IHRoaXMuZDNDb250ZXh0LnRpbWVyKGZ1bmN0aW9uICgpIHsgcmV0dXJuIF9zdXBlci5wcm90b3R5cGUudGljay5jYWxsKF90aGlzKSAmJiB0LnN0b3AoKTsgfSk7XHJcbiAgICB9O1xyXG4gICAgRDNTdHlsZUxheW91dEFkYXB0b3IucHJvdG90eXBlLm9uID0gZnVuY3Rpb24gKGV2ZW50VHlwZSwgbGlzdGVuZXIpIHtcclxuICAgICAgICBpZiAodHlwZW9mIGV2ZW50VHlwZSA9PT0gJ3N0cmluZycpIHtcclxuICAgICAgICAgICAgdGhpcy5ldmVudC5vbihldmVudFR5cGUsIGxpc3RlbmVyKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMuZXZlbnQub24obGF5b3V0XzEuRXZlbnRUeXBlW2V2ZW50VHlwZV0sIGxpc3RlbmVyKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIEQzU3R5bGVMYXlvdXRBZGFwdG9yO1xyXG59KGxheW91dF8xLkxheW91dCkpO1xyXG5leHBvcnRzLkQzU3R5bGVMYXlvdXRBZGFwdG9yID0gRDNTdHlsZUxheW91dEFkYXB0b3I7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaVpETjJOR0ZrWVhCMGIzSXVhbk1pTENKemIzVnlZMlZTYjI5MElqb2lJaXdpYzI5MWNtTmxjeUk2V3lJdUxpOHVMaTlYWldKRGIyeGhMM055WXk5a00zWTBZV1JoY0hSdmNpNTBjeUpkTENKdVlXMWxjeUk2VzEwc0ltMWhjSEJwYm1keklqb2lPenM3T3pzN096czdPenM3T3pzN1FVRkhRU3h0UTBGQmFVUTdRVUZWYWtRN1NVRkJNRU1zZDBOQlFVMDdTVUZwUWpWRExEaENRVUZ2UWl4VFFVRnZRanRSUVVGNFF5eFpRVU5KTEdsQ1FVRlBMRk5CZVVKV08xRkJNVUp0UWl4bFFVRlRMRWRCUVZRc1UwRkJVeXhEUVVGWE8xRkJSWEJETEV0QlFVa3NRMEZCUXl4TFFVRkxMRWRCUVVjc1UwRkJVeXhEUVVGRExGRkJRVkVzUTBGQlF5eHJRa0ZCVXl4RFFVRkRMR3RDUVVGVExFTkJRVU1zUzBGQlN5eERRVUZETEVWQlFVVXNhMEpCUVZNc1EwRkJReXhyUWtGQlV5eERRVUZETEVsQlFVa3NRMEZCUXl4RlFVRkZMR3RDUVVGVExFTkJRVU1zYTBKQlFWTXNRMEZCUXl4SFFVRkhMRU5CUVVNc1EwRkJReXhEUVVGRE8xRkJSMnBJTEVsQlFVa3NVVUZCVVN4SFFVRkhMRXRCUVVrc1EwRkJRenRSUVVOd1FpeEpRVUZKTEVsQlFVa3NRMEZCUXp0UlFVTlVMRXRCUVVrc1EwRkJReXhKUVVGSkxFZEJRVWM3V1VGRFVpeEpRVUZKTEVOQlFVTXNTVUZCU1N4RlFVRkZPMmRDUVVOUUxFbEJRVWtzU1VGQlNTeEhRVUZITEZOQlFWTXNRMEZCUXl4SlFVRkpMRVZCUVVVN2NVSkJRM1JDTEU5QlFVOHNRMEZCUXl4bFFVRk5MRU5CUVVNc1ZVRkJWU3hEUVVGRE8zRkNRVU14UWl4RlFVRkZMRU5CUVVNc2FVSkJRV2xDTEVWQlFVVXNaVUZCVFN4RFFVRkRMRk5CUVZNc1EwRkJRenR4UWtGRGRrTXNSVUZCUlN4RFFVRkRMR2RDUVVGblFpeEZRVUZGTEZWQlFVRXNRMEZCUXp0dlFrRkRia0lzWlVGQlRTeERRVUZETEVsQlFVa3NRMEZCVFN4RFFVRkRMRVZCUVVVc1UwRkJVeXhEUVVGRExFdEJRVXNzUTBGQlF5eERRVUZETzI5Q1FVTnlReXhSUVVGUkxFTkJRVU1zVFVGQlRTeEZRVUZGTEVOQlFVTTdaMEpCUTNSQ0xFTkJRVU1zUTBGQlF6dHhRa0ZEUkN4RlFVRkZMRU5CUVVNc1pVRkJaU3hGUVVGRkxHVkJRVTBzUTBGQlF5eFBRVUZQTEVOQlFVTXNRMEZCUXp0aFFVTTFRenRaUVVWRUxFbEJRVWtzUTBGQlF5eFRRVUZUTEVOQlFVTXNUVUZCVFR0blFrRkJSU3hQUVVGUExFbEJRVWtzUTBGQlF6dFpRVXR1UXl4VFFVRlRMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU1zU1VGQlNTeERRVUZETEVsQlFVa3NRMEZCUXl4RFFVRkRPMUZCUXpWQ0xFTkJRVU1zUTBGQlFUczdTVUZEVEN4RFFVRkRPMGxCZWtORUxITkRRVUZQTEVkQlFWQXNWVUZCVVN4RFFVRlJPMUZCUTFvc1NVRkJTU3hQUVVGUExFZEJRVWNzUlVGQlJTeEpRVUZKTEVWQlFVVXNhMEpCUVZNc1EwRkJReXhEUVVGRExFTkJRVU1zU1VGQlNTeERRVUZETEVWQlFVVXNTMEZCU3l4RlFVRkZMRU5CUVVNc1EwRkJReXhMUVVGTExFVkJRVVVzVFVGQlRTeEZRVUZGTEVOQlFVTXNRMEZCUXl4TlFVRk5MRVZCUVVVc1EwRkJRenRSUVVjMVJTeEpRVUZKTEVOQlFVTXNTMEZCU3l4RFFVRkRMRWxCUVVrc1EwRkJReXhQUVVGUExFTkJRVU1zU1VGQlNTeEZRVUZQTEU5QlFVOHNRMEZCUXl4RFFVRkRPMGxCUTJoRUxFTkJRVU03U1VGSFJDeHRRMEZCU1N4SFFVRktPMUZCUVVFc2FVSkJSVU03VVVGRVJ5eEpRVUZKTEVOQlFVTXNSMEZCUnl4SlFVRkpMRU5CUVVNc1UwRkJVeXhEUVVGRExFdEJRVXNzUTBGQlF5eGpRVUZOTEU5QlFVRXNhVUpCUVUwc1NVRkJTU3haUVVGRkxFbEJRVWtzUTBGQlF5eERRVUZETEVsQlFVa3NSVUZCUlN4RlFVRjRRaXhEUVVGM1FpeERRVUZETEVOQlFVTTdTVUZEYWtVc1EwRkJRenRKUVd0RFJDeHBRMEZCUlN4SFFVRkdMRlZCUVVjc1UwRkJOa0lzUlVGQlJTeFJRVUZ2UWp0UlFVTnNSQ3hKUVVGSkxFOUJRVThzVTBGQlV5eExRVUZMTEZGQlFWRXNSVUZCUlR0WlFVTXZRaXhKUVVGSkxFTkJRVU1zUzBGQlN5eERRVUZETEVWQlFVVXNRMEZCUXl4VFFVRlRMRVZCUVVVc1VVRkJVU3hEUVVGRExFTkJRVU03VTBGRGRFTTdZVUZCVFR0WlFVTklMRWxCUVVrc1EwRkJReXhMUVVGTExFTkJRVU1zUlVGQlJTeERRVUZETEd0Q1FVRlRMRU5CUVVNc1UwRkJVeXhEUVVGRExFVkJRVVVzVVVGQlVTeERRVUZETEVOQlFVTTdVMEZEYWtRN1VVRkRSQ3hQUVVGUExFbEJRVWtzUTBGQlF6dEpRVU5vUWl4RFFVRkRPMGxCUTB3c01rSkJRVU03UVVGQlJDeERRVUZETEVGQmRFUkVMRU5CUVRCRExHVkJRVTBzUjBGelJDOURPMEZCZEVSWkxHOUVRVUZ2UWlKOSJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/webcola/dist/src/d3v4adaptor.js\n");

/***/ }),

/***/ "./node_modules/webcola/dist/src/descent.js":
/*!**************************************************!*\
  !*** ./node_modules/webcola/dist/src/descent.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar Locks = (function () {\r\n    function Locks() {\r\n        this.locks = {};\r\n    }\r\n    Locks.prototype.add = function (id, x) {\r\n        this.locks[id] = x;\r\n    };\r\n    Locks.prototype.clear = function () {\r\n        this.locks = {};\r\n    };\r\n    Locks.prototype.isEmpty = function () {\r\n        for (var l in this.locks)\r\n            return false;\r\n        return true;\r\n    };\r\n    Locks.prototype.apply = function (f) {\r\n        for (var l in this.locks) {\r\n            f(Number(l), this.locks[l]);\r\n        }\r\n    };\r\n    return Locks;\r\n}());\r\nexports.Locks = Locks;\r\nvar Descent = (function () {\r\n    function Descent(x, D, G) {\r\n        if (G === void 0) { G = null; }\r\n        this.D = D;\r\n        this.G = G;\r\n        this.threshold = 0.0001;\r\n        this.numGridSnapNodes = 0;\r\n        this.snapGridSize = 100;\r\n        this.snapStrength = 1000;\r\n        this.scaleSnapByMaxH = false;\r\n        this.random = new PseudoRandom();\r\n        this.project = null;\r\n        this.x = x;\r\n        this.k = x.length;\r\n        var n = this.n = x[0].length;\r\n        this.H = new Array(this.k);\r\n        this.g = new Array(this.k);\r\n        this.Hd = new Array(this.k);\r\n        this.a = new Array(this.k);\r\n        this.b = new Array(this.k);\r\n        this.c = new Array(this.k);\r\n        this.d = new Array(this.k);\r\n        this.e = new Array(this.k);\r\n        this.ia = new Array(this.k);\r\n        this.ib = new Array(this.k);\r\n        this.xtmp = new Array(this.k);\r\n        this.locks = new Locks();\r\n        this.minD = Number.MAX_VALUE;\r\n        var i = n, j;\r\n        while (i--) {\r\n            j = n;\r\n            while (--j > i) {\r\n                var d = D[i][j];\r\n                if (d > 0 && d < this.minD) {\r\n                    this.minD = d;\r\n                }\r\n            }\r\n        }\r\n        if (this.minD === Number.MAX_VALUE)\r\n            this.minD = 1;\r\n        i = this.k;\r\n        while (i--) {\r\n            this.g[i] = new Array(n);\r\n            this.H[i] = new Array(n);\r\n            j = n;\r\n            while (j--) {\r\n                this.H[i][j] = new Array(n);\r\n            }\r\n            this.Hd[i] = new Array(n);\r\n            this.a[i] = new Array(n);\r\n            this.b[i] = new Array(n);\r\n            this.c[i] = new Array(n);\r\n            this.d[i] = new Array(n);\r\n            this.e[i] = new Array(n);\r\n            this.ia[i] = new Array(n);\r\n            this.ib[i] = new Array(n);\r\n            this.xtmp[i] = new Array(n);\r\n        }\r\n    }\r\n    Descent.createSquareMatrix = function (n, f) {\r\n        var M = new Array(n);\r\n        for (var i = 0; i < n; ++i) {\r\n            M[i] = new Array(n);\r\n            for (var j = 0; j < n; ++j) {\r\n                M[i][j] = f(i, j);\r\n            }\r\n        }\r\n        return M;\r\n    };\r\n    Descent.prototype.offsetDir = function () {\r\n        var _this = this;\r\n        var u = new Array(this.k);\r\n        var l = 0;\r\n        for (var i = 0; i < this.k; ++i) {\r\n            var x = u[i] = this.random.getNextBetween(0.01, 1) - 0.5;\r\n            l += x * x;\r\n        }\r\n        l = Math.sqrt(l);\r\n        return u.map(function (x) { return x *= _this.minD / l; });\r\n    };\r\n    Descent.prototype.computeDerivatives = function (x) {\r\n        var _this = this;\r\n        var n = this.n;\r\n        if (n < 1)\r\n            return;\r\n        var i;\r\n        var d = new Array(this.k);\r\n        var d2 = new Array(this.k);\r\n        var Huu = new Array(this.k);\r\n        var maxH = 0;\r\n        for (var u = 0; u < n; ++u) {\r\n            for (i = 0; i < this.k; ++i)\r\n                Huu[i] = this.g[i][u] = 0;\r\n            for (var v = 0; v < n; ++v) {\r\n                if (u === v)\r\n                    continue;\r\n                var maxDisplaces = n;\r\n                while (maxDisplaces--) {\r\n                    var sd2 = 0;\r\n                    for (i = 0; i < this.k; ++i) {\r\n                        var dx = d[i] = x[i][u] - x[i][v];\r\n                        sd2 += d2[i] = dx * dx;\r\n                    }\r\n                    if (sd2 > 1e-9)\r\n                        break;\r\n                    var rd = this.offsetDir();\r\n                    for (i = 0; i < this.k; ++i)\r\n                        x[i][v] += rd[i];\r\n                }\r\n                var l = Math.sqrt(sd2);\r\n                var D = this.D[u][v];\r\n                var weight = this.G != null ? this.G[u][v] : 1;\r\n                if (weight > 1 && l > D || !isFinite(D)) {\r\n                    for (i = 0; i < this.k; ++i)\r\n                        this.H[i][u][v] = 0;\r\n                    continue;\r\n                }\r\n                if (weight > 1) {\r\n                    weight = 1;\r\n                }\r\n                var D2 = D * D;\r\n                var gs = 2 * weight * (l - D) / (D2 * l);\r\n                var l3 = l * l * l;\r\n                var hs = 2 * -weight / (D2 * l3);\r\n                if (!isFinite(gs))\r\n                    console.log(gs);\r\n                for (i = 0; i < this.k; ++i) {\r\n                    this.g[i][u] += d[i] * gs;\r\n                    Huu[i] -= this.H[i][u][v] = hs * (l3 + D * (d2[i] - sd2) + l * sd2);\r\n                }\r\n            }\r\n            for (i = 0; i < this.k; ++i)\r\n                maxH = Math.max(maxH, this.H[i][u][u] = Huu[i]);\r\n        }\r\n        var r = this.snapGridSize / 2;\r\n        var g = this.snapGridSize;\r\n        var w = this.snapStrength;\r\n        var k = w / (r * r);\r\n        var numNodes = this.numGridSnapNodes;\r\n        for (var u = 0; u < numNodes; ++u) {\r\n            for (i = 0; i < this.k; ++i) {\r\n                var xiu = this.x[i][u];\r\n                var m = xiu / g;\r\n                var f = m % 1;\r\n                var q = m - f;\r\n                var a = Math.abs(f);\r\n                var dx = (a <= 0.5) ? xiu - q * g :\r\n                    (xiu > 0) ? xiu - (q + 1) * g : xiu - (q - 1) * g;\r\n                if (-r < dx && dx <= r) {\r\n                    if (this.scaleSnapByMaxH) {\r\n                        this.g[i][u] += maxH * k * dx;\r\n                        this.H[i][u][u] += maxH * k;\r\n                    }\r\n                    else {\r\n                        this.g[i][u] += k * dx;\r\n                        this.H[i][u][u] += k;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        if (!this.locks.isEmpty()) {\r\n            this.locks.apply(function (u, p) {\r\n                for (i = 0; i < _this.k; ++i) {\r\n                    _this.H[i][u][u] += maxH;\r\n                    _this.g[i][u] -= maxH * (p[i] - x[i][u]);\r\n                }\r\n            });\r\n        }\r\n    };\r\n    Descent.dotProd = function (a, b) {\r\n        var x = 0, i = a.length;\r\n        while (i--)\r\n            x += a[i] * b[i];\r\n        return x;\r\n    };\r\n    Descent.rightMultiply = function (m, v, r) {\r\n        var i = m.length;\r\n        while (i--)\r\n            r[i] = Descent.dotProd(m[i], v);\r\n    };\r\n    Descent.prototype.computeStepSize = function (d) {\r\n        var numerator = 0, denominator = 0;\r\n        for (var i = 0; i < this.k; ++i) {\r\n            numerator += Descent.dotProd(this.g[i], d[i]);\r\n            Descent.rightMultiply(this.H[i], d[i], this.Hd[i]);\r\n            denominator += Descent.dotProd(d[i], this.Hd[i]);\r\n        }\r\n        if (denominator === 0 || !isFinite(denominator))\r\n            return 0;\r\n        return 1 * numerator / denominator;\r\n    };\r\n    Descent.prototype.reduceStress = function () {\r\n        this.computeDerivatives(this.x);\r\n        var alpha = this.computeStepSize(this.g);\r\n        for (var i = 0; i < this.k; ++i) {\r\n            this.takeDescentStep(this.x[i], this.g[i], alpha);\r\n        }\r\n        return this.computeStress();\r\n    };\r\n    Descent.copy = function (a, b) {\r\n        var m = a.length, n = b[0].length;\r\n        for (var i = 0; i < m; ++i) {\r\n            for (var j = 0; j < n; ++j) {\r\n                b[i][j] = a[i][j];\r\n            }\r\n        }\r\n    };\r\n    Descent.prototype.stepAndProject = function (x0, r, d, stepSize) {\r\n        Descent.copy(x0, r);\r\n        this.takeDescentStep(r[0], d[0], stepSize);\r\n        if (this.project)\r\n            this.project[0](x0[0], x0[1], r[0]);\r\n        this.takeDescentStep(r[1], d[1], stepSize);\r\n        if (this.project)\r\n            this.project[1](r[0], x0[1], r[1]);\r\n        for (var i = 2; i < this.k; i++)\r\n            this.takeDescentStep(r[i], d[i], stepSize);\r\n    };\r\n    Descent.mApply = function (m, n, f) {\r\n        var i = m;\r\n        while (i-- > 0) {\r\n            var j = n;\r\n            while (j-- > 0)\r\n                f(i, j);\r\n        }\r\n    };\r\n    Descent.prototype.matrixApply = function (f) {\r\n        Descent.mApply(this.k, this.n, f);\r\n    };\r\n    Descent.prototype.computeNextPosition = function (x0, r) {\r\n        var _this = this;\r\n        this.computeDerivatives(x0);\r\n        var alpha = this.computeStepSize(this.g);\r\n        this.stepAndProject(x0, r, this.g, alpha);\r\n        if (this.project) {\r\n            this.matrixApply(function (i, j) { return _this.e[i][j] = x0[i][j] - r[i][j]; });\r\n            var beta = this.computeStepSize(this.e);\r\n            beta = Math.max(0.2, Math.min(beta, 1));\r\n            this.stepAndProject(x0, r, this.e, beta);\r\n        }\r\n    };\r\n    Descent.prototype.run = function (iterations) {\r\n        var stress = Number.MAX_VALUE, converged = false;\r\n        while (!converged && iterations-- > 0) {\r\n            var s = this.rungeKutta();\r\n            converged = Math.abs(stress / s - 1) < this.threshold;\r\n            stress = s;\r\n        }\r\n        return stress;\r\n    };\r\n    Descent.prototype.rungeKutta = function () {\r\n        var _this = this;\r\n        this.computeNextPosition(this.x, this.a);\r\n        Descent.mid(this.x, this.a, this.ia);\r\n        this.computeNextPosition(this.ia, this.b);\r\n        Descent.mid(this.x, this.b, this.ib);\r\n        this.computeNextPosition(this.ib, this.c);\r\n        this.computeNextPosition(this.c, this.d);\r\n        var disp = 0;\r\n        this.matrixApply(function (i, j) {\r\n            var x = (_this.a[i][j] + 2.0 * _this.b[i][j] + 2.0 * _this.c[i][j] + _this.d[i][j]) / 6.0, d = _this.x[i][j] - x;\r\n            disp += d * d;\r\n            _this.x[i][j] = x;\r\n        });\r\n        return disp;\r\n    };\r\n    Descent.mid = function (a, b, m) {\r\n        Descent.mApply(a.length, a[0].length, function (i, j) {\r\n            return m[i][j] = a[i][j] + (b[i][j] - a[i][j]) / 2.0;\r\n        });\r\n    };\r\n    Descent.prototype.takeDescentStep = function (x, d, stepSize) {\r\n        for (var i = 0; i < this.n; ++i) {\r\n            x[i] = x[i] - stepSize * d[i];\r\n        }\r\n    };\r\n    Descent.prototype.computeStress = function () {\r\n        var stress = 0;\r\n        for (var u = 0, nMinus1 = this.n - 1; u < nMinus1; ++u) {\r\n            for (var v = u + 1, n = this.n; v < n; ++v) {\r\n                var l = 0;\r\n                for (var i = 0; i < this.k; ++i) {\r\n                    var dx = this.x[i][u] - this.x[i][v];\r\n                    l += dx * dx;\r\n                }\r\n                l = Math.sqrt(l);\r\n                var d = this.D[u][v];\r\n                if (!isFinite(d))\r\n                    continue;\r\n                var rl = d - l;\r\n                var d2 = d * d;\r\n                stress += rl * rl / d2;\r\n            }\r\n        }\r\n        return stress;\r\n    };\r\n    Descent.zeroDistance = 1e-10;\r\n    return Descent;\r\n}());\r\nexports.Descent = Descent;\r\nvar PseudoRandom = (function () {\r\n    function PseudoRandom(seed) {\r\n        if (seed === void 0) { seed = 1; }\r\n        this.seed = seed;\r\n        this.a = 214013;\r\n        this.c = 2531011;\r\n        this.m = 2147483648;\r\n        this.range = 32767;\r\n    }\r\n    PseudoRandom.prototype.getNext = function () {\r\n        this.seed = (this.seed * this.a + this.c) % this.m;\r\n        return (this.seed >> 16) / this.range;\r\n    };\r\n    PseudoRandom.prototype.getNextBetween = function (min, max) {\r\n        return min + this.getNext() * (max - min);\r\n    };\r\n    return PseudoRandom;\r\n}());\r\nexports.PseudoRandom = PseudoRandom;\r\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVzY2VudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL1dlYkNvbGEvc3JjL2Rlc2NlbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFJSTtJQUFBO1FBQ0ksVUFBSyxHQUE2QixFQUFFLENBQUM7SUFvQ3pDLENBQUM7SUE3QkcsbUJBQUcsR0FBSCxVQUFJLEVBQVUsRUFBRSxDQUFXO1FBSXZCLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQ3ZCLENBQUM7SUFJRCxxQkFBSyxHQUFMO1FBQ0ksSUFBSSxDQUFDLEtBQUssR0FBRyxFQUFFLENBQUM7SUFDcEIsQ0FBQztJQUtELHVCQUFPLEdBQVA7UUFDSSxLQUFLLElBQUksQ0FBQyxJQUFJLElBQUksQ0FBQyxLQUFLO1lBQUUsT0FBTyxLQUFLLENBQUM7UUFDdkMsT0FBTyxJQUFJLENBQUM7SUFDaEIsQ0FBQztJQUtELHFCQUFLLEdBQUwsVUFBTSxDQUFvQztRQUN0QyxLQUFLLElBQUksQ0FBQyxJQUFJLElBQUksQ0FBQyxLQUFLLEVBQUU7WUFDdEIsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7U0FDL0I7SUFDTCxDQUFDO0lBQ0wsWUFBQztBQUFELENBQUMsQUFyQ0QsSUFxQ0M7QUFyQ1ksc0JBQUs7QUFpRGxCO0lBNkRJLGlCQUFZLENBQWEsRUFBUyxDQUFhLEVBQVMsQ0FBbUI7UUFBbkIsa0JBQUEsRUFBQSxRQUFtQjtRQUF6QyxNQUFDLEdBQUQsQ0FBQyxDQUFZO1FBQVMsTUFBQyxHQUFELENBQUMsQ0FBa0I7UUE1RHBFLGNBQVMsR0FBVyxNQUFNLENBQUM7UUEyQzNCLHFCQUFnQixHQUFXLENBQUMsQ0FBQztRQUM3QixpQkFBWSxHQUFXLEdBQUcsQ0FBQztRQUMzQixpQkFBWSxHQUFXLElBQUksQ0FBQztRQUM1QixvQkFBZSxHQUFZLEtBQUssQ0FBQztRQUVoQyxXQUFNLEdBQUcsSUFBSSxZQUFZLEVBQUUsQ0FBQztRQUU3QixZQUFPLEdBQTBELElBQUksQ0FBQztRQVd6RSxJQUFJLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUNYLElBQUksQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLE1BQU0sQ0FBQztRQUNsQixJQUFJLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUM7UUFDN0IsSUFBSSxDQUFDLENBQUMsR0FBRyxJQUFJLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDM0IsSUFBSSxDQUFDLENBQUMsR0FBRyxJQUFJLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDM0IsSUFBSSxDQUFDLEVBQUUsR0FBRyxJQUFJLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDNUIsSUFBSSxDQUFDLENBQUMsR0FBRyxJQUFJLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDM0IsSUFBSSxDQUFDLENBQUMsR0FBRyxJQUFJLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDM0IsSUFBSSxDQUFDLENBQUMsR0FBRyxJQUFJLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDM0IsSUFBSSxDQUFDLENBQUMsR0FBRyxJQUFJLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDM0IsSUFBSSxDQUFDLENBQUMsR0FBRyxJQUFJLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDM0IsSUFBSSxDQUFDLEVBQUUsR0FBRyxJQUFJLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDNUIsSUFBSSxDQUFDLEVBQUUsR0FBRyxJQUFJLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDNUIsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDOUIsSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLEtBQUssRUFBRSxDQUFDO1FBQ3pCLElBQUksQ0FBQyxJQUFJLEdBQUcsTUFBTSxDQUFDLFNBQVMsQ0FBQztRQUM3QixJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQ2IsT0FBTyxDQUFDLEVBQUUsRUFBRTtZQUNSLENBQUMsR0FBRyxDQUFDLENBQUM7WUFDTixPQUFPLEVBQUUsQ0FBQyxHQUFHLENBQUMsRUFBRTtnQkFDWixJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQ2hCLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDLElBQUksRUFBRTtvQkFDeEIsSUFBSSxDQUFDLElBQUksR0FBRyxDQUFDLENBQUM7aUJBQ2pCO2FBQ0o7U0FDSjtRQUNELElBQUksSUFBSSxDQUFDLElBQUksS0FBSyxNQUFNLENBQUMsU0FBUztZQUFFLElBQUksQ0FBQyxJQUFJLEdBQUcsQ0FBQyxDQUFDO1FBQ2xELENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDO1FBQ1gsT0FBTyxDQUFDLEVBQUUsRUFBRTtZQUNSLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDekIsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUN6QixDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBQ04sT0FBTyxDQUFDLEVBQUUsRUFBRTtnQkFDUixJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO2FBQy9CO1lBQ0QsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUMxQixJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ3pCLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDekIsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUN6QixJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ3pCLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDekIsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUMxQixJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQzFCLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7U0FDL0I7SUFDTCxDQUFDO0lBRWEsMEJBQWtCLEdBQWhDLFVBQWlDLENBQVMsRUFBRSxDQUFtQztRQUMzRSxJQUFJLENBQUMsR0FBRyxJQUFJLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNyQixLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxFQUFFO1lBQ3hCLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUNwQixLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxFQUFFO2dCQUN4QixDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQzthQUNyQjtTQUNKO1FBQ0QsT0FBTyxDQUFDLENBQUM7SUFDYixDQUFDO0lBRU8sMkJBQVMsR0FBakI7UUFBQSxpQkFTQztRQVJHLElBQUksQ0FBQyxHQUFHLElBQUksS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUMxQixJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDVixLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsRUFBRTtZQUM3QixJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxjQUFjLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQztZQUN6RCxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztTQUNkO1FBQ0QsQ0FBQyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDakIsT0FBTyxDQUFDLENBQUMsR0FBRyxDQUFDLFVBQUEsQ0FBQyxJQUFHLE9BQUEsQ0FBQyxJQUFJLEtBQUksQ0FBQyxJQUFJLEdBQUcsQ0FBQyxFQUFsQixDQUFrQixDQUFDLENBQUM7SUFDekMsQ0FBQztJQUdNLG9DQUFrQixHQUF6QixVQUEwQixDQUFhO1FBQXZDLGlCQWdHQztRQS9GRyxJQUFJLENBQUMsR0FBVyxJQUFJLENBQUMsQ0FBQyxDQUFDO1FBQ3ZCLElBQUksQ0FBQyxHQUFHLENBQUM7WUFBRSxPQUFPO1FBQ2xCLElBQUksQ0FBUyxDQUFDO1FBTWQsSUFBSSxDQUFDLEdBQWEsSUFBSSxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3BDLElBQUksRUFBRSxHQUFhLElBQUksS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNyQyxJQUFJLEdBQUcsR0FBYSxJQUFJLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDdEMsSUFBSSxJQUFJLEdBQVcsQ0FBQyxDQUFDO1FBQ3JCLEtBQUssSUFBSSxDQUFDLEdBQVcsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLEVBQUUsRUFBRSxDQUFDLEVBQUU7WUFDaEMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQztnQkFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7WUFDdkQsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsRUFBRSxFQUFFLENBQUMsRUFBRTtnQkFDeEIsSUFBSSxDQUFDLEtBQUssQ0FBQztvQkFBRSxTQUFTO2dCQUd0QixJQUFJLFlBQVksR0FBRyxDQUFDLENBQUM7Z0JBQ3JCLE9BQU8sWUFBWSxFQUFFLEVBQUU7b0JBQ25CLElBQUksR0FBRyxHQUFHLENBQUMsQ0FBQztvQkFDWixLQUFLLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLEVBQUU7d0JBQ3pCLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO3dCQUNsQyxHQUFHLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUUsR0FBRyxFQUFFLENBQUM7cUJBQzFCO29CQUNELElBQUksR0FBRyxHQUFHLElBQUk7d0JBQUUsTUFBTTtvQkFDdEIsSUFBSSxFQUFFLEdBQUcsSUFBSSxDQUFDLFNBQVMsRUFBRSxDQUFDO29CQUMxQixLQUFLLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDO3dCQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7aUJBQ2pEO2dCQUNELElBQUksQ0FBQyxHQUFXLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7Z0JBQy9CLElBQUksQ0FBQyxHQUFXLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQzdCLElBQUksTUFBTSxHQUFHLElBQUksQ0FBQyxDQUFDLElBQUksSUFBSSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQy9DLElBQUksTUFBTSxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxFQUFFO29CQUNyQyxLQUFLLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDO3dCQUFFLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO29CQUNqRCxTQUFTO2lCQUNaO2dCQUNELElBQUksTUFBTSxHQUFHLENBQUMsRUFBRTtvQkFDWixNQUFNLEdBQUcsQ0FBQyxDQUFDO2lCQUNkO2dCQUNELElBQUksRUFBRSxHQUFXLENBQUMsR0FBRyxDQUFDLENBQUM7Z0JBQ3ZCLElBQUksRUFBRSxHQUFXLENBQUMsR0FBRyxNQUFNLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUM7Z0JBQ2pELElBQUksRUFBRSxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDO2dCQUNuQixJQUFJLEVBQUUsR0FBVyxDQUFDLEdBQUcsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFLEdBQUcsRUFBRSxDQUFDLENBQUM7Z0JBQ3pDLElBQUksQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDO29CQUNiLE9BQU8sQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLENBQUM7Z0JBQ3BCLEtBQUssQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsRUFBRTtvQkFDekIsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDO29CQUMxQixHQUFHLENBQUMsQ0FBQyxDQUFDLElBQUksSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLEdBQUcsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxHQUFHLENBQUMsQ0FBQztpQkFDdkU7YUFDSjtZQUNELEtBQUssQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUM7Z0JBQUUsSUFBSSxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7U0FDaEY7UUFFRCxJQUFJLENBQUMsR0FBRyxJQUFJLENBQUMsWUFBWSxHQUFDLENBQUMsQ0FBQztRQUM1QixJQUFJLENBQUMsR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDO1FBQzFCLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQyxZQUFZLENBQUM7UUFDMUIsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO1FBQ3BCLElBQUksUUFBUSxHQUFHLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQztRQUVyQyxLQUFLLElBQUksQ0FBQyxHQUFXLENBQUMsRUFBRSxDQUFDLEdBQUcsUUFBUSxFQUFFLEVBQUUsQ0FBQyxFQUFFO1lBQ3ZDLEtBQUssQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsRUFBRTtnQkFDekIsSUFBSSxHQUFHLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztnQkFDdkIsSUFBSSxDQUFDLEdBQUcsR0FBRyxHQUFHLENBQUMsQ0FBQztnQkFDaEIsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQztnQkFDZCxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDO2dCQUNkLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQ3BCLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQyxJQUFJLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO29CQUMvQixDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztnQkFDdEQsSUFBSSxDQUFDLENBQUMsR0FBRyxFQUFFLElBQUksRUFBRSxJQUFJLENBQUMsRUFBRTtvQkFDcEIsSUFBSSxJQUFJLENBQUMsZUFBZSxFQUFFO3dCQUN0QixJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLElBQUksR0FBRyxDQUFDLEdBQUcsRUFBRSxDQUFDO3dCQUM5QixJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLElBQUksR0FBRyxDQUFDLENBQUM7cUJBQy9CO3lCQUFNO3dCQUNILElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQzt3QkFDdkIsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUM7cUJBQ3hCO2lCQUNKO2FBQ0o7U0FDSjtRQUNELElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sRUFBRSxFQUFFO1lBQ3ZCLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLFVBQUMsQ0FBQyxFQUFFLENBQUM7Z0JBQ2xCLEtBQUssQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsS0FBSSxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsRUFBRTtvQkFDekIsS0FBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxJQUFJLENBQUM7b0JBQ3hCLEtBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksSUFBSSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO2lCQUMzQztZQUNMLENBQUMsQ0FBQyxDQUFDO1NBQ047SUFTTCxDQUFDO0lBRWMsZUFBTyxHQUF0QixVQUF1QixDQUFXLEVBQUUsQ0FBVztRQUMzQyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxNQUFNLENBQUM7UUFDeEIsT0FBTyxDQUFDLEVBQUU7WUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUM3QixPQUFPLENBQUMsQ0FBQztJQUNiLENBQUM7SUFHYyxxQkFBYSxHQUE1QixVQUE2QixDQUFhLEVBQUUsQ0FBVyxFQUFFLENBQVc7UUFDaEUsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLE1BQU0sQ0FBQztRQUNqQixPQUFPLENBQUMsRUFBRTtZQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztJQUNoRCxDQUFDO0lBS00saUNBQWUsR0FBdEIsVUFBdUIsQ0FBYTtRQUNoQyxJQUFJLFNBQVMsR0FBRyxDQUFDLEVBQUUsV0FBVyxHQUFHLENBQUMsQ0FBQztRQUNuQyxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsRUFBRTtZQUM3QixTQUFTLElBQUksT0FBTyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQzlDLE9BQU8sQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ25ELFdBQVcsSUFBSSxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7U0FDcEQ7UUFDRCxJQUFJLFdBQVcsS0FBSyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsV0FBVyxDQUFDO1lBQUUsT0FBTyxDQUFDLENBQUM7UUFDMUQsT0FBTyxDQUFDLEdBQUcsU0FBUyxHQUFHLFdBQVcsQ0FBQztJQUN2QyxDQUFDO0lBRU0sOEJBQVksR0FBbkI7UUFDSSxJQUFJLENBQUMsa0JBQWtCLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ2hDLElBQUksS0FBSyxHQUFHLElBQUksQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3pDLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxFQUFFO1lBQzdCLElBQUksQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLEtBQUssQ0FBQyxDQUFDO1NBQ3JEO1FBQ0QsT0FBTyxJQUFJLENBQUMsYUFBYSxFQUFFLENBQUM7SUFDaEMsQ0FBQztJQUVjLFlBQUksR0FBbkIsVUFBb0IsQ0FBYSxFQUFFLENBQWE7UUFDNUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLE1BQU0sRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQztRQUNsQyxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxFQUFFO1lBQ3hCLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLEVBQUUsRUFBRSxDQUFDLEVBQUU7Z0JBQ3hCLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7YUFDckI7U0FDSjtJQUNMLENBQUM7SUFRTyxnQ0FBYyxHQUF0QixVQUF1QixFQUFjLEVBQUUsQ0FBYSxFQUFFLENBQWEsRUFBRSxRQUFnQjtRQUNqRixPQUFPLENBQUMsSUFBSSxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQztRQUNwQixJQUFJLENBQUMsZUFBZSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsUUFBUSxDQUFDLENBQUM7UUFDM0MsSUFBSSxJQUFJLENBQUMsT0FBTztZQUFFLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUN0RCxJQUFJLENBQUMsZUFBZSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsUUFBUSxDQUFDLENBQUM7UUFDM0MsSUFBSSxJQUFJLENBQUMsT0FBTztZQUFFLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUdyRCxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUU7WUFDM0IsSUFBSSxDQUFDLGVBQWUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLFFBQVEsQ0FBQyxDQUFDO0lBVW5ELENBQUM7SUFFYyxjQUFNLEdBQXJCLFVBQXNCLENBQVMsRUFBRSxDQUFTLEVBQUUsQ0FBZ0M7UUFDeEUsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQUMsT0FBTyxDQUFDLEVBQUUsR0FBRyxDQUFDLEVBQUU7WUFDdkIsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBQUMsT0FBTyxDQUFDLEVBQUUsR0FBRyxDQUFDO2dCQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7U0FDdEM7SUFDTCxDQUFDO0lBQ08sNkJBQVcsR0FBbkIsVUFBb0IsQ0FBZ0M7UUFDaEQsT0FBTyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFDdEMsQ0FBQztJQUVPLHFDQUFtQixHQUEzQixVQUE0QixFQUFjLEVBQUUsQ0FBYTtRQUF6RCxpQkFlQztRQWRHLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUM1QixJQUFJLEtBQUssR0FBRyxJQUFJLENBQUMsZUFBZSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUN6QyxJQUFJLENBQUMsY0FBYyxDQUFDLEVBQUUsRUFBRSxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUMsRUFBRSxLQUFLLENBQUMsQ0FBQztRQU0xQyxJQUFJLElBQUksQ0FBQyxPQUFPLEVBQUU7WUFDZCxJQUFJLENBQUMsV0FBVyxDQUFDLFVBQUMsQ0FBQyxFQUFFLENBQUMsSUFBSyxPQUFBLEtBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBakMsQ0FBaUMsQ0FBQyxDQUFDO1lBQzlELElBQUksSUFBSSxHQUFHLElBQUksQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ3hDLElBQUksR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ3hDLElBQUksQ0FBQyxjQUFjLENBQUMsRUFBRSxFQUFFLENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDO1NBQzVDO0lBQ0wsQ0FBQztJQUVNLHFCQUFHLEdBQVYsVUFBVyxVQUFrQjtRQUN6QixJQUFJLE1BQU0sR0FBRyxNQUFNLENBQUMsU0FBUyxFQUFFLFNBQVMsR0FBRyxLQUFLLENBQUM7UUFDakQsT0FBTyxDQUFDLFNBQVMsSUFBSSxVQUFVLEVBQUUsR0FBRyxDQUFDLEVBQUU7WUFDbkMsSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDLFVBQVUsRUFBRSxDQUFDO1lBQzFCLFNBQVMsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLE1BQU0sR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQztZQUN0RCxNQUFNLEdBQUcsQ0FBQyxDQUFDO1NBQ2Q7UUFDRCxPQUFPLE1BQU0sQ0FBQztJQUNsQixDQUFDO0lBRU0sNEJBQVUsR0FBakI7UUFBQSxpQkFlQztRQWRHLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUN6QyxPQUFPLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDckMsSUFBSSxDQUFDLG1CQUFtQixDQUFDLElBQUksQ0FBQyxFQUFFLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQzFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUNyQyxJQUFJLENBQUMsbUJBQW1CLENBQUMsSUFBSSxDQUFDLEVBQUUsRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDMUMsSUFBSSxDQUFDLG1CQUFtQixDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3pDLElBQUksSUFBSSxHQUFHLENBQUMsQ0FBQztRQUNiLElBQUksQ0FBQyxXQUFXLENBQUMsVUFBQyxDQUFDLEVBQUUsQ0FBQztZQUNsQixJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxHQUFHLEtBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxHQUFHLEtBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsS0FBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsRUFDakYsQ0FBQyxHQUFHLEtBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBQ3pCLElBQUksSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBQ2QsS0FBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDckIsQ0FBQyxDQUFDLENBQUM7UUFDSCxPQUFPLElBQUksQ0FBQztJQUNoQixDQUFDO0lBRWMsV0FBRyxHQUFsQixVQUFtQixDQUFhLEVBQUUsQ0FBYSxFQUFFLENBQWE7UUFDMUQsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLEVBQUUsVUFBQyxDQUFDLEVBQUUsQ0FBQztZQUN2QyxPQUFBLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRztRQUE3QyxDQUE2QyxDQUFDLENBQUM7SUFDdkQsQ0FBQztJQUVNLGlDQUFlLEdBQXRCLFVBQXVCLENBQVcsRUFBRSxDQUFXLEVBQUUsUUFBZ0I7UUFDN0QsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLEVBQUU7WUFDN0IsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxRQUFRLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1NBQ2pDO0lBQ0wsQ0FBQztJQUVNLCtCQUFhLEdBQXBCO1FBQ0ksSUFBSSxNQUFNLEdBQUcsQ0FBQyxDQUFDO1FBQ2YsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsT0FBTyxHQUFHLElBQUksQ0FBQyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxPQUFPLEVBQUUsRUFBRSxDQUFDLEVBQUU7WUFDcEQsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLEVBQUUsRUFBRSxDQUFDLEVBQUU7Z0JBQ3hDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztnQkFDVixLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsRUFBRTtvQkFDN0IsSUFBSSxFQUFFLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO29CQUNyQyxDQUFDLElBQUksRUFBRSxHQUFHLEVBQUUsQ0FBQztpQkFDaEI7Z0JBQ0QsQ0FBQyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQ2pCLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQ3JCLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDO29CQUFFLFNBQVM7Z0JBQzNCLElBQUksRUFBRSxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUM7Z0JBQ2YsSUFBSSxFQUFFLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQztnQkFDZixNQUFNLElBQUksRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLENBQUM7YUFDMUI7U0FDSjtRQUNELE9BQU8sTUFBTSxDQUFDO0lBQ2xCLENBQUM7SUFyV2Msb0JBQVksR0FBVyxLQUFLLENBQUM7SUFzV2hELGNBQUM7Q0FBQSxBQWhZRCxJQWdZQztBQWhZWSwwQkFBTztBQW1ZcEI7SUFNSSxzQkFBbUIsSUFBZ0I7UUFBaEIscUJBQUEsRUFBQSxRQUFnQjtRQUFoQixTQUFJLEdBQUosSUFBSSxDQUFZO1FBTDNCLE1BQUMsR0FBVyxNQUFNLENBQUM7UUFDbkIsTUFBQyxHQUFXLE9BQU8sQ0FBQztRQUNwQixNQUFDLEdBQVcsVUFBVSxDQUFDO1FBQ3ZCLFVBQUssR0FBVyxLQUFLLENBQUM7SUFFUyxDQUFDO0lBR3hDLDhCQUFPLEdBQVA7UUFDSSxJQUFJLENBQUMsSUFBSSxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDO1FBQ25ELE9BQU8sQ0FBQyxJQUFJLENBQUMsSUFBSSxJQUFJLEVBQUUsQ0FBQyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUM7SUFDMUMsQ0FBQztJQUdELHFDQUFjLEdBQWQsVUFBZSxHQUFXLEVBQUUsR0FBVztRQUNuQyxPQUFPLEdBQUcsR0FBRyxJQUFJLENBQUMsT0FBTyxFQUFFLEdBQUcsQ0FBQyxHQUFHLEdBQUcsR0FBRyxDQUFDLENBQUM7SUFDOUMsQ0FBQztJQUNMLG1CQUFDO0FBQUQsQ0FBQyxBQWxCRCxJQWtCQztBQWxCWSxvQ0FBWSJ9//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/webcola/dist/src/descent.js\n");

/***/ }),

/***/ "./node_modules/webcola/dist/src/geom.js":
/*!***********************************************!*\
  !*** ./node_modules/webcola/dist/src/geom.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = function (d, b) {\r\n        extendStatics = Object.setPrototypeOf ||\r\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n        return extendStatics(d, b);\r\n    };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar rectangle_1 = __webpack_require__(/*! ./rectangle */ \"./node_modules/webcola/dist/src/rectangle.js\");\r\nvar Point = (function () {\r\n    function Point() {\r\n    }\r\n    return Point;\r\n}());\r\nexports.Point = Point;\r\nvar LineSegment = (function () {\r\n    function LineSegment(x1, y1, x2, y2) {\r\n        this.x1 = x1;\r\n        this.y1 = y1;\r\n        this.x2 = x2;\r\n        this.y2 = y2;\r\n    }\r\n    return LineSegment;\r\n}());\r\nexports.LineSegment = LineSegment;\r\nvar PolyPoint = (function (_super) {\r\n    __extends(PolyPoint, _super);\r\n    function PolyPoint() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    return PolyPoint;\r\n}(Point));\r\nexports.PolyPoint = PolyPoint;\r\nfunction isLeft(P0, P1, P2) {\r\n    return (P1.x - P0.x) * (P2.y - P0.y) - (P2.x - P0.x) * (P1.y - P0.y);\r\n}\r\nexports.isLeft = isLeft;\r\nfunction above(p, vi, vj) {\r\n    return isLeft(p, vi, vj) > 0;\r\n}\r\nfunction below(p, vi, vj) {\r\n    return isLeft(p, vi, vj) < 0;\r\n}\r\nfunction ConvexHull(S) {\r\n    var P = S.slice(0).sort(function (a, b) { return a.x !== b.x ? b.x - a.x : b.y - a.y; });\r\n    var n = S.length, i;\r\n    var minmin = 0;\r\n    var xmin = P[0].x;\r\n    for (i = 1; i < n; ++i) {\r\n        if (P[i].x !== xmin)\r\n            break;\r\n    }\r\n    var minmax = i - 1;\r\n    var H = [];\r\n    H.push(P[minmin]);\r\n    if (minmax === n - 1) {\r\n        if (P[minmax].y !== P[minmin].y)\r\n            H.push(P[minmax]);\r\n    }\r\n    else {\r\n        var maxmin, maxmax = n - 1;\r\n        var xmax = P[n - 1].x;\r\n        for (i = n - 2; i >= 0; i--)\r\n            if (P[i].x !== xmax)\r\n                break;\r\n        maxmin = i + 1;\r\n        i = minmax;\r\n        while (++i <= maxmin) {\r\n            if (isLeft(P[minmin], P[maxmin], P[i]) >= 0 && i < maxmin)\r\n                continue;\r\n            while (H.length > 1) {\r\n                if (isLeft(H[H.length - 2], H[H.length - 1], P[i]) > 0)\r\n                    break;\r\n                else\r\n                    H.length -= 1;\r\n            }\r\n            if (i != minmin)\r\n                H.push(P[i]);\r\n        }\r\n        if (maxmax != maxmin)\r\n            H.push(P[maxmax]);\r\n        var bot = H.length;\r\n        i = maxmin;\r\n        while (--i >= minmax) {\r\n            if (isLeft(P[maxmax], P[minmax], P[i]) >= 0 && i > minmax)\r\n                continue;\r\n            while (H.length > bot) {\r\n                if (isLeft(H[H.length - 2], H[H.length - 1], P[i]) > 0)\r\n                    break;\r\n                else\r\n                    H.length -= 1;\r\n            }\r\n            if (i != minmin)\r\n                H.push(P[i]);\r\n        }\r\n    }\r\n    return H;\r\n}\r\nexports.ConvexHull = ConvexHull;\r\nfunction clockwiseRadialSweep(p, P, f) {\r\n    P.slice(0).sort(function (a, b) { return Math.atan2(a.y - p.y, a.x - p.x) - Math.atan2(b.y - p.y, b.x - p.x); }).forEach(f);\r\n}\r\nexports.clockwiseRadialSweep = clockwiseRadialSweep;\r\nfunction nextPolyPoint(p, ps) {\r\n    if (p.polyIndex === ps.length - 1)\r\n        return ps[0];\r\n    return ps[p.polyIndex + 1];\r\n}\r\nfunction prevPolyPoint(p, ps) {\r\n    if (p.polyIndex === 0)\r\n        return ps[ps.length - 1];\r\n    return ps[p.polyIndex - 1];\r\n}\r\nfunction tangent_PointPolyC(P, V) {\r\n    var Vclosed = V.slice(0);\r\n    Vclosed.push(V[0]);\r\n    return { rtan: Rtangent_PointPolyC(P, Vclosed), ltan: Ltangent_PointPolyC(P, Vclosed) };\r\n}\r\nfunction Rtangent_PointPolyC(P, V) {\r\n    var n = V.length - 1;\r\n    var a, b, c;\r\n    var upA, dnC;\r\n    if (below(P, V[1], V[0]) && !above(P, V[n - 1], V[0]))\r\n        return 0;\r\n    for (a = 0, b = n;;) {\r\n        if (b - a === 1)\r\n            if (above(P, V[a], V[b]))\r\n                return a;\r\n            else\r\n                return b;\r\n        c = Math.floor((a + b) / 2);\r\n        dnC = below(P, V[c + 1], V[c]);\r\n        if (dnC && !above(P, V[c - 1], V[c]))\r\n            return c;\r\n        upA = above(P, V[a + 1], V[a]);\r\n        if (upA) {\r\n            if (dnC)\r\n                b = c;\r\n            else {\r\n                if (above(P, V[a], V[c]))\r\n                    b = c;\r\n                else\r\n                    a = c;\r\n            }\r\n        }\r\n        else {\r\n            if (!dnC)\r\n                a = c;\r\n            else {\r\n                if (below(P, V[a], V[c]))\r\n                    b = c;\r\n                else\r\n                    a = c;\r\n            }\r\n        }\r\n    }\r\n}\r\nfunction Ltangent_PointPolyC(P, V) {\r\n    var n = V.length - 1;\r\n    var a, b, c;\r\n    var dnA, dnC;\r\n    if (above(P, V[n - 1], V[0]) && !below(P, V[1], V[0]))\r\n        return 0;\r\n    for (a = 0, b = n;;) {\r\n        if (b - a === 1)\r\n            if (below(P, V[a], V[b]))\r\n                return a;\r\n            else\r\n                return b;\r\n        c = Math.floor((a + b) / 2);\r\n        dnC = below(P, V[c + 1], V[c]);\r\n        if (above(P, V[c - 1], V[c]) && !dnC)\r\n            return c;\r\n        dnA = below(P, V[a + 1], V[a]);\r\n        if (dnA) {\r\n            if (!dnC)\r\n                b = c;\r\n            else {\r\n                if (below(P, V[a], V[c]))\r\n                    b = c;\r\n                else\r\n                    a = c;\r\n            }\r\n        }\r\n        else {\r\n            if (dnC)\r\n                a = c;\r\n            else {\r\n                if (above(P, V[a], V[c]))\r\n                    b = c;\r\n                else\r\n                    a = c;\r\n            }\r\n        }\r\n    }\r\n}\r\nfunction tangent_PolyPolyC(V, W, t1, t2, cmp1, cmp2) {\r\n    var ix1, ix2;\r\n    ix1 = t1(W[0], V);\r\n    ix2 = t2(V[ix1], W);\r\n    var done = false;\r\n    while (!done) {\r\n        done = true;\r\n        while (true) {\r\n            if (ix1 === V.length - 1)\r\n                ix1 = 0;\r\n            if (cmp1(W[ix2], V[ix1], V[ix1 + 1]))\r\n                break;\r\n            ++ix1;\r\n        }\r\n        while (true) {\r\n            if (ix2 === 0)\r\n                ix2 = W.length - 1;\r\n            if (cmp2(V[ix1], W[ix2], W[ix2 - 1]))\r\n                break;\r\n            --ix2;\r\n            done = false;\r\n        }\r\n    }\r\n    return { t1: ix1, t2: ix2 };\r\n}\r\nexports.tangent_PolyPolyC = tangent_PolyPolyC;\r\nfunction LRtangent_PolyPolyC(V, W) {\r\n    var rl = RLtangent_PolyPolyC(W, V);\r\n    return { t1: rl.t2, t2: rl.t1 };\r\n}\r\nexports.LRtangent_PolyPolyC = LRtangent_PolyPolyC;\r\nfunction RLtangent_PolyPolyC(V, W) {\r\n    return tangent_PolyPolyC(V, W, Rtangent_PointPolyC, Ltangent_PointPolyC, above, below);\r\n}\r\nexports.RLtangent_PolyPolyC = RLtangent_PolyPolyC;\r\nfunction LLtangent_PolyPolyC(V, W) {\r\n    return tangent_PolyPolyC(V, W, Ltangent_PointPolyC, Ltangent_PointPolyC, below, below);\r\n}\r\nexports.LLtangent_PolyPolyC = LLtangent_PolyPolyC;\r\nfunction RRtangent_PolyPolyC(V, W) {\r\n    return tangent_PolyPolyC(V, W, Rtangent_PointPolyC, Rtangent_PointPolyC, above, above);\r\n}\r\nexports.RRtangent_PolyPolyC = RRtangent_PolyPolyC;\r\nvar BiTangent = (function () {\r\n    function BiTangent(t1, t2) {\r\n        this.t1 = t1;\r\n        this.t2 = t2;\r\n    }\r\n    return BiTangent;\r\n}());\r\nexports.BiTangent = BiTangent;\r\nvar BiTangents = (function () {\r\n    function BiTangents() {\r\n    }\r\n    return BiTangents;\r\n}());\r\nexports.BiTangents = BiTangents;\r\nvar TVGPoint = (function (_super) {\r\n    __extends(TVGPoint, _super);\r\n    function TVGPoint() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    return TVGPoint;\r\n}(Point));\r\nexports.TVGPoint = TVGPoint;\r\nvar VisibilityVertex = (function () {\r\n    function VisibilityVertex(id, polyid, polyvertid, p) {\r\n        this.id = id;\r\n        this.polyid = polyid;\r\n        this.polyvertid = polyvertid;\r\n        this.p = p;\r\n        p.vv = this;\r\n    }\r\n    return VisibilityVertex;\r\n}());\r\nexports.VisibilityVertex = VisibilityVertex;\r\nvar VisibilityEdge = (function () {\r\n    function VisibilityEdge(source, target) {\r\n        this.source = source;\r\n        this.target = target;\r\n    }\r\n    VisibilityEdge.prototype.length = function () {\r\n        var dx = this.source.p.x - this.target.p.x;\r\n        var dy = this.source.p.y - this.target.p.y;\r\n        return Math.sqrt(dx * dx + dy * dy);\r\n    };\r\n    return VisibilityEdge;\r\n}());\r\nexports.VisibilityEdge = VisibilityEdge;\r\nvar TangentVisibilityGraph = (function () {\r\n    function TangentVisibilityGraph(P, g0) {\r\n        this.P = P;\r\n        this.V = [];\r\n        this.E = [];\r\n        if (!g0) {\r\n            var n = P.length;\r\n            for (var i = 0; i < n; i++) {\r\n                var p = P[i];\r\n                for (var j = 0; j < p.length; ++j) {\r\n                    var pj = p[j], vv = new VisibilityVertex(this.V.length, i, j, pj);\r\n                    this.V.push(vv);\r\n                    if (j > 0)\r\n                        this.E.push(new VisibilityEdge(p[j - 1].vv, vv));\r\n                }\r\n                if (p.length > 1)\r\n                    this.E.push(new VisibilityEdge(p[0].vv, p[p.length - 1].vv));\r\n            }\r\n            for (var i = 0; i < n - 1; i++) {\r\n                var Pi = P[i];\r\n                for (var j = i + 1; j < n; j++) {\r\n                    var Pj = P[j], t = tangents(Pi, Pj);\r\n                    for (var q in t) {\r\n                        var c = t[q], source = Pi[c.t1], target = Pj[c.t2];\r\n                        this.addEdgeIfVisible(source, target, i, j);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            this.V = g0.V.slice(0);\r\n            this.E = g0.E.slice(0);\r\n        }\r\n    }\r\n    TangentVisibilityGraph.prototype.addEdgeIfVisible = function (u, v, i1, i2) {\r\n        if (!this.intersectsPolys(new LineSegment(u.x, u.y, v.x, v.y), i1, i2)) {\r\n            this.E.push(new VisibilityEdge(u.vv, v.vv));\r\n        }\r\n    };\r\n    TangentVisibilityGraph.prototype.addPoint = function (p, i1) {\r\n        var n = this.P.length;\r\n        this.V.push(new VisibilityVertex(this.V.length, n, 0, p));\r\n        for (var i = 0; i < n; ++i) {\r\n            if (i === i1)\r\n                continue;\r\n            var poly = this.P[i], t = tangent_PointPolyC(p, poly);\r\n            this.addEdgeIfVisible(p, poly[t.ltan], i1, i);\r\n            this.addEdgeIfVisible(p, poly[t.rtan], i1, i);\r\n        }\r\n        return p.vv;\r\n    };\r\n    TangentVisibilityGraph.prototype.intersectsPolys = function (l, i1, i2) {\r\n        for (var i = 0, n = this.P.length; i < n; ++i) {\r\n            if (i != i1 && i != i2 && intersects(l, this.P[i]).length > 0) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    };\r\n    return TangentVisibilityGraph;\r\n}());\r\nexports.TangentVisibilityGraph = TangentVisibilityGraph;\r\nfunction intersects(l, P) {\r\n    var ints = [];\r\n    for (var i = 1, n = P.length; i < n; ++i) {\r\n        var int = rectangle_1.Rectangle.lineIntersection(l.x1, l.y1, l.x2, l.y2, P[i - 1].x, P[i - 1].y, P[i].x, P[i].y);\r\n        if (int)\r\n            ints.push(int);\r\n    }\r\n    return ints;\r\n}\r\nfunction tangents(V, W) {\r\n    var m = V.length - 1, n = W.length - 1;\r\n    var bt = new BiTangents();\r\n    for (var i = 0; i < m; ++i) {\r\n        for (var j = 0; j < n; ++j) {\r\n            var v1 = V[i == 0 ? m - 1 : i - 1];\r\n            var v2 = V[i];\r\n            var v3 = V[i + 1];\r\n            var w1 = W[j == 0 ? n - 1 : j - 1];\r\n            var w2 = W[j];\r\n            var w3 = W[j + 1];\r\n            var v1v2w2 = isLeft(v1, v2, w2);\r\n            var v2w1w2 = isLeft(v2, w1, w2);\r\n            var v2w2w3 = isLeft(v2, w2, w3);\r\n            var w1w2v2 = isLeft(w1, w2, v2);\r\n            var w2v1v2 = isLeft(w2, v1, v2);\r\n            var w2v2v3 = isLeft(w2, v2, v3);\r\n            if (v1v2w2 >= 0 && v2w1w2 >= 0 && v2w2w3 < 0\r\n                && w1w2v2 >= 0 && w2v1v2 >= 0 && w2v2v3 < 0) {\r\n                bt.ll = new BiTangent(i, j);\r\n            }\r\n            else if (v1v2w2 <= 0 && v2w1w2 <= 0 && v2w2w3 > 0\r\n                && w1w2v2 <= 0 && w2v1v2 <= 0 && w2v2v3 > 0) {\r\n                bt.rr = new BiTangent(i, j);\r\n            }\r\n            else if (v1v2w2 <= 0 && v2w1w2 > 0 && v2w2w3 <= 0\r\n                && w1w2v2 >= 0 && w2v1v2 < 0 && w2v2v3 >= 0) {\r\n                bt.rl = new BiTangent(i, j);\r\n            }\r\n            else if (v1v2w2 >= 0 && v2w1w2 < 0 && v2w2w3 >= 0\r\n                && w1w2v2 <= 0 && w2v1v2 > 0 && w2v2v3 <= 0) {\r\n                bt.lr = new BiTangent(i, j);\r\n            }\r\n        }\r\n    }\r\n    return bt;\r\n}\r\nexports.tangents = tangents;\r\nfunction isPointInsidePoly(p, poly) {\r\n    for (var i = 1, n = poly.length; i < n; ++i)\r\n        if (below(poly[i - 1], poly[i], p))\r\n            return false;\r\n    return true;\r\n}\r\nfunction isAnyPInQ(p, q) {\r\n    return !p.every(function (v) { return !isPointInsidePoly(v, q); });\r\n}\r\nfunction polysOverlap(p, q) {\r\n    if (isAnyPInQ(p, q))\r\n        return true;\r\n    if (isAnyPInQ(q, p))\r\n        return true;\r\n    for (var i = 1, n = p.length; i < n; ++i) {\r\n        var v = p[i], u = p[i - 1];\r\n        if (intersects(new LineSegment(u.x, u.y, v.x, v.y), q).length > 0)\r\n            return true;\r\n    }\r\n    return false;\r\n}\r\nexports.polysOverlap = polysOverlap;\r\n//# sourceMappingURL=data:application/json;base64,//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/webcola/dist/src/geom.js\n");

/***/ }),

/***/ "./node_modules/webcola/dist/src/gridrouter.js":
/*!*****************************************************!*\
  !*** ./node_modules/webcola/dist/src/gridrouter.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar rectangle_1 = __webpack_require__(/*! ./rectangle */ \"./node_modules/webcola/dist/src/rectangle.js\");\r\nvar vpsc_1 = __webpack_require__(/*! ./vpsc */ \"./node_modules/webcola/dist/src/vpsc.js\");\r\nvar shortestpaths_1 = __webpack_require__(/*! ./shortestpaths */ \"./node_modules/webcola/dist/src/shortestpaths.js\");\r\nvar NodeWrapper = (function () {\r\n    function NodeWrapper(id, rect, children) {\r\n        this.id = id;\r\n        this.rect = rect;\r\n        this.children = children;\r\n        this.leaf = typeof children === 'undefined' || children.length === 0;\r\n    }\r\n    return NodeWrapper;\r\n}());\r\nexports.NodeWrapper = NodeWrapper;\r\nvar Vert = (function () {\r\n    function Vert(id, x, y, node, line) {\r\n        if (node === void 0) { node = null; }\r\n        if (line === void 0) { line = null; }\r\n        this.id = id;\r\n        this.x = x;\r\n        this.y = y;\r\n        this.node = node;\r\n        this.line = line;\r\n    }\r\n    return Vert;\r\n}());\r\nexports.Vert = Vert;\r\nvar LongestCommonSubsequence = (function () {\r\n    function LongestCommonSubsequence(s, t) {\r\n        this.s = s;\r\n        this.t = t;\r\n        var mf = LongestCommonSubsequence.findMatch(s, t);\r\n        var tr = t.slice(0).reverse();\r\n        var mr = LongestCommonSubsequence.findMatch(s, tr);\r\n        if (mf.length >= mr.length) {\r\n            this.length = mf.length;\r\n            this.si = mf.si;\r\n            this.ti = mf.ti;\r\n            this.reversed = false;\r\n        }\r\n        else {\r\n            this.length = mr.length;\r\n            this.si = mr.si;\r\n            this.ti = t.length - mr.ti - mr.length;\r\n            this.reversed = true;\r\n        }\r\n    }\r\n    LongestCommonSubsequence.findMatch = function (s, t) {\r\n        var m = s.length;\r\n        var n = t.length;\r\n        var match = { length: 0, si: -1, ti: -1 };\r\n        var l = new Array(m);\r\n        for (var i = 0; i < m; i++) {\r\n            l[i] = new Array(n);\r\n            for (var j = 0; j < n; j++)\r\n                if (s[i] === t[j]) {\r\n                    var v = l[i][j] = (i === 0 || j === 0) ? 1 : l[i - 1][j - 1] + 1;\r\n                    if (v > match.length) {\r\n                        match.length = v;\r\n                        match.si = i - v + 1;\r\n                        match.ti = j - v + 1;\r\n                    }\r\n                    ;\r\n                }\r\n                else\r\n                    l[i][j] = 0;\r\n        }\r\n        return match;\r\n    };\r\n    LongestCommonSubsequence.prototype.getSequence = function () {\r\n        return this.length >= 0 ? this.s.slice(this.si, this.si + this.length) : [];\r\n    };\r\n    return LongestCommonSubsequence;\r\n}());\r\nexports.LongestCommonSubsequence = LongestCommonSubsequence;\r\nvar GridRouter = (function () {\r\n    function GridRouter(originalnodes, accessor, groupPadding) {\r\n        var _this = this;\r\n        if (groupPadding === void 0) { groupPadding = 12; }\r\n        this.originalnodes = originalnodes;\r\n        this.groupPadding = groupPadding;\r\n        this.leaves = null;\r\n        this.nodes = originalnodes.map(function (v, i) { return new NodeWrapper(i, accessor.getBounds(v), accessor.getChildren(v)); });\r\n        this.leaves = this.nodes.filter(function (v) { return v.leaf; });\r\n        this.groups = this.nodes.filter(function (g) { return !g.leaf; });\r\n        this.cols = this.getGridLines('x');\r\n        this.rows = this.getGridLines('y');\r\n        this.groups.forEach(function (v) {\r\n            return v.children.forEach(function (c) { return _this.nodes[c].parent = v; });\r\n        });\r\n        this.root = { children: [] };\r\n        this.nodes.forEach(function (v) {\r\n            if (typeof v.parent === 'undefined') {\r\n                v.parent = _this.root;\r\n                _this.root.children.push(v.id);\r\n            }\r\n            v.ports = [];\r\n        });\r\n        this.backToFront = this.nodes.slice(0);\r\n        this.backToFront.sort(function (x, y) { return _this.getDepth(x) - _this.getDepth(y); });\r\n        var frontToBackGroups = this.backToFront.slice(0).reverse().filter(function (g) { return !g.leaf; });\r\n        frontToBackGroups.forEach(function (v) {\r\n            var r = rectangle_1.Rectangle.empty();\r\n            v.children.forEach(function (c) { return r = r.union(_this.nodes[c].rect); });\r\n            v.rect = r.inflate(_this.groupPadding);\r\n        });\r\n        var colMids = this.midPoints(this.cols.map(function (r) { return r.pos; }));\r\n        var rowMids = this.midPoints(this.rows.map(function (r) { return r.pos; }));\r\n        var rowx = colMids[0], rowX = colMids[colMids.length - 1];\r\n        var coly = rowMids[0], colY = rowMids[rowMids.length - 1];\r\n        var hlines = this.rows.map(function (r) { return ({ x1: rowx, x2: rowX, y1: r.pos, y2: r.pos }); })\r\n            .concat(rowMids.map(function (m) { return ({ x1: rowx, x2: rowX, y1: m, y2: m }); }));\r\n        var vlines = this.cols.map(function (c) { return ({ x1: c.pos, x2: c.pos, y1: coly, y2: colY }); })\r\n            .concat(colMids.map(function (m) { return ({ x1: m, x2: m, y1: coly, y2: colY }); }));\r\n        var lines = hlines.concat(vlines);\r\n        lines.forEach(function (l) { return l.verts = []; });\r\n        this.verts = [];\r\n        this.edges = [];\r\n        hlines.forEach(function (h) {\r\n            return vlines.forEach(function (v) {\r\n                var p = new Vert(_this.verts.length, v.x1, h.y1);\r\n                h.verts.push(p);\r\n                v.verts.push(p);\r\n                _this.verts.push(p);\r\n                var i = _this.backToFront.length;\r\n                while (i-- > 0) {\r\n                    var node = _this.backToFront[i], r = node.rect;\r\n                    var dx = Math.abs(p.x - r.cx()), dy = Math.abs(p.y - r.cy());\r\n                    if (dx < r.width() / 2 && dy < r.height() / 2) {\r\n                        p.node = node;\r\n                        break;\r\n                    }\r\n                }\r\n            });\r\n        });\r\n        lines.forEach(function (l, li) {\r\n            _this.nodes.forEach(function (v, i) {\r\n                v.rect.lineIntersections(l.x1, l.y1, l.x2, l.y2).forEach(function (intersect, j) {\r\n                    var p = new Vert(_this.verts.length, intersect.x, intersect.y, v, l);\r\n                    _this.verts.push(p);\r\n                    l.verts.push(p);\r\n                    v.ports.push(p);\r\n                });\r\n            });\r\n            var isHoriz = Math.abs(l.y1 - l.y2) < 0.1;\r\n            var delta = function (a, b) { return isHoriz ? b.x - a.x : b.y - a.y; };\r\n            l.verts.sort(delta);\r\n            for (var i = 1; i < l.verts.length; i++) {\r\n                var u = l.verts[i - 1], v = l.verts[i];\r\n                if (u.node && u.node === v.node && u.node.leaf)\r\n                    continue;\r\n                _this.edges.push({ source: u.id, target: v.id, length: Math.abs(delta(u, v)) });\r\n            }\r\n        });\r\n    }\r\n    GridRouter.prototype.avg = function (a) { return a.reduce(function (x, y) { return x + y; }) / a.length; };\r\n    GridRouter.prototype.getGridLines = function (axis) {\r\n        var columns = [];\r\n        var ls = this.leaves.slice(0, this.leaves.length);\r\n        while (ls.length > 0) {\r\n            var overlapping = ls.filter(function (v) { return v.rect['overlap' + axis.toUpperCase()](ls[0].rect); });\r\n            var col = {\r\n                nodes: overlapping,\r\n                pos: this.avg(overlapping.map(function (v) { return v.rect['c' + axis](); }))\r\n            };\r\n            columns.push(col);\r\n            col.nodes.forEach(function (v) { return ls.splice(ls.indexOf(v), 1); });\r\n        }\r\n        columns.sort(function (a, b) { return a.pos - b.pos; });\r\n        return columns;\r\n    };\r\n    GridRouter.prototype.getDepth = function (v) {\r\n        var depth = 0;\r\n        while (v.parent !== this.root) {\r\n            depth++;\r\n            v = v.parent;\r\n        }\r\n        return depth;\r\n    };\r\n    GridRouter.prototype.midPoints = function (a) {\r\n        var gap = a[1] - a[0];\r\n        var mids = [a[0] - gap / 2];\r\n        for (var i = 1; i < a.length; i++) {\r\n            mids.push((a[i] + a[i - 1]) / 2);\r\n        }\r\n        mids.push(a[a.length - 1] + gap / 2);\r\n        return mids;\r\n    };\r\n    GridRouter.prototype.findLineage = function (v) {\r\n        var lineage = [v];\r\n        do {\r\n            v = v.parent;\r\n            lineage.push(v);\r\n        } while (v !== this.root);\r\n        return lineage.reverse();\r\n    };\r\n    GridRouter.prototype.findAncestorPathBetween = function (a, b) {\r\n        var aa = this.findLineage(a), ba = this.findLineage(b), i = 0;\r\n        while (aa[i] === ba[i])\r\n            i++;\r\n        return { commonAncestor: aa[i - 1], lineages: aa.slice(i).concat(ba.slice(i)) };\r\n    };\r\n    GridRouter.prototype.siblingObstacles = function (a, b) {\r\n        var _this = this;\r\n        var path = this.findAncestorPathBetween(a, b);\r\n        var lineageLookup = {};\r\n        path.lineages.forEach(function (v) { return lineageLookup[v.id] = {}; });\r\n        var obstacles = path.commonAncestor.children.filter(function (v) { return !(v in lineageLookup); });\r\n        path.lineages\r\n            .filter(function (v) { return v.parent !== path.commonAncestor; })\r\n            .forEach(function (v) { return obstacles = obstacles.concat(v.parent.children.filter(function (c) { return c !== v.id; })); });\r\n        return obstacles.map(function (v) { return _this.nodes[v]; });\r\n    };\r\n    GridRouter.getSegmentSets = function (routes, x, y) {\r\n        var vsegments = [];\r\n        for (var ei = 0; ei < routes.length; ei++) {\r\n            var route = routes[ei];\r\n            for (var si = 0; si < route.length; si++) {\r\n                var s = route[si];\r\n                s.edgeid = ei;\r\n                s.i = si;\r\n                var sdx = s[1][x] - s[0][x];\r\n                if (Math.abs(sdx) < 0.1) {\r\n                    vsegments.push(s);\r\n                }\r\n            }\r\n        }\r\n        vsegments.sort(function (a, b) { return a[0][x] - b[0][x]; });\r\n        var vsegmentsets = [];\r\n        var segmentset = null;\r\n        for (var i = 0; i < vsegments.length; i++) {\r\n            var s = vsegments[i];\r\n            if (!segmentset || Math.abs(s[0][x] - segmentset.pos) > 0.1) {\r\n                segmentset = { pos: s[0][x], segments: [] };\r\n                vsegmentsets.push(segmentset);\r\n            }\r\n            segmentset.segments.push(s);\r\n        }\r\n        return vsegmentsets;\r\n    };\r\n    GridRouter.nudgeSegs = function (x, y, routes, segments, leftOf, gap) {\r\n        var n = segments.length;\r\n        if (n <= 1)\r\n            return;\r\n        var vs = segments.map(function (s) { return new vpsc_1.Variable(s[0][x]); });\r\n        var cs = [];\r\n        for (var i = 0; i < n; i++) {\r\n            for (var j = 0; j < n; j++) {\r\n                if (i === j)\r\n                    continue;\r\n                var s1 = segments[i], s2 = segments[j], e1 = s1.edgeid, e2 = s2.edgeid, lind = -1, rind = -1;\r\n                if (x == 'x') {\r\n                    if (leftOf(e1, e2)) {\r\n                        if (s1[0][y] < s1[1][y]) {\r\n                            lind = j, rind = i;\r\n                        }\r\n                        else {\r\n                            lind = i, rind = j;\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    if (leftOf(e1, e2)) {\r\n                        if (s1[0][y] < s1[1][y]) {\r\n                            lind = i, rind = j;\r\n                        }\r\n                        else {\r\n                            lind = j, rind = i;\r\n                        }\r\n                    }\r\n                }\r\n                if (lind >= 0) {\r\n                    cs.push(new vpsc_1.Constraint(vs[lind], vs[rind], gap));\r\n                }\r\n            }\r\n        }\r\n        var solver = new vpsc_1.Solver(vs, cs);\r\n        solver.solve();\r\n        vs.forEach(function (v, i) {\r\n            var s = segments[i];\r\n            var pos = v.position();\r\n            s[0][x] = s[1][x] = pos;\r\n            var route = routes[s.edgeid];\r\n            if (s.i > 0)\r\n                route[s.i - 1][1][x] = pos;\r\n            if (s.i < route.length - 1)\r\n                route[s.i + 1][0][x] = pos;\r\n        });\r\n    };\r\n    GridRouter.nudgeSegments = function (routes, x, y, leftOf, gap) {\r\n        var vsegmentsets = GridRouter.getSegmentSets(routes, x, y);\r\n        for (var i = 0; i < vsegmentsets.length; i++) {\r\n            var ss = vsegmentsets[i];\r\n            var events = [];\r\n            for (var j = 0; j < ss.segments.length; j++) {\r\n                var s = ss.segments[j];\r\n                events.push({ type: 0, s: s, pos: Math.min(s[0][y], s[1][y]) });\r\n                events.push({ type: 1, s: s, pos: Math.max(s[0][y], s[1][y]) });\r\n            }\r\n            events.sort(function (a, b) { return a.pos - b.pos + a.type - b.type; });\r\n            var open = [];\r\n            var openCount = 0;\r\n            events.forEach(function (e) {\r\n                if (e.type === 0) {\r\n                    open.push(e.s);\r\n                    openCount++;\r\n                }\r\n                else {\r\n                    openCount--;\r\n                }\r\n                if (openCount == 0) {\r\n                    GridRouter.nudgeSegs(x, y, routes, open, leftOf, gap);\r\n                    open = [];\r\n                }\r\n            });\r\n        }\r\n    };\r\n    GridRouter.prototype.routeEdges = function (edges, nudgeGap, source, target) {\r\n        var _this = this;\r\n        var routePaths = edges.map(function (e) { return _this.route(source(e), target(e)); });\r\n        var order = GridRouter.orderEdges(routePaths);\r\n        var routes = routePaths.map(function (e) { return GridRouter.makeSegments(e); });\r\n        GridRouter.nudgeSegments(routes, 'x', 'y', order, nudgeGap);\r\n        GridRouter.nudgeSegments(routes, 'y', 'x', order, nudgeGap);\r\n        GridRouter.unreverseEdges(routes, routePaths);\r\n        return routes;\r\n    };\r\n    GridRouter.unreverseEdges = function (routes, routePaths) {\r\n        routes.forEach(function (segments, i) {\r\n            var path = routePaths[i];\r\n            if (path.reversed) {\r\n                segments.reverse();\r\n                segments.forEach(function (segment) {\r\n                    segment.reverse();\r\n                });\r\n            }\r\n        });\r\n    };\r\n    GridRouter.angleBetween2Lines = function (line1, line2) {\r\n        var angle1 = Math.atan2(line1[0].y - line1[1].y, line1[0].x - line1[1].x);\r\n        var angle2 = Math.atan2(line2[0].y - line2[1].y, line2[0].x - line2[1].x);\r\n        var diff = angle1 - angle2;\r\n        if (diff > Math.PI || diff < -Math.PI) {\r\n            diff = angle2 - angle1;\r\n        }\r\n        return diff;\r\n    };\r\n    GridRouter.isLeft = function (a, b, c) {\r\n        return ((b.x - a.x) * (c.y - a.y) - (b.y - a.y) * (c.x - a.x)) <= 0;\r\n    };\r\n    GridRouter.getOrder = function (pairs) {\r\n        var outgoing = {};\r\n        for (var i = 0; i < pairs.length; i++) {\r\n            var p = pairs[i];\r\n            if (typeof outgoing[p.l] === 'undefined')\r\n                outgoing[p.l] = {};\r\n            outgoing[p.l][p.r] = true;\r\n        }\r\n        return function (l, r) { return typeof outgoing[l] !== 'undefined' && outgoing[l][r]; };\r\n    };\r\n    GridRouter.orderEdges = function (edges) {\r\n        var edgeOrder = [];\r\n        for (var i = 0; i < edges.length - 1; i++) {\r\n            for (var j = i + 1; j < edges.length; j++) {\r\n                var e = edges[i], f = edges[j], lcs = new LongestCommonSubsequence(e, f);\r\n                var u, vi, vj;\r\n                if (lcs.length === 0)\r\n                    continue;\r\n                if (lcs.reversed) {\r\n                    f.reverse();\r\n                    f.reversed = true;\r\n                    lcs = new LongestCommonSubsequence(e, f);\r\n                }\r\n                if ((lcs.si <= 0 || lcs.ti <= 0) &&\r\n                    (lcs.si + lcs.length >= e.length || lcs.ti + lcs.length >= f.length)) {\r\n                    edgeOrder.push({ l: i, r: j });\r\n                    continue;\r\n                }\r\n                if (lcs.si + lcs.length >= e.length || lcs.ti + lcs.length >= f.length) {\r\n                    u = e[lcs.si + 1];\r\n                    vj = e[lcs.si - 1];\r\n                    vi = f[lcs.ti - 1];\r\n                }\r\n                else {\r\n                    u = e[lcs.si + lcs.length - 2];\r\n                    vi = e[lcs.si + lcs.length];\r\n                    vj = f[lcs.ti + lcs.length];\r\n                }\r\n                if (GridRouter.isLeft(u, vi, vj)) {\r\n                    edgeOrder.push({ l: j, r: i });\r\n                }\r\n                else {\r\n                    edgeOrder.push({ l: i, r: j });\r\n                }\r\n            }\r\n        }\r\n        return GridRouter.getOrder(edgeOrder);\r\n    };\r\n    GridRouter.makeSegments = function (path) {\r\n        function copyPoint(p) {\r\n            return { x: p.x, y: p.y };\r\n        }\r\n        var isStraight = function (a, b, c) { return Math.abs((b.x - a.x) * (c.y - a.y) - (b.y - a.y) * (c.x - a.x)) < 0.001; };\r\n        var segments = [];\r\n        var a = copyPoint(path[0]);\r\n        for (var i = 1; i < path.length; i++) {\r\n            var b = copyPoint(path[i]), c = i < path.length - 1 ? path[i + 1] : null;\r\n            if (!c || !isStraight(a, b, c)) {\r\n                segments.push([a, b]);\r\n                a = b;\r\n            }\r\n        }\r\n        return segments;\r\n    };\r\n    GridRouter.prototype.route = function (s, t) {\r\n        var _this = this;\r\n        var source = this.nodes[s], target = this.nodes[t];\r\n        this.obstacles = this.siblingObstacles(source, target);\r\n        var obstacleLookup = {};\r\n        this.obstacles.forEach(function (o) { return obstacleLookup[o.id] = o; });\r\n        this.passableEdges = this.edges.filter(function (e) {\r\n            var u = _this.verts[e.source], v = _this.verts[e.target];\r\n            return !(u.node && u.node.id in obstacleLookup\r\n                || v.node && v.node.id in obstacleLookup);\r\n        });\r\n        for (var i = 1; i < source.ports.length; i++) {\r\n            var u = source.ports[0].id;\r\n            var v = source.ports[i].id;\r\n            this.passableEdges.push({\r\n                source: u,\r\n                target: v,\r\n                length: 0\r\n            });\r\n        }\r\n        for (var i = 1; i < target.ports.length; i++) {\r\n            var u = target.ports[0].id;\r\n            var v = target.ports[i].id;\r\n            this.passableEdges.push({\r\n                source: u,\r\n                target: v,\r\n                length: 0\r\n            });\r\n        }\r\n        var getSource = function (e) { return e.source; }, getTarget = function (e) { return e.target; }, getLength = function (e) { return e.length; };\r\n        var shortestPathCalculator = new shortestpaths_1.Calculator(this.verts.length, this.passableEdges, getSource, getTarget, getLength);\r\n        var bendPenalty = function (u, v, w) {\r\n            var a = _this.verts[u], b = _this.verts[v], c = _this.verts[w];\r\n            var dx = Math.abs(c.x - a.x), dy = Math.abs(c.y - a.y);\r\n            if (a.node === source && a.node === b.node || b.node === target && b.node === c.node)\r\n                return 0;\r\n            return dx > 1 && dy > 1 ? 1000 : 0;\r\n        };\r\n        var shortestPath = shortestPathCalculator.PathFromNodeToNodeWithPrevCost(source.ports[0].id, target.ports[0].id, bendPenalty);\r\n        var pathPoints = shortestPath.reverse().map(function (vi) { return _this.verts[vi]; });\r\n        pathPoints.push(this.nodes[target.id].ports[0]);\r\n        return pathPoints.filter(function (v, i) {\r\n            return !(i < pathPoints.length - 1 && pathPoints[i + 1].node === source && v.node === source\r\n                || i > 0 && v.node === target && pathPoints[i - 1].node === target);\r\n        });\r\n    };\r\n    GridRouter.getRoutePath = function (route, cornerradius, arrowwidth, arrowheight) {\r\n        var result = {\r\n            routepath: 'M ' + route[0][0].x + ' ' + route[0][0].y + ' ',\r\n            arrowpath: ''\r\n        };\r\n        if (route.length > 1) {\r\n            for (var i = 0; i < route.length; i++) {\r\n                var li = route[i];\r\n                var x = li[1].x, y = li[1].y;\r\n                var dx = x - li[0].x;\r\n                var dy = y - li[0].y;\r\n                if (i < route.length - 1) {\r\n                    if (Math.abs(dx) > 0) {\r\n                        x -= dx / Math.abs(dx) * cornerradius;\r\n                    }\r\n                    else {\r\n                        y -= dy / Math.abs(dy) * cornerradius;\r\n                    }\r\n                    result.routepath += 'L ' + x + ' ' + y + ' ';\r\n                    var l = route[i + 1];\r\n                    var x0 = l[0].x, y0 = l[0].y;\r\n                    var x1 = l[1].x;\r\n                    var y1 = l[1].y;\r\n                    dx = x1 - x0;\r\n                    dy = y1 - y0;\r\n                    var angle = GridRouter.angleBetween2Lines(li, l) < 0 ? 1 : 0;\r\n                    var x2, y2;\r\n                    if (Math.abs(dx) > 0) {\r\n                        x2 = x0 + dx / Math.abs(dx) * cornerradius;\r\n                        y2 = y0;\r\n                    }\r\n                    else {\r\n                        x2 = x0;\r\n                        y2 = y0 + dy / Math.abs(dy) * cornerradius;\r\n                    }\r\n                    var cx = Math.abs(x2 - x);\r\n                    var cy = Math.abs(y2 - y);\r\n                    result.routepath += 'A ' + cx + ' ' + cy + ' 0 0 ' + angle + ' ' + x2 + ' ' + y2 + ' ';\r\n                }\r\n                else {\r\n                    var arrowtip = [x, y];\r\n                    var arrowcorner1, arrowcorner2;\r\n                    if (Math.abs(dx) > 0) {\r\n                        x -= dx / Math.abs(dx) * arrowheight;\r\n                        arrowcorner1 = [x, y + arrowwidth];\r\n                        arrowcorner2 = [x, y - arrowwidth];\r\n                    }\r\n                    else {\r\n                        y -= dy / Math.abs(dy) * arrowheight;\r\n                        arrowcorner1 = [x + arrowwidth, y];\r\n                        arrowcorner2 = [x - arrowwidth, y];\r\n                    }\r\n                    result.routepath += 'L ' + x + ' ' + y + ' ';\r\n                    if (arrowheight > 0) {\r\n                        result.arrowpath = 'M ' + arrowtip[0] + ' ' + arrowtip[1] + ' L ' + arrowcorner1[0] + ' ' + arrowcorner1[1]\r\n                            + ' L ' + arrowcorner2[0] + ' ' + arrowcorner2[1];\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            var li = route[0];\r\n            var x = li[1].x, y = li[1].y;\r\n            var dx = x - li[0].x;\r\n            var dy = y - li[0].y;\r\n            var arrowtip = [x, y];\r\n            var arrowcorner1, arrowcorner2;\r\n            if (Math.abs(dx) > 0) {\r\n                x -= dx / Math.abs(dx) * arrowheight;\r\n                arrowcorner1 = [x, y + arrowwidth];\r\n                arrowcorner2 = [x, y - arrowwidth];\r\n            }\r\n            else {\r\n                y -= dy / Math.abs(dy) * arrowheight;\r\n                arrowcorner1 = [x + arrowwidth, y];\r\n                arrowcorner2 = [x - arrowwidth, y];\r\n            }\r\n            result.routepath += 'L ' + x + ' ' + y + ' ';\r\n            if (arrowheight > 0) {\r\n                result.arrowpath = 'M ' + arrowtip[0] + ' ' + arrowtip[1] + ' L ' + arrowcorner1[0] + ' ' + arrowcorner1[1]\r\n                    + ' L ' + arrowcorner2[0] + ' ' + arrowcorner2[1];\r\n            }\r\n        }\r\n        return result;\r\n    };\r\n    return GridRouter;\r\n}());\r\nexports.GridRouter = GridRouter;\r\n//# sourceMappingURL=data:application/json;base64,//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/webcola/dist/src/gridrouter.js\n");

/***/ }),

/***/ "./node_modules/webcola/dist/src/handledisconnected.js":
/*!*************************************************************!*\
  !*** ./node_modules/webcola/dist/src/handledisconnected.js ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar packingOptions = {\r\n    PADDING: 10,\r\n    GOLDEN_SECTION: (1 + Math.sqrt(5)) / 2,\r\n    FLOAT_EPSILON: 0.0001,\r\n    MAX_INERATIONS: 100\r\n};\r\nfunction applyPacking(graphs, w, h, node_size, desired_ratio, centerGraph) {\r\n    if (desired_ratio === void 0) { desired_ratio = 1; }\r\n    if (centerGraph === void 0) { centerGraph = true; }\r\n    var init_x = 0, init_y = 0, svg_width = w, svg_height = h, desired_ratio = typeof desired_ratio !== 'undefined' ? desired_ratio : 1, node_size = typeof node_size !== 'undefined' ? node_size : 0, real_width = 0, real_height = 0, min_width = 0, global_bottom = 0, line = [];\r\n    if (graphs.length == 0)\r\n        return;\r\n    calculate_bb(graphs);\r\n    apply(graphs, desired_ratio);\r\n    if (centerGraph) {\r\n        put_nodes_to_right_positions(graphs);\r\n    }\r\n    function calculate_bb(graphs) {\r\n        graphs.forEach(function (g) {\r\n            calculate_single_bb(g);\r\n        });\r\n        function calculate_single_bb(graph) {\r\n            var min_x = Number.MAX_VALUE, min_y = Number.MAX_VALUE, max_x = 0, max_y = 0;\r\n            graph.array.forEach(function (v) {\r\n                var w = typeof v.width !== 'undefined' ? v.width : node_size;\r\n                var h = typeof v.height !== 'undefined' ? v.height : node_size;\r\n                w /= 2;\r\n                h /= 2;\r\n                max_x = Math.max(v.x + w, max_x);\r\n                min_x = Math.min(v.x - w, min_x);\r\n                max_y = Math.max(v.y + h, max_y);\r\n                min_y = Math.min(v.y - h, min_y);\r\n            });\r\n            graph.width = max_x - min_x;\r\n            graph.height = max_y - min_y;\r\n        }\r\n    }\r\n    function put_nodes_to_right_positions(graphs) {\r\n        graphs.forEach(function (g) {\r\n            var center = { x: 0, y: 0 };\r\n            g.array.forEach(function (node) {\r\n                center.x += node.x;\r\n                center.y += node.y;\r\n            });\r\n            center.x /= g.array.length;\r\n            center.y /= g.array.length;\r\n            var corner = { x: center.x - g.width / 2, y: center.y - g.height / 2 };\r\n            var offset = { x: g.x - corner.x + svg_width / 2 - real_width / 2, y: g.y - corner.y + svg_height / 2 - real_height / 2 };\r\n            g.array.forEach(function (node) {\r\n                node.x += offset.x;\r\n                node.y += offset.y;\r\n            });\r\n        });\r\n    }\r\n    function apply(data, desired_ratio) {\r\n        var curr_best_f = Number.POSITIVE_INFINITY;\r\n        var curr_best = 0;\r\n        data.sort(function (a, b) { return b.height - a.height; });\r\n        min_width = data.reduce(function (a, b) {\r\n            return a.width < b.width ? a.width : b.width;\r\n        });\r\n        var left = x1 = min_width;\r\n        var right = x2 = get_entire_width(data);\r\n        var iterationCounter = 0;\r\n        var f_x1 = Number.MAX_VALUE;\r\n        var f_x2 = Number.MAX_VALUE;\r\n        var flag = -1;\r\n        var dx = Number.MAX_VALUE;\r\n        var df = Number.MAX_VALUE;\r\n        while ((dx > min_width) || df > packingOptions.FLOAT_EPSILON) {\r\n            if (flag != 1) {\r\n                var x1 = right - (right - left) / packingOptions.GOLDEN_SECTION;\r\n                var f_x1 = step(data, x1);\r\n            }\r\n            if (flag != 0) {\r\n                var x2 = left + (right - left) / packingOptions.GOLDEN_SECTION;\r\n                var f_x2 = step(data, x2);\r\n            }\r\n            dx = Math.abs(x1 - x2);\r\n            df = Math.abs(f_x1 - f_x2);\r\n            if (f_x1 < curr_best_f) {\r\n                curr_best_f = f_x1;\r\n                curr_best = x1;\r\n            }\r\n            if (f_x2 < curr_best_f) {\r\n                curr_best_f = f_x2;\r\n                curr_best = x2;\r\n            }\r\n            if (f_x1 > f_x2) {\r\n                left = x1;\r\n                x1 = x2;\r\n                f_x1 = f_x2;\r\n                flag = 1;\r\n            }\r\n            else {\r\n                right = x2;\r\n                x2 = x1;\r\n                f_x2 = f_x1;\r\n                flag = 0;\r\n            }\r\n            if (iterationCounter++ > 100) {\r\n                break;\r\n            }\r\n        }\r\n        step(data, curr_best);\r\n    }\r\n    function step(data, max_width) {\r\n        line = [];\r\n        real_width = 0;\r\n        real_height = 0;\r\n        global_bottom = init_y;\r\n        for (var i = 0; i < data.length; i++) {\r\n            var o = data[i];\r\n            put_rect(o, max_width);\r\n        }\r\n        return Math.abs(get_real_ratio() - desired_ratio);\r\n    }\r\n    function put_rect(rect, max_width) {\r\n        var parent = undefined;\r\n        for (var i = 0; i < line.length; i++) {\r\n            if ((line[i].space_left >= rect.height) && (line[i].x + line[i].width + rect.width + packingOptions.PADDING - max_width) <= packingOptions.FLOAT_EPSILON) {\r\n                parent = line[i];\r\n                break;\r\n            }\r\n        }\r\n        line.push(rect);\r\n        if (parent !== undefined) {\r\n            rect.x = parent.x + parent.width + packingOptions.PADDING;\r\n            rect.y = parent.bottom;\r\n            rect.space_left = rect.height;\r\n            rect.bottom = rect.y;\r\n            parent.space_left -= rect.height + packingOptions.PADDING;\r\n            parent.bottom += rect.height + packingOptions.PADDING;\r\n        }\r\n        else {\r\n            rect.y = global_bottom;\r\n            global_bottom += rect.height + packingOptions.PADDING;\r\n            rect.x = init_x;\r\n            rect.bottom = rect.y;\r\n            rect.space_left = rect.height;\r\n        }\r\n        if (rect.y + rect.height - real_height > -packingOptions.FLOAT_EPSILON)\r\n            real_height = rect.y + rect.height - init_y;\r\n        if (rect.x + rect.width - real_width > -packingOptions.FLOAT_EPSILON)\r\n            real_width = rect.x + rect.width - init_x;\r\n    }\r\n    ;\r\n    function get_entire_width(data) {\r\n        var width = 0;\r\n        data.forEach(function (d) { return width += d.width + packingOptions.PADDING; });\r\n        return width;\r\n    }\r\n    function get_real_ratio() {\r\n        return (real_width / real_height);\r\n    }\r\n}\r\nexports.applyPacking = applyPacking;\r\nfunction separateGraphs(nodes, links) {\r\n    var marks = {};\r\n    var ways = {};\r\n    var graphs = [];\r\n    var clusters = 0;\r\n    for (var i = 0; i < links.length; i++) {\r\n        var link = links[i];\r\n        var n1 = link.source;\r\n        var n2 = link.target;\r\n        if (ways[n1.index])\r\n            ways[n1.index].push(n2);\r\n        else\r\n            ways[n1.index] = [n2];\r\n        if (ways[n2.index])\r\n            ways[n2.index].push(n1);\r\n        else\r\n            ways[n2.index] = [n1];\r\n    }\r\n    for (var i = 0; i < nodes.length; i++) {\r\n        var node = nodes[i];\r\n        if (marks[node.index])\r\n            continue;\r\n        explore_node(node, true);\r\n    }\r\n    function explore_node(n, is_new) {\r\n        if (marks[n.index] !== undefined)\r\n            return;\r\n        if (is_new) {\r\n            clusters++;\r\n            graphs.push({ array: [] });\r\n        }\r\n        marks[n.index] = clusters;\r\n        graphs[clusters - 1].array.push(n);\r\n        var adjacent = ways[n.index];\r\n        if (!adjacent)\r\n            return;\r\n        for (var j = 0; j < adjacent.length; j++) {\r\n            explore_node(adjacent[j], false);\r\n        }\r\n    }\r\n    return graphs;\r\n}\r\nexports.separateGraphs = separateGraphs;\r\n//# sourceMappingURL=data:application/json;base64,# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/webcola/dist/src/handledisconnected.js\n");

/***/ }),

/***/ "./node_modules/webcola/dist/src/layout.js":
/*!*************************************************!*\
  !*** ./node_modules/webcola/dist/src/layout.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar powergraph = __webpack_require__(/*! ./powergraph */ \"./node_modules/webcola/dist/src/powergraph.js\");\r\nvar linklengths_1 = __webpack_require__(/*! ./linklengths */ \"./node_modules/webcola/dist/src/linklengths.js\");\r\nvar descent_1 = __webpack_require__(/*! ./descent */ \"./node_modules/webcola/dist/src/descent.js\");\r\nvar rectangle_1 = __webpack_require__(/*! ./rectangle */ \"./node_modules/webcola/dist/src/rectangle.js\");\r\nvar shortestpaths_1 = __webpack_require__(/*! ./shortestpaths */ \"./node_modules/webcola/dist/src/shortestpaths.js\");\r\nvar geom_1 = __webpack_require__(/*! ./geom */ \"./node_modules/webcola/dist/src/geom.js\");\r\nvar handledisconnected_1 = __webpack_require__(/*! ./handledisconnected */ \"./node_modules/webcola/dist/src/handledisconnected.js\");\r\nvar EventType;\r\n(function (EventType) {\r\n    EventType[EventType[\"start\"] = 0] = \"start\";\r\n    EventType[EventType[\"tick\"] = 1] = \"tick\";\r\n    EventType[EventType[\"end\"] = 2] = \"end\";\r\n})(EventType = exports.EventType || (exports.EventType = {}));\r\n;\r\nfunction isGroup(g) {\r\n    return typeof g.leaves !== 'undefined' || typeof g.groups !== 'undefined';\r\n}\r\nvar Layout = (function () {\r\n    function Layout() {\r\n        var _this = this;\r\n        this._canvasSize = [1, 1];\r\n        this._linkDistance = 20;\r\n        this._defaultNodeSize = 10;\r\n        this._linkLengthCalculator = null;\r\n        this._linkType = null;\r\n        this._avoidOverlaps = false;\r\n        this._handleDisconnected = true;\r\n        this._running = false;\r\n        this._nodes = [];\r\n        this._groups = [];\r\n        this._rootGroup = null;\r\n        this._links = [];\r\n        this._constraints = [];\r\n        this._distanceMatrix = null;\r\n        this._descent = null;\r\n        this._directedLinkConstraints = null;\r\n        this._threshold = 0.01;\r\n        this._visibilityGraph = null;\r\n        this._groupCompactness = 1e-6;\r\n        this.event = null;\r\n        this.linkAccessor = {\r\n            getSourceIndex: Layout.getSourceIndex,\r\n            getTargetIndex: Layout.getTargetIndex,\r\n            setLength: Layout.setLinkLength,\r\n            getType: function (l) { return typeof _this._linkType === \"function\" ? _this._linkType(l) : 0; }\r\n        };\r\n    }\r\n    Layout.prototype.on = function (e, listener) {\r\n        if (!this.event)\r\n            this.event = {};\r\n        if (typeof e === 'string') {\r\n            this.event[EventType[e]] = listener;\r\n        }\r\n        else {\r\n            this.event[e] = listener;\r\n        }\r\n        return this;\r\n    };\r\n    Layout.prototype.trigger = function (e) {\r\n        if (this.event && typeof this.event[e.type] !== 'undefined') {\r\n            this.event[e.type](e);\r\n        }\r\n    };\r\n    Layout.prototype.kick = function () {\r\n        while (!this.tick())\r\n            ;\r\n    };\r\n    Layout.prototype.tick = function () {\r\n        if (this._alpha < this._threshold) {\r\n            this._running = false;\r\n            this.trigger({ type: EventType.end, alpha: this._alpha = 0, stress: this._lastStress });\r\n            return true;\r\n        }\r\n        var n = this._nodes.length, m = this._links.length;\r\n        var o, i;\r\n        this._descent.locks.clear();\r\n        for (i = 0; i < n; ++i) {\r\n            o = this._nodes[i];\r\n            if (o.fixed) {\r\n                if (typeof o.px === 'undefined' || typeof o.py === 'undefined') {\r\n                    o.px = o.x;\r\n                    o.py = o.y;\r\n                }\r\n                var p = [o.px, o.py];\r\n                this._descent.locks.add(i, p);\r\n            }\r\n        }\r\n        var s1 = this._descent.rungeKutta();\r\n        if (s1 === 0) {\r\n            this._alpha = 0;\r\n        }\r\n        else if (typeof this._lastStress !== 'undefined') {\r\n            this._alpha = s1;\r\n        }\r\n        this._lastStress = s1;\r\n        this.updateNodePositions();\r\n        this.trigger({ type: EventType.tick, alpha: this._alpha, stress: this._lastStress });\r\n        return false;\r\n    };\r\n    Layout.prototype.updateNodePositions = function () {\r\n        var x = this._descent.x[0], y = this._descent.x[1];\r\n        var o, i = this._nodes.length;\r\n        while (i--) {\r\n            o = this._nodes[i];\r\n            o.x = x[i];\r\n            o.y = y[i];\r\n        }\r\n    };\r\n    Layout.prototype.nodes = function (v) {\r\n        if (!v) {\r\n            if (this._nodes.length === 0 && this._links.length > 0) {\r\n                var n = 0;\r\n                this._links.forEach(function (l) {\r\n                    n = Math.max(n, l.source, l.target);\r\n                });\r\n                this._nodes = new Array(++n);\r\n                for (var i = 0; i < n; ++i) {\r\n                    this._nodes[i] = {};\r\n                }\r\n            }\r\n            return this._nodes;\r\n        }\r\n        this._nodes = v;\r\n        return this;\r\n    };\r\n    Layout.prototype.groups = function (x) {\r\n        var _this = this;\r\n        if (!x)\r\n            return this._groups;\r\n        this._groups = x;\r\n        this._rootGroup = {};\r\n        this._groups.forEach(function (g) {\r\n            if (typeof g.padding === \"undefined\")\r\n                g.padding = 1;\r\n            if (typeof g.leaves !== \"undefined\") {\r\n                g.leaves.forEach(function (v, i) {\r\n                    if (typeof v === 'number')\r\n                        (g.leaves[i] = _this._nodes[v]).parent = g;\r\n                });\r\n            }\r\n            if (typeof g.groups !== \"undefined\") {\r\n                g.groups.forEach(function (gi, i) {\r\n                    if (typeof gi === 'number')\r\n                        (g.groups[i] = _this._groups[gi]).parent = g;\r\n                });\r\n            }\r\n        });\r\n        this._rootGroup.leaves = this._nodes.filter(function (v) { return typeof v.parent === 'undefined'; });\r\n        this._rootGroup.groups = this._groups.filter(function (g) { return typeof g.parent === 'undefined'; });\r\n        return this;\r\n    };\r\n    Layout.prototype.powerGraphGroups = function (f) {\r\n        var g = powergraph.getGroups(this._nodes, this._links, this.linkAccessor, this._rootGroup);\r\n        this.groups(g.groups);\r\n        f(g);\r\n        return this;\r\n    };\r\n    Layout.prototype.avoidOverlaps = function (v) {\r\n        if (!arguments.length)\r\n            return this._avoidOverlaps;\r\n        this._avoidOverlaps = v;\r\n        return this;\r\n    };\r\n    Layout.prototype.handleDisconnected = function (v) {\r\n        if (!arguments.length)\r\n            return this._handleDisconnected;\r\n        this._handleDisconnected = v;\r\n        return this;\r\n    };\r\n    Layout.prototype.flowLayout = function (axis, minSeparation) {\r\n        if (!arguments.length)\r\n            axis = 'y';\r\n        this._directedLinkConstraints = {\r\n            axis: axis,\r\n            getMinSeparation: typeof minSeparation === 'number' ? function () { return minSeparation; } : minSeparation\r\n        };\r\n        return this;\r\n    };\r\n    Layout.prototype.links = function (x) {\r\n        if (!arguments.length)\r\n            return this._links;\r\n        this._links = x;\r\n        return this;\r\n    };\r\n    Layout.prototype.constraints = function (c) {\r\n        if (!arguments.length)\r\n            return this._constraints;\r\n        this._constraints = c;\r\n        return this;\r\n    };\r\n    Layout.prototype.distanceMatrix = function (d) {\r\n        if (!arguments.length)\r\n            return this._distanceMatrix;\r\n        this._distanceMatrix = d;\r\n        return this;\r\n    };\r\n    Layout.prototype.size = function (x) {\r\n        if (!x)\r\n            return this._canvasSize;\r\n        this._canvasSize = x;\r\n        return this;\r\n    };\r\n    Layout.prototype.defaultNodeSize = function (x) {\r\n        if (!x)\r\n            return this._defaultNodeSize;\r\n        this._defaultNodeSize = x;\r\n        return this;\r\n    };\r\n    Layout.prototype.groupCompactness = function (x) {\r\n        if (!x)\r\n            return this._groupCompactness;\r\n        this._groupCompactness = x;\r\n        return this;\r\n    };\r\n    Layout.prototype.linkDistance = function (x) {\r\n        if (!x) {\r\n            return this._linkDistance;\r\n        }\r\n        this._linkDistance = typeof x === \"function\" ? x : +x;\r\n        this._linkLengthCalculator = null;\r\n        return this;\r\n    };\r\n    Layout.prototype.linkType = function (f) {\r\n        this._linkType = f;\r\n        return this;\r\n    };\r\n    Layout.prototype.convergenceThreshold = function (x) {\r\n        if (!x)\r\n            return this._threshold;\r\n        this._threshold = typeof x === \"function\" ? x : +x;\r\n        return this;\r\n    };\r\n    Layout.prototype.alpha = function (x) {\r\n        if (!arguments.length)\r\n            return this._alpha;\r\n        else {\r\n            x = +x;\r\n            if (this._alpha) {\r\n                if (x > 0)\r\n                    this._alpha = x;\r\n                else\r\n                    this._alpha = 0;\r\n            }\r\n            else if (x > 0) {\r\n                if (!this._running) {\r\n                    this._running = true;\r\n                    this.trigger({ type: EventType.start, alpha: this._alpha = x });\r\n                    this.kick();\r\n                }\r\n            }\r\n            return this;\r\n        }\r\n    };\r\n    Layout.prototype.getLinkLength = function (link) {\r\n        return typeof this._linkDistance === \"function\" ? +(this._linkDistance(link)) : this._linkDistance;\r\n    };\r\n    Layout.setLinkLength = function (link, length) {\r\n        link.length = length;\r\n    };\r\n    Layout.prototype.getLinkType = function (link) {\r\n        return typeof this._linkType === \"function\" ? this._linkType(link) : 0;\r\n    };\r\n    Layout.prototype.symmetricDiffLinkLengths = function (idealLength, w) {\r\n        var _this = this;\r\n        if (w === void 0) { w = 1; }\r\n        this.linkDistance(function (l) { return idealLength * l.length; });\r\n        this._linkLengthCalculator = function () { return linklengths_1.symmetricDiffLinkLengths(_this._links, _this.linkAccessor, w); };\r\n        return this;\r\n    };\r\n    Layout.prototype.jaccardLinkLengths = function (idealLength, w) {\r\n        var _this = this;\r\n        if (w === void 0) { w = 1; }\r\n        this.linkDistance(function (l) { return idealLength * l.length; });\r\n        this._linkLengthCalculator = function () { return linklengths_1.jaccardLinkLengths(_this._links, _this.linkAccessor, w); };\r\n        return this;\r\n    };\r\n    Layout.prototype.start = function (initialUnconstrainedIterations, initialUserConstraintIterations, initialAllConstraintsIterations, gridSnapIterations, keepRunning, centerGraph) {\r\n        var _this = this;\r\n        if (initialUnconstrainedIterations === void 0) { initialUnconstrainedIterations = 0; }\r\n        if (initialUserConstraintIterations === void 0) { initialUserConstraintIterations = 0; }\r\n        if (initialAllConstraintsIterations === void 0) { initialAllConstraintsIterations = 0; }\r\n        if (gridSnapIterations === void 0) { gridSnapIterations = 0; }\r\n        if (keepRunning === void 0) { keepRunning = true; }\r\n        if (centerGraph === void 0) { centerGraph = true; }\r\n        var i, j, n = this.nodes().length, N = n + 2 * this._groups.length, m = this._links.length, w = this._canvasSize[0], h = this._canvasSize[1];\r\n        var x = new Array(N), y = new Array(N);\r\n        var G = null;\r\n        var ao = this._avoidOverlaps;\r\n        this._nodes.forEach(function (v, i) {\r\n            v.index = i;\r\n            if (typeof v.x === 'undefined') {\r\n                v.x = w / 2, v.y = h / 2;\r\n            }\r\n            x[i] = v.x, y[i] = v.y;\r\n        });\r\n        if (this._linkLengthCalculator)\r\n            this._linkLengthCalculator();\r\n        var distances;\r\n        if (this._distanceMatrix) {\r\n            distances = this._distanceMatrix;\r\n        }\r\n        else {\r\n            distances = (new shortestpaths_1.Calculator(N, this._links, Layout.getSourceIndex, Layout.getTargetIndex, function (l) { return _this.getLinkLength(l); })).DistanceMatrix();\r\n            G = descent_1.Descent.createSquareMatrix(N, function () { return 2; });\r\n            this._links.forEach(function (l) {\r\n                if (typeof l.source == \"number\")\r\n                    l.source = _this._nodes[l.source];\r\n                if (typeof l.target == \"number\")\r\n                    l.target = _this._nodes[l.target];\r\n            });\r\n            this._links.forEach(function (e) {\r\n                var u = Layout.getSourceIndex(e), v = Layout.getTargetIndex(e);\r\n                G[u][v] = G[v][u] = e.weight || 1;\r\n            });\r\n        }\r\n        var D = descent_1.Descent.createSquareMatrix(N, function (i, j) {\r\n            return distances[i][j];\r\n        });\r\n        if (this._rootGroup && typeof this._rootGroup.groups !== 'undefined') {\r\n            var i = n;\r\n            var addAttraction = function (i, j, strength, idealDistance) {\r\n                G[i][j] = G[j][i] = strength;\r\n                D[i][j] = D[j][i] = idealDistance;\r\n            };\r\n            this._groups.forEach(function (g) {\r\n                addAttraction(i, i + 1, _this._groupCompactness, 0.1);\r\n                x[i] = 0, y[i++] = 0;\r\n                x[i] = 0, y[i++] = 0;\r\n            });\r\n        }\r\n        else\r\n            this._rootGroup = { leaves: this._nodes, groups: [] };\r\n        var curConstraints = this._constraints || [];\r\n        if (this._directedLinkConstraints) {\r\n            this.linkAccessor.getMinSeparation = this._directedLinkConstraints.getMinSeparation;\r\n            curConstraints = curConstraints.concat(linklengths_1.generateDirectedEdgeConstraints(n, this._links, this._directedLinkConstraints.axis, (this.linkAccessor)));\r\n        }\r\n        this.avoidOverlaps(false);\r\n        this._descent = new descent_1.Descent([x, y], D);\r\n        this._descent.locks.clear();\r\n        for (var i = 0; i < n; ++i) {\r\n            var o = this._nodes[i];\r\n            if (o.fixed) {\r\n                o.px = o.x;\r\n                o.py = o.y;\r\n                var p = [o.x, o.y];\r\n                this._descent.locks.add(i, p);\r\n            }\r\n        }\r\n        this._descent.threshold = this._threshold;\r\n        this.initialLayout(initialUnconstrainedIterations, x, y);\r\n        if (curConstraints.length > 0)\r\n            this._descent.project = new rectangle_1.Projection(this._nodes, this._groups, this._rootGroup, curConstraints).projectFunctions();\r\n        this._descent.run(initialUserConstraintIterations);\r\n        this.separateOverlappingComponents(w, h, centerGraph);\r\n        this.avoidOverlaps(ao);\r\n        if (ao) {\r\n            this._nodes.forEach(function (v, i) { v.x = x[i], v.y = y[i]; });\r\n            this._descent.project = new rectangle_1.Projection(this._nodes, this._groups, this._rootGroup, curConstraints, true).projectFunctions();\r\n            this._nodes.forEach(function (v, i) { x[i] = v.x, y[i] = v.y; });\r\n        }\r\n        this._descent.G = G;\r\n        this._descent.run(initialAllConstraintsIterations);\r\n        if (gridSnapIterations) {\r\n            this._descent.snapStrength = 1000;\r\n            this._descent.snapGridSize = this._nodes[0].width;\r\n            this._descent.numGridSnapNodes = n;\r\n            this._descent.scaleSnapByMaxH = n != N;\r\n            var G0 = descent_1.Descent.createSquareMatrix(N, function (i, j) {\r\n                if (i >= n || j >= n)\r\n                    return G[i][j];\r\n                return 0;\r\n            });\r\n            this._descent.G = G0;\r\n            this._descent.run(gridSnapIterations);\r\n        }\r\n        this.updateNodePositions();\r\n        this.separateOverlappingComponents(w, h, centerGraph);\r\n        return keepRunning ? this.resume() : this;\r\n    };\r\n    Layout.prototype.initialLayout = function (iterations, x, y) {\r\n        if (this._groups.length > 0 && iterations > 0) {\r\n            var n = this._nodes.length;\r\n            var edges = this._links.map(function (e) { return ({ source: e.source.index, target: e.target.index }); });\r\n            var vs = this._nodes.map(function (v) { return ({ index: v.index }); });\r\n            this._groups.forEach(function (g, i) {\r\n                vs.push({ index: g.index = n + i });\r\n            });\r\n            this._groups.forEach(function (g, i) {\r\n                if (typeof g.leaves !== 'undefined')\r\n                    g.leaves.forEach(function (v) { return edges.push({ source: g.index, target: v.index }); });\r\n                if (typeof g.groups !== 'undefined')\r\n                    g.groups.forEach(function (gg) { return edges.push({ source: g.index, target: gg.index }); });\r\n            });\r\n            new Layout()\r\n                .size(this.size())\r\n                .nodes(vs)\r\n                .links(edges)\r\n                .avoidOverlaps(false)\r\n                .linkDistance(this.linkDistance())\r\n                .symmetricDiffLinkLengths(5)\r\n                .convergenceThreshold(1e-4)\r\n                .start(iterations, 0, 0, 0, false);\r\n            this._nodes.forEach(function (v) {\r\n                x[v.index] = vs[v.index].x;\r\n                y[v.index] = vs[v.index].y;\r\n            });\r\n        }\r\n        else {\r\n            this._descent.run(iterations);\r\n        }\r\n    };\r\n    Layout.prototype.separateOverlappingComponents = function (width, height, centerGraph) {\r\n        var _this = this;\r\n        if (centerGraph === void 0) { centerGraph = true; }\r\n        if (!this._distanceMatrix && this._handleDisconnected) {\r\n            var x_1 = this._descent.x[0], y_1 = this._descent.x[1];\r\n            this._nodes.forEach(function (v, i) { v.x = x_1[i], v.y = y_1[i]; });\r\n            var graphs = handledisconnected_1.separateGraphs(this._nodes, this._links);\r\n            handledisconnected_1.applyPacking(graphs, width, height, this._defaultNodeSize, 1, centerGraph);\r\n            this._nodes.forEach(function (v, i) {\r\n                _this._descent.x[0][i] = v.x, _this._descent.x[1][i] = v.y;\r\n                if (v.bounds) {\r\n                    v.bounds.setXCentre(v.x);\r\n                    v.bounds.setYCentre(v.y);\r\n                }\r\n            });\r\n        }\r\n    };\r\n    Layout.prototype.resume = function () {\r\n        return this.alpha(0.1);\r\n    };\r\n    Layout.prototype.stop = function () {\r\n        return this.alpha(0);\r\n    };\r\n    Layout.prototype.prepareEdgeRouting = function (nodeMargin) {\r\n        if (nodeMargin === void 0) { nodeMargin = 0; }\r\n        this._visibilityGraph = new geom_1.TangentVisibilityGraph(this._nodes.map(function (v) {\r\n            return v.bounds.inflate(-nodeMargin).vertices();\r\n        }));\r\n    };\r\n    Layout.prototype.routeEdge = function (edge, ah, draw) {\r\n        if (ah === void 0) { ah = 5; }\r\n        var lineData = [];\r\n        var vg2 = new geom_1.TangentVisibilityGraph(this._visibilityGraph.P, { V: this._visibilityGraph.V, E: this._visibilityGraph.E }), port1 = { x: edge.source.x, y: edge.source.y }, port2 = { x: edge.target.x, y: edge.target.y }, start = vg2.addPoint(port1, edge.source.index), end = vg2.addPoint(port2, edge.target.index);\r\n        vg2.addEdgeIfVisible(port1, port2, edge.source.index, edge.target.index);\r\n        if (typeof draw !== 'undefined') {\r\n            draw(vg2);\r\n        }\r\n        var sourceInd = function (e) { return e.source.id; }, targetInd = function (e) { return e.target.id; }, length = function (e) { return e.length(); }, spCalc = new shortestpaths_1.Calculator(vg2.V.length, vg2.E, sourceInd, targetInd, length), shortestPath = spCalc.PathFromNodeToNode(start.id, end.id);\r\n        if (shortestPath.length === 1 || shortestPath.length === vg2.V.length) {\r\n            var route = rectangle_1.makeEdgeBetween(edge.source.innerBounds, edge.target.innerBounds, ah);\r\n            lineData = [route.sourceIntersection, route.arrowStart];\r\n        }\r\n        else {\r\n            var n = shortestPath.length - 2, p = vg2.V[shortestPath[n]].p, q = vg2.V[shortestPath[0]].p, lineData = [edge.source.innerBounds.rayIntersection(p.x, p.y)];\r\n            for (var i = n; i >= 0; --i)\r\n                lineData.push(vg2.V[shortestPath[i]].p);\r\n            lineData.push(rectangle_1.makeEdgeTo(q, edge.target.innerBounds, ah));\r\n        }\r\n        return lineData;\r\n    };\r\n    Layout.getSourceIndex = function (e) {\r\n        return typeof e.source === 'number' ? e.source : e.source.index;\r\n    };\r\n    Layout.getTargetIndex = function (e) {\r\n        return typeof e.target === 'number' ? e.target : e.target.index;\r\n    };\r\n    Layout.linkId = function (e) {\r\n        return Layout.getSourceIndex(e) + \"-\" + Layout.getTargetIndex(e);\r\n    };\r\n    Layout.dragStart = function (d) {\r\n        if (isGroup(d)) {\r\n            Layout.storeOffset(d, Layout.dragOrigin(d));\r\n        }\r\n        else {\r\n            Layout.stopNode(d);\r\n            d.fixed |= 2;\r\n        }\r\n    };\r\n    Layout.stopNode = function (v) {\r\n        v.px = v.x;\r\n        v.py = v.y;\r\n    };\r\n    Layout.storeOffset = function (d, origin) {\r\n        if (typeof d.leaves !== 'undefined') {\r\n            d.leaves.forEach(function (v) {\r\n                v.fixed |= 2;\r\n                Layout.stopNode(v);\r\n                v._dragGroupOffsetX = v.x - origin.x;\r\n                v._dragGroupOffsetY = v.y - origin.y;\r\n            });\r\n        }\r\n        if (typeof d.groups !== 'undefined') {\r\n            d.groups.forEach(function (g) { return Layout.storeOffset(g, origin); });\r\n        }\r\n    };\r\n    Layout.dragOrigin = function (d) {\r\n        if (isGroup(d)) {\r\n            return {\r\n                x: d.bounds.cx(),\r\n                y: d.bounds.cy()\r\n            };\r\n        }\r\n        else {\r\n            return d;\r\n        }\r\n    };\r\n    Layout.drag = function (d, position) {\r\n        if (isGroup(d)) {\r\n            if (typeof d.leaves !== 'undefined') {\r\n                d.leaves.forEach(function (v) {\r\n                    d.bounds.setXCentre(position.x);\r\n                    d.bounds.setYCentre(position.y);\r\n                    v.px = v._dragGroupOffsetX + position.x;\r\n                    v.py = v._dragGroupOffsetY + position.y;\r\n                });\r\n            }\r\n            if (typeof d.groups !== 'undefined') {\r\n                d.groups.forEach(function (g) { return Layout.drag(g, position); });\r\n            }\r\n        }\r\n        else {\r\n            d.px = position.x;\r\n            d.py = position.y;\r\n        }\r\n    };\r\n    Layout.dragEnd = function (d) {\r\n        if (isGroup(d)) {\r\n            if (typeof d.leaves !== 'undefined') {\r\n                d.leaves.forEach(function (v) {\r\n                    Layout.dragEnd(v);\r\n                    delete v._dragGroupOffsetX;\r\n                    delete v._dragGroupOffsetY;\r\n                });\r\n            }\r\n            if (typeof d.groups !== 'undefined') {\r\n                d.groups.forEach(Layout.dragEnd);\r\n            }\r\n        }\r\n        else {\r\n            d.fixed &= ~6;\r\n        }\r\n    };\r\n    Layout.mouseOver = function (d) {\r\n        d.fixed |= 4;\r\n        d.px = d.x, d.py = d.y;\r\n    };\r\n    Layout.mouseOut = function (d) {\r\n        d.fixed &= ~4;\r\n    };\r\n    return Layout;\r\n}());\r\nexports.Layout = Layout;\r\n//# sourceMappingURL=data:application/json;base64,//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/webcola/dist/src/layout.js\n");

/***/ }),

/***/ "./node_modules/webcola/dist/src/layout3d.js":
/*!***************************************************!*\
  !*** ./node_modules/webcola/dist/src/layout3d.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar shortestpaths_1 = __webpack_require__(/*! ./shortestpaths */ \"./node_modules/webcola/dist/src/shortestpaths.js\");\r\nvar descent_1 = __webpack_require__(/*! ./descent */ \"./node_modules/webcola/dist/src/descent.js\");\r\nvar rectangle_1 = __webpack_require__(/*! ./rectangle */ \"./node_modules/webcola/dist/src/rectangle.js\");\r\nvar linklengths_1 = __webpack_require__(/*! ./linklengths */ \"./node_modules/webcola/dist/src/linklengths.js\");\r\nvar Link3D = (function () {\r\n    function Link3D(source, target) {\r\n        this.source = source;\r\n        this.target = target;\r\n    }\r\n    Link3D.prototype.actualLength = function (x) {\r\n        var _this = this;\r\n        return Math.sqrt(x.reduce(function (c, v) {\r\n            var dx = v[_this.target] - v[_this.source];\r\n            return c + dx * dx;\r\n        }, 0));\r\n    };\r\n    return Link3D;\r\n}());\r\nexports.Link3D = Link3D;\r\nvar Node3D = (function () {\r\n    function Node3D(x, y, z) {\r\n        if (x === void 0) { x = 0; }\r\n        if (y === void 0) { y = 0; }\r\n        if (z === void 0) { z = 0; }\r\n        this.x = x;\r\n        this.y = y;\r\n        this.z = z;\r\n    }\r\n    return Node3D;\r\n}());\r\nexports.Node3D = Node3D;\r\nvar Layout3D = (function () {\r\n    function Layout3D(nodes, links, idealLinkLength) {\r\n        var _this = this;\r\n        if (idealLinkLength === void 0) { idealLinkLength = 1; }\r\n        this.nodes = nodes;\r\n        this.links = links;\r\n        this.idealLinkLength = idealLinkLength;\r\n        this.constraints = null;\r\n        this.useJaccardLinkLengths = true;\r\n        this.result = new Array(Layout3D.k);\r\n        for (var i = 0; i < Layout3D.k; ++i) {\r\n            this.result[i] = new Array(nodes.length);\r\n        }\r\n        nodes.forEach(function (v, i) {\r\n            for (var _i = 0, _a = Layout3D.dims; _i < _a.length; _i++) {\r\n                var dim = _a[_i];\r\n                if (typeof v[dim] == 'undefined')\r\n                    v[dim] = Math.random();\r\n            }\r\n            _this.result[0][i] = v.x;\r\n            _this.result[1][i] = v.y;\r\n            _this.result[2][i] = v.z;\r\n        });\r\n    }\r\n    ;\r\n    Layout3D.prototype.linkLength = function (l) {\r\n        return l.actualLength(this.result);\r\n    };\r\n    Layout3D.prototype.start = function (iterations) {\r\n        var _this = this;\r\n        if (iterations === void 0) { iterations = 100; }\r\n        var n = this.nodes.length;\r\n        var linkAccessor = new LinkAccessor();\r\n        if (this.useJaccardLinkLengths)\r\n            linklengths_1.jaccardLinkLengths(this.links, linkAccessor, 1.5);\r\n        this.links.forEach(function (e) { return e.length *= _this.idealLinkLength; });\r\n        var distanceMatrix = (new shortestpaths_1.Calculator(n, this.links, function (e) { return e.source; }, function (e) { return e.target; }, function (e) { return e.length; })).DistanceMatrix();\r\n        var D = descent_1.Descent.createSquareMatrix(n, function (i, j) { return distanceMatrix[i][j]; });\r\n        var G = descent_1.Descent.createSquareMatrix(n, function () { return 2; });\r\n        this.links.forEach(function (_a) {\r\n            var source = _a.source, target = _a.target;\r\n            return G[source][target] = G[target][source] = 1;\r\n        });\r\n        this.descent = new descent_1.Descent(this.result, D);\r\n        this.descent.threshold = 1e-3;\r\n        this.descent.G = G;\r\n        if (this.constraints)\r\n            this.descent.project = new rectangle_1.Projection(this.nodes, null, null, this.constraints).projectFunctions();\r\n        for (var i = 0; i < this.nodes.length; i++) {\r\n            var v = this.nodes[i];\r\n            if (v.fixed) {\r\n                this.descent.locks.add(i, [v.x, v.y, v.z]);\r\n            }\r\n        }\r\n        this.descent.run(iterations);\r\n        return this;\r\n    };\r\n    Layout3D.prototype.tick = function () {\r\n        this.descent.locks.clear();\r\n        for (var i = 0; i < this.nodes.length; i++) {\r\n            var v = this.nodes[i];\r\n            if (v.fixed) {\r\n                this.descent.locks.add(i, [v.x, v.y, v.z]);\r\n            }\r\n        }\r\n        return this.descent.rungeKutta();\r\n    };\r\n    Layout3D.dims = ['x', 'y', 'z'];\r\n    Layout3D.k = Layout3D.dims.length;\r\n    return Layout3D;\r\n}());\r\nexports.Layout3D = Layout3D;\r\nvar LinkAccessor = (function () {\r\n    function LinkAccessor() {\r\n    }\r\n    LinkAccessor.prototype.getSourceIndex = function (e) { return e.source; };\r\n    LinkAccessor.prototype.getTargetIndex = function (e) { return e.target; };\r\n    LinkAccessor.prototype.getLength = function (e) { return e.length; };\r\n    LinkAccessor.prototype.setLength = function (e, l) { e.length = l; };\r\n    return LinkAccessor;\r\n}());\r\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGF5b3V0M2QuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9XZWJDb2xhL3NyYy9sYXlvdXQzZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLGlEQUEwQztBQUMxQyxxQ0FBaUM7QUFDakMseUNBQTREO0FBRTVELDZDQUFvRTtBQUVwRTtJQUVRLGdCQUFtQixNQUFjLEVBQVMsTUFBYztRQUFyQyxXQUFNLEdBQU4sTUFBTSxDQUFRO1FBQVMsV0FBTSxHQUFOLE1BQU0sQ0FBUTtJQUFJLENBQUM7SUFDN0QsNkJBQVksR0FBWixVQUFhLENBQWE7UUFBMUIsaUJBTUM7UUFMRyxPQUFPLElBQUksQ0FBQyxJQUFJLENBQ1osQ0FBQyxDQUFDLE1BQU0sQ0FBQyxVQUFDLENBQVMsRUFBRSxDQUFXO1lBQzVCLElBQU0sRUFBRSxHQUFHLENBQUMsQ0FBQyxLQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEtBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztZQUMzQyxPQUFPLENBQUMsR0FBRyxFQUFFLEdBQUcsRUFBRSxDQUFDO1FBQ3ZCLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ2YsQ0FBQztJQUNMLGFBQUM7QUFBRCxDQUFDLEFBVkwsSUFVSztBQVZRLHdCQUFNO0FBV2Y7SUFTSSxnQkFDVyxDQUFhLEVBQ2IsQ0FBYSxFQUNiLENBQWE7UUFGYixrQkFBQSxFQUFBLEtBQWE7UUFDYixrQkFBQSxFQUFBLEtBQWE7UUFDYixrQkFBQSxFQUFBLEtBQWE7UUFGYixNQUFDLEdBQUQsQ0FBQyxDQUFZO1FBQ2IsTUFBQyxHQUFELENBQUMsQ0FBWTtRQUNiLE1BQUMsR0FBRCxDQUFDLENBQVk7SUFBSSxDQUFDO0lBQ2pDLGFBQUM7QUFBRCxDQUFDLEFBYkQsSUFhQztBQWJZLHdCQUFNO0FBY25CO0lBTUksa0JBQW1CLEtBQWUsRUFBUyxLQUFlLEVBQVMsZUFBMkI7UUFBOUYsaUJBYUM7UUFia0UsZ0NBQUEsRUFBQSxtQkFBMkI7UUFBM0UsVUFBSyxHQUFMLEtBQUssQ0FBVTtRQUFTLFVBQUssR0FBTCxLQUFLLENBQVU7UUFBUyxvQkFBZSxHQUFmLGVBQWUsQ0FBWTtRQUY5RixnQkFBVyxHQUFVLElBQUksQ0FBQztRQXFCMUIsMEJBQXFCLEdBQVksSUFBSSxDQUFDO1FBbEJsQyxJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNwQyxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsUUFBUSxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsRUFBRTtZQUNqQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksS0FBSyxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUM1QztRQUNELEtBQUssQ0FBQyxPQUFPLENBQUMsVUFBQyxDQUFDLEVBQUUsQ0FBQztZQUNmLEtBQWdCLFVBQWEsRUFBYixLQUFBLFFBQVEsQ0FBQyxJQUFJLEVBQWIsY0FBYSxFQUFiLElBQWEsRUFBRTtnQkFBMUIsSUFBSSxHQUFHLFNBQUE7Z0JBQ1IsSUFBSSxPQUFPLENBQUMsQ0FBQyxHQUFHLENBQUMsSUFBSSxXQUFXO29CQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxJQUFJLENBQUMsTUFBTSxFQUFFLENBQUM7YUFDNUQ7WUFDRCxLQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDeEIsS0FBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ3hCLEtBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUM1QixDQUFDLENBQUMsQ0FBQztJQUNQLENBQUM7SUFBQSxDQUFDO0lBRUYsNkJBQVUsR0FBVixVQUFXLENBQVM7UUFDaEIsT0FBTyxDQUFDLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUN2QyxDQUFDO0lBS0Qsd0JBQUssR0FBTCxVQUFNLFVBQXdCO1FBQTlCLGlCQXVDQztRQXZDSywyQkFBQSxFQUFBLGdCQUF3QjtRQUMxQixJQUFNLENBQUMsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQztRQUU1QixJQUFJLFlBQVksR0FBRyxJQUFJLFlBQVksRUFBRSxDQUFDO1FBRXRDLElBQUksSUFBSSxDQUFDLHFCQUFxQjtZQUMxQixnQ0FBa0IsQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLFlBQVksRUFBRSxHQUFHLENBQUMsQ0FBQztRQUV0RCxJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxVQUFBLENBQUMsSUFBSSxPQUFBLENBQUMsQ0FBQyxNQUFNLElBQUksS0FBSSxDQUFDLGVBQWUsRUFBaEMsQ0FBZ0MsQ0FBQyxDQUFDO1FBRzFELElBQU0sY0FBYyxHQUFHLENBQUMsSUFBSSwwQkFBVSxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsS0FBSyxFQUNoRCxVQUFBLENBQUMsSUFBRyxPQUFBLENBQUMsQ0FBQyxNQUFNLEVBQVIsQ0FBUSxFQUFFLFVBQUEsQ0FBQyxJQUFHLE9BQUEsQ0FBQyxDQUFDLE1BQU0sRUFBUixDQUFRLEVBQUUsVUFBQSxDQUFDLElBQUksT0FBQSxDQUFDLENBQUMsTUFBTSxFQUFSLENBQVEsQ0FBQyxDQUFDLENBQUMsY0FBYyxFQUFFLENBQUM7UUFFakUsSUFBTSxDQUFDLEdBQUcsaUJBQU8sQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDLEVBQUUsVUFBQyxDQUFDLEVBQUUsQ0FBQyxJQUFLLE9BQUEsY0FBYyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFwQixDQUFvQixDQUFDLENBQUM7UUFJeEUsSUFBSSxDQUFDLEdBQUcsaUJBQU8sQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDLEVBQUUsY0FBYyxPQUFPLENBQUMsQ0FBQSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ2hFLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLFVBQUMsRUFBa0I7Z0JBQWhCLGtCQUFNLEVBQUUsa0JBQU07WUFBTyxPQUFBLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQztRQUF6QyxDQUF5QyxDQUFDLENBQUM7UUFFdEYsSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLGlCQUFPLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUMsQ0FBQztRQUMzQyxJQUFJLENBQUMsT0FBTyxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUM7UUFDOUIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBSW5CLElBQUksSUFBSSxDQUFDLFdBQVc7WUFDaEIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPLEdBQUcsSUFBSSxzQkFBVSxDQUFjLElBQUksQ0FBQyxLQUFLLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQztRQUVwSCxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUU7WUFDeEMsSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUN0QixJQUFJLENBQUMsQ0FBQyxLQUFLLEVBQUU7Z0JBQ1QsSUFBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQzthQUM5QztTQUNKO1FBRUQsSUFBSSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLENBQUM7UUFDN0IsT0FBTyxJQUFJLENBQUM7SUFDaEIsQ0FBQztJQUVELHVCQUFJLEdBQUo7UUFDSSxJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxLQUFLLEVBQUUsQ0FBQztRQUMzQixLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUU7WUFDeEMsSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUN0QixJQUFJLENBQUMsQ0FBQyxLQUFLLEVBQUU7Z0JBQ1QsSUFBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQzthQUM5QztTQUNKO1FBQ0QsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLFVBQVUsRUFBRSxDQUFDO0lBQ3JDLENBQUM7SUE3RU0sYUFBSSxHQUFHLENBQUMsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLENBQUMsQ0FBQztJQUN2QixVQUFDLEdBQUcsUUFBUSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUM7SUE2RXBDLGVBQUM7Q0FBQSxBQS9FRCxJQStFQztBQS9FWSw0QkFBUTtBQWlGckI7SUFBQTtJQUtBLENBQUM7SUFKRyxxQ0FBYyxHQUFkLFVBQWUsQ0FBTSxJQUFZLE9BQU8sQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7SUFDbkQscUNBQWMsR0FBZCxVQUFlLENBQU0sSUFBWSxPQUFPLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO0lBQ25ELGdDQUFTLEdBQVQsVUFBVSxDQUFNLElBQVksT0FBTyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztJQUM5QyxnQ0FBUyxHQUFULFVBQVUsQ0FBTSxFQUFFLENBQVMsSUFBSSxDQUFDLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDbEQsbUJBQUM7QUFBRCxDQUFDLEFBTEQsSUFLQyJ9//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/webcola/dist/src/layout3d.js\n");

/***/ }),

/***/ "./node_modules/webcola/dist/src/linklengths.js":
/*!******************************************************!*\
  !*** ./node_modules/webcola/dist/src/linklengths.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nfunction unionCount(a, b) {\r\n    var u = {};\r\n    for (var i in a)\r\n        u[i] = {};\r\n    for (var i in b)\r\n        u[i] = {};\r\n    return Object.keys(u).length;\r\n}\r\nfunction intersectionCount(a, b) {\r\n    var n = 0;\r\n    for (var i in a)\r\n        if (typeof b[i] !== 'undefined')\r\n            ++n;\r\n    return n;\r\n}\r\nfunction getNeighbours(links, la) {\r\n    var neighbours = {};\r\n    var addNeighbours = function (u, v) {\r\n        if (typeof neighbours[u] === 'undefined')\r\n            neighbours[u] = {};\r\n        neighbours[u][v] = {};\r\n    };\r\n    links.forEach(function (e) {\r\n        var u = la.getSourceIndex(e), v = la.getTargetIndex(e);\r\n        addNeighbours(u, v);\r\n        addNeighbours(v, u);\r\n    });\r\n    return neighbours;\r\n}\r\nfunction computeLinkLengths(links, w, f, la) {\r\n    var neighbours = getNeighbours(links, la);\r\n    links.forEach(function (l) {\r\n        var a = neighbours[la.getSourceIndex(l)];\r\n        var b = neighbours[la.getTargetIndex(l)];\r\n        la.setLength(l, 1 + w * f(a, b));\r\n    });\r\n}\r\nfunction symmetricDiffLinkLengths(links, la, w) {\r\n    if (w === void 0) { w = 1; }\r\n    computeLinkLengths(links, w, function (a, b) { return Math.sqrt(unionCount(a, b) - intersectionCount(a, b)); }, la);\r\n}\r\nexports.symmetricDiffLinkLengths = symmetricDiffLinkLengths;\r\nfunction jaccardLinkLengths(links, la, w) {\r\n    if (w === void 0) { w = 1; }\r\n    computeLinkLengths(links, w, function (a, b) {\r\n        return Math.min(Object.keys(a).length, Object.keys(b).length) < 1.1 ? 0 : intersectionCount(a, b) / unionCount(a, b);\r\n    }, la);\r\n}\r\nexports.jaccardLinkLengths = jaccardLinkLengths;\r\nfunction generateDirectedEdgeConstraints(n, links, axis, la) {\r\n    var components = stronglyConnectedComponents(n, links, la);\r\n    var nodes = {};\r\n    components.forEach(function (c, i) {\r\n        return c.forEach(function (v) { return nodes[v] = i; });\r\n    });\r\n    var constraints = [];\r\n    links.forEach(function (l) {\r\n        var ui = la.getSourceIndex(l), vi = la.getTargetIndex(l), u = nodes[ui], v = nodes[vi];\r\n        if (u !== v) {\r\n            constraints.push({\r\n                axis: axis,\r\n                left: ui,\r\n                right: vi,\r\n                gap: la.getMinSeparation(l)\r\n            });\r\n        }\r\n    });\r\n    return constraints;\r\n}\r\nexports.generateDirectedEdgeConstraints = generateDirectedEdgeConstraints;\r\nfunction stronglyConnectedComponents(numVertices, edges, la) {\r\n    var nodes = [];\r\n    var index = 0;\r\n    var stack = [];\r\n    var components = [];\r\n    function strongConnect(v) {\r\n        v.index = v.lowlink = index++;\r\n        stack.push(v);\r\n        v.onStack = true;\r\n        for (var _i = 0, _a = v.out; _i < _a.length; _i++) {\r\n            var w = _a[_i];\r\n            if (typeof w.index === 'undefined') {\r\n                strongConnect(w);\r\n                v.lowlink = Math.min(v.lowlink, w.lowlink);\r\n            }\r\n            else if (w.onStack) {\r\n                v.lowlink = Math.min(v.lowlink, w.index);\r\n            }\r\n        }\r\n        if (v.lowlink === v.index) {\r\n            var component = [];\r\n            while (stack.length) {\r\n                w = stack.pop();\r\n                w.onStack = false;\r\n                component.push(w);\r\n                if (w === v)\r\n                    break;\r\n            }\r\n            components.push(component.map(function (v) { return v.id; }));\r\n        }\r\n    }\r\n    for (var i = 0; i < numVertices; i++) {\r\n        nodes.push({ id: i, out: [] });\r\n    }\r\n    for (var _i = 0, edges_1 = edges; _i < edges_1.length; _i++) {\r\n        var e = edges_1[_i];\r\n        var v_1 = nodes[la.getSourceIndex(e)], w = nodes[la.getTargetIndex(e)];\r\n        v_1.out.push(w);\r\n    }\r\n    for (var _a = 0, nodes_1 = nodes; _a < nodes_1.length; _a++) {\r\n        var v = nodes_1[_a];\r\n        if (typeof v.index === 'undefined')\r\n            strongConnect(v);\r\n    }\r\n    return components;\r\n}\r\nexports.stronglyConnectedComponents = stronglyConnectedComponents;\r\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGlua2xlbmd0aHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9XZWJDb2xhL3NyYy9saW5rbGVuZ3Rocy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQVVJLFNBQVMsVUFBVSxDQUFDLENBQU0sRUFBRSxDQUFNO0lBQzlCLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQztJQUNYLEtBQUssSUFBSSxDQUFDLElBQUksQ0FBQztRQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUM7SUFDM0IsS0FBSyxJQUFJLENBQUMsSUFBSSxDQUFDO1FBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQztJQUMzQixPQUFPLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDO0FBQ2pDLENBQUM7QUFHRCxTQUFTLGlCQUFpQixDQUFDLENBQVcsRUFBRSxDQUFXO0lBQy9DLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUNWLEtBQUssSUFBSSxDQUFDLElBQUksQ0FBQztRQUFFLElBQUksT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssV0FBVztZQUFFLEVBQUUsQ0FBQyxDQUFDO0lBQ3RELE9BQU8sQ0FBQyxDQUFDO0FBQ2IsQ0FBQztBQUVELFNBQVMsYUFBYSxDQUFPLEtBQWEsRUFBRSxFQUFzQjtJQUM5RCxJQUFJLFVBQVUsR0FBRyxFQUFFLENBQUM7SUFDcEIsSUFBSSxhQUFhLEdBQUcsVUFBQyxDQUFDLEVBQUUsQ0FBQztRQUNyQixJQUFJLE9BQU8sVUFBVSxDQUFDLENBQUMsQ0FBQyxLQUFLLFdBQVc7WUFDcEMsVUFBVSxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQztRQUN2QixVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDO0lBQzFCLENBQUMsQ0FBQztJQUNGLEtBQUssQ0FBQyxPQUFPLENBQUMsVUFBQSxDQUFDO1FBQ1gsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDLGNBQWMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEdBQUcsRUFBRSxDQUFDLGNBQWMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUN2RCxhQUFhLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBQ3BCLGFBQWEsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFDeEIsQ0FBQyxDQUFDLENBQUM7SUFDSCxPQUFPLFVBQVUsQ0FBQztBQUN0QixDQUFDO0FBR0QsU0FBUyxrQkFBa0IsQ0FBTyxLQUFhLEVBQUUsQ0FBUyxFQUFFLENBQTZCLEVBQUUsRUFBNEI7SUFDbkgsSUFBSSxVQUFVLEdBQUcsYUFBYSxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsQ0FBQztJQUMxQyxLQUFLLENBQUMsT0FBTyxDQUFDLFVBQUEsQ0FBQztRQUNYLElBQUksQ0FBQyxHQUFHLFVBQVUsQ0FBQyxFQUFFLENBQUMsY0FBYyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDekMsSUFBSSxDQUFDLEdBQUcsVUFBVSxDQUFDLEVBQUUsQ0FBQyxjQUFjLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUN6QyxFQUFFLENBQUMsU0FBUyxDQUFDLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNyQyxDQUFDLENBQUMsQ0FBQztBQUNQLENBQUM7QUFLRCxTQUFnQix3QkFBd0IsQ0FBTyxLQUFhLEVBQUUsRUFBNEIsRUFBRSxDQUFhO0lBQWIsa0JBQUEsRUFBQSxLQUFhO0lBQ3JHLGtCQUFrQixDQUFDLEtBQUssRUFBRSxDQUFDLEVBQUUsVUFBQyxDQUFDLEVBQUUsQ0FBQyxJQUFLLE9BQUEsSUFBSSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxHQUFHLGlCQUFpQixDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFyRCxDQUFxRCxFQUFFLEVBQUUsQ0FBQyxDQUFDO0FBQ3RHLENBQUM7QUFGRCw0REFFQztBQUtELFNBQWdCLGtCQUFrQixDQUFPLEtBQWEsRUFBRSxFQUE0QixFQUFFLENBQWE7SUFBYixrQkFBQSxFQUFBLEtBQWE7SUFDL0Ysa0JBQWtCLENBQUMsS0FBSyxFQUFFLENBQUMsRUFBRSxVQUFDLENBQUMsRUFBRSxDQUFDO1FBQzlCLE9BQUEsSUFBSSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sRUFBRSxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEdBQUcsVUFBVSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUM7SUFBN0csQ0FBNkcsRUFDM0csRUFBRSxDQUFDLENBQUM7QUFDZCxDQUFDO0FBSkQsZ0RBSUM7QUFvQkQsU0FBZ0IsK0JBQStCLENBQU8sQ0FBUyxFQUFFLEtBQWEsRUFBRSxJQUFZLEVBQ3hGLEVBQXlCO0lBRXpCLElBQUksVUFBVSxHQUFHLDJCQUEyQixDQUFDLENBQUMsRUFBRSxLQUFLLEVBQUUsRUFBRSxDQUFDLENBQUM7SUFDM0QsSUFBSSxLQUFLLEdBQUcsRUFBRSxDQUFDO0lBQ2YsVUFBVSxDQUFDLE9BQU8sQ0FBQyxVQUFDLENBQUMsRUFBQyxDQUFDO1FBQ25CLE9BQUEsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxVQUFBLENBQUMsSUFBSSxPQUFBLEtBQUssQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEVBQVosQ0FBWSxDQUFDO0lBQTVCLENBQTRCLENBQy9CLENBQUM7SUFDRixJQUFJLFdBQVcsR0FBVSxFQUFFLENBQUM7SUFDNUIsS0FBSyxDQUFDLE9BQU8sQ0FBQyxVQUFBLENBQUM7UUFDWCxJQUFJLEVBQUUsR0FBRyxFQUFFLENBQUMsY0FBYyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsR0FBRyxFQUFFLENBQUMsY0FBYyxDQUFDLENBQUMsQ0FBQyxFQUNwRCxDQUFDLEdBQUcsS0FBSyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsR0FBRyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDakMsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFO1lBQ1QsV0FBVyxDQUFDLElBQUksQ0FBQztnQkFDYixJQUFJLEVBQUUsSUFBSTtnQkFDVixJQUFJLEVBQUUsRUFBRTtnQkFDUixLQUFLLEVBQUUsRUFBRTtnQkFDVCxHQUFHLEVBQUUsRUFBRSxDQUFDLGdCQUFnQixDQUFDLENBQUMsQ0FBQzthQUM5QixDQUFDLENBQUM7U0FDTjtJQUNMLENBQUMsQ0FBQyxDQUFDO0lBQ0gsT0FBTyxXQUFXLENBQUM7QUFDdkIsQ0FBQztBQXRCRCwwRUFzQkM7QUFRRCxTQUFnQiwyQkFBMkIsQ0FBTyxXQUFtQixFQUFFLEtBQWEsRUFBRSxFQUFzQjtJQUN4RyxJQUFJLEtBQUssR0FBRyxFQUFFLENBQUM7SUFDZixJQUFJLEtBQUssR0FBRyxDQUFDLENBQUM7SUFDZCxJQUFJLEtBQUssR0FBRyxFQUFFLENBQUM7SUFDZixJQUFJLFVBQVUsR0FBRyxFQUFFLENBQUM7SUFDcEIsU0FBUyxhQUFhLENBQUMsQ0FBQztRQUVwQixDQUFDLENBQUMsS0FBSyxHQUFHLENBQUMsQ0FBQyxPQUFPLEdBQUcsS0FBSyxFQUFFLENBQUM7UUFDOUIsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNkLENBQUMsQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDO1FBR2pCLEtBQWMsVUFBSyxFQUFMLEtBQUEsQ0FBQyxDQUFDLEdBQUcsRUFBTCxjQUFLLEVBQUwsSUFBSyxFQUFFO1lBQWhCLElBQUksQ0FBQyxTQUFBO1lBQ04sSUFBSSxPQUFPLENBQUMsQ0FBQyxLQUFLLEtBQUssV0FBVyxFQUFFO2dCQUVoQyxhQUFhLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQ2pCLENBQUMsQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQzthQUM5QztpQkFBTSxJQUFJLENBQUMsQ0FBQyxPQUFPLEVBQUU7Z0JBRWxCLENBQUMsQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQzthQUM1QztTQUNKO1FBR0QsSUFBSSxDQUFDLENBQUMsT0FBTyxLQUFLLENBQUMsQ0FBQyxLQUFLLEVBQUU7WUFFdkIsSUFBSSxTQUFTLEdBQUcsRUFBRSxDQUFDO1lBQ25CLE9BQU8sS0FBSyxDQUFDLE1BQU0sRUFBRTtnQkFDakIsQ0FBQyxHQUFHLEtBQUssQ0FBQyxHQUFHLEVBQUUsQ0FBQztnQkFDaEIsQ0FBQyxDQUFDLE9BQU8sR0FBRyxLQUFLLENBQUM7Z0JBRWxCLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQ2xCLElBQUksQ0FBQyxLQUFLLENBQUM7b0JBQUUsTUFBTTthQUN0QjtZQUVELFVBQVUsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxVQUFBLENBQUMsSUFBSSxPQUFBLENBQUMsQ0FBQyxFQUFFLEVBQUosQ0FBSSxDQUFDLENBQUMsQ0FBQztTQUM3QztJQUNMLENBQUM7SUFDRCxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsV0FBVyxFQUFFLENBQUMsRUFBRSxFQUFFO1FBQ2xDLEtBQUssQ0FBQyxJQUFJLENBQUMsRUFBQyxFQUFFLEVBQUUsQ0FBQyxFQUFFLEdBQUcsRUFBRSxFQUFFLEVBQUMsQ0FBQyxDQUFDO0tBQ2hDO0lBQ0QsS0FBYyxVQUFLLEVBQUwsZUFBSyxFQUFMLG1CQUFLLEVBQUwsSUFBSyxFQUFFO1FBQWhCLElBQUksQ0FBQyxjQUFBO1FBQ04sSUFBSSxHQUFDLEdBQUcsS0FBSyxDQUFDLEVBQUUsQ0FBQyxjQUFjLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFDL0IsQ0FBQyxHQUFHLEtBQUssQ0FBQyxFQUFFLENBQUMsY0FBYyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDcEMsR0FBQyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7S0FDakI7SUFDRCxLQUFjLFVBQUssRUFBTCxlQUFLLEVBQUwsbUJBQUssRUFBTCxJQUFLO1FBQWQsSUFBSSxDQUFDLGNBQUE7UUFBVyxJQUFJLE9BQU8sQ0FBQyxDQUFDLEtBQUssS0FBSyxXQUFXO1lBQUUsYUFBYSxDQUFDLENBQUMsQ0FBQyxDQUFDO0tBQUE7SUFDMUUsT0FBTyxVQUFVLENBQUM7QUFDdEIsQ0FBQztBQWhERCxrRUFnREMifQ==//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/webcola/dist/src/linklengths.js\n");

/***/ }),

/***/ "./node_modules/webcola/dist/src/powergraph.js":
/*!*****************************************************!*\
  !*** ./node_modules/webcola/dist/src/powergraph.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar PowerEdge = (function () {\r\n    function PowerEdge(source, target, type) {\r\n        this.source = source;\r\n        this.target = target;\r\n        this.type = type;\r\n    }\r\n    return PowerEdge;\r\n}());\r\nexports.PowerEdge = PowerEdge;\r\nvar Configuration = (function () {\r\n    function Configuration(n, edges, linkAccessor, rootGroup) {\r\n        var _this = this;\r\n        this.linkAccessor = linkAccessor;\r\n        this.modules = new Array(n);\r\n        this.roots = [];\r\n        if (rootGroup) {\r\n            this.initModulesFromGroup(rootGroup);\r\n        }\r\n        else {\r\n            this.roots.push(new ModuleSet());\r\n            for (var i = 0; i < n; ++i)\r\n                this.roots[0].add(this.modules[i] = new Module(i));\r\n        }\r\n        this.R = edges.length;\r\n        edges.forEach(function (e) {\r\n            var s = _this.modules[linkAccessor.getSourceIndex(e)], t = _this.modules[linkAccessor.getTargetIndex(e)], type = linkAccessor.getType(e);\r\n            s.outgoing.add(type, t);\r\n            t.incoming.add(type, s);\r\n        });\r\n    }\r\n    Configuration.prototype.initModulesFromGroup = function (group) {\r\n        var moduleSet = new ModuleSet();\r\n        this.roots.push(moduleSet);\r\n        for (var i = 0; i < group.leaves.length; ++i) {\r\n            var node = group.leaves[i];\r\n            var module = new Module(node.id);\r\n            this.modules[node.id] = module;\r\n            moduleSet.add(module);\r\n        }\r\n        if (group.groups) {\r\n            for (var j = 0; j < group.groups.length; ++j) {\r\n                var child = group.groups[j];\r\n                var definition = {};\r\n                for (var prop in child)\r\n                    if (prop !== \"leaves\" && prop !== \"groups\" && child.hasOwnProperty(prop))\r\n                        definition[prop] = child[prop];\r\n                moduleSet.add(new Module(-1 - j, new LinkSets(), new LinkSets(), this.initModulesFromGroup(child), definition));\r\n            }\r\n        }\r\n        return moduleSet;\r\n    };\r\n    Configuration.prototype.merge = function (a, b, k) {\r\n        if (k === void 0) { k = 0; }\r\n        var inInt = a.incoming.intersection(b.incoming), outInt = a.outgoing.intersection(b.outgoing);\r\n        var children = new ModuleSet();\r\n        children.add(a);\r\n        children.add(b);\r\n        var m = new Module(this.modules.length, outInt, inInt, children);\r\n        this.modules.push(m);\r\n        var update = function (s, i, o) {\r\n            s.forAll(function (ms, linktype) {\r\n                ms.forAll(function (n) {\r\n                    var nls = n[i];\r\n                    nls.add(linktype, m);\r\n                    nls.remove(linktype, a);\r\n                    nls.remove(linktype, b);\r\n                    a[o].remove(linktype, n);\r\n                    b[o].remove(linktype, n);\r\n                });\r\n            });\r\n        };\r\n        update(outInt, \"incoming\", \"outgoing\");\r\n        update(inInt, \"outgoing\", \"incoming\");\r\n        this.R -= inInt.count() + outInt.count();\r\n        this.roots[k].remove(a);\r\n        this.roots[k].remove(b);\r\n        this.roots[k].add(m);\r\n        return m;\r\n    };\r\n    Configuration.prototype.rootMerges = function (k) {\r\n        if (k === void 0) { k = 0; }\r\n        var rs = this.roots[k].modules();\r\n        var n = rs.length;\r\n        var merges = new Array(n * (n - 1));\r\n        var ctr = 0;\r\n        for (var i = 0, i_ = n - 1; i < i_; ++i) {\r\n            for (var j = i + 1; j < n; ++j) {\r\n                var a = rs[i], b = rs[j];\r\n                merges[ctr] = { id: ctr, nEdges: this.nEdges(a, b), a: a, b: b };\r\n                ctr++;\r\n            }\r\n        }\r\n        return merges;\r\n    };\r\n    Configuration.prototype.greedyMerge = function () {\r\n        for (var i = 0; i < this.roots.length; ++i) {\r\n            if (this.roots[i].modules().length < 2)\r\n                continue;\r\n            var ms = this.rootMerges(i).sort(function (a, b) { return a.nEdges == b.nEdges ? a.id - b.id : a.nEdges - b.nEdges; });\r\n            var m = ms[0];\r\n            if (m.nEdges >= this.R)\r\n                continue;\r\n            this.merge(m.a, m.b, i);\r\n            return true;\r\n        }\r\n    };\r\n    Configuration.prototype.nEdges = function (a, b) {\r\n        var inInt = a.incoming.intersection(b.incoming), outInt = a.outgoing.intersection(b.outgoing);\r\n        return this.R - inInt.count() - outInt.count();\r\n    };\r\n    Configuration.prototype.getGroupHierarchy = function (retargetedEdges) {\r\n        var _this = this;\r\n        var groups = [];\r\n        var root = {};\r\n        toGroups(this.roots[0], root, groups);\r\n        var es = this.allEdges();\r\n        es.forEach(function (e) {\r\n            var a = _this.modules[e.source];\r\n            var b = _this.modules[e.target];\r\n            retargetedEdges.push(new PowerEdge(typeof a.gid === \"undefined\" ? e.source : groups[a.gid], typeof b.gid === \"undefined\" ? e.target : groups[b.gid], e.type));\r\n        });\r\n        return groups;\r\n    };\r\n    Configuration.prototype.allEdges = function () {\r\n        var es = [];\r\n        Configuration.getEdges(this.roots[0], es);\r\n        return es;\r\n    };\r\n    Configuration.getEdges = function (modules, es) {\r\n        modules.forAll(function (m) {\r\n            m.getEdges(es);\r\n            Configuration.getEdges(m.children, es);\r\n        });\r\n    };\r\n    return Configuration;\r\n}());\r\nexports.Configuration = Configuration;\r\nfunction toGroups(modules, group, groups) {\r\n    modules.forAll(function (m) {\r\n        if (m.isLeaf()) {\r\n            if (!group.leaves)\r\n                group.leaves = [];\r\n            group.leaves.push(m.id);\r\n        }\r\n        else {\r\n            var g = group;\r\n            m.gid = groups.length;\r\n            if (!m.isIsland() || m.isPredefined()) {\r\n                g = { id: m.gid };\r\n                if (m.isPredefined())\r\n                    for (var prop in m.definition)\r\n                        g[prop] = m.definition[prop];\r\n                if (!group.groups)\r\n                    group.groups = [];\r\n                group.groups.push(m.gid);\r\n                groups.push(g);\r\n            }\r\n            toGroups(m.children, g, groups);\r\n        }\r\n    });\r\n}\r\nvar Module = (function () {\r\n    function Module(id, outgoing, incoming, children, definition) {\r\n        if (outgoing === void 0) { outgoing = new LinkSets(); }\r\n        if (incoming === void 0) { incoming = new LinkSets(); }\r\n        if (children === void 0) { children = new ModuleSet(); }\r\n        this.id = id;\r\n        this.outgoing = outgoing;\r\n        this.incoming = incoming;\r\n        this.children = children;\r\n        this.definition = definition;\r\n    }\r\n    Module.prototype.getEdges = function (es) {\r\n        var _this = this;\r\n        this.outgoing.forAll(function (ms, edgetype) {\r\n            ms.forAll(function (target) {\r\n                es.push(new PowerEdge(_this.id, target.id, edgetype));\r\n            });\r\n        });\r\n    };\r\n    Module.prototype.isLeaf = function () {\r\n        return this.children.count() === 0;\r\n    };\r\n    Module.prototype.isIsland = function () {\r\n        return this.outgoing.count() === 0 && this.incoming.count() === 0;\r\n    };\r\n    Module.prototype.isPredefined = function () {\r\n        return typeof this.definition !== \"undefined\";\r\n    };\r\n    return Module;\r\n}());\r\nexports.Module = Module;\r\nfunction intersection(m, n) {\r\n    var i = {};\r\n    for (var v in m)\r\n        if (v in n)\r\n            i[v] = m[v];\r\n    return i;\r\n}\r\nvar ModuleSet = (function () {\r\n    function ModuleSet() {\r\n        this.table = {};\r\n    }\r\n    ModuleSet.prototype.count = function () {\r\n        return Object.keys(this.table).length;\r\n    };\r\n    ModuleSet.prototype.intersection = function (other) {\r\n        var result = new ModuleSet();\r\n        result.table = intersection(this.table, other.table);\r\n        return result;\r\n    };\r\n    ModuleSet.prototype.intersectionCount = function (other) {\r\n        return this.intersection(other).count();\r\n    };\r\n    ModuleSet.prototype.contains = function (id) {\r\n        return id in this.table;\r\n    };\r\n    ModuleSet.prototype.add = function (m) {\r\n        this.table[m.id] = m;\r\n    };\r\n    ModuleSet.prototype.remove = function (m) {\r\n        delete this.table[m.id];\r\n    };\r\n    ModuleSet.prototype.forAll = function (f) {\r\n        for (var mid in this.table) {\r\n            f(this.table[mid]);\r\n        }\r\n    };\r\n    ModuleSet.prototype.modules = function () {\r\n        var vs = [];\r\n        this.forAll(function (m) {\r\n            if (!m.isPredefined())\r\n                vs.push(m);\r\n        });\r\n        return vs;\r\n    };\r\n    return ModuleSet;\r\n}());\r\nexports.ModuleSet = ModuleSet;\r\nvar LinkSets = (function () {\r\n    function LinkSets() {\r\n        this.sets = {};\r\n        this.n = 0;\r\n    }\r\n    LinkSets.prototype.count = function () {\r\n        return this.n;\r\n    };\r\n    LinkSets.prototype.contains = function (id) {\r\n        var result = false;\r\n        this.forAllModules(function (m) {\r\n            if (!result && m.id == id) {\r\n                result = true;\r\n            }\r\n        });\r\n        return result;\r\n    };\r\n    LinkSets.prototype.add = function (linktype, m) {\r\n        var s = linktype in this.sets ? this.sets[linktype] : this.sets[linktype] = new ModuleSet();\r\n        s.add(m);\r\n        ++this.n;\r\n    };\r\n    LinkSets.prototype.remove = function (linktype, m) {\r\n        var ms = this.sets[linktype];\r\n        ms.remove(m);\r\n        if (ms.count() === 0) {\r\n            delete this.sets[linktype];\r\n        }\r\n        --this.n;\r\n    };\r\n    LinkSets.prototype.forAll = function (f) {\r\n        for (var linktype in this.sets) {\r\n            f(this.sets[linktype], Number(linktype));\r\n        }\r\n    };\r\n    LinkSets.prototype.forAllModules = function (f) {\r\n        this.forAll(function (ms, lt) { return ms.forAll(f); });\r\n    };\r\n    LinkSets.prototype.intersection = function (other) {\r\n        var result = new LinkSets();\r\n        this.forAll(function (ms, lt) {\r\n            if (lt in other.sets) {\r\n                var i = ms.intersection(other.sets[lt]), n = i.count();\r\n                if (n > 0) {\r\n                    result.sets[lt] = i;\r\n                    result.n += n;\r\n                }\r\n            }\r\n        });\r\n        return result;\r\n    };\r\n    return LinkSets;\r\n}());\r\nexports.LinkSets = LinkSets;\r\nfunction intersectionCount(m, n) {\r\n    return Object.keys(intersection(m, n)).length;\r\n}\r\nfunction getGroups(nodes, links, la, rootGroup) {\r\n    var n = nodes.length, c = new Configuration(n, links, la, rootGroup);\r\n    while (c.greedyMerge())\r\n        ;\r\n    var powerEdges = [];\r\n    var g = c.getGroupHierarchy(powerEdges);\r\n    powerEdges.forEach(function (e) {\r\n        var f = function (end) {\r\n            var g = e[end];\r\n            if (typeof g == \"number\")\r\n                e[end] = nodes[g];\r\n        };\r\n        f(\"source\");\r\n        f(\"target\");\r\n    });\r\n    return { groups: g, powerEdges: powerEdges };\r\n}\r\nexports.getGroups = getGroups;\r\n//# sourceMappingURL=data:application/json;base64,# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/webcola/dist/src/powergraph.js\n");

/***/ }),

/***/ "./node_modules/webcola/dist/src/pqueue.js":
/*!*************************************************!*\
  !*** ./node_modules/webcola/dist/src/pqueue.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar PairingHeap = (function () {\r\n    function PairingHeap(elem) {\r\n        this.elem = elem;\r\n        this.subheaps = [];\r\n    }\r\n    PairingHeap.prototype.toString = function (selector) {\r\n        var str = \"\", needComma = false;\r\n        for (var i = 0; i < this.subheaps.length; ++i) {\r\n            var subheap = this.subheaps[i];\r\n            if (!subheap.elem) {\r\n                needComma = false;\r\n                continue;\r\n            }\r\n            if (needComma) {\r\n                str = str + \",\";\r\n            }\r\n            str = str + subheap.toString(selector);\r\n            needComma = true;\r\n        }\r\n        if (str !== \"\") {\r\n            str = \"(\" + str + \")\";\r\n        }\r\n        return (this.elem ? selector(this.elem) : \"\") + str;\r\n    };\r\n    PairingHeap.prototype.forEach = function (f) {\r\n        if (!this.empty()) {\r\n            f(this.elem, this);\r\n            this.subheaps.forEach(function (s) { return s.forEach(f); });\r\n        }\r\n    };\r\n    PairingHeap.prototype.count = function () {\r\n        return this.empty() ? 0 : 1 + this.subheaps.reduce(function (n, h) {\r\n            return n + h.count();\r\n        }, 0);\r\n    };\r\n    PairingHeap.prototype.min = function () {\r\n        return this.elem;\r\n    };\r\n    PairingHeap.prototype.empty = function () {\r\n        return this.elem == null;\r\n    };\r\n    PairingHeap.prototype.contains = function (h) {\r\n        if (this === h)\r\n            return true;\r\n        for (var i = 0; i < this.subheaps.length; i++) {\r\n            if (this.subheaps[i].contains(h))\r\n                return true;\r\n        }\r\n        return false;\r\n    };\r\n    PairingHeap.prototype.isHeap = function (lessThan) {\r\n        var _this = this;\r\n        return this.subheaps.every(function (h) { return lessThan(_this.elem, h.elem) && h.isHeap(lessThan); });\r\n    };\r\n    PairingHeap.prototype.insert = function (obj, lessThan) {\r\n        return this.merge(new PairingHeap(obj), lessThan);\r\n    };\r\n    PairingHeap.prototype.merge = function (heap2, lessThan) {\r\n        if (this.empty())\r\n            return heap2;\r\n        else if (heap2.empty())\r\n            return this;\r\n        else if (lessThan(this.elem, heap2.elem)) {\r\n            this.subheaps.push(heap2);\r\n            return this;\r\n        }\r\n        else {\r\n            heap2.subheaps.push(this);\r\n            return heap2;\r\n        }\r\n    };\r\n    PairingHeap.prototype.removeMin = function (lessThan) {\r\n        if (this.empty())\r\n            return null;\r\n        else\r\n            return this.mergePairs(lessThan);\r\n    };\r\n    PairingHeap.prototype.mergePairs = function (lessThan) {\r\n        if (this.subheaps.length == 0)\r\n            return new PairingHeap(null);\r\n        else if (this.subheaps.length == 1) {\r\n            return this.subheaps[0];\r\n        }\r\n        else {\r\n            var firstPair = this.subheaps.pop().merge(this.subheaps.pop(), lessThan);\r\n            var remaining = this.mergePairs(lessThan);\r\n            return firstPair.merge(remaining, lessThan);\r\n        }\r\n    };\r\n    PairingHeap.prototype.decreaseKey = function (subheap, newValue, setHeapNode, lessThan) {\r\n        var newHeap = subheap.removeMin(lessThan);\r\n        subheap.elem = newHeap.elem;\r\n        subheap.subheaps = newHeap.subheaps;\r\n        if (setHeapNode !== null && newHeap.elem !== null) {\r\n            setHeapNode(subheap.elem, subheap);\r\n        }\r\n        var pairingNode = new PairingHeap(newValue);\r\n        if (setHeapNode !== null) {\r\n            setHeapNode(newValue, pairingNode);\r\n        }\r\n        return this.merge(pairingNode, lessThan);\r\n    };\r\n    return PairingHeap;\r\n}());\r\nexports.PairingHeap = PairingHeap;\r\nvar PriorityQueue = (function () {\r\n    function PriorityQueue(lessThan) {\r\n        this.lessThan = lessThan;\r\n    }\r\n    PriorityQueue.prototype.top = function () {\r\n        if (this.empty()) {\r\n            return null;\r\n        }\r\n        return this.root.elem;\r\n    };\r\n    PriorityQueue.prototype.push = function () {\r\n        var args = [];\r\n        for (var _i = 0; _i < arguments.length; _i++) {\r\n            args[_i] = arguments[_i];\r\n        }\r\n        var pairingNode;\r\n        for (var i = 0, arg; arg = args[i]; ++i) {\r\n            pairingNode = new PairingHeap(arg);\r\n            this.root = this.empty() ?\r\n                pairingNode : this.root.merge(pairingNode, this.lessThan);\r\n        }\r\n        return pairingNode;\r\n    };\r\n    PriorityQueue.prototype.empty = function () {\r\n        return !this.root || !this.root.elem;\r\n    };\r\n    PriorityQueue.prototype.isHeap = function () {\r\n        return this.root.isHeap(this.lessThan);\r\n    };\r\n    PriorityQueue.prototype.forEach = function (f) {\r\n        this.root.forEach(f);\r\n    };\r\n    PriorityQueue.prototype.pop = function () {\r\n        if (this.empty()) {\r\n            return null;\r\n        }\r\n        var obj = this.root.min();\r\n        this.root = this.root.removeMin(this.lessThan);\r\n        return obj;\r\n    };\r\n    PriorityQueue.prototype.reduceKey = function (heapNode, newKey, setHeapNode) {\r\n        if (setHeapNode === void 0) { setHeapNode = null; }\r\n        this.root = this.root.decreaseKey(heapNode, newKey, setHeapNode, this.lessThan);\r\n    };\r\n    PriorityQueue.prototype.toString = function (selector) {\r\n        return this.root.toString(selector);\r\n    };\r\n    PriorityQueue.prototype.count = function () {\r\n        return this.root.count();\r\n    };\r\n    return PriorityQueue;\r\n}());\r\nexports.PriorityQueue = PriorityQueue;\r\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHF1ZXVlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vV2ViQ29sYS9zcmMvcHF1ZXVlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQ0E7SUFJSSxxQkFBbUIsSUFBTztRQUFQLFNBQUksR0FBSixJQUFJLENBQUc7UUFDdEIsSUFBSSxDQUFDLFFBQVEsR0FBRyxFQUFFLENBQUM7SUFDdkIsQ0FBQztJQUVNLDhCQUFRLEdBQWYsVUFBZ0IsUUFBUTtRQUNwQixJQUFJLEdBQUcsR0FBRyxFQUFFLEVBQUUsU0FBUyxHQUFHLEtBQUssQ0FBQztRQUNoQyxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLEVBQUUsRUFBRSxDQUFDLEVBQUU7WUFDM0MsSUFBSSxPQUFPLEdBQW1CLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDL0MsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLEVBQUU7Z0JBQ2YsU0FBUyxHQUFHLEtBQUssQ0FBQztnQkFDbEIsU0FBUzthQUNaO1lBQ0QsSUFBSSxTQUFTLEVBQUU7Z0JBQ1gsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLENBQUM7YUFDbkI7WUFDRCxHQUFHLEdBQUcsR0FBRyxHQUFHLE9BQU8sQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLENBQUM7WUFDdkMsU0FBUyxHQUFHLElBQUksQ0FBQztTQUNwQjtRQUNELElBQUksR0FBRyxLQUFLLEVBQUUsRUFBRTtZQUNaLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsQ0FBQztTQUN6QjtRQUNELE9BQU8sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsR0FBRyxHQUFHLENBQUM7SUFDeEQsQ0FBQztJQUVNLDZCQUFPLEdBQWQsVUFBZSxDQUFDO1FBQ1osSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsRUFBRTtZQUNmLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDO1lBQ25CLElBQUksQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLFVBQUEsQ0FBQyxJQUFJLE9BQUEsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsRUFBWixDQUFZLENBQUMsQ0FBQztTQUM1QztJQUNMLENBQUM7SUFFTSwyQkFBSyxHQUFaO1FBQ0ksT0FBTyxJQUFJLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLFVBQUMsQ0FBUyxFQUFFLENBQWlCO1lBQzVFLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQyxLQUFLLEVBQUUsQ0FBQztRQUN6QixDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFDVixDQUFDO0lBRU0seUJBQUcsR0FBVjtRQUNJLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQztJQUNyQixDQUFDO0lBRU0sMkJBQUssR0FBWjtRQUNJLE9BQU8sSUFBSSxDQUFDLElBQUksSUFBSSxJQUFJLENBQUM7SUFDN0IsQ0FBQztJQUVNLDhCQUFRLEdBQWYsVUFBZ0IsQ0FBaUI7UUFDN0IsSUFBSSxJQUFJLEtBQUssQ0FBQztZQUFFLE9BQU8sSUFBSSxDQUFDO1FBQzVCLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRTtZQUMzQyxJQUFJLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQztnQkFBRSxPQUFPLElBQUksQ0FBQztTQUNqRDtRQUNELE9BQU8sS0FBSyxDQUFDO0lBQ2pCLENBQUM7SUFFTSw0QkFBTSxHQUFiLFVBQWMsUUFBaUM7UUFBL0MsaUJBRUM7UUFERyxPQUFPLElBQUksQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLFVBQUEsQ0FBQyxJQUFHLE9BQUEsUUFBUSxDQUFDLEtBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLEVBQWpELENBQWlELENBQUMsQ0FBQztJQUN0RixDQUFDO0lBRU0sNEJBQU0sR0FBYixVQUFjLEdBQU8sRUFBRSxRQUFRO1FBQzNCLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLFdBQVcsQ0FBSSxHQUFHLENBQUMsRUFBRSxRQUFRLENBQUMsQ0FBQztJQUN6RCxDQUFDO0lBRU0sMkJBQUssR0FBWixVQUFhLEtBQXFCLEVBQUUsUUFBUTtRQUN4QyxJQUFJLElBQUksQ0FBQyxLQUFLLEVBQUU7WUFBRSxPQUFPLEtBQUssQ0FBQzthQUMxQixJQUFJLEtBQUssQ0FBQyxLQUFLLEVBQUU7WUFBRSxPQUFPLElBQUksQ0FBQzthQUMvQixJQUFJLFFBQVEsQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLEtBQUssQ0FBQyxJQUFJLENBQUMsRUFBRTtZQUN0QyxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUMxQixPQUFPLElBQUksQ0FBQztTQUNmO2FBQU07WUFDSCxLQUFLLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUMxQixPQUFPLEtBQUssQ0FBQztTQUNoQjtJQUNMLENBQUM7SUFFTSwrQkFBUyxHQUFoQixVQUFpQixRQUFpQztRQUM5QyxJQUFJLElBQUksQ0FBQyxLQUFLLEVBQUU7WUFBRSxPQUFPLElBQUksQ0FBQzs7WUFDekIsT0FBTyxJQUFJLENBQUMsVUFBVSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQzFDLENBQUM7SUFFTSxnQ0FBVSxHQUFqQixVQUFrQixRQUFpQztRQUMvQyxJQUFJLElBQUksQ0FBQyxRQUFRLENBQUMsTUFBTSxJQUFJLENBQUM7WUFBRSxPQUFPLElBQUksV0FBVyxDQUFJLElBQUksQ0FBQyxDQUFDO2FBQzFELElBQUksSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLElBQUksQ0FBQyxFQUFFO1lBQUUsT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDO1NBQUU7YUFDM0Q7WUFDRCxJQUFJLFNBQVMsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsRUFBRSxFQUFFLFFBQVEsQ0FBQyxDQUFDO1lBQ3pFLElBQUksU0FBUyxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsUUFBUSxDQUFDLENBQUM7WUFDMUMsT0FBTyxTQUFTLENBQUMsS0FBSyxDQUFDLFNBQVMsRUFBRSxRQUFRLENBQUMsQ0FBQztTQUMvQztJQUNMLENBQUM7SUFDTSxpQ0FBVyxHQUFsQixVQUFtQixPQUF1QixFQUFFLFFBQVcsRUFBRSxXQUE0QyxFQUFFLFFBQWlDO1FBQ3BJLElBQUksT0FBTyxHQUFHLE9BQU8sQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLENBQUM7UUFFMUMsT0FBTyxDQUFDLElBQUksR0FBRyxPQUFPLENBQUMsSUFBSSxDQUFDO1FBQzVCLE9BQU8sQ0FBQyxRQUFRLEdBQUcsT0FBTyxDQUFDLFFBQVEsQ0FBQztRQUNwQyxJQUFJLFdBQVcsS0FBSyxJQUFJLElBQUksT0FBTyxDQUFDLElBQUksS0FBSyxJQUFJLEVBQUU7WUFDL0MsV0FBVyxDQUFDLE9BQU8sQ0FBQyxJQUFJLEVBQUUsT0FBTyxDQUFDLENBQUM7U0FDdEM7UUFDRCxJQUFJLFdBQVcsR0FBRyxJQUFJLFdBQVcsQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUM1QyxJQUFJLFdBQVcsS0FBSyxJQUFJLEVBQUU7WUFDdEIsV0FBVyxDQUFDLFFBQVEsRUFBRSxXQUFXLENBQUMsQ0FBQztTQUN0QztRQUNELE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQyxXQUFXLEVBQUUsUUFBUSxDQUFDLENBQUM7SUFDN0MsQ0FBQztJQUNMLGtCQUFDO0FBQUQsQ0FBQyxBQXpHRCxJQXlHQztBQXpHWSxrQ0FBVztBQThHeEI7SUFFSSx1QkFBb0IsUUFBaUM7UUFBakMsYUFBUSxHQUFSLFFBQVEsQ0FBeUI7SUFBSSxDQUFDO0lBS25ELDJCQUFHLEdBQVY7UUFDSSxJQUFJLElBQUksQ0FBQyxLQUFLLEVBQUUsRUFBRTtZQUFFLE9BQU8sSUFBSSxDQUFDO1NBQUU7UUFDbEMsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQztJQUMxQixDQUFDO0lBS00sNEJBQUksR0FBWDtRQUFZLGNBQVk7YUFBWixVQUFZLEVBQVoscUJBQVksRUFBWixJQUFZO1lBQVoseUJBQVk7O1FBQ3BCLElBQUksV0FBVyxDQUFDO1FBQ2hCLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLEdBQUcsRUFBRSxHQUFHLEdBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxFQUFFO1lBQ25DLFdBQVcsR0FBRyxJQUFJLFdBQVcsQ0FBQyxHQUFHLENBQUMsQ0FBQztZQUNuQyxJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDO2dCQUN0QixXQUFXLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLFdBQVcsRUFBRSxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7U0FDakU7UUFDRCxPQUFPLFdBQVcsQ0FBQztJQUN2QixDQUFDO0lBS00sNkJBQUssR0FBWjtRQUNJLE9BQU8sQ0FBQyxJQUFJLENBQUMsSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUM7SUFDekMsQ0FBQztJQUtNLDhCQUFNLEdBQWI7UUFDSSxPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUMzQyxDQUFDO0lBS00sK0JBQU8sR0FBZCxVQUFlLENBQUM7UUFDWixJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUN6QixDQUFDO0lBSU0sMkJBQUcsR0FBVjtRQUNJLElBQUksSUFBSSxDQUFDLEtBQUssRUFBRSxFQUFFO1lBQ2QsT0FBTyxJQUFJLENBQUM7U0FDZjtRQUNELElBQUksR0FBRyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUM7UUFDMUIsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDL0MsT0FBTyxHQUFHLENBQUM7SUFDZixDQUFDO0lBSU0saUNBQVMsR0FBaEIsVUFBaUIsUUFBd0IsRUFBRSxNQUFTLEVBQUUsV0FBbUQ7UUFBbkQsNEJBQUEsRUFBQSxrQkFBbUQ7UUFDckcsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxRQUFRLEVBQUUsTUFBTSxFQUFFLFdBQVcsRUFBRSxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7SUFDcEYsQ0FBQztJQUNNLGdDQUFRLEdBQWYsVUFBZ0IsUUFBUTtRQUNwQixPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQ3hDLENBQUM7SUFLTSw2QkFBSyxHQUFaO1FBQ0ksT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxDQUFDO0lBQzdCLENBQUM7SUFDTCxvQkFBQztBQUFELENBQUMsQUF4RUQsSUF3RUM7QUF4RVksc0NBQWEifQ==//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/webcola/dist/src/pqueue.js\n");

/***/ }),

/***/ "./node_modules/webcola/dist/src/rbtree.js":
/*!*************************************************!*\
  !*** ./node_modules/webcola/dist/src/rbtree.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = function (d, b) {\r\n        extendStatics = Object.setPrototypeOf ||\r\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n        return extendStatics(d, b);\r\n    };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar TreeBase = (function () {\r\n    function TreeBase() {\r\n        this.findIter = function (data) {\r\n            var res = this._root;\r\n            var iter = this.iterator();\r\n            while (res !== null) {\r\n                var c = this._comparator(data, res.data);\r\n                if (c === 0) {\r\n                    iter._cursor = res;\r\n                    return iter;\r\n                }\r\n                else {\r\n                    iter._ancestors.push(res);\r\n                    res = res.get_child(c > 0);\r\n                }\r\n            }\r\n            return null;\r\n        };\r\n    }\r\n    TreeBase.prototype.clear = function () {\r\n        this._root = null;\r\n        this.size = 0;\r\n    };\r\n    ;\r\n    TreeBase.prototype.find = function (data) {\r\n        var res = this._root;\r\n        while (res !== null) {\r\n            var c = this._comparator(data, res.data);\r\n            if (c === 0) {\r\n                return res.data;\r\n            }\r\n            else {\r\n                res = res.get_child(c > 0);\r\n            }\r\n        }\r\n        return null;\r\n    };\r\n    ;\r\n    TreeBase.prototype.lowerBound = function (data) {\r\n        return this._bound(data, this._comparator);\r\n    };\r\n    ;\r\n    TreeBase.prototype.upperBound = function (data) {\r\n        var cmp = this._comparator;\r\n        function reverse_cmp(a, b) {\r\n            return cmp(b, a);\r\n        }\r\n        return this._bound(data, reverse_cmp);\r\n    };\r\n    ;\r\n    TreeBase.prototype.min = function () {\r\n        var res = this._root;\r\n        if (res === null) {\r\n            return null;\r\n        }\r\n        while (res.left !== null) {\r\n            res = res.left;\r\n        }\r\n        return res.data;\r\n    };\r\n    ;\r\n    TreeBase.prototype.max = function () {\r\n        var res = this._root;\r\n        if (res === null) {\r\n            return null;\r\n        }\r\n        while (res.right !== null) {\r\n            res = res.right;\r\n        }\r\n        return res.data;\r\n    };\r\n    ;\r\n    TreeBase.prototype.iterator = function () {\r\n        return new Iterator(this);\r\n    };\r\n    ;\r\n    TreeBase.prototype.each = function (cb) {\r\n        var it = this.iterator(), data;\r\n        while ((data = it.next()) !== null) {\r\n            cb(data);\r\n        }\r\n    };\r\n    ;\r\n    TreeBase.prototype.reach = function (cb) {\r\n        var it = this.iterator(), data;\r\n        while ((data = it.prev()) !== null) {\r\n            cb(data);\r\n        }\r\n    };\r\n    ;\r\n    TreeBase.prototype._bound = function (data, cmp) {\r\n        var cur = this._root;\r\n        var iter = this.iterator();\r\n        while (cur !== null) {\r\n            var c = this._comparator(data, cur.data);\r\n            if (c === 0) {\r\n                iter._cursor = cur;\r\n                return iter;\r\n            }\r\n            iter._ancestors.push(cur);\r\n            cur = cur.get_child(c > 0);\r\n        }\r\n        for (var i = iter._ancestors.length - 1; i >= 0; --i) {\r\n            cur = iter._ancestors[i];\r\n            if (cmp(data, cur.data) > 0) {\r\n                iter._cursor = cur;\r\n                iter._ancestors.length = i;\r\n                return iter;\r\n            }\r\n        }\r\n        iter._ancestors.length = 0;\r\n        return iter;\r\n    };\r\n    ;\r\n    return TreeBase;\r\n}());\r\nexports.TreeBase = TreeBase;\r\nvar Iterator = (function () {\r\n    function Iterator(tree) {\r\n        this._tree = tree;\r\n        this._ancestors = [];\r\n        this._cursor = null;\r\n    }\r\n    Iterator.prototype.data = function () {\r\n        return this._cursor !== null ? this._cursor.data : null;\r\n    };\r\n    ;\r\n    Iterator.prototype.next = function () {\r\n        if (this._cursor === null) {\r\n            var root = this._tree._root;\r\n            if (root !== null) {\r\n                this._minNode(root);\r\n            }\r\n        }\r\n        else {\r\n            if (this._cursor.right === null) {\r\n                var save;\r\n                do {\r\n                    save = this._cursor;\r\n                    if (this._ancestors.length) {\r\n                        this._cursor = this._ancestors.pop();\r\n                    }\r\n                    else {\r\n                        this._cursor = null;\r\n                        break;\r\n                    }\r\n                } while (this._cursor.right === save);\r\n            }\r\n            else {\r\n                this._ancestors.push(this._cursor);\r\n                this._minNode(this._cursor.right);\r\n            }\r\n        }\r\n        return this._cursor !== null ? this._cursor.data : null;\r\n    };\r\n    ;\r\n    Iterator.prototype.prev = function () {\r\n        if (this._cursor === null) {\r\n            var root = this._tree._root;\r\n            if (root !== null) {\r\n                this._maxNode(root);\r\n            }\r\n        }\r\n        else {\r\n            if (this._cursor.left === null) {\r\n                var save;\r\n                do {\r\n                    save = this._cursor;\r\n                    if (this._ancestors.length) {\r\n                        this._cursor = this._ancestors.pop();\r\n                    }\r\n                    else {\r\n                        this._cursor = null;\r\n                        break;\r\n                    }\r\n                } while (this._cursor.left === save);\r\n            }\r\n            else {\r\n                this._ancestors.push(this._cursor);\r\n                this._maxNode(this._cursor.left);\r\n            }\r\n        }\r\n        return this._cursor !== null ? this._cursor.data : null;\r\n    };\r\n    ;\r\n    Iterator.prototype._minNode = function (start) {\r\n        while (start.left !== null) {\r\n            this._ancestors.push(start);\r\n            start = start.left;\r\n        }\r\n        this._cursor = start;\r\n    };\r\n    ;\r\n    Iterator.prototype._maxNode = function (start) {\r\n        while (start.right !== null) {\r\n            this._ancestors.push(start);\r\n            start = start.right;\r\n        }\r\n        this._cursor = start;\r\n    };\r\n    ;\r\n    return Iterator;\r\n}());\r\nexports.Iterator = Iterator;\r\nvar Node = (function () {\r\n    function Node(data) {\r\n        this.data = data;\r\n        this.left = null;\r\n        this.right = null;\r\n        this.red = true;\r\n    }\r\n    Node.prototype.get_child = function (dir) {\r\n        return dir ? this.right : this.left;\r\n    };\r\n    ;\r\n    Node.prototype.set_child = function (dir, val) {\r\n        if (dir) {\r\n            this.right = val;\r\n        }\r\n        else {\r\n            this.left = val;\r\n        }\r\n    };\r\n    ;\r\n    return Node;\r\n}());\r\nvar RBTree = (function (_super) {\r\n    __extends(RBTree, _super);\r\n    function RBTree(comparator) {\r\n        var _this = _super.call(this) || this;\r\n        _this._root = null;\r\n        _this._comparator = comparator;\r\n        _this.size = 0;\r\n        return _this;\r\n    }\r\n    RBTree.prototype.insert = function (data) {\r\n        var ret = false;\r\n        if (this._root === null) {\r\n            this._root = new Node(data);\r\n            ret = true;\r\n            this.size++;\r\n        }\r\n        else {\r\n            var head = new Node(undefined);\r\n            var dir = false;\r\n            var last = false;\r\n            var gp = null;\r\n            var ggp = head;\r\n            var p = null;\r\n            var node = this._root;\r\n            ggp.right = this._root;\r\n            while (true) {\r\n                if (node === null) {\r\n                    node = new Node(data);\r\n                    p.set_child(dir, node);\r\n                    ret = true;\r\n                    this.size++;\r\n                }\r\n                else if (RBTree.is_red(node.left) && RBTree.is_red(node.right)) {\r\n                    node.red = true;\r\n                    node.left.red = false;\r\n                    node.right.red = false;\r\n                }\r\n                if (RBTree.is_red(node) && RBTree.is_red(p)) {\r\n                    var dir2 = ggp.right === gp;\r\n                    if (node === p.get_child(last)) {\r\n                        ggp.set_child(dir2, RBTree.single_rotate(gp, !last));\r\n                    }\r\n                    else {\r\n                        ggp.set_child(dir2, RBTree.double_rotate(gp, !last));\r\n                    }\r\n                }\r\n                var cmp = this._comparator(node.data, data);\r\n                if (cmp === 0) {\r\n                    break;\r\n                }\r\n                last = dir;\r\n                dir = cmp < 0;\r\n                if (gp !== null) {\r\n                    ggp = gp;\r\n                }\r\n                gp = p;\r\n                p = node;\r\n                node = node.get_child(dir);\r\n            }\r\n            this._root = head.right;\r\n        }\r\n        this._root.red = false;\r\n        return ret;\r\n    };\r\n    ;\r\n    RBTree.prototype.remove = function (data) {\r\n        if (this._root === null) {\r\n            return false;\r\n        }\r\n        var head = new Node(undefined);\r\n        var node = head;\r\n        node.right = this._root;\r\n        var p = null;\r\n        var gp = null;\r\n        var found = null;\r\n        var dir = true;\r\n        while (node.get_child(dir) !== null) {\r\n            var last = dir;\r\n            gp = p;\r\n            p = node;\r\n            node = node.get_child(dir);\r\n            var cmp = this._comparator(data, node.data);\r\n            dir = cmp > 0;\r\n            if (cmp === 0) {\r\n                found = node;\r\n            }\r\n            if (!RBTree.is_red(node) && !RBTree.is_red(node.get_child(dir))) {\r\n                if (RBTree.is_red(node.get_child(!dir))) {\r\n                    var sr = RBTree.single_rotate(node, dir);\r\n                    p.set_child(last, sr);\r\n                    p = sr;\r\n                }\r\n                else if (!RBTree.is_red(node.get_child(!dir))) {\r\n                    var sibling = p.get_child(!last);\r\n                    if (sibling !== null) {\r\n                        if (!RBTree.is_red(sibling.get_child(!last)) && !RBTree.is_red(sibling.get_child(last))) {\r\n                            p.red = false;\r\n                            sibling.red = true;\r\n                            node.red = true;\r\n                        }\r\n                        else {\r\n                            var dir2 = gp.right === p;\r\n                            if (RBTree.is_red(sibling.get_child(last))) {\r\n                                gp.set_child(dir2, RBTree.double_rotate(p, last));\r\n                            }\r\n                            else if (RBTree.is_red(sibling.get_child(!last))) {\r\n                                gp.set_child(dir2, RBTree.single_rotate(p, last));\r\n                            }\r\n                            var gpc = gp.get_child(dir2);\r\n                            gpc.red = true;\r\n                            node.red = true;\r\n                            gpc.left.red = false;\r\n                            gpc.right.red = false;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        if (found !== null) {\r\n            found.data = node.data;\r\n            p.set_child(p.right === node, node.get_child(node.left === null));\r\n            this.size--;\r\n        }\r\n        this._root = head.right;\r\n        if (this._root !== null) {\r\n            this._root.red = false;\r\n        }\r\n        return found !== null;\r\n    };\r\n    ;\r\n    RBTree.is_red = function (node) {\r\n        return node !== null && node.red;\r\n    };\r\n    RBTree.single_rotate = function (root, dir) {\r\n        var save = root.get_child(!dir);\r\n        root.set_child(!dir, save.get_child(dir));\r\n        save.set_child(dir, root);\r\n        root.red = true;\r\n        save.red = false;\r\n        return save;\r\n    };\r\n    RBTree.double_rotate = function (root, dir) {\r\n        root.set_child(!dir, RBTree.single_rotate(root.get_child(!dir), !dir));\r\n        return RBTree.single_rotate(root, dir);\r\n    };\r\n    return RBTree;\r\n}(TreeBase));\r\nexports.RBTree = RBTree;\r\n//# sourceMappingURL=data:application/json;base64,# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/webcola/dist/src/rbtree.js\n");

/***/ }),

/***/ "./node_modules/webcola/dist/src/rectangle.js":
/*!****************************************************!*\
  !*** ./node_modules/webcola/dist/src/rectangle.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = function (d, b) {\r\n        extendStatics = Object.setPrototypeOf ||\r\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n        return extendStatics(d, b);\r\n    };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar vpsc_1 = __webpack_require__(/*! ./vpsc */ \"./node_modules/webcola/dist/src/vpsc.js\");\r\nvar rbtree_1 = __webpack_require__(/*! ./rbtree */ \"./node_modules/webcola/dist/src/rbtree.js\");\r\nfunction computeGroupBounds(g) {\r\n    g.bounds = typeof g.leaves !== \"undefined\" ?\r\n        g.leaves.reduce(function (r, c) { return c.bounds.union(r); }, Rectangle.empty()) :\r\n        Rectangle.empty();\r\n    if (typeof g.groups !== \"undefined\")\r\n        g.bounds = g.groups.reduce(function (r, c) { return computeGroupBounds(c).union(r); }, g.bounds);\r\n    g.bounds = g.bounds.inflate(g.padding);\r\n    return g.bounds;\r\n}\r\nexports.computeGroupBounds = computeGroupBounds;\r\nvar Rectangle = (function () {\r\n    function Rectangle(x, X, y, Y) {\r\n        this.x = x;\r\n        this.X = X;\r\n        this.y = y;\r\n        this.Y = Y;\r\n    }\r\n    Rectangle.empty = function () { return new Rectangle(Number.POSITIVE_INFINITY, Number.NEGATIVE_INFINITY, Number.POSITIVE_INFINITY, Number.NEGATIVE_INFINITY); };\r\n    Rectangle.prototype.cx = function () { return (this.x + this.X) / 2; };\r\n    Rectangle.prototype.cy = function () { return (this.y + this.Y) / 2; };\r\n    Rectangle.prototype.overlapX = function (r) {\r\n        var ux = this.cx(), vx = r.cx();\r\n        if (ux <= vx && r.x < this.X)\r\n            return this.X - r.x;\r\n        if (vx <= ux && this.x < r.X)\r\n            return r.X - this.x;\r\n        return 0;\r\n    };\r\n    Rectangle.prototype.overlapY = function (r) {\r\n        var uy = this.cy(), vy = r.cy();\r\n        if (uy <= vy && r.y < this.Y)\r\n            return this.Y - r.y;\r\n        if (vy <= uy && this.y < r.Y)\r\n            return r.Y - this.y;\r\n        return 0;\r\n    };\r\n    Rectangle.prototype.setXCentre = function (cx) {\r\n        var dx = cx - this.cx();\r\n        this.x += dx;\r\n        this.X += dx;\r\n    };\r\n    Rectangle.prototype.setYCentre = function (cy) {\r\n        var dy = cy - this.cy();\r\n        this.y += dy;\r\n        this.Y += dy;\r\n    };\r\n    Rectangle.prototype.width = function () {\r\n        return this.X - this.x;\r\n    };\r\n    Rectangle.prototype.height = function () {\r\n        return this.Y - this.y;\r\n    };\r\n    Rectangle.prototype.union = function (r) {\r\n        return new Rectangle(Math.min(this.x, r.x), Math.max(this.X, r.X), Math.min(this.y, r.y), Math.max(this.Y, r.Y));\r\n    };\r\n    Rectangle.prototype.lineIntersections = function (x1, y1, x2, y2) {\r\n        var sides = [[this.x, this.y, this.X, this.y],\r\n            [this.X, this.y, this.X, this.Y],\r\n            [this.X, this.Y, this.x, this.Y],\r\n            [this.x, this.Y, this.x, this.y]];\r\n        var intersections = [];\r\n        for (var i = 0; i < 4; ++i) {\r\n            var r = Rectangle.lineIntersection(x1, y1, x2, y2, sides[i][0], sides[i][1], sides[i][2], sides[i][3]);\r\n            if (r !== null)\r\n                intersections.push({ x: r.x, y: r.y });\r\n        }\r\n        return intersections;\r\n    };\r\n    Rectangle.prototype.rayIntersection = function (x2, y2) {\r\n        var ints = this.lineIntersections(this.cx(), this.cy(), x2, y2);\r\n        return ints.length > 0 ? ints[0] : null;\r\n    };\r\n    Rectangle.prototype.vertices = function () {\r\n        return [\r\n            { x: this.x, y: this.y },\r\n            { x: this.X, y: this.y },\r\n            { x: this.X, y: this.Y },\r\n            { x: this.x, y: this.Y }\r\n        ];\r\n    };\r\n    Rectangle.lineIntersection = function (x1, y1, x2, y2, x3, y3, x4, y4) {\r\n        var dx12 = x2 - x1, dx34 = x4 - x3, dy12 = y2 - y1, dy34 = y4 - y3, denominator = dy34 * dx12 - dx34 * dy12;\r\n        if (denominator == 0)\r\n            return null;\r\n        var dx31 = x1 - x3, dy31 = y1 - y3, numa = dx34 * dy31 - dy34 * dx31, a = numa / denominator, numb = dx12 * dy31 - dy12 * dx31, b = numb / denominator;\r\n        if (a >= 0 && a <= 1 && b >= 0 && b <= 1) {\r\n            return {\r\n                x: x1 + a * dx12,\r\n                y: y1 + a * dy12\r\n            };\r\n        }\r\n        return null;\r\n    };\r\n    Rectangle.prototype.inflate = function (pad) {\r\n        return new Rectangle(this.x - pad, this.X + pad, this.y - pad, this.Y + pad);\r\n    };\r\n    return Rectangle;\r\n}());\r\nexports.Rectangle = Rectangle;\r\nfunction makeEdgeBetween(source, target, ah) {\r\n    var si = source.rayIntersection(target.cx(), target.cy()) || { x: source.cx(), y: source.cy() }, ti = target.rayIntersection(source.cx(), source.cy()) || { x: target.cx(), y: target.cy() }, dx = ti.x - si.x, dy = ti.y - si.y, l = Math.sqrt(dx * dx + dy * dy), al = l - ah;\r\n    return {\r\n        sourceIntersection: si,\r\n        targetIntersection: ti,\r\n        arrowStart: { x: si.x + al * dx / l, y: si.y + al * dy / l }\r\n    };\r\n}\r\nexports.makeEdgeBetween = makeEdgeBetween;\r\nfunction makeEdgeTo(s, target, ah) {\r\n    var ti = target.rayIntersection(s.x, s.y);\r\n    if (!ti)\r\n        ti = { x: target.cx(), y: target.cy() };\r\n    var dx = ti.x - s.x, dy = ti.y - s.y, l = Math.sqrt(dx * dx + dy * dy);\r\n    return { x: ti.x - ah * dx / l, y: ti.y - ah * dy / l };\r\n}\r\nexports.makeEdgeTo = makeEdgeTo;\r\nvar Node = (function () {\r\n    function Node(v, r, pos) {\r\n        this.v = v;\r\n        this.r = r;\r\n        this.pos = pos;\r\n        this.prev = makeRBTree();\r\n        this.next = makeRBTree();\r\n    }\r\n    return Node;\r\n}());\r\nvar Event = (function () {\r\n    function Event(isOpen, v, pos) {\r\n        this.isOpen = isOpen;\r\n        this.v = v;\r\n        this.pos = pos;\r\n    }\r\n    return Event;\r\n}());\r\nfunction compareEvents(a, b) {\r\n    if (a.pos > b.pos) {\r\n        return 1;\r\n    }\r\n    if (a.pos < b.pos) {\r\n        return -1;\r\n    }\r\n    if (a.isOpen) {\r\n        return -1;\r\n    }\r\n    if (b.isOpen) {\r\n        return 1;\r\n    }\r\n    return 0;\r\n}\r\nfunction makeRBTree() {\r\n    return new rbtree_1.RBTree(function (a, b) { return a.pos - b.pos; });\r\n}\r\nvar xRect = {\r\n    getCentre: function (r) { return r.cx(); },\r\n    getOpen: function (r) { return r.y; },\r\n    getClose: function (r) { return r.Y; },\r\n    getSize: function (r) { return r.width(); },\r\n    makeRect: function (open, close, center, size) { return new Rectangle(center - size / 2, center + size / 2, open, close); },\r\n    findNeighbours: findXNeighbours\r\n};\r\nvar yRect = {\r\n    getCentre: function (r) { return r.cy(); },\r\n    getOpen: function (r) { return r.x; },\r\n    getClose: function (r) { return r.X; },\r\n    getSize: function (r) { return r.height(); },\r\n    makeRect: function (open, close, center, size) { return new Rectangle(open, close, center - size / 2, center + size / 2); },\r\n    findNeighbours: findYNeighbours\r\n};\r\nfunction generateGroupConstraints(root, f, minSep, isContained) {\r\n    if (isContained === void 0) { isContained = false; }\r\n    var padding = root.padding, gn = typeof root.groups !== 'undefined' ? root.groups.length : 0, ln = typeof root.leaves !== 'undefined' ? root.leaves.length : 0, childConstraints = !gn ? []\r\n        : root.groups.reduce(function (ccs, g) { return ccs.concat(generateGroupConstraints(g, f, minSep, true)); }, []), n = (isContained ? 2 : 0) + ln + gn, vs = new Array(n), rs = new Array(n), i = 0, add = function (r, v) { rs[i] = r; vs[i++] = v; };\r\n    if (isContained) {\r\n        var b = root.bounds, c = f.getCentre(b), s = f.getSize(b) / 2, open = f.getOpen(b), close = f.getClose(b), min = c - s + padding / 2, max = c + s - padding / 2;\r\n        root.minVar.desiredPosition = min;\r\n        add(f.makeRect(open, close, min, padding), root.minVar);\r\n        root.maxVar.desiredPosition = max;\r\n        add(f.makeRect(open, close, max, padding), root.maxVar);\r\n    }\r\n    if (ln)\r\n        root.leaves.forEach(function (l) { return add(l.bounds, l.variable); });\r\n    if (gn)\r\n        root.groups.forEach(function (g) {\r\n            var b = g.bounds;\r\n            add(f.makeRect(f.getOpen(b), f.getClose(b), f.getCentre(b), f.getSize(b)), g.minVar);\r\n        });\r\n    var cs = generateConstraints(rs, vs, f, minSep);\r\n    if (gn) {\r\n        vs.forEach(function (v) { v.cOut = [], v.cIn = []; });\r\n        cs.forEach(function (c) { c.left.cOut.push(c), c.right.cIn.push(c); });\r\n        root.groups.forEach(function (g) {\r\n            var gapAdjustment = (g.padding - f.getSize(g.bounds)) / 2;\r\n            g.minVar.cIn.forEach(function (c) { return c.gap += gapAdjustment; });\r\n            g.minVar.cOut.forEach(function (c) { c.left = g.maxVar; c.gap += gapAdjustment; });\r\n        });\r\n    }\r\n    return childConstraints.concat(cs);\r\n}\r\nfunction generateConstraints(rs, vars, rect, minSep) {\r\n    var i, n = rs.length;\r\n    var N = 2 * n;\r\n    console.assert(vars.length >= n);\r\n    var events = new Array(N);\r\n    for (i = 0; i < n; ++i) {\r\n        var r = rs[i];\r\n        var v = new Node(vars[i], r, rect.getCentre(r));\r\n        events[i] = new Event(true, v, rect.getOpen(r));\r\n        events[i + n] = new Event(false, v, rect.getClose(r));\r\n    }\r\n    events.sort(compareEvents);\r\n    var cs = new Array();\r\n    var scanline = makeRBTree();\r\n    for (i = 0; i < N; ++i) {\r\n        var e = events[i];\r\n        var v = e.v;\r\n        if (e.isOpen) {\r\n            scanline.insert(v);\r\n            rect.findNeighbours(v, scanline);\r\n        }\r\n        else {\r\n            scanline.remove(v);\r\n            var makeConstraint = function (l, r) {\r\n                var sep = (rect.getSize(l.r) + rect.getSize(r.r)) / 2 + minSep;\r\n                cs.push(new vpsc_1.Constraint(l.v, r.v, sep));\r\n            };\r\n            var visitNeighbours = function (forward, reverse, mkcon) {\r\n                var u, it = v[forward].iterator();\r\n                while ((u = it[forward]()) !== null) {\r\n                    mkcon(u, v);\r\n                    u[reverse].remove(v);\r\n                }\r\n            };\r\n            visitNeighbours(\"prev\", \"next\", function (u, v) { return makeConstraint(u, v); });\r\n            visitNeighbours(\"next\", \"prev\", function (u, v) { return makeConstraint(v, u); });\r\n        }\r\n    }\r\n    console.assert(scanline.size === 0);\r\n    return cs;\r\n}\r\nfunction findXNeighbours(v, scanline) {\r\n    var f = function (forward, reverse) {\r\n        var it = scanline.findIter(v);\r\n        var u;\r\n        while ((u = it[forward]()) !== null) {\r\n            var uovervX = u.r.overlapX(v.r);\r\n            if (uovervX <= 0 || uovervX <= u.r.overlapY(v.r)) {\r\n                v[forward].insert(u);\r\n                u[reverse].insert(v);\r\n            }\r\n            if (uovervX <= 0) {\r\n                break;\r\n            }\r\n        }\r\n    };\r\n    f(\"next\", \"prev\");\r\n    f(\"prev\", \"next\");\r\n}\r\nfunction findYNeighbours(v, scanline) {\r\n    var f = function (forward, reverse) {\r\n        var u = scanline.findIter(v)[forward]();\r\n        if (u !== null && u.r.overlapX(v.r) > 0) {\r\n            v[forward].insert(u);\r\n            u[reverse].insert(v);\r\n        }\r\n    };\r\n    f(\"next\", \"prev\");\r\n    f(\"prev\", \"next\");\r\n}\r\nfunction generateXConstraints(rs, vars) {\r\n    return generateConstraints(rs, vars, xRect, 1e-6);\r\n}\r\nexports.generateXConstraints = generateXConstraints;\r\nfunction generateYConstraints(rs, vars) {\r\n    return generateConstraints(rs, vars, yRect, 1e-6);\r\n}\r\nexports.generateYConstraints = generateYConstraints;\r\nfunction generateXGroupConstraints(root) {\r\n    return generateGroupConstraints(root, xRect, 1e-6);\r\n}\r\nexports.generateXGroupConstraints = generateXGroupConstraints;\r\nfunction generateYGroupConstraints(root) {\r\n    return generateGroupConstraints(root, yRect, 1e-6);\r\n}\r\nexports.generateYGroupConstraints = generateYGroupConstraints;\r\nfunction removeOverlaps(rs) {\r\n    var vs = rs.map(function (r) { return new vpsc_1.Variable(r.cx()); });\r\n    var cs = generateXConstraints(rs, vs);\r\n    var solver = new vpsc_1.Solver(vs, cs);\r\n    solver.solve();\r\n    vs.forEach(function (v, i) { return rs[i].setXCentre(v.position()); });\r\n    vs = rs.map(function (r) { return new vpsc_1.Variable(r.cy()); });\r\n    cs = generateYConstraints(rs, vs);\r\n    solver = new vpsc_1.Solver(vs, cs);\r\n    solver.solve();\r\n    vs.forEach(function (v, i) { return rs[i].setYCentre(v.position()); });\r\n}\r\nexports.removeOverlaps = removeOverlaps;\r\nvar IndexedVariable = (function (_super) {\r\n    __extends(IndexedVariable, _super);\r\n    function IndexedVariable(index, w) {\r\n        var _this = _super.call(this, 0, w) || this;\r\n        _this.index = index;\r\n        return _this;\r\n    }\r\n    return IndexedVariable;\r\n}(vpsc_1.Variable));\r\nexports.IndexedVariable = IndexedVariable;\r\nvar Projection = (function () {\r\n    function Projection(nodes, groups, rootGroup, constraints, avoidOverlaps) {\r\n        var _this = this;\r\n        if (rootGroup === void 0) { rootGroup = null; }\r\n        if (constraints === void 0) { constraints = null; }\r\n        if (avoidOverlaps === void 0) { avoidOverlaps = false; }\r\n        this.nodes = nodes;\r\n        this.groups = groups;\r\n        this.rootGroup = rootGroup;\r\n        this.avoidOverlaps = avoidOverlaps;\r\n        this.variables = nodes.map(function (v, i) {\r\n            return v.variable = new IndexedVariable(i, 1);\r\n        });\r\n        if (constraints)\r\n            this.createConstraints(constraints);\r\n        if (avoidOverlaps && rootGroup && typeof rootGroup.groups !== 'undefined') {\r\n            nodes.forEach(function (v) {\r\n                if (!v.width || !v.height) {\r\n                    v.bounds = new Rectangle(v.x, v.x, v.y, v.y);\r\n                    return;\r\n                }\r\n                var w2 = v.width / 2, h2 = v.height / 2;\r\n                v.bounds = new Rectangle(v.x - w2, v.x + w2, v.y - h2, v.y + h2);\r\n            });\r\n            computeGroupBounds(rootGroup);\r\n            var i = nodes.length;\r\n            groups.forEach(function (g) {\r\n                _this.variables[i] = g.minVar = new IndexedVariable(i++, typeof g.stiffness !== \"undefined\" ? g.stiffness : 0.01);\r\n                _this.variables[i] = g.maxVar = new IndexedVariable(i++, typeof g.stiffness !== \"undefined\" ? g.stiffness : 0.01);\r\n            });\r\n        }\r\n    }\r\n    Projection.prototype.createSeparation = function (c) {\r\n        return new vpsc_1.Constraint(this.nodes[c.left].variable, this.nodes[c.right].variable, c.gap, typeof c.equality !== \"undefined\" ? c.equality : false);\r\n    };\r\n    Projection.prototype.makeFeasible = function (c) {\r\n        var _this = this;\r\n        if (!this.avoidOverlaps)\r\n            return;\r\n        var axis = 'x', dim = 'width';\r\n        if (c.axis === 'x')\r\n            axis = 'y', dim = 'height';\r\n        var vs = c.offsets.map(function (o) { return _this.nodes[o.node]; }).sort(function (a, b) { return a[axis] - b[axis]; });\r\n        var p = null;\r\n        vs.forEach(function (v) {\r\n            if (p) {\r\n                var nextPos = p[axis] + p[dim];\r\n                if (nextPos > v[axis]) {\r\n                    v[axis] = nextPos;\r\n                }\r\n            }\r\n            p = v;\r\n        });\r\n    };\r\n    Projection.prototype.createAlignment = function (c) {\r\n        var _this = this;\r\n        var u = this.nodes[c.offsets[0].node].variable;\r\n        this.makeFeasible(c);\r\n        var cs = c.axis === 'x' ? this.xConstraints : this.yConstraints;\r\n        c.offsets.slice(1).forEach(function (o) {\r\n            var v = _this.nodes[o.node].variable;\r\n            cs.push(new vpsc_1.Constraint(u, v, o.offset, true));\r\n        });\r\n    };\r\n    Projection.prototype.createConstraints = function (constraints) {\r\n        var _this = this;\r\n        var isSep = function (c) { return typeof c.type === 'undefined' || c.type === 'separation'; };\r\n        this.xConstraints = constraints\r\n            .filter(function (c) { return c.axis === \"x\" && isSep(c); })\r\n            .map(function (c) { return _this.createSeparation(c); });\r\n        this.yConstraints = constraints\r\n            .filter(function (c) { return c.axis === \"y\" && isSep(c); })\r\n            .map(function (c) { return _this.createSeparation(c); });\r\n        constraints\r\n            .filter(function (c) { return c.type === 'alignment'; })\r\n            .forEach(function (c) { return _this.createAlignment(c); });\r\n    };\r\n    Projection.prototype.setupVariablesAndBounds = function (x0, y0, desired, getDesired) {\r\n        this.nodes.forEach(function (v, i) {\r\n            if (v.fixed) {\r\n                v.variable.weight = v.fixedWeight ? v.fixedWeight : 1000;\r\n                desired[i] = getDesired(v);\r\n            }\r\n            else {\r\n                v.variable.weight = 1;\r\n            }\r\n            var w = (v.width || 0) / 2, h = (v.height || 0) / 2;\r\n            var ix = x0[i], iy = y0[i];\r\n            v.bounds = new Rectangle(ix - w, ix + w, iy - h, iy + h);\r\n        });\r\n    };\r\n    Projection.prototype.xProject = function (x0, y0, x) {\r\n        if (!this.rootGroup && !(this.avoidOverlaps || this.xConstraints))\r\n            return;\r\n        this.project(x0, y0, x0, x, function (v) { return v.px; }, this.xConstraints, generateXGroupConstraints, function (v) { return v.bounds.setXCentre(x[v.variable.index] = v.variable.position()); }, function (g) {\r\n            var xmin = x[g.minVar.index] = g.minVar.position();\r\n            var xmax = x[g.maxVar.index] = g.maxVar.position();\r\n            var p2 = g.padding / 2;\r\n            g.bounds.x = xmin - p2;\r\n            g.bounds.X = xmax + p2;\r\n        });\r\n    };\r\n    Projection.prototype.yProject = function (x0, y0, y) {\r\n        if (!this.rootGroup && !this.yConstraints)\r\n            return;\r\n        this.project(x0, y0, y0, y, function (v) { return v.py; }, this.yConstraints, generateYGroupConstraints, function (v) { return v.bounds.setYCentre(y[v.variable.index] = v.variable.position()); }, function (g) {\r\n            var ymin = y[g.minVar.index] = g.minVar.position();\r\n            var ymax = y[g.maxVar.index] = g.maxVar.position();\r\n            var p2 = g.padding / 2;\r\n            g.bounds.y = ymin - p2;\r\n            ;\r\n            g.bounds.Y = ymax + p2;\r\n        });\r\n    };\r\n    Projection.prototype.projectFunctions = function () {\r\n        var _this = this;\r\n        return [\r\n            function (x0, y0, x) { return _this.xProject(x0, y0, x); },\r\n            function (x0, y0, y) { return _this.yProject(x0, y0, y); }\r\n        ];\r\n    };\r\n    Projection.prototype.project = function (x0, y0, start, desired, getDesired, cs, generateConstraints, updateNodeBounds, updateGroupBounds) {\r\n        this.setupVariablesAndBounds(x0, y0, desired, getDesired);\r\n        if (this.rootGroup && this.avoidOverlaps) {\r\n            computeGroupBounds(this.rootGroup);\r\n            cs = cs.concat(generateConstraints(this.rootGroup));\r\n        }\r\n        this.solve(this.variables, cs, start, desired);\r\n        this.nodes.forEach(updateNodeBounds);\r\n        if (this.rootGroup && this.avoidOverlaps) {\r\n            this.groups.forEach(updateGroupBounds);\r\n            computeGroupBounds(this.rootGroup);\r\n        }\r\n    };\r\n    Projection.prototype.solve = function (vs, cs, starting, desired) {\r\n        var solver = new vpsc_1.Solver(vs, cs);\r\n        solver.setStartingPositions(starting);\r\n        solver.setDesiredPositions(desired);\r\n        solver.solve();\r\n    };\r\n    return Projection;\r\n}());\r\nexports.Projection = Projection;\r\n//# sourceMappingURL=data:application/json;base64,//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/webcola/dist/src/rectangle.js\n");

/***/ }),

/***/ "./node_modules/webcola/dist/src/shortestpaths.js":
/*!********************************************************!*\
  !*** ./node_modules/webcola/dist/src/shortestpaths.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar pqueue_1 = __webpack_require__(/*! ./pqueue */ \"./node_modules/webcola/dist/src/pqueue.js\");\r\nvar Neighbour = (function () {\r\n    function Neighbour(id, distance) {\r\n        this.id = id;\r\n        this.distance = distance;\r\n    }\r\n    return Neighbour;\r\n}());\r\nvar Node = (function () {\r\n    function Node(id) {\r\n        this.id = id;\r\n        this.neighbours = [];\r\n    }\r\n    return Node;\r\n}());\r\nvar QueueEntry = (function () {\r\n    function QueueEntry(node, prev, d) {\r\n        this.node = node;\r\n        this.prev = prev;\r\n        this.d = d;\r\n    }\r\n    return QueueEntry;\r\n}());\r\nvar Calculator = (function () {\r\n    function Calculator(n, es, getSourceIndex, getTargetIndex, getLength) {\r\n        this.n = n;\r\n        this.es = es;\r\n        this.neighbours = new Array(this.n);\r\n        var i = this.n;\r\n        while (i--)\r\n            this.neighbours[i] = new Node(i);\r\n        i = this.es.length;\r\n        while (i--) {\r\n            var e = this.es[i];\r\n            var u = getSourceIndex(e), v = getTargetIndex(e);\r\n            var d = getLength(e);\r\n            this.neighbours[u].neighbours.push(new Neighbour(v, d));\r\n            this.neighbours[v].neighbours.push(new Neighbour(u, d));\r\n        }\r\n    }\r\n    Calculator.prototype.DistanceMatrix = function () {\r\n        var D = new Array(this.n);\r\n        for (var i = 0; i < this.n; ++i) {\r\n            D[i] = this.dijkstraNeighbours(i);\r\n        }\r\n        return D;\r\n    };\r\n    Calculator.prototype.DistancesFromNode = function (start) {\r\n        return this.dijkstraNeighbours(start);\r\n    };\r\n    Calculator.prototype.PathFromNodeToNode = function (start, end) {\r\n        return this.dijkstraNeighbours(start, end);\r\n    };\r\n    Calculator.prototype.PathFromNodeToNodeWithPrevCost = function (start, end, prevCost) {\r\n        var q = new pqueue_1.PriorityQueue(function (a, b) { return a.d <= b.d; }), u = this.neighbours[start], qu = new QueueEntry(u, null, 0), visitedFrom = {};\r\n        q.push(qu);\r\n        while (!q.empty()) {\r\n            qu = q.pop();\r\n            u = qu.node;\r\n            if (u.id === end) {\r\n                break;\r\n            }\r\n            var i = u.neighbours.length;\r\n            while (i--) {\r\n                var neighbour = u.neighbours[i], v = this.neighbours[neighbour.id];\r\n                if (qu.prev && v.id === qu.prev.node.id)\r\n                    continue;\r\n                var viduid = v.id + ',' + u.id;\r\n                if (viduid in visitedFrom && visitedFrom[viduid] <= qu.d)\r\n                    continue;\r\n                var cc = qu.prev ? prevCost(qu.prev.node.id, u.id, v.id) : 0, t = qu.d + neighbour.distance + cc;\r\n                visitedFrom[viduid] = t;\r\n                q.push(new QueueEntry(v, qu, t));\r\n            }\r\n        }\r\n        var path = [];\r\n        while (qu.prev) {\r\n            qu = qu.prev;\r\n            path.push(qu.node.id);\r\n        }\r\n        return path;\r\n    };\r\n    Calculator.prototype.dijkstraNeighbours = function (start, dest) {\r\n        if (dest === void 0) { dest = -1; }\r\n        var q = new pqueue_1.PriorityQueue(function (a, b) { return a.d <= b.d; }), i = this.neighbours.length, d = new Array(i);\r\n        while (i--) {\r\n            var node = this.neighbours[i];\r\n            node.d = i === start ? 0 : Number.POSITIVE_INFINITY;\r\n            node.q = q.push(node);\r\n        }\r\n        while (!q.empty()) {\r\n            var u = q.pop();\r\n            d[u.id] = u.d;\r\n            if (u.id === dest) {\r\n                var path = [];\r\n                var v = u;\r\n                while (typeof v.prev !== 'undefined') {\r\n                    path.push(v.prev.id);\r\n                    v = v.prev;\r\n                }\r\n                return path;\r\n            }\r\n            i = u.neighbours.length;\r\n            while (i--) {\r\n                var neighbour = u.neighbours[i];\r\n                var v = this.neighbours[neighbour.id];\r\n                var t = u.d + neighbour.distance;\r\n                if (u.d !== Number.MAX_VALUE && v.d > t) {\r\n                    v.d = t;\r\n                    v.prev = u;\r\n                    q.reduceKey(v.q, v, function (e, q) { return e.q = q; });\r\n                }\r\n            }\r\n        }\r\n        return d;\r\n    };\r\n    return Calculator;\r\n}());\r\nexports.Calculator = Calculator;\r\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2hvcnRlc3RwYXRocy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL1dlYkNvbGEvc3JjL3Nob3J0ZXN0cGF0aHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxtQ0FBbUQ7QUFFbkQ7SUFDSSxtQkFBbUIsRUFBVSxFQUFTLFFBQWdCO1FBQW5DLE9BQUUsR0FBRixFQUFFLENBQVE7UUFBUyxhQUFRLEdBQVIsUUFBUSxDQUFRO0lBQUksQ0FBQztJQUMvRCxnQkFBQztBQUFELENBQUMsQUFGRCxJQUVDO0FBRUQ7SUFDSSxjQUFtQixFQUFVO1FBQVYsT0FBRSxHQUFGLEVBQUUsQ0FBUTtRQUN6QixJQUFJLENBQUMsVUFBVSxHQUFHLEVBQUUsQ0FBQztJQUN6QixDQUFDO0lBS0wsV0FBQztBQUFELENBQUMsQUFSRCxJQVFDO0FBRUQ7SUFDSSxvQkFBbUIsSUFBVSxFQUFTLElBQWdCLEVBQVMsQ0FBUztRQUFyRCxTQUFJLEdBQUosSUFBSSxDQUFNO1FBQVMsU0FBSSxHQUFKLElBQUksQ0FBWTtRQUFTLE1BQUMsR0FBRCxDQUFDLENBQVE7SUFBRyxDQUFDO0lBQ2hGLGlCQUFDO0FBQUQsQ0FBQyxBQUZELElBRUM7QUFTRDtJQUdJLG9CQUFtQixDQUFTLEVBQVMsRUFBVSxFQUFFLGNBQW1DLEVBQUUsY0FBbUMsRUFBRSxTQUE4QjtRQUF0SSxNQUFDLEdBQUQsQ0FBQyxDQUFRO1FBQVMsT0FBRSxHQUFGLEVBQUUsQ0FBUTtRQUMzQyxJQUFJLENBQUMsVUFBVSxHQUFHLElBQUksS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNwQyxJQUFJLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDO1FBQUMsT0FBTyxDQUFDLEVBQUU7WUFBRSxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBRTdELENBQUMsR0FBRyxJQUFJLENBQUMsRUFBRSxDQUFDLE1BQU0sQ0FBQztRQUFDLE9BQU8sQ0FBQyxFQUFFLEVBQUU7WUFDNUIsSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUNuQixJQUFJLENBQUMsR0FBVyxjQUFjLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxHQUFXLGNBQWMsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUNqRSxJQUFJLENBQUMsR0FBRyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDckIsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLElBQUksU0FBUyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ3hELElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxJQUFJLFNBQVMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztTQUMzRDtJQUNMLENBQUM7SUFVRCxtQ0FBYyxHQUFkO1FBQ0ksSUFBSSxDQUFDLEdBQUcsSUFBSSxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQzFCLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxFQUFFO1lBQzdCLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsa0JBQWtCLENBQUMsQ0FBQyxDQUFDLENBQUM7U0FDckM7UUFDRCxPQUFPLENBQUMsQ0FBQztJQUNiLENBQUM7SUFRRCxzQ0FBaUIsR0FBakIsVUFBa0IsS0FBYTtRQUMzQixPQUFPLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUMxQyxDQUFDO0lBRUQsdUNBQWtCLEdBQWxCLFVBQW1CLEtBQWEsRUFBRSxHQUFXO1FBQ3pDLE9BQU8sSUFBSSxDQUFDLGtCQUFrQixDQUFDLEtBQUssRUFBRSxHQUFHLENBQUMsQ0FBQztJQUMvQyxDQUFDO0lBS0QsbURBQThCLEdBQTlCLFVBQ0ksS0FBYSxFQUNiLEdBQVcsRUFDWCxRQUE4QztRQUU5QyxJQUFJLENBQUMsR0FBRyxJQUFJLHNCQUFhLENBQWEsVUFBQyxDQUFDLEVBQUUsQ0FBQyxJQUFLLE9BQUEsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFWLENBQVUsQ0FBQyxFQUN2RCxDQUFDLEdBQVMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsRUFDaEMsRUFBRSxHQUFlLElBQUksVUFBVSxDQUFDLENBQUMsRUFBQyxJQUFJLEVBQUMsQ0FBQyxDQUFDLEVBQ3pDLFdBQVcsR0FBRyxFQUFFLENBQUM7UUFDckIsQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUNYLE9BQU0sQ0FBQyxDQUFDLENBQUMsS0FBSyxFQUFFLEVBQUU7WUFDZCxFQUFFLEdBQUcsQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDO1lBQ2IsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUM7WUFDWixJQUFJLENBQUMsQ0FBQyxFQUFFLEtBQUssR0FBRyxFQUFFO2dCQUNkLE1BQU07YUFDVDtZQUNELElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFDO1lBQUMsT0FBTyxDQUFDLEVBQUUsRUFBRTtnQkFDckMsSUFBSSxTQUFTLEdBQUcsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsRUFDM0IsQ0FBQyxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsU0FBUyxDQUFDLEVBQUUsQ0FBQyxDQUFDO2dCQUd0QyxJQUFJLEVBQUUsQ0FBQyxJQUFJLElBQUksQ0FBQyxDQUFDLEVBQUUsS0FBSyxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFO29CQUFFLFNBQVM7Z0JBSWxELElBQUksTUFBTSxHQUFHLENBQUMsQ0FBQyxFQUFFLEdBQUcsR0FBRyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUM7Z0JBQy9CLElBQUcsTUFBTSxJQUFJLFdBQVcsSUFBSSxXQUFXLENBQUMsTUFBTSxDQUFDLElBQUksRUFBRSxDQUFDLENBQUM7b0JBQ25ELFNBQVM7Z0JBRWIsSUFBSSxFQUFFLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUN4RCxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsR0FBRyxTQUFTLENBQUMsUUFBUSxHQUFHLEVBQUUsQ0FBQztnQkFHdkMsV0FBVyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQztnQkFDeEIsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLFVBQVUsQ0FBQyxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7YUFDcEM7U0FDSjtRQUNELElBQUksSUFBSSxHQUFZLEVBQUUsQ0FBQztRQUN2QixPQUFPLEVBQUUsQ0FBQyxJQUFJLEVBQUU7WUFDWixFQUFFLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQztZQUNiLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQztTQUN6QjtRQUNELE9BQU8sSUFBSSxDQUFDO0lBQ2hCLENBQUM7SUFFTyx1Q0FBa0IsR0FBMUIsVUFBMkIsS0FBYSxFQUFFLElBQWlCO1FBQWpCLHFCQUFBLEVBQUEsUUFBZ0IsQ0FBQztRQUN2RCxJQUFJLENBQUMsR0FBRyxJQUFJLHNCQUFhLENBQU8sVUFBQyxDQUFDLEVBQUUsQ0FBQyxJQUFLLE9BQUEsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFWLENBQVUsQ0FBQyxFQUNqRCxDQUFDLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxNQUFNLEVBQzFCLENBQUMsR0FBYSxJQUFJLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUMvQixPQUFPLENBQUMsRUFBRSxFQUFFO1lBQ1IsSUFBSSxJQUFJLEdBQVMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUNwQyxJQUFJLENBQUMsQ0FBQyxHQUFHLENBQUMsS0FBSyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLGlCQUFpQixDQUFDO1lBQ3BELElBQUksQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztTQUN6QjtRQUNELE9BQU8sQ0FBQyxDQUFDLENBQUMsS0FBSyxFQUFFLEVBQUU7WUFFZixJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUM7WUFDaEIsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ2QsSUFBSSxDQUFDLENBQUMsRUFBRSxLQUFLLElBQUksRUFBRTtnQkFDZixJQUFJLElBQUksR0FBYSxFQUFFLENBQUM7Z0JBQ3hCLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztnQkFDVixPQUFPLE9BQU8sQ0FBQyxDQUFDLElBQUksS0FBSyxXQUFXLEVBQUU7b0JBQ2xDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQztvQkFDckIsQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUM7aUJBQ2Q7Z0JBQ0QsT0FBTyxJQUFJLENBQUM7YUFDZjtZQUNELENBQUMsR0FBRyxDQUFDLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQztZQUFDLE9BQU8sQ0FBQyxFQUFFLEVBQUU7Z0JBQ2pDLElBQUksU0FBUyxHQUFHLENBQUMsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQ2hDLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsU0FBUyxDQUFDLEVBQUUsQ0FBQyxDQUFDO2dCQUN0QyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLFNBQVMsQ0FBQyxRQUFRLENBQUM7Z0JBQ2pDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxNQUFNLENBQUMsU0FBUyxJQUFJLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxFQUFFO29CQUNyQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztvQkFDUixDQUFDLENBQUMsSUFBSSxHQUFHLENBQUMsQ0FBQztvQkFDWCxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLFVBQUMsQ0FBQyxFQUFDLENBQUMsSUFBRyxPQUFBLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxFQUFQLENBQU8sQ0FBQyxDQUFDO2lCQUN2QzthQUNKO1NBQ0o7UUFDRCxPQUFPLENBQUMsQ0FBQztJQUNiLENBQUM7SUFDTCxpQkFBQztBQUFELENBQUMsQUFqSUQsSUFpSUM7QUFqSVksZ0NBQVUifQ==//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/webcola/dist/src/shortestpaths.js\n");

/***/ }),

/***/ "./node_modules/webcola/dist/src/vpsc.js":
/*!***********************************************!*\
  !*** ./node_modules/webcola/dist/src/vpsc.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar PositionStats = (function () {\r\n    function PositionStats(scale) {\r\n        this.scale = scale;\r\n        this.AB = 0;\r\n        this.AD = 0;\r\n        this.A2 = 0;\r\n    }\r\n    PositionStats.prototype.addVariable = function (v) {\r\n        var ai = this.scale / v.scale;\r\n        var bi = v.offset / v.scale;\r\n        var wi = v.weight;\r\n        this.AB += wi * ai * bi;\r\n        this.AD += wi * ai * v.desiredPosition;\r\n        this.A2 += wi * ai * ai;\r\n    };\r\n    PositionStats.prototype.getPosn = function () {\r\n        return (this.AD - this.AB) / this.A2;\r\n    };\r\n    return PositionStats;\r\n}());\r\nexports.PositionStats = PositionStats;\r\nvar Constraint = (function () {\r\n    function Constraint(left, right, gap, equality) {\r\n        if (equality === void 0) { equality = false; }\r\n        this.left = left;\r\n        this.right = right;\r\n        this.gap = gap;\r\n        this.equality = equality;\r\n        this.active = false;\r\n        this.unsatisfiable = false;\r\n        this.left = left;\r\n        this.right = right;\r\n        this.gap = gap;\r\n        this.equality = equality;\r\n    }\r\n    Constraint.prototype.slack = function () {\r\n        return this.unsatisfiable ? Number.MAX_VALUE\r\n            : this.right.scale * this.right.position() - this.gap\r\n                - this.left.scale * this.left.position();\r\n    };\r\n    return Constraint;\r\n}());\r\nexports.Constraint = Constraint;\r\nvar Variable = (function () {\r\n    function Variable(desiredPosition, weight, scale) {\r\n        if (weight === void 0) { weight = 1; }\r\n        if (scale === void 0) { scale = 1; }\r\n        this.desiredPosition = desiredPosition;\r\n        this.weight = weight;\r\n        this.scale = scale;\r\n        this.offset = 0;\r\n    }\r\n    Variable.prototype.dfdv = function () {\r\n        return 2.0 * this.weight * (this.position() - this.desiredPosition);\r\n    };\r\n    Variable.prototype.position = function () {\r\n        return (this.block.ps.scale * this.block.posn + this.offset) / this.scale;\r\n    };\r\n    Variable.prototype.visitNeighbours = function (prev, f) {\r\n        var ff = function (c, next) { return c.active && prev !== next && f(c, next); };\r\n        this.cOut.forEach(function (c) { return ff(c, c.right); });\r\n        this.cIn.forEach(function (c) { return ff(c, c.left); });\r\n    };\r\n    return Variable;\r\n}());\r\nexports.Variable = Variable;\r\nvar Block = (function () {\r\n    function Block(v) {\r\n        this.vars = [];\r\n        v.offset = 0;\r\n        this.ps = new PositionStats(v.scale);\r\n        this.addVariable(v);\r\n    }\r\n    Block.prototype.addVariable = function (v) {\r\n        v.block = this;\r\n        this.vars.push(v);\r\n        this.ps.addVariable(v);\r\n        this.posn = this.ps.getPosn();\r\n    };\r\n    Block.prototype.updateWeightedPosition = function () {\r\n        this.ps.AB = this.ps.AD = this.ps.A2 = 0;\r\n        for (var i = 0, n = this.vars.length; i < n; ++i)\r\n            this.ps.addVariable(this.vars[i]);\r\n        this.posn = this.ps.getPosn();\r\n    };\r\n    Block.prototype.compute_lm = function (v, u, postAction) {\r\n        var _this = this;\r\n        var dfdv = v.dfdv();\r\n        v.visitNeighbours(u, function (c, next) {\r\n            var _dfdv = _this.compute_lm(next, v, postAction);\r\n            if (next === c.right) {\r\n                dfdv += _dfdv * c.left.scale;\r\n                c.lm = _dfdv;\r\n            }\r\n            else {\r\n                dfdv += _dfdv * c.right.scale;\r\n                c.lm = -_dfdv;\r\n            }\r\n            postAction(c);\r\n        });\r\n        return dfdv / v.scale;\r\n    };\r\n    Block.prototype.populateSplitBlock = function (v, prev) {\r\n        var _this = this;\r\n        v.visitNeighbours(prev, function (c, next) {\r\n            next.offset = v.offset + (next === c.right ? c.gap : -c.gap);\r\n            _this.addVariable(next);\r\n            _this.populateSplitBlock(next, v);\r\n        });\r\n    };\r\n    Block.prototype.traverse = function (visit, acc, v, prev) {\r\n        var _this = this;\r\n        if (v === void 0) { v = this.vars[0]; }\r\n        if (prev === void 0) { prev = null; }\r\n        v.visitNeighbours(prev, function (c, next) {\r\n            acc.push(visit(c));\r\n            _this.traverse(visit, acc, next, v);\r\n        });\r\n    };\r\n    Block.prototype.findMinLM = function () {\r\n        var m = null;\r\n        this.compute_lm(this.vars[0], null, function (c) {\r\n            if (!c.equality && (m === null || c.lm < m.lm))\r\n                m = c;\r\n        });\r\n        return m;\r\n    };\r\n    Block.prototype.findMinLMBetween = function (lv, rv) {\r\n        this.compute_lm(lv, null, function () { });\r\n        var m = null;\r\n        this.findPath(lv, null, rv, function (c, next) {\r\n            if (!c.equality && c.right === next && (m === null || c.lm < m.lm))\r\n                m = c;\r\n        });\r\n        return m;\r\n    };\r\n    Block.prototype.findPath = function (v, prev, to, visit) {\r\n        var _this = this;\r\n        var endFound = false;\r\n        v.visitNeighbours(prev, function (c, next) {\r\n            if (!endFound && (next === to || _this.findPath(next, v, to, visit))) {\r\n                endFound = true;\r\n                visit(c, next);\r\n            }\r\n        });\r\n        return endFound;\r\n    };\r\n    Block.prototype.isActiveDirectedPathBetween = function (u, v) {\r\n        if (u === v)\r\n            return true;\r\n        var i = u.cOut.length;\r\n        while (i--) {\r\n            var c = u.cOut[i];\r\n            if (c.active && this.isActiveDirectedPathBetween(c.right, v))\r\n                return true;\r\n        }\r\n        return false;\r\n    };\r\n    Block.split = function (c) {\r\n        c.active = false;\r\n        return [Block.createSplitBlock(c.left), Block.createSplitBlock(c.right)];\r\n    };\r\n    Block.createSplitBlock = function (startVar) {\r\n        var b = new Block(startVar);\r\n        b.populateSplitBlock(startVar, null);\r\n        return b;\r\n    };\r\n    Block.prototype.splitBetween = function (vl, vr) {\r\n        var c = this.findMinLMBetween(vl, vr);\r\n        if (c !== null) {\r\n            var bs = Block.split(c);\r\n            return { constraint: c, lb: bs[0], rb: bs[1] };\r\n        }\r\n        return null;\r\n    };\r\n    Block.prototype.mergeAcross = function (b, c, dist) {\r\n        c.active = true;\r\n        for (var i = 0, n = b.vars.length; i < n; ++i) {\r\n            var v = b.vars[i];\r\n            v.offset += dist;\r\n            this.addVariable(v);\r\n        }\r\n        this.posn = this.ps.getPosn();\r\n    };\r\n    Block.prototype.cost = function () {\r\n        var sum = 0, i = this.vars.length;\r\n        while (i--) {\r\n            var v = this.vars[i], d = v.position() - v.desiredPosition;\r\n            sum += d * d * v.weight;\r\n        }\r\n        return sum;\r\n    };\r\n    return Block;\r\n}());\r\nexports.Block = Block;\r\nvar Blocks = (function () {\r\n    function Blocks(vs) {\r\n        this.vs = vs;\r\n        var n = vs.length;\r\n        this.list = new Array(n);\r\n        while (n--) {\r\n            var b = new Block(vs[n]);\r\n            this.list[n] = b;\r\n            b.blockInd = n;\r\n        }\r\n    }\r\n    Blocks.prototype.cost = function () {\r\n        var sum = 0, i = this.list.length;\r\n        while (i--)\r\n            sum += this.list[i].cost();\r\n        return sum;\r\n    };\r\n    Blocks.prototype.insert = function (b) {\r\n        b.blockInd = this.list.length;\r\n        this.list.push(b);\r\n    };\r\n    Blocks.prototype.remove = function (b) {\r\n        var last = this.list.length - 1;\r\n        var swapBlock = this.list[last];\r\n        this.list.length = last;\r\n        if (b !== swapBlock) {\r\n            this.list[b.blockInd] = swapBlock;\r\n            swapBlock.blockInd = b.blockInd;\r\n        }\r\n    };\r\n    Blocks.prototype.merge = function (c) {\r\n        var l = c.left.block, r = c.right.block;\r\n        var dist = c.right.offset - c.left.offset - c.gap;\r\n        if (l.vars.length < r.vars.length) {\r\n            r.mergeAcross(l, c, dist);\r\n            this.remove(l);\r\n        }\r\n        else {\r\n            l.mergeAcross(r, c, -dist);\r\n            this.remove(r);\r\n        }\r\n    };\r\n    Blocks.prototype.forEach = function (f) {\r\n        this.list.forEach(f);\r\n    };\r\n    Blocks.prototype.updateBlockPositions = function () {\r\n        this.list.forEach(function (b) { return b.updateWeightedPosition(); });\r\n    };\r\n    Blocks.prototype.split = function (inactive) {\r\n        var _this = this;\r\n        this.updateBlockPositions();\r\n        this.list.forEach(function (b) {\r\n            var v = b.findMinLM();\r\n            if (v !== null && v.lm < Solver.LAGRANGIAN_TOLERANCE) {\r\n                b = v.left.block;\r\n                Block.split(v).forEach(function (nb) { return _this.insert(nb); });\r\n                _this.remove(b);\r\n                inactive.push(v);\r\n            }\r\n        });\r\n    };\r\n    return Blocks;\r\n}());\r\nexports.Blocks = Blocks;\r\nvar Solver = (function () {\r\n    function Solver(vs, cs) {\r\n        this.vs = vs;\r\n        this.cs = cs;\r\n        this.vs = vs;\r\n        vs.forEach(function (v) {\r\n            v.cIn = [], v.cOut = [];\r\n        });\r\n        this.cs = cs;\r\n        cs.forEach(function (c) {\r\n            c.left.cOut.push(c);\r\n            c.right.cIn.push(c);\r\n        });\r\n        this.inactive = cs.map(function (c) { c.active = false; return c; });\r\n        this.bs = null;\r\n    }\r\n    Solver.prototype.cost = function () {\r\n        return this.bs.cost();\r\n    };\r\n    Solver.prototype.setStartingPositions = function (ps) {\r\n        this.inactive = this.cs.map(function (c) { c.active = false; return c; });\r\n        this.bs = new Blocks(this.vs);\r\n        this.bs.forEach(function (b, i) { return b.posn = ps[i]; });\r\n    };\r\n    Solver.prototype.setDesiredPositions = function (ps) {\r\n        this.vs.forEach(function (v, i) { return v.desiredPosition = ps[i]; });\r\n    };\r\n    Solver.prototype.mostViolated = function () {\r\n        var minSlack = Number.MAX_VALUE, v = null, l = this.inactive, n = l.length, deletePoint = n;\r\n        for (var i = 0; i < n; ++i) {\r\n            var c = l[i];\r\n            if (c.unsatisfiable)\r\n                continue;\r\n            var slack = c.slack();\r\n            if (c.equality || slack < minSlack) {\r\n                minSlack = slack;\r\n                v = c;\r\n                deletePoint = i;\r\n                if (c.equality)\r\n                    break;\r\n            }\r\n        }\r\n        if (deletePoint !== n &&\r\n            (minSlack < Solver.ZERO_UPPERBOUND && !v.active || v.equality)) {\r\n            l[deletePoint] = l[n - 1];\r\n            l.length = n - 1;\r\n        }\r\n        return v;\r\n    };\r\n    Solver.prototype.satisfy = function () {\r\n        if (this.bs == null) {\r\n            this.bs = new Blocks(this.vs);\r\n        }\r\n        this.bs.split(this.inactive);\r\n        var v = null;\r\n        while ((v = this.mostViolated()) && (v.equality || v.slack() < Solver.ZERO_UPPERBOUND && !v.active)) {\r\n            var lb = v.left.block, rb = v.right.block;\r\n            if (lb !== rb) {\r\n                this.bs.merge(v);\r\n            }\r\n            else {\r\n                if (lb.isActiveDirectedPathBetween(v.right, v.left)) {\r\n                    v.unsatisfiable = true;\r\n                    continue;\r\n                }\r\n                var split = lb.splitBetween(v.left, v.right);\r\n                if (split !== null) {\r\n                    this.bs.insert(split.lb);\r\n                    this.bs.insert(split.rb);\r\n                    this.bs.remove(lb);\r\n                    this.inactive.push(split.constraint);\r\n                }\r\n                else {\r\n                    v.unsatisfiable = true;\r\n                    continue;\r\n                }\r\n                if (v.slack() >= 0) {\r\n                    this.inactive.push(v);\r\n                }\r\n                else {\r\n                    this.bs.merge(v);\r\n                }\r\n            }\r\n        }\r\n    };\r\n    Solver.prototype.solve = function () {\r\n        this.satisfy();\r\n        var lastcost = Number.MAX_VALUE, cost = this.bs.cost();\r\n        while (Math.abs(lastcost - cost) > 0.0001) {\r\n            this.satisfy();\r\n            lastcost = cost;\r\n            cost = this.bs.cost();\r\n        }\r\n        return cost;\r\n    };\r\n    Solver.LAGRANGIAN_TOLERANCE = -1e-4;\r\n    Solver.ZERO_UPPERBOUND = -1e-10;\r\n    return Solver;\r\n}());\r\nexports.Solver = Solver;\r\nfunction removeOverlapInOneDimension(spans, lowerBound, upperBound) {\r\n    var vs = spans.map(function (s) { return new Variable(s.desiredCenter); });\r\n    var cs = [];\r\n    var n = spans.length;\r\n    for (var i = 0; i < n - 1; i++) {\r\n        var left = spans[i], right = spans[i + 1];\r\n        cs.push(new Constraint(vs[i], vs[i + 1], (left.size + right.size) / 2));\r\n    }\r\n    var leftMost = vs[0], rightMost = vs[n - 1], leftMostSize = spans[0].size / 2, rightMostSize = spans[n - 1].size / 2;\r\n    var vLower = null, vUpper = null;\r\n    if (lowerBound) {\r\n        vLower = new Variable(lowerBound, leftMost.weight * 1000);\r\n        vs.push(vLower);\r\n        cs.push(new Constraint(vLower, leftMost, leftMostSize));\r\n    }\r\n    if (upperBound) {\r\n        vUpper = new Variable(upperBound, rightMost.weight * 1000);\r\n        vs.push(vUpper);\r\n        cs.push(new Constraint(rightMost, vUpper, rightMostSize));\r\n    }\r\n    var solver = new Solver(vs, cs);\r\n    solver.solve();\r\n    return {\r\n        newCenters: vs.slice(0, spans.length).map(function (v) { return v.position(); }),\r\n        lowerBound: vLower ? vLower.position() : leftMost.position() - leftMostSize,\r\n        upperBound: vUpper ? vUpper.position() : rightMost.position() + rightMostSize\r\n    };\r\n}\r\nexports.removeOverlapInOneDimension = removeOverlapInOneDimension;\r\n//# sourceMappingURL=data:application/json;base64,# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/webcola/dist/src/vpsc.js\n");

/***/ }),

/***/ "./src/controller/Config.js":
/*!**********************************!*\
  !*** ./src/controller/Config.js ***!
  \**********************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("var Config = {\n  svgns: \"http://www.w3.org/2000/svg\",\n  // namespace for svg elements\n  xlinkNS: \"http://www.w3.org/1999/xlink\",\n  // namespace for xlink, for use/defs elements\n  highlightColour: \"#ffff99\",\n  //\"#fdc086\");\n  selectedColour: \"#ffff99\",\n  Polymer: {\n    STICKHEIGHT: 20,\n    MAXSIZE: 20,\n    transitionTime: 650\n  }\n};\nmodule.exports = Config;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvY29udHJvbGxlci9Db25maWcuanMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly94aU5FVC8uL3NyYy9jb250cm9sbGVyL0NvbmZpZy5qcz9kMThlIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IENvbmZpZyA9IHtcblxuICAgIHN2Z25zOiBcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIsIC8vIG5hbWVzcGFjZSBmb3Igc3ZnIGVsZW1lbnRzXG4gICAgeGxpbmtOUzogXCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rXCIsIC8vIG5hbWVzcGFjZSBmb3IgeGxpbmssIGZvciB1c2UvZGVmcyBlbGVtZW50c1xuXG4gICAgaGlnaGxpZ2h0Q29sb3VyOiBcIiNmZmZmOTlcIiwgLy9cIiNmZGMwODZcIik7XG4gICAgc2VsZWN0ZWRDb2xvdXI6IFwiI2ZmZmY5OVwiLFxuXG4gICAgUG9seW1lcjoge1xuICAgICAgICBTVElDS0hFSUdIVDogMjAsXG4gICAgICAgIE1BWFNJWkU6IDIwLFxuICAgICAgICB0cmFuc2l0aW9uVGltZTogNjUwXG4gICAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBDb25maWc7XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBRUE7QUFBQTtBQUNBO0FBQUE7QUFFQTtBQUFBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUhBO0FBUkE7QUFlQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/controller/Config.js\n");

/***/ }),

/***/ "./src/controller/Controller.js":
/*!**************************************!*\
  !*** ./src/controller/Controller.js ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("//    xiNET Interaction Viewer\n//    Copyright 2013 Rappsilber Laboratory, University of Edinburgh\n//\n//    This product includes software developed at\n//    the Rappsilber Laboratory (http://www.rappsilberlab.org/).\n//\n//    author: Colin Combe\n//\n//    Controller.js\n\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nvar xiNET = {};\n\nvar d3 = __webpack_require__(/*! d3 */ \"./node_modules/d3/d3.js\");\n\nvar colorbrewer = __webpack_require__(/*! colorbrewer */ \"./node_modules/colorbrewer/index.js\");\n\nvar cola = __webpack_require__(/*! webcola */ \"./node_modules/webcola/dist/index.js\");\n\nvar xiNET_Storage = __webpack_require__(/*! ./xiNET_Storage */ \"./src/controller/xiNET_Storage.js\");\n\nvar Annotation = __webpack_require__(/*! ../model/interactor/Annotation */ \"./src/model/interactor/Annotation.js\");\n\nvar Interactor = __webpack_require__(/*! ../model/interactor/Interactor */ \"./src/model/interactor/Interactor.js\");\n\nvar Protein = __webpack_require__(/*! ../model/interactor/Protein */ \"./src/model/interactor/Protein.js\");\n\nvar BioactiveEntity = __webpack_require__(/*! ../model/interactor/BioactiveEntity */ \"./src/model/interactor/BioactiveEntity.js\");\n\nvar Gene = __webpack_require__(/*! ../model/interactor/Gene */ \"./src/model/interactor/Gene.js\");\n\nvar DNA = __webpack_require__(/*! ../model/interactor/DNA */ \"./src/model/interactor/DNA.js\");\n\nvar RNA = __webpack_require__(/*! ../model/interactor/RNA */ \"./src/model/interactor/RNA.js\");\n\nvar Complex = __webpack_require__(/*! ../model/interactor/Complex */ \"./src/model/interactor/Complex.js\");\n\nvar Complex_symbol = __webpack_require__(/*! ../model/interactor/Complex_symbol */ \"./src/model/interactor/Complex_symbol.js\");\n\nvar MoleculeSet = __webpack_require__(/*! ../model/interactor/MoleculeSet */ \"./src/model/interactor/MoleculeSet.js\");\n\nvar NaryLink = __webpack_require__(/*! ../model/link/NaryLink */ \"./src/model/link/NaryLink.js\");\n\nvar SequenceLink = __webpack_require__(/*! ../model/link/SequenceLink */ \"./src/model/link/SequenceLink.js\");\n\nvar SequenceFeature = __webpack_require__(/*! ./../model/SequenceFeature */ \"./src/model/SequenceFeature.js\");\n\nvar BinaryLink = __webpack_require__(/*! ../model/link/BinaryLink */ \"./src/model/link/BinaryLink.js\");\n\nvar UnaryLink = __webpack_require__(/*! ../model/link/UnaryLink */ \"./src/model/link/UnaryLink.js\");\n\nvar Expand = __webpack_require__(/*! ./Expand */ \"./src/controller/Expand.js\");\n\nvar Config = __webpack_require__(/*! ./Config */ \"./src/controller/Config.js\");\n\nxiNET.Controller = function (targetDiv, debug) {\n  this.debug = !!debug;\n\n  if (typeof targetDiv === \"string\") {\n    this.el = document.getElementById(targetDiv);\n  } else {\n    this.el = targetDiv;\n  }\n\n  this.STATES = {};\n  this.STATES.MOUSE_UP = 0; //start state, also set when mouse up on svgElement\n\n  this.STATES.PANNING = 1; //set by mouse down on svgElement - left button, no shift or controller\n\n  this.STATES.DRAGGING = 2; //set by mouse down on Protein or Link\n\n  this.STATES.ROTATING = 3; //set by mouse down on Rotator, drag?\n\n  this.STATES.SELECTING = 4; //set by mouse down on svgElement- right button or left button shift or controller, drag\n  //avoids prob with 'save - web page complete'\n\n  d3.select(this.el).selectAll(\"*\").remove();\n  var customMenuSel = d3.select(this.el).append(\"div\").classed(\"custom-menu-margin\", true).append(\"div\").classed(\"custom-menu\", true).append(\"ul\");\n  var self = this;\n  var collapse = customMenuSel.append(\"li\").classed(\"collapse\", true); //.append(\"button\");\n\n  collapse.text(\"Collapse\");\n\n  collapse[0][0].onclick = function (evt) {\n    self.collapseProtein(evt);\n  };\n\n  var scaleButtonsListItemSel = customMenuSel.append(\"li\").text(\"Scale: \");\n  this.barScales = [0.01, 0.2, 1, 2, 4, 8];\n  var scaleButtons = scaleButtonsListItemSel.selectAll(\"ul.custom-menu\").data(this.barScales).enter().append(\"div\").attr(\"class\", \"barScale\").append(\"label\");\n  scaleButtons.append(\"span\").text(function (d) {\n    if (d === 8) return \"AA\";else return d;\n  });\n  scaleButtons.append(\"input\") // .attr (\"id\", function(d) { return d*100; })\n  .attr(\"class\", function (d) {\n    return \"scaleButton scaleButton_\" + d * 100;\n  }).attr(\"name\", \"scaleButtons\").attr(\"type\", \"radio\").on(\"change\", function (d) {\n    self.preventDefaultsAndStopPropagation(d);\n    self.contextMenuProt.setStickScale(d, self.contextMenuPoint);\n  });\n  var contextMenu = d3.select(\".custom-menu-margin\").node();\n\n  contextMenu.onmouseout = function (evt) {\n    var e = evt.relatedTarget;\n\n    do {\n      if (e === this) return;\n      e = e.parentNode;\n    } while (e);\n\n    self.contextMenuProt = null;\n    d3.select(this).style(\"display\", \"none\");\n  }; //create SVG elemnent\n\n\n  this.svgElement = document.createElementNS(Config.svgns, \"svg\");\n  this.svgElement.setAttribute('id', 'complexViewerSVG'); //add listeners\n\n  this.svgElement.onmousedown = function (evt) {\n    self.mouseDown(evt);\n  };\n\n  this.svgElement.onmousemove = function (evt) {\n    self.mouseMove(evt);\n  };\n\n  this.svgElement.onmouseup = function (evt) {\n    self.mouseUp(evt);\n  };\n\n  this.svgElement.onmouseout = function (evt) {\n    self.hideTooltip(evt);\n  };\n\n  this.lastMouseUp = new Date().getTime();\n  /*this.svgElement.ontouchstart = function(evt) {\n      self.touchStart(evt);\n  };\n  this.svgElement.ontouchmove = function(evt) {\n      self.touchMove(evt);\n  };\n  this.svgElement.ontouchend = function(evt) {\n      self.touchEnd(evt);\n  };\n  */\n\n  this.el.oncontextmenu = function (evt) {\n    if (evt.preventDefault) {\n      // necessary for addEventListener, works with traditional\n      evt.preventDefault();\n    }\n\n    evt.returnValue = false; // necessary for attachEvent, works with traditional\n\n    return false; // works with traditional, not with attachEvent or addEventListener\n  }; //legend changed callbacks\n\n\n  this.legendCallbacks = [];\n  this.el.appendChild(this.svgElement); // various groups needed\n\n  this.container = document.createElementNS(Config.svgns, \"g\");\n  this.container.setAttribute(\"id\", \"container\");\n  var svg = d3.select(this.svgElement);\n  this.defs = svg.append('defs');\n  this.createHatchedFill('checkers_uncertain', 'black'); //markers\n\n  var data = [{\n    id: 1,\n    name: 'diamond',\n    path: 'M 0,-7.0710768 L  0,7.0710589 L 7.0710462,0  z',\n    viewbox: '-15 -15 25 25',\n    transform: 'scale(1.5) translate(-5,0)',\n    color: 'black'\n  }];\n  this.defs.selectAll('marker').data(data).enter().append('svg:marker').attr('id', function (d) {\n    return 'marker_' + d.name;\n  }).attr('markerHeight', 15).attr('markerWidth', 15).attr('markerUnits', 'userSpaceOnUse').attr('orient', 'auto').attr('refX', 0).attr('refY', 0).attr('viewBox', function (d) {\n    return d.viewbox;\n  }).append('svg:path').attr('d', function (d) {\n    return d.path;\n  }).attr('fill', function (d) {\n    return d.color;\n  }).attr('transform', function (d) {\n    return d.transform;\n  });\n  this.acknowledgement = document.createElementNS(Config.svgns, \"g\");\n  var ackText = document.createElementNS(Config.svgns, \"text\");\n  ackText.innerHTML = \"<a href='https://academic.oup.com/bioinformatics/article/33/22/3673/4061280' target='_blank'><tspan x='0' dy='1.2em' style='text-decoration: underline'>ComplexViewer</tspan></a><tspan x='0' dy='1.2em'>by <a href='http://rappsilberlab.org/' target='_blank'>Rappsilber Laboratory</a></tspan>\";\n  this.acknowledgement.appendChild(ackText);\n  ackText.setAttribute(\"font-size\", \"12px\");\n  this.container.appendChild(this.acknowledgement);\n  this.naryLinks = document.createElementNS(Config.svgns, \"g\");\n  this.naryLinks.setAttribute(\"id\", \"naryLinks\");\n  this.container.appendChild(this.naryLinks);\n  this.p_pLinksWide = document.createElementNS(Config.svgns, \"g\");\n  this.p_pLinksWide.setAttribute(\"id\", \"p_pLinksWide\");\n  this.container.appendChild(this.p_pLinksWide);\n  this.highlights = document.createElementNS(Config.svgns, \"g\");\n  this.highlights.setAttribute(\"class\", \"highlights\"); //interactors also contain highlight groups\n\n  this.container.appendChild(this.highlights);\n  this.res_resLinks = document.createElementNS(Config.svgns, \"g\");\n  this.res_resLinks.setAttribute(\"id\", \"res_resLinks\");\n  this.container.appendChild(this.res_resLinks);\n  this.p_pLinks = document.createElementNS(Config.svgns, \"g\");\n  this.p_pLinks.setAttribute(\"id\", \"p_pLinks\");\n  this.container.appendChild(this.p_pLinks);\n  this.proteinUpper = document.createElementNS(Config.svgns, \"g\");\n  this.proteinUpper.setAttribute(\"id\", \"proteinUpper\");\n  this.container.appendChild(this.proteinUpper);\n  this.selfRes_resLinks = document.createElementNS(Config.svgns, \"g\");\n  this.selfRes_resLinks.setAttribute(\"id\", \"res_resLinks\");\n  this.container.appendChild(this.selfRes_resLinks);\n  this.svgElement.appendChild(this.container); //showing title as tooltips is NOT part of svg spec (even though some browsers do this)\n  //also more repsonsive / more control if we do out own\n\n  this.tooltip = document.createElementNS(Config.svgns, \"text\");\n  this.tooltip.setAttribute('x', 0);\n  this.tooltip.setAttribute('y', 0);\n  this.tooltip.setAttribute('class', 'xlv_text');\n  var tooltipTextNode = document.createTextNode('tooltip');\n  this.tooltip.appendChild(tooltipTextNode);\n  this.tooltip_bg = document.createElementNS(Config.svgns, \"rect\");\n  this.tooltip_bg.setAttribute('class', 'tooltip_bg');\n  this.tooltip_bg.setAttribute('fill-opacity', 0.75);\n  this.tooltip_bg.setAttribute('stroke-opacity', 1);\n  this.tooltip_bg.setAttribute('stroke-width', 1);\n  this.tooltip_subBg = document.createElementNS(Config.svgns, \"rect\");\n  this.tooltip_subBg.setAttribute('fill', 'white');\n  this.tooltip_subBg.setAttribute('stroke', 'white');\n  this.tooltip_subBg.setAttribute('class', 'tooltip_bg');\n  this.tooltip_subBg.setAttribute('opacity', 1);\n  this.tooltip_subBg.setAttribute('stroke-width', 1);\n  this.svgElement.appendChild(this.tooltip_subBg);\n  this.svgElement.appendChild(this.tooltip_bg);\n  this.svgElement.appendChild(this.tooltip);\n  this.clear();\n};\n\nxiNET.Controller.prototype.createHatchedFill = function (name, colour) {\n  var pattern = this.defs.append('pattern').attr('id', name).attr('patternUnits', 'userSpaceOnUse').attr(\"x\", 0).attr(\"y\", 0).attr('width', 12).attr('height', 12).attr(\"patternTransform\", \"rotate(45)\");\n  pattern.append('rect').attr(\"x\", 0).attr(\"y\", 2).attr(\"width\", 12).attr(\"height\", 4).attr(\"fill\", colour);\n  pattern.append('rect').attr(\"x\", 0).attr(\"y\", 8).attr(\"width\", 12).attr(\"height\", 4).attr(\"fill\", colour); // checks - yuk\n  // pattern.append('rect')\n  //     .attr(\"x\", 0)\n  //     .attr(\"y\", 0)\n  //     .attr(\"width\", 5)\n  //     .attr(\"height\", 5)\n  //     .style(\"fill\", \"black\");// \"#A01284\");\n  // pattern.append('rect')\n  //     .attr(\"x\", 5)\n  //     .attr(\"y\", 5)\n  //     .attr(\"width\", 5)\n  //     .attr(\"height\", 5)\n  //     .style(\"fill\", \"black\");//\"#A01284\");\n};\n\nxiNET.Controller.prototype.clear = function () {\n  if (this.d3cola) {\n    this.d3cola.stop();\n  }\n\n  this.d3cola = null;\n  NaryLink.naryColours = d3.scale.ordinal().range(colorbrewer.Pastel2[8]);\n  this.defs.selectAll(\".feature_checkers\").remove();\n  d3.select(this.naryLinks).selectAll(\"*\").remove();\n  d3.select(this.p_pLinksWide).selectAll(\"*\").remove();\n  d3.select(this.highlights).selectAll(\"*\").remove();\n  d3.select(this.p_pLinks).selectAll(\"*\").remove();\n  d3.select(this.res_resLinks).selectAll(\"*\").remove();\n  d3.select(this.proteinUpper).selectAll(\"*\").remove();\n  d3.select(this.selfRes_resLinks).selectAll(\"*\").remove(); // if we are dragging something at the moment - this will be the element that is dragged\n\n  this.dragElement = null; // from where did we start dragging\n\n  this.dragStart = {};\n  this.molecules = new Map(); // todo - rename\n\n  this.allNaryLinks = d3.map();\n  this.allBinaryLinks = d3.map();\n  this.allUnaryLinks = d3.map();\n  this.allSequenceLinks = d3.map();\n  this.complexes = [];\n  this.proteinCount = 0; // this.maxBlobRadius = 30;\n  // Interactor.MAXSIZE = 100;\n\n  this.z = 1;\n  this.hideTooltip();\n  this.state = this.STATES.MOUSE_UP;\n};\n\nxiNET.Controller.prototype.collapseProtein = function () {\n  var p = this.contextMenuPoint;\n  var c = p.matrixTransform(this.container.getCTM().inverse());\n  d3.select(\".custom-menu-margin\").style(\"display\", \"none\");\n  this.contextMenuProt.setForm(0, c);\n  this.contextMenuProt = null;\n}; //this can be done before all proteins have their sequences\n\n\nxiNET.Controller.prototype.init = function () {\n  this.checkLinks(); // todo - should this really be here\n\n  var maxSeqLength = 0;\n\n  var _iterator = _createForOfIteratorHelper(this.molecules.values()),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var _participant = _step.value;\n\n      if (_participant.size > maxSeqLength) {\n        maxSeqLength = _participant.size;\n      }\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n\n  var width = this.svgElement.parentNode.clientWidth;\n  var defaultPixPerRes = (width * 0.8 - Interactor.LABELMAXLENGTH) / maxSeqLength; //console.log(\"defautPixPerRes:\" + defaultPixPerRes);\n  // https://stackoverflow.com/questions/12141150/from-list-of-integers-get-number-closest-to-a-given-value/12141511#12141511\n\n  function takeClosest(myList, myNumber) {\n    var bisect = d3.bisector(function (d) {\n      return d;\n    }).left;\n    var pos = bisect(myList, myNumber);\n\n    if (pos === 0 || pos === 1) {\n      return myList[1]; // don't return smallest scale as default\n    }\n\n    if (pos === myList.length) {\n      return myList[myList.length - 1];\n    }\n\n    return myList[pos - 1];\n  }\n\n  this.defaultBarScale = takeClosest(this.barScales, defaultPixPerRes); //console.log(\"default bar scale: \" + this.defaultBarScale)\n\n  if (this.annotationChoice) {\n    this.setAnnotations(this.annotationChoice);\n  } else {\n    this.setAnnotations('MI FEATURES');\n  }\n\n  var _iterator2 = _createForOfIteratorHelper(this.molecules.values()),\n      _step2;\n\n  try {\n    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n      var _participant2 = _step2.value;\n\n      if (_participant2.upperGroup) {\n        this.proteinUpper.appendChild(_participant2.upperGroup);\n\n        if (_participant2.json.type.name === \"protein\") {\n          _participant2.stickZoom = this.defaultBarScale;\n\n          _participant2.init();\n        }\n      }\n    }\n  } catch (err) {\n    _iterator2.e(err);\n  } finally {\n    _iterator2.f();\n  }\n\n  if (this.molecules.size < 4) {\n    var _iterator3 = _createForOfIteratorHelper(this.molecules.values()),\n        _step3;\n\n    try {\n      for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n        var participant = _step3.value;\n\n        if (participant.json.type.name === \"protein\") {\n          participant.toStickNoTransition();\n        }\n      }\n    } catch (err) {\n      _iterator3.e(err);\n    } finally {\n      _iterator3.f();\n    }\n  }\n\n  this.autoLayout();\n};\n\nxiNET.Controller.prototype.setAnnotations = function (annotationChoice) {\n  this.annotationChoice = annotationChoice;\n  var self = this; //clear all annot's\n\n  var _iterator4 = _createForOfIteratorHelper(this.molecules.values()),\n      _step4;\n\n  try {\n    for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n      var _mol6 = _step4.value;\n\n      if (_mol6.id.indexOf('uniprotkb_') === 0) {\n        //LIMIT IT TO PROTEINS // todo - is this best way to check if protein\n        _mol6.clearPositionalFeatures();\n      }\n    }\n  } catch (err) {\n    _iterator4.e(err);\n  } finally {\n    _iterator4.f();\n  }\n\n  this.legendChanged(null);\n  var molsAnnotated = 0;\n  var molCount = this.molecules.values().size;\n\n  if (annotationChoice.toUpperCase() === \"MI FEATURES\") {\n    var _iterator5 = _createForOfIteratorHelper(this.molecules.values()),\n        _step5;\n\n    try {\n      for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n        var mol = _step5.value;\n\n        if (mol.id.indexOf('uniprotkb_') === 0) {\n          //LIMIT IT TO PROTEINS\n          mol.setPositionalFeatures(mol.miFeatures);\n        }\n      }\n    } catch (err) {\n      _iterator5.e(err);\n    } finally {\n      _iterator5.f();\n    }\n\n    chooseColours();\n  } else if (annotationChoice.toUpperCase() === \"INTERACTOR\") {\n    if (self.proteinCount < 21) {\n      var _iterator6 = _createForOfIteratorHelper(this.molecules.values()),\n          _step6;\n\n      try {\n        for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {\n          var _mol = _step6.value;\n\n          if (_mol.id.indexOf('uniprotkb_') === 0) {\n            //LIMIT IT TO PROTEINS\n            var annotation = new Annotation(_mol.json.label, new SequenceFeature(null, 1 + \"-\" + _mol.size));\n\n            _mol.setPositionalFeatures([annotation]);\n          }\n        }\n      } catch (err) {\n        _iterator6.e(err);\n      } finally {\n        _iterator6.f();\n      }\n\n      chooseColours();\n    } else {\n      alert(\"Too many (> 20) - can't colour by interactor.\");\n    }\n  } else if (annotationChoice.toUpperCase() === \"SUPERFAM\" || annotationChoice.toUpperCase() === \"SUPERFAMILY\") {\n    var _iterator7 = _createForOfIteratorHelper(this.molecules.values()),\n        _step7;\n\n    try {\n      for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {\n        var _mol2 = _step7.value;\n\n        if (_mol2.id.indexOf('uniprotkb_') === 0) {\n          //LIMIT IT TO PROTEINS\n          xiNET_Storage.getSuperFamFeatures(_mol2.id, function (id, fts) {\n            var m = self.molecules.get(id);\n            m.setPositionalFeatures(fts);\n            molsAnnotated++;\n\n            if (molsAnnotated === molCount) {\n              chooseColours();\n            }\n          });\n        } else {\n          molsAnnotated++;\n\n          if (molsAnnotated === molCount) {\n            chooseColours();\n          }\n        }\n      }\n    } catch (err) {\n      _iterator7.e(err);\n    } finally {\n      _iterator7.f();\n    }\n  } else if (annotationChoice.toUpperCase() === \"UNIPROT\" || annotationChoice.toUpperCase() === \"UNIPROTKB\") {\n    var _iterator8 = _createForOfIteratorHelper(this.molecules.values()),\n        _step8;\n\n    try {\n      for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {\n        var _mol3 = _step8.value;\n\n        if (_mol3.id.indexOf('uniprotkb_') === 0) {\n          //LIMIT IT TO PROTEINS\n          xiNET_Storage.getUniProtFeatures(_mol3.id, function (id, fts) {\n            var m = self.molecules.get(id);\n\n            for (var f = 0; f < fts.length; f++) {\n              var feature = fts[f];\n              feature.seqDatum = new SequenceFeature(null, feature.begin + \"-\" + feature.end);\n            }\n\n            m.setPositionalFeatures(fts);\n            molsAnnotated++;\n\n            if (molsAnnotated === molCount) {\n              chooseColours();\n            }\n          });\n        } else {\n          molsAnnotated++;\n\n          if (molsAnnotated === molCount) {\n            chooseColours();\n          }\n        }\n      }\n    } catch (err) {\n      _iterator8.e(err);\n    } finally {\n      _iterator8.f();\n    }\n  }\n\n  function chooseColours() {\n    var categories = d3.set();\n\n    var _iterator9 = _createForOfIteratorHelper(self.molecules.values()),\n        _step9;\n\n    try {\n      for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {\n        var _mol4 = _step9.value;\n\n        if (_mol4.annotations) {\n          var _iterator11 = _createForOfIteratorHelper(_mol4.annotations),\n              _step11;\n\n          try {\n            for (_iterator11.s(); !(_step11 = _iterator11.n()).done;) {\n              var _annotation = _step11.value;\n              categories.add(_annotation.description);\n            }\n          } catch (err) {\n            _iterator11.e(err);\n          } finally {\n            _iterator11.f();\n          }\n        }\n      }\n    } catch (err) {\n      _iterator9.e(err);\n    } finally {\n      _iterator9.f();\n    }\n\n    var catCount = categories.values().length;\n    var colourScheme;\n\n    if (catCount < 3) {\n      catCount = 3;\n    }\n\n    if (catCount < 9) {\n      colourScheme = d3.scale.ordinal().range(colorbrewer.Dark2[catCount].slice().reverse()); // } else if (catCount < 13) {\n      //     var reversed = colorbrewer.Paired[catCount];//.slice().reverse();\n      //     colourScheme = d3.scale.ordinal().range(reversed);\n    } else {\n      colourScheme = d3.scale.category20();\n    }\n\n    var _iterator10 = _createForOfIteratorHelper(self.molecules.values()),\n        _step10;\n\n    try {\n      for (_iterator10.s(); !(_step10 = _iterator10.n()).done;) {\n        var _mol5 = _step10.value;\n\n        if (_mol5.annotations) {\n          var _iterator12 = _createForOfIteratorHelper(_mol5.annotations),\n              _step12;\n\n          try {\n            for (_iterator12.s(); !(_step12 = _iterator12.n()).done;) {\n              var anno = _step12.value;\n              var colour = void 0;\n\n              if (anno.description === \"No annotations\") {\n                colour = \"#cccccc\";\n              } else {\n                colour = colourScheme(anno.description);\n              } //ToDO - way more of these are being created than needed\n\n\n              self.createHatchedFill(\"checkers_\" + anno.description, colour);\n              var checkedFill = \"url('#checkers_\" + anno.description + \"')\";\n              anno.fuzzyStart.setAttribute(\"fill\", checkedFill);\n              anno.fuzzyStart.setAttribute(\"stroke\", colour);\n              anno.fuzzyEnd.setAttribute(\"fill\", checkedFill);\n              anno.fuzzyEnd.setAttribute(\"stroke\", colour);\n              anno.certain.setAttribute(\"fill\", colour);\n              anno.certain.setAttribute(\"stroke\", colour);\n            }\n          } catch (err) {\n            _iterator12.e(err);\n          } finally {\n            _iterator12.f();\n          }\n        }\n      }\n    } catch (err) {\n      _iterator10.e(err);\n    } finally {\n      _iterator10.f();\n    }\n\n    self.legendChanged(colourScheme);\n  }\n}; //listeners also attached to mouse evnts by Interactor (and Rotator) and Link, those consume their events\n//mouse down on svgElement must be allowed to propogate (to fire event on Prots/Links)\n\n/**\n * Handle mousedown event.\n */\n\n\nxiNET.Controller.prototype.mouseDown = function (evt) {\n  //prevent default, but allow propogation\n  evt.preventDefault(); //stop force layout\n\n  if (typeof this.d3cola !== 'undefined' && this.d3cola != null) {\n    this.d3cola.stop();\n  }\n\n  var p = this.getEventPoint(evt); // seems to be correct, see below\n\n  this.dragStart = this.mouseToSVG(p.x, p.y);\n  return false;\n}; // dragging/rotation/panning/selecting\n\n\nxiNET.Controller.prototype.mouseMove = function (evt) {\n  var p = this.getEventPoint(evt); // seems to be correct, see below\n\n  var c = this.mouseToSVG(p.x, p.y);\n\n  if (this.dragElement != null) {\n    //dragging or rotating\n    this.hideTooltip();\n    var dx = this.dragStart.x - c.x;\n    var dy = this.dragStart.y - c.y;\n\n    if (this.state === this.STATES.DRAGGING) {\n      // we are currently dragging things around\n      var ox, oy, nx, ny;\n\n      if (typeof this.dragElement.cx === 'undefined') {\n        // if not an Interactor\n        var nodes = this.dragElement.interactors;\n\n        var _iterator13 = _createForOfIteratorHelper(nodes),\n            _step13;\n\n        try {\n          for (_iterator13.s(); !(_step13 = _iterator13.n()).done;) {\n            var protein = _step13.value;\n            ox = protein.cx;\n            oy = protein.cy;\n            nx = ox - dx;\n            ny = oy - dy;\n            protein.setPosition(nx, ny);\n            protein.setAllLinkCoordinates();\n          }\n        } catch (err) {\n          _iterator13.e(err);\n        } finally {\n          _iterator13.f();\n        }\n\n        var _iterator14 = _createForOfIteratorHelper(nodes),\n            _step14;\n\n        try {\n          for (_iterator14.s(); !(_step14 = _iterator14.n()).done;) {\n            var node = _step14.value;\n            node.setAllLinkCoordinates();\n          }\n        } catch (err) {\n          _iterator14.e(err);\n        } finally {\n          _iterator14.f();\n        }\n      } else {\n        //its a protein - drag it TODO: DRAG SELECTED\n        ox = this.dragElement.cx;\n        oy = this.dragElement.cy;\n        nx = ox - dx;\n        ny = oy - dy;\n        this.dragElement.setPosition(nx, ny);\n        this.dragElement.setAllLinkCoordinates();\n      }\n\n      this.dragStart = c;\n    } else {\n      //not dragging or rotating yet, maybe we should start\n      // don't start dragging just on a click - we need to move the mouse a bit first\n      if (Math.sqrt(dx * dx + dy * dy) > 5 * this.z) {\n        this.state = this.STATES.DRAGGING;\n      }\n    }\n  } else {\n    this.showTooltip(p);\n  }\n\n  return false;\n}; // this ends all dragging and rotating\n\n\nxiNET.Controller.prototype.mouseUp = function (evt) {\n  var time = new Date().getTime(); //console.log(\"Mouse up: \" + evt.srcElement + \" \" + (time - this.lastMouseUp));\n\n  this.preventDefaultsAndStopPropagation(evt); //eliminate some spurious mouse up events\n\n  if (time - this.lastMouseUp > 150) {\n    var p = this.getEventPoint(evt); // seems to be correct, see below\n\n    var c = this.mouseToSVG(p.x, p.y);\n\n    if (this.dragElement != null) {\n      if (!(this.state === this.STATES.DRAGGING || this.state === this.STATES.ROTATING)) {\n        //not dragging or rotating\n        if (this.dragElement.form === 0) {\n          this.dragElement.setForm(1);\n        } else {\n          this.contextMenuProt = this.dragElement;\n          this.contextMenuPoint = c;\n          var menu = d3.select(\".custom-menu-margin\");\n          menu.style(\"top\", evt.pageY - 20 + \"px\").style(\"left\", evt.pageX - 20 + \"px\").style(\"display\", \"block\");\n          d3.select(\".scaleButton_\" + this.dragElement.stickZoom * 100).property(\"checked\", true);\n        }\n      }\n    }\n  }\n\n  this.dragElement = null;\n  this.state = this.STATES.MOUSE_UP;\n  this.lastMouseUp = time;\n  return false;\n}; //gets mouse position\n\n\nxiNET.Controller.prototype.getEventPoint = function (evt) {\n  var p = this.svgElement.createSVGPoint();\n  var element = this.svgElement.parentNode;\n  var top = 0,\n      left = 0;\n\n  do {\n    top += element.offsetTop || 0;\n    left += element.offsetLeft || 0;\n    element = element.offsetParent;\n  } while (element);\n\n  p.x = evt.pageX - left;\n  p.y = evt.pageY - top;\n  return p;\n}; //stop event propogation and defaults; only do what we ask\n\n\nxiNET.Controller.prototype.preventDefaultsAndStopPropagation = function (evt) {\n  if (evt.stopPropagation) evt.stopPropagation();\n  if (evt.cancelBubble != null) evt.cancelBubble = true;\n  if (evt.preventDefault) evt.preventDefault();\n};\n/**\n * Handle touchstart event.\n\nxiNET.Controller.prototype.touchStart = function(evt) {\n    //prevent default, but allow propogation\n    evt.preventDefault();\n\n    //stop force layout\n    if (typeof this.d3cola !== 'undefined' && this.d3cola != null) {\n        this.d3cola.stop();\n    }\n\n    var p = this.getTouchEventPoint(evt); // seems to be correct, see below\n    this.dragStart = this.mouseToSVG(p.x, p.y);\n};\n\n// dragging/rotation/panning/selecting\nxiNET.Controller.prototype.touchMove = function(evt) {\n    // if (this.sequenceInitComplete) { // just being cautious\n    var p = this.getTouchEventPoint(evt); // seems to be correct, see below\n    var c = this.mouseToSVG(p.x, p.y);\n\n    if (this.dragElement != null) { //dragging or rotating\n        this.hideTooltip();\n        var dx = this.dragStart.x - c.x;\n        var dy = this.dragStart.y - c.y;\n\n        if (this.state === this.STATES.DRAGGING) {\n            // we are currently dragging things around\n            var ox, oy, nx, ny;\n            if (typeof this.dragElement.cx === 'undefined') { // if not an Interactor\n                var nodes = this.dragElement.interactors;\n                var nodeCount = nodes.length;\n                for (var i = 0; i < nodeCount; i++) {\n                    var protein = nodes[i];\n                    ox = protein.cx;\n                    oy = protein.cy;\n                    nx = ox - dx;\n                    ny = oy - dy;\n                    protein.setPosition(nx, ny);\n                    protein.setAllLinkCoordinates();\n                }\n                for (i = 0; i < nodeCount; i++) {\n                    nodes[i].setAllLinkCoordinates();\n                }\n            } else {\n                //its a protein - drag it TODO: DRAG SELECTED\n                ox = this.dragElement.cx;\n                oy = this.dragElement.cy;\n                nx = ox - dx;\n                ny = oy - dy;\n                this.dragElement.setPosition(nx, ny);\n                this.dragElement.setAllLinkCoordinates();\n            }\n            this.dragStart = c;\n        } else { //not dragging or rotating yet, maybe we should start\n            // don't start dragging just on a click - we need to move the mouse a bit first\n            if (Math.sqrt(dx * dx + dy * dy) > (5 * this.z)) {\n                this.state = this.STATES.DRAGGING;\n\n            }\n        }\n    } else {\n        this.showTooltip(p);\n    }\n    return false;\n};\n\n// this ends all dragging and rotating\nxiNET.Controller.prototype.touchEnd = function(evt) {\n    var time = new Date().getTime();\n    //console.log(\"Mouse up: \" + evt.srcElement + \" \" + (time - this.lastMouseUp));\n    this.preventDefaultsAndStopPropagation(evt);\n    //eliminate some spurious mouse up events\n    if ((time - this.lastMouseUp) > 150) {\n\n        var p = this.getTouchEventPoint(evt); // seems to be correct, see below\n        var c = this.mouseToSVG(p.x, p.y);\n\n        if (this.dragElement != null) {\n            if (!(this.state === this.STATES.DRAGGING || this.state === this.STATES.ROTATING)) { //not dragging or rotating\n                if (this.dragElement.form === 0) {\n                    this.dragElement.setForm(1);\n                } else {\n                    this.contextMenuProt = this.dragElement;\n                    this.contextMenuPoint = c;\n                    var menu = d3.select(\".custom-menu-margin\")\n                    menu.style(\"top\", (evt.pageY - 20) + \"px\").style(\"left\", (evt.pageX - 20) + \"px\").style(\"display\", \"block\");\n                    d3.select(\".scaleButton_\" + (this.dragElement.stickZoom * 100)).property(\"checked\", true)\n                }\n            }\n        }\n    }\n\n    this.dragElement = null;\n    this.whichRotator = -1;\n    this.state = this.STATES.MOUSE_UP;\n\n    this.lastMouseUp = time;\n    return false;\n};\n\n//gets mouse position\nxiNET.Controller.prototype.getTouchEventPoint = function(evt) {\n    var p = this.svgElement.createSVGPoint();\n    var element = this.svgElement.parentNode;\n    var top = 0,\n        left = 0;\n    do {\n        top += element.offsetTop || 0;\n        left += element.offsetLeft || 0;\n        element = element.offsetParent;\n    } while (element);\n    p.x = evt.touches[0].pageX - left;\n    p.y = evt.touches[0].pageY - top;\n    return p;\n};\n*/\n\n\nxiNET.Controller.prototype.autoLayout = function () {\n  if (this.d3cola) {\n    this.d3cola.stop();\n  }\n\n  var width = this.svgElement.parentNode.clientWidth; //this.svgElement.getBoundingClientRect().width;\n\n  var height = this.svgElement.parentNode.clientHeight;\n\n  if (this.acknowledgement) {\n    this.acknowledgement.setAttribute(\"transform\", \"translate(5, \" + (height - 40) + \")\");\n  } //// TODO: prune leaves from network then layout, then add back leaves and layout again\n\n\n  var self = this;\n  var nodes = Array.from(this.molecules.values());\n  nodes = nodes.filter(function (value) {\n    return value.type !== \"complex\";\n  });\n  var nodeCount = nodes.length;\n  var layoutObj = {};\n  layoutObj.nodes = nodes;\n  layoutObj.links = [];\n  var molLookUp = {};\n  var mi = 0;\n\n  var _iterator15 = _createForOfIteratorHelper(nodes),\n      _step15;\n\n  try {\n    for (_iterator15.s(); !(_step15 = _iterator15.n()).done;) {\n      var mol = _step15.value;\n      molLookUp[mol.id] = mi;\n      mi++;\n    }\n  } catch (err) {\n    _iterator15.e(err);\n  } finally {\n    _iterator15.f();\n  }\n\n  var links = this.allBinaryLinks.values();\n  var linkCount = links.length;\n\n  for (var l = 0; l < linkCount; l++) {\n    var link = links[l];\n    var fromMol = link.interactors[0];\n    var toMol = link.interactors[1];\n    var source = fromMol; //molLookUp[fromMol.id];\n\n    var target = toMol; //molLookUp[toMol.id];\n\n    if (source !== target && nodes.indexOf(source) !== -1 && nodes.indexOf(target) !== -1) {\n      if (typeof source !== 'undefined' && typeof target !== 'undefined') {\n        var linkObj = {};\n        linkObj.source = molLookUp[fromMol.id];\n        linkObj.target = molLookUp[toMol.id];\n        linkObj.id = link.id;\n        layoutObj.links.push(linkObj);\n      } else {\n        alert(\"NOT RIGHT\");\n      }\n    }\n  } // todo: add containing group?\n\n\n  var groups = [];\n\n  if (this.complexes) {\n    var _iterator16 = _createForOfIteratorHelper(this.complexes),\n        _step16;\n\n    try {\n      for (_iterator16.s(); !(_step16 = _iterator16.n()).done;) {\n        var g = _step16.value;\n        g.leaves = [];\n        g.groups = [];\n\n        var _iterator18 = _createForOfIteratorHelper(g.naryLink.interactors),\n            _step18;\n\n        try {\n          for (_iterator18.s(); !(_step18 = _iterator18.n()).done;) {\n            var interactor = _step18.value;\n\n            if (interactor.type !== \"complex\") {\n              g.leaves.push(layoutObj.nodes.indexOf(interactor));\n            }\n          }\n        } catch (err) {\n          _iterator18.e(err);\n        } finally {\n          _iterator18.f();\n        }\n\n        groups.push(g);\n      }\n    } catch (err) {\n      _iterator16.e(err);\n    } finally {\n      _iterator16.f();\n    }\n\n    var _iterator17 = _createForOfIteratorHelper(this.complexes),\n        _step17;\n\n    try {\n      for (_iterator17.s(); !(_step17 = _iterator17.n()).done;) {\n        var _g = _step17.value;\n\n        var _iterator19 = _createForOfIteratorHelper(_g.naryLink.interactors),\n            _step19;\n\n        try {\n          for (_iterator19.s(); !(_step19 = _iterator19.n()).done;) {\n            var _interactor = _step19.value;\n\n            if (_interactor.type === \"complex\") {\n              _g.groups.push(groups.indexOf(_interactor));\n            }\n          }\n        } catch (err) {\n          _iterator19.e(err);\n        } finally {\n          _iterator19.f();\n        }\n      }\n    } catch (err) {\n      _iterator17.e(err);\n    } finally {\n      _iterator17.f();\n    }\n  }\n\n  this.d3cola = cola.d3adaptor(); //console.log(\"groups\", groups);\n\n  delete this.d3cola._lastStress;\n  delete this.d3cola._alpha;\n  delete this.d3cola._descent;\n  delete this.d3cola._rootGroup;\n  this.d3cola.nodes(layoutObj.nodes).groups(groups).links(layoutObj.links).avoidOverlaps(true);\n  var groupDebugSel, participantDebugSel;\n\n  if (self.debug) {\n    groupDebugSel = d3.select(this.svgElement).selectAll('.group').data(groups);\n    groupDebugSel.enter().append('rect').classed('group', true).attr({\n      rx: 5,\n      ry: 5\n    }).style('stroke', \"blue\").style('fill', \"none\");\n    participantDebugSel = d3.select(this.svgElement).selectAll('.node').data(layoutObj.nodes);\n    participantDebugSel.enter().append('rect').classed('node', true).attr({\n      rx: 5,\n      ry: 5\n    }).style('stroke', \"red\").style('fill', \"none\");\n    groupDebugSel.exit().remove();\n    participantDebugSel.exit().remove();\n  }\n\n  this.d3cola.symmetricDiffLinkLengths(30).on(\"tick\", function () {\n    var nodes = self.d3cola.nodes(); // console.log(\"nodes\", nodes);\n\n    for (var n = 0; n < nodeCount; n++) {\n      var node = nodes[n];\n      var outlineWidth = node.outline.getBBox().width;\n      var upperGroupWidth = node.upperGroup.getBBox().width;\n      var nx = node.bounds.x + upperGroupWidth - outlineWidth / 2 + width / 2;\n      var ny = node.y + height / 2;\n      node.setPosition(nx, ny);\n    }\n\n    self.setAllLinkCoordinates();\n\n    if (self.debug) {\n      groupDebugSel.attr({\n        x: function x(d) {\n          return d.bounds.x + width / 2;\n        },\n        y: function y(d) {\n          return d.bounds.y + height / 2;\n        },\n        width: function width(d) {\n          return d.bounds.width();\n        },\n        height: function height(d) {\n          return d.bounds.height();\n        }\n      });\n      participantDebugSel.attr({\n        x: function x(d) {\n          return d.bounds.x + width / 2;\n        },\n        y: function y(d) {\n          return d.bounds.y + height / 2;\n        },\n        width: function width(d) {\n          return d.bounds.width();\n        },\n        height: function height(d) {\n          return d.bounds.height();\n        }\n      });\n    }\n  });\n  this.d3cola.start(20, 0, 20);\n};\n\nxiNET.Controller.prototype.getSVG = function () {\n  var svgXml = this.svgElement.outerHTML.replace(/<rect .*?\\/rect>/i, \"\"); //take out white background fill\n\n  var viewBox = 'viewBox=\"0 0 ' + this.svgElement.parentNode.clientWidth + \" \" + this.svgElement.parentNode.clientHeight + '\" ';\n  svgXml = svgXml.replace('<svg ', '<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" xmlns:ev=\"http://www.w3.org/2001/xml-events\" ' + viewBox);\n  return '<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>' + '<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">' + svgXml;\n}; // transform the mouse-position into a position on the svg\n\n\nxiNET.Controller.prototype.mouseToSVG = function (x, y) {\n  var p = this.svgElement.createSVGPoint();\n  p.x = x;\n  p.y = y;\n  return p.matrixTransform(this.container.getCTM().inverse());\n}; // reads MI JSON format\n\n\nxiNET.Controller.prototype.readMIJSON = function (miJson, expand) {\n  //check that we've got a parsed javascript object here, not a String\n  miJson = _typeof(miJson) === 'object' ? miJson : JSON.parse(miJson);\n  miJson.data = miJson.data.reverse(); //default is to expand\n\n  if (typeof expand === 'undefined') {\n    expand = true;\n  }\n\n  var data = miJson.data;\n  var self = this;\n  self.features = d3.map();\n  var complexes = d3.map();\n  var needsSequence = d3.set(); //things that need seq looked up\n  //get interactors\n\n  self.proteinCount = 0;\n  self.interactors = d3.map();\n\n  var _iterator20 = _createForOfIteratorHelper(data),\n      _step20;\n\n  try {\n    for (_iterator20.s(); !(_step20 = _iterator20.n()).done;) {\n      var _datum6 = _step20.value;\n\n      if (_datum6.object === 'interactor') {\n        self.interactors.set(_datum6.id, _datum6);\n\n        if (_datum6.id.indexOf('uniprotkb_') === 0) {\n          // todo - is this best way to test this?\n          self.proteinCount++;\n        }\n      }\n    }\n  } catch (err) {\n    _iterator20.e(err);\n  } finally {\n    _iterator20.f();\n  }\n\n  expand ? readStoichExpanded() : readStoichUnexpanded(); // loop through particpants and features\n  // init binary, unary and sequence links,\n  // and make needed associations between these and containing naryLink\n\n  var _iterator21 = _createForOfIteratorHelper(data),\n      _step21;\n\n  try {\n    for (_iterator21.s(); !(_step21 = _iterator21.n()).done;) {\n      var _datum7 = _step21.value;\n\n      if (_datum7.object === 'interaction') {\n        var _iterator35 = _createForOfIteratorHelper(_datum7.participants),\n            _step35;\n\n        try {\n          for (_iterator35.s(); !(_step35 = _iterator35.n()).done;) {\n            var jsonParticipant = _step35.value;\n            var features = new Array(0);\n            if (jsonParticipant.features) features = jsonParticipant.features;\n\n            var _iterator36 = _createForOfIteratorHelper(features),\n                _step36;\n\n            try {\n              for (_iterator36.s(); !(_step36 = _iterator36.n()).done;) {\n                var feature = _step36.value;\n                // for each feature\n                var fromSequenceData = feature.sequenceData;\n\n                if (feature.linkedFeatures) {\n                  // if linked features\n                  var linkedFeatureIDs = feature.linkedFeatures;\n                  var linkedFeatureCount = linkedFeatureIDs.length;\n\n                  for (var lfi = 0; lfi < linkedFeatureCount; lfi++) {\n                    //for each linked feature\n                    // !! following is a hack, code can't deal with\n                    // !! composite binding region across two different interactors\n                    // break feature links to different nodes into seperate binary links\n                    var toSequenceData_indexedByNodeId = d3.map();\n                    var linkedFeature = self.features.get(linkedFeatureIDs[lfi]);\n\n                    var _iterator37 = _createForOfIteratorHelper(linkedFeature.sequenceData),\n                        _step37;\n\n                    try {\n                      for (_iterator37.s(); !(_step37 = _iterator37.n()).done;) {\n                        var seqData = _step37.value;\n                        var nodeId = seqData.interactorRef;\n\n                        if (expand) {\n                          nodeId = nodeId + '(' + seqData.participantRef + ')';\n                        }\n\n                        var toSequenceData = toSequenceData_indexedByNodeId.get(nodeId);\n\n                        if (typeof toSequenceData === 'undefined') {\n                          toSequenceData = [];\n                          toSequenceData_indexedByNodeId.set(nodeId, toSequenceData);\n                        }\n\n                        toSequenceData = toSequenceData.push(seqData);\n                      }\n                    } catch (err) {\n                      _iterator37.e(err);\n                    } finally {\n                      _iterator37.f();\n                    }\n\n                    var _iterator38 = _createForOfIteratorHelper(toSequenceData_indexedByNodeId.values()),\n                        _step38;\n\n                    try {\n                      for (_iterator38.s(); !(_step38 = _iterator38.n()).done;) {\n                        var _toSequenceData = _step38.value;\n                        var fromInteractor = getNode(fromSequenceData[0]);\n                        var toInteractor = getNode(_toSequenceData[0]);\n                        var link = void 0;\n\n                        if (fromInteractor === toInteractor) {\n                          link = getUnaryLink(fromInteractor, _datum7);\n                        } else {\n                          link = getBinaryLink(fromInteractor, toInteractor, _datum7);\n                        }\n\n                        var sequenceLink = getFeatureLink(fromSequenceData, _toSequenceData, _datum7);\n                        fromInteractor.sequenceLinks.set(sequenceLink.id, sequenceLink);\n                        toInteractor.sequenceLinks.set(sequenceLink.id, sequenceLink);\n                        link.sequenceLinks.set(sequenceLink.id, sequenceLink);\n                      }\n                    } catch (err) {\n                      _iterator38.e(err);\n                    } finally {\n                      _iterator38.f();\n                    }\n                  } // end for each linked feature\n\n                } // end if linked features\n\n              } // end for each feature\n\n            } catch (err) {\n              _iterator36.e(err);\n            } finally {\n              _iterator36.f();\n            }\n          }\n        } catch (err) {\n          _iterator35.e(err);\n        } finally {\n          _iterator35.f();\n        }\n      }\n    } //init complexes\n\n  } catch (err) {\n    _iterator21.e(err);\n  } finally {\n    _iterator21.f();\n  }\n\n  this.complexes = complexes.values();\n\n  for (var c = 0; c < this.complexes.length; c++) {\n    var complex = this.complexes[c];\n    var interactionId = void 0;\n\n    if (expand) {\n      interactionId = complex.id.substring(0, complex.id.indexOf('('));\n    } else {\n      interactionId = complex.id;\n    }\n\n    var _iterator22 = _createForOfIteratorHelper(data),\n        _step22;\n\n    try {\n      for (_iterator22.s(); !(_step22 = _iterator22.n()).done;) {\n        var datum = _step22.value;\n\n        if (datum.object === \"interaction\" && datum.id === interactionId) {\n          var nLinkId = getNaryLinkIdFromInteraction(datum);\n          var naryLink = self.allNaryLinks.get(nLinkId);\n          complex.initInteractor(naryLink);\n          naryLink.complex = complex;\n        }\n      }\n    } catch (err) {\n      _iterator22.e(err);\n    } finally {\n      _iterator22.f();\n    }\n  } //make mi features into annotations\n\n\n  var _iterator23 = _createForOfIteratorHelper(self.features.values()),\n      _step23;\n\n  try {\n    for (_iterator23.s(); !(_step23 = _iterator23.n()).done;) {\n      var _feature = _step23.value;\n      // add features to interactors/participants/nodes\n      //console.log(\"FEATURE:\" + feature.name, feature.sequenceData);\n      var annotName = \"\";\n\n      if (typeof _feature.name !== 'undefined') {\n        annotName += _feature.name + ' ';\n      }\n\n      if (typeof _feature.detmethod !== 'undefined') {\n        annotName += ', ' + _feature.detmethod.name;\n      } // the id info we need is inside sequenceData att\n\n\n      if (_feature.sequenceData) {\n        // todo - still needed?\n        var _iterator39 = _createForOfIteratorHelper(_feature.sequenceData),\n            _step39;\n\n        try {\n          for (_iterator39.s(); !(_step39 = _iterator39.n()).done;) {\n            var seqDatum = _step39.value;\n            var mID = seqDatum.interactorRef;\n\n            if (expand) {\n              mID = mID + \"(\" + seqDatum.participantRef + \")\";\n            }\n\n            var molecule = self.molecules.get(mID);\n            var seqFeature = new SequenceFeature(molecule, seqDatum.pos);\n            var annotation = new Annotation(annotName, seqFeature);\n\n            if (molecule.miFeatures == null) {\n              molecule.miFeatures = [];\n            }\n\n            molecule.miFeatures.push(annotation);\n          }\n        } catch (err) {\n          _iterator39.e(err);\n        } finally {\n          _iterator39.f();\n        }\n      }\n    }\n  } catch (err) {\n    _iterator23.e(err);\n  } finally {\n    _iterator23.f();\n  }\n\n  self.init();\n\n  function readStoichExpanded() {\n    //get maximum stoichiometry\n    var maxStoich = 0;\n\n    var _iterator24 = _createForOfIteratorHelper(data),\n        _step24;\n\n    try {\n      for (_iterator24.s(); !(_step24 = _iterator24.n()).done;) {\n        var _datum = _step24.value;\n\n        if (_datum.object === 'interaction') {\n          var _iterator26 = _createForOfIteratorHelper(_datum.participants),\n              _step26;\n\n          try {\n            for (_iterator26.s(); !(_step26 = _iterator26.n()).done;) {\n              var jsonParticipant = _step26.value;\n\n              if (jsonParticipant.stoichiometry && jsonParticipant.stoichiometry - 0 > maxStoich) {\n                maxStoich = jsonParticipant.stoichiometry - 0;\n              }\n            }\n          } catch (err) {\n            _iterator26.e(err);\n          } finally {\n            _iterator26.f();\n          }\n        }\n      }\n    } catch (err) {\n      _iterator24.e(err);\n    } finally {\n      _iterator24.f();\n    }\n\n    if (maxStoich < 30) {\n      miJson = Expand.matrix(miJson);\n    }\n\n    indexFeatures(); //add naryLinks and participants\n\n    var _iterator25 = _createForOfIteratorHelper(data),\n        _step25;\n\n    try {\n      for (_iterator25.s(); !(_step25 = _iterator25.n()).done;) {\n        var _datum2 = _step25.value;\n\n        if (_datum2.object === 'interaction') {\n          //init n-ary link\n          var _nLinkId = _datum2.id || getNaryLinkIdFromInteraction(_datum2);\n\n          var nLink = self.allNaryLinks.get(_nLinkId);\n\n          if (typeof nLink === 'undefined') {\n            //doesn't already exist, make new nLink\n            nLink = new NaryLink(_nLinkId, self);\n            self.allNaryLinks.set(_nLinkId, nLink); //alot of time is being spent on creating these IDs, stash them in the interaction object?\n\n            _datum2.naryId = _nLinkId;\n          }\n\n          nLink.addEvidence(_datum2); //init participants\n\n          var _iterator27 = _createForOfIteratorHelper(_datum2.participants),\n              _step27;\n\n          try {\n            for (_iterator27.s(); !(_step27 = _iterator27.n()).done;) {\n              var _jsonParticipant = _step27.value;\n              var intRef = _jsonParticipant.interactorRef;\n              var partRef = _jsonParticipant.id;\n              var participantId = intRef + \"(\" + partRef + \")\";\n              var participant = self.molecules.get(participantId);\n\n              if (typeof participant === 'undefined') {\n                var interactor = self.interactors.get(intRef);\n                participant = newParticipant(interactor, participantId, intRef);\n                self.molecules.set(participantId, participant);\n              }\n\n              participant.naryLinks.set(_nLinkId, nLink); //TODO: tidy up whats happening in NaryLink re interactor/participant terminology\n\n              if (nLink.interactors.indexOf(participant) === -1) {\n                nLink.interactors.push(participant);\n              }\n\n              if (_jsonParticipant.stoichiometry) {\n                var _interactor2 = self.molecules.get(participantId);\n\n                _interactor2.addStoichiometryLabel(_jsonParticipant.stoichiometry);\n              }\n            }\n          } catch (err) {\n            _iterator27.e(err);\n          } finally {\n            _iterator27.f();\n          }\n        }\n      }\n    } catch (err) {\n      _iterator25.e(err);\n    } finally {\n      _iterator25.f();\n    }\n  }\n\n  function newParticipant(interactor, participantId, interactorRef) {\n    var participant;\n\n    if (typeof interactor == \"undefined\" || interactor.type.id === 'MI:1302') {\n      //must be a previously unencountered complex -\n      // MI:0314 - interaction?, MI:0317 - complex? and its many subclasses\n      var interactionExists = false;\n\n      var _iterator28 = _createForOfIteratorHelper(data),\n          _step28;\n\n      try {\n        for (_iterator28.s(); !(_step28 = _iterator28.n()).done;) {\n          var _datum3 = _step28.value;\n\n          if (_datum3.object === \"interaction\" && _datum3.id === interactorRef) {\n            interactionExists = true;\n            break;\n          }\n        }\n      } catch (err) {\n        _iterator28.e(err);\n      } finally {\n        _iterator28.f();\n      }\n\n      if (interactionExists) {\n        participant = new Complex(participantId, self, interactorRef);\n        complexes.set(participantId, participant);\n      } else {\n        participant = new Complex_symbol(participantId, self, interactorRef, interactor);\n      }\n    } //molecule sets\n    else if (interactor.type.id === 'MI:1304' //molecule set\n      || interactor.type.id === 'MI:1305' //molecule set - candidate set\n      || interactor.type.id === 'MI:1307' //molecule set - defined set\n      || interactor.type.id === 'MI:1306' //molecule set - open set\n      ) {\n          participant = new MoleculeSet(participantId, self, interactor, interactor.label);\n        } //bioactive entities\n      else if (interactor.type.id === 'MI:1100' // bioactive entity\n        || interactor.type.id === 'MI:0904' // bioactive entity - polysaccharide\n        || interactor.type.id === 'MI:0328' //bioactive entity - small mol\n        ) {\n            participant = new BioactiveEntity(participantId, self, interactor, interactor.label);\n          } // proteins, peptides\n        else if (interactor.type.id === 'MI:0326' || interactor.type.id === 'MI:0327') {\n            participant = new Protein(participantId, self, interactor, interactor.label);\n\n            if (typeof interactor.sequence !== 'undefined') {\n              participant.setSequence(interactor.sequence);\n            } else {\n              //should look it up using accession number\n              if (participantId.indexOf('uniprotkb') === 0) {\n                needsSequence.add(participantId);\n              } else {\n                participant.setSequence(\"SEQUENCEMISSING\");\n              }\n            }\n          } //genes\n          else if (interactor.type.id === 'MI:0250') {\n              participant = new Gene(participantId, self, interactor, interactor.label);\n            } //RNA\n            else if (interactor.type.id === 'MI:0320' // RNA\n              || interactor.type.id === 'MI:0321' // RNA - catalytic\n              || interactor.type.id === 'MI:0322' // RNA - guide\n              || interactor.type.id === 'MI:0323' // RNA - heterogeneous nuclear\n              || interactor.type.id === 'MI:2190' // RNA - long non-coding\n              || interactor.type.id === 'MI:0324' // RNA - messenger\n              || interactor.type.id === 'MI:0679' // RNA - poly adenine\n              || interactor.type.id === 'MI:0608' // RNA - ribosomal\n              || interactor.type.id === 'MI:0611' // RNA - signal recognition particle\n              || interactor.type.id === 'MI:0610' // RNA - small interfering\n              || interactor.type.id === 'MI:0607' // RNA - small nuclear\n              || interactor.type.id === 'MI:0609' // RNA - small nucleolar\n              || interactor.type.id === 'MI:0325' // RNA - transfer\n              ) {\n                  participant = new RNA(participantId, self, interactor, interactor.label);\n                } //DNA\n              else if (interactor.type.id === 'MI:0319' // DNA\n                || interactor.type.id === 'MI:0681' // DNA - double stranded\n                || interactor.type.id === 'MI:0680' // DNA - single stranded\n                ) {\n                    participant = new DNA(participantId, self, interactor, interactor.label);\n                  } else {\n                  // MI:0329 - unknown participant ?\n                  // MI:0383 - biopolymer ?\n                  alert(\"Unrecognised type:\" + interactor.type.name);\n                }\n\n    return participant;\n  }\n\n  function indexFeatures() {\n    //create indexed collection of all features from interactions\n    // - still seems like a good starting point?\n    var _iterator29 = _createForOfIteratorHelper(data),\n        _step29;\n\n    try {\n      for (_iterator29.s(); !(_step29 = _iterator29.n()).done;) {\n        var _datum4 = _step29.value;\n\n        if (_datum4.object === 'interaction') {\n          var _iterator30 = _createForOfIteratorHelper(_datum4.participants),\n              _step30;\n\n          try {\n            for (_iterator30.s(); !(_step30 = _iterator30.n()).done;) {\n              var jsonParticipant = _step30.value;\n              var features = new Array(0);\n              if (jsonParticipant.features) features = jsonParticipant.features;\n              var fCount = features.length;\n\n              for (var f = 0; f < fCount; f++) {\n                var feature = features[f];\n                self.features.set(feature.id, feature);\n              }\n            }\n          } catch (err) {\n            _iterator30.e(err);\n          } finally {\n            _iterator30.f();\n          }\n        }\n      }\n    } catch (err) {\n      _iterator29.e(err);\n    } finally {\n      _iterator29.f();\n    }\n  }\n\n  function readStoichUnexpanded() {\n    //get interactors\n    var _iterator31 = _createForOfIteratorHelper(self.interactors.values()),\n        _step31;\n\n    try {\n      for (_iterator31.s(); !(_step31 = _iterator31.n()).done;) {\n        var interactor = _step31.value;\n        var participantId = interactor.id;\n        var participant = newParticipant(interactor, participantId);\n        self.molecules.set(participantId, participant);\n      }\n    } catch (err) {\n      _iterator31.e(err);\n    } finally {\n      _iterator31.f();\n    }\n\n    indexFeatures(); //add naryLinks\n\n    var _iterator32 = _createForOfIteratorHelper(data),\n        _step32;\n\n    try {\n      for (_iterator32.s(); !(_step32 = _iterator32.n()).done;) {\n        var _datum5 = _step32.value;\n\n        if (_datum5.object === 'interaction') {\n          var jsonParticipants = _datum5.participants;\n          var participantCount = jsonParticipants.length; //init n-ary link\n\n          var _nLinkId2 = getNaryLinkIdFromInteraction(_datum5);\n\n          var nLink = self.allNaryLinks.get(_nLinkId2);\n\n          if (typeof nLink === 'undefined') {\n            //doesn't already exist, make new nLink\n            nLink = new NaryLink(_nLinkId2, self);\n            self.allNaryLinks.set(_nLinkId2, nLink);\n          }\n\n          nLink.addEvidence(_datum5); //~ //init participants\n\n          for (var pi = 0; pi < participantCount; pi++) {\n            var jsonParticipant = jsonParticipants[pi];\n            var intRef = jsonParticipant.interactorRef;\n\n            var _participant3 = self.molecules.get(intRef);\n\n            if (typeof _participant3 === 'undefined') {\n              //must be a previously unencountered complex\n              _participant3 = new Complex(intRef, self);\n              complexes.set(intRef, _participant3);\n              self.molecules.set(intRef, _participant3);\n            }\n\n            _participant3.naryLinks.set(_nLinkId2, nLink); //TODO: tidy up whats happening in NaryLink re interactor/participant terminology\n\n\n            if (nLink.interactors.indexOf(_participant3) === -1) {\n              nLink.interactors.push(_participant3);\n            } //temp - to give sensible info when stoich collapsed\n\n\n            var _interactor3 = self.molecules.get(intRef);\n\n            _interactor3.stoich = _interactor3.stoich ? _interactor3.stoich : 0;\n\n            if (jsonParticipant.stoichiometry) {\n              _interactor3.stoich = _interactor3.stoich + +jsonParticipant.stoichiometry;\n            } else {\n              _interactor3.stoich = _interactor3.stoich + 1;\n            }\n          }\n\n          var interactorArr = self.molecules.values();\n          var iCount = interactorArr.length;\n\n          for (var ii = 0; ii < iCount; ii++) {\n            var _int = interactorArr[ii];\n\n            _int.addStoichiometryLabel(_int.stoich);\n          }\n        }\n      }\n    } catch (err) {\n      _iterator32.e(err);\n    } finally {\n      _iterator32.f();\n    }\n  }\n\n  function getNaryLinkIdFromInteraction(interaction) {\n    if (interaction.naryId) {\n      return interaction.naryId;\n    }\n\n    var jsonParticipants = interaction.participants;\n    var participantCount = jsonParticipants.length;\n    var pIDs = d3.set(); //used to eliminate duplicates\n    //make id\n\n    for (var pi = 0; pi < participantCount; pi++) {\n      var pID = jsonParticipants[pi].interactorRef;\n\n      if (expand) {\n        pID = pID + \"(\" + jsonParticipants[pi].id + \")\";\n      }\n\n      pIDs.add(pID);\n    }\n\n    return pIDs.values().sort().join('-');\n  }\n\n  function getNode(seqDatum) {\n    var id = seqDatum.interactorRef;\n\n    if (expand) {\n      id = id + '(' + seqDatum.participantRef + ')';\n    }\n\n    return self.molecules.get(id);\n  }\n\n  function getFeatureLink(fromSeqData, toSeqData, interaction) {\n    function seqDataToString(seqData) {\n      var nodeIds = d3.set(); //used to eliminate duplicates\n      //make id\n\n      for (var s = 0; s < seqData.length; s++) {\n        var seq = seqData[s];\n        var id = seq.interactorRef;\n\n        if (expand) {\n          id = id + '(' + seq.participantRef + ')';\n        }\n\n        id = id + ':' + seq.pos;\n        nodeIds.add(id);\n      } //sort ids\n\n\n      return nodeIds.values().sort().join(';');\n    }\n\n    var start = seqDataToString(fromSeqData);\n    var end = seqDataToString(toSeqData);\n    var seqLinkId; //, endsSwapped;\n\n    if (start < end) {\n      seqLinkId = start + '><' + end; //endsSwapped = false;\n    } else {\n      seqLinkId = end + '><' + start; //endsSwapped = true;\n    }\n\n    var sequenceLink = self.allSequenceLinks.get(seqLinkId);\n\n    if (typeof sequenceLink === 'undefined') {\n      var fromFeaturePositions = [];\n\n      var _iterator33 = _createForOfIteratorHelper(fromSeqData),\n          _step33;\n\n      try {\n        for (_iterator33.s(); !(_step33 = _iterator33.n()).done;) {\n          var fromSeqDatum = _step33.value;\n          fromFeaturePositions.push(new SequenceFeature(getNode(fromSeqDatum), fromSeqDatum.pos));\n        }\n      } catch (err) {\n        _iterator33.e(err);\n      } finally {\n        _iterator33.f();\n      }\n\n      var toFeaturePositions = [];\n\n      var _iterator34 = _createForOfIteratorHelper(toSeqData),\n          _step34;\n\n      try {\n        for (_iterator34.s(); !(_step34 = _iterator34.n()).done;) {\n          var toSeqDatum = _step34.value;\n          toFeaturePositions.push(new SequenceFeature(getNode(toSeqDatum), toSeqDatum.pos));\n        } //~ if (endsSwapped === false) {\n\n      } catch (err) {\n        _iterator34.e(err);\n      } finally {\n        _iterator34.f();\n      }\n\n      sequenceLink = new SequenceLink(seqLinkId, fromFeaturePositions, toFeaturePositions, self, interaction); //~ }else {\n      //~ sequenceLink = new SequenceLink(seqLinkId, toFeaturePositions, fromFeaturePositions, self, interaction);\n      //~ }\n\n      self.allSequenceLinks.set(seqLinkId, sequenceLink);\n    }\n\n    sequenceLink.addEvidence(interaction);\n    var nLinkId = getNaryLinkIdFromInteraction(interaction);\n    var nLink = self.allNaryLinks.get(nLinkId);\n    nLink.sequenceLinks.set(seqLinkId, sequenceLink);\n    return sequenceLink;\n  }\n\n  function getUnaryLink(interactor, interaction) {\n    var linkID = '-' + interactor.id + '-' + interactor.id;\n    var link = self.allUnaryLinks.get(linkID);\n\n    if (typeof link === 'undefined') {\n      link = new UnaryLink(linkID, self, interactor);\n      self.allUnaryLinks.set(linkID, link);\n      interactor.selfLink = link;\n    }\n\n    var nLinkId = getNaryLinkIdFromInteraction(interaction);\n    var nLink = self.allNaryLinks.get(nLinkId);\n    nLink.unaryLinks.set(linkID, link);\n    link.addEvidence(interaction);\n    return link;\n  }\n\n  function getBinaryLink(sourceInteractor, targetInteractor, interaction) {\n    var linkID, fi, ti; // these links are undirected and should have same ID regardless of which way round\n    // source and target are\n\n    if (sourceInteractor.id < targetInteractor.id) {\n      linkID = '-' + sourceInteractor.id + '-' + targetInteractor.id;\n      fi = sourceInteractor;\n      ti = targetInteractor;\n    } else {\n      linkID = \"-\" + targetInteractor.id + '-' + sourceInteractor.id;\n      fi = targetInteractor;\n      ti = sourceInteractor;\n    }\n\n    var link = self.allBinaryLinks.get(linkID);\n\n    if (typeof link === 'undefined') {\n      link = new BinaryLink(linkID, self, fi, ti);\n      fi.binaryLinks.set(linkID, link);\n      ti.binaryLinks.set(linkID, link);\n      self.allBinaryLinks.set(linkID, link);\n    }\n\n    var nLinkId = getNaryLinkIdFromInteraction(interaction);\n    var nLink = self.allNaryLinks.get(nLinkId);\n    nLink.binaryLinks.set(linkID, link);\n    link.addEvidence(interaction);\n    return link;\n  }\n};\n\nxiNET.Controller.prototype.checkLinks = function () {\n  function checkAll(linkMap) {\n    var links = linkMap.values();\n    var c = links.length;\n\n    for (var l = 0; l < c; l++) {\n      links[l].check();\n    }\n  }\n\n  checkAll(this.allNaryLinks);\n  checkAll(this.allBinaryLinks);\n  checkAll(this.allUnaryLinks);\n  checkAll(this.allSequenceLinks);\n};\n\nxiNET.Controller.prototype.setAllLinkCoordinates = function () {\n  function setAll(linkMap) {\n    var links = linkMap.values();\n    var c = links.length;\n\n    for (var l = 0; l < c; l++) {\n      links[l].setLinkCoordinates();\n    }\n  }\n\n  setAll(this.allNaryLinks);\n  setAll(this.allBinaryLinks);\n  setAll(this.allUnaryLinks);\n  setAll(this.allSequenceLinks);\n};\n\nxiNET.Controller.prototype.showTooltip = function (p) {\n  var ttX, ttY;\n  var length = this.tooltip.getComputedTextLength() + 16;\n  var width = this.svgElement.parentNode.clientWidth;\n  var height = this.svgElement.parentNode.clientHeight;\n\n  if (p.x + 20 + length < width) {\n    ttX = p.x;\n  } else {\n    ttX = width - length - 20;\n  }\n\n  if (p.y + 60 < height) {\n    ttY = p.y;\n  } else {\n    ttY = height - 60;\n  }\n\n  this.tooltip.setAttribute(\"x\", ttX + 22);\n  this.tooltip.setAttribute(\"y\", ttY + 47);\n  this.tooltip_bg.setAttribute(\"x\", ttX + 16);\n  this.tooltip_bg.setAttribute(\"y\", ttY + 28);\n  this.tooltip_subBg.setAttribute(\"x\", ttX + 16);\n  this.tooltip_subBg.setAttribute(\"y\", ttY + 28);\n};\n\nxiNET.Controller.prototype.setTooltip = function (text, colour) {\n  if (text) {\n    this.tooltip.firstChild.data = text.toString().replace(/&(quot);/g, '\"');\n    this.tooltip.setAttribute(\"display\", \"block\");\n    var length = this.tooltip.getComputedTextLength();\n    this.tooltip_bg.setAttribute(\"width\", length + 16);\n    this.tooltip_subBg.setAttribute(\"width\", length + 16);\n\n    if (typeof colour !== 'undefined' && colour != null) {\n      this.tooltip_bg.setAttribute('fill', colour);\n      this.tooltip_bg.setAttribute('stroke', colour);\n      this.tooltip_bg.setAttribute('fill-opacity', '0.5');\n    } else {\n      this.tooltip_bg.setAttribute('fill', 'white');\n      this.tooltip_bg.setAttribute('stroke', 'grey');\n    }\n\n    this.tooltip_bg.setAttribute('height', 28);\n    this.tooltip_subBg.setAttribute('height', 28);\n    this.tooltip_bg.setAttribute(\"display\", \"block\");\n    this.tooltip_subBg.setAttribute(\"display\", \"block\");\n  } else {\n    this.hideTooltip();\n  }\n};\n\nxiNET.Controller.prototype.hideTooltip = function () {\n  this.tooltip.setAttribute(\"display\", \"none\");\n  this.tooltip_bg.setAttribute(\"display\", \"none\");\n  this.tooltip_subBg.setAttribute(\"display\", \"none\");\n};\n\nxiNET.Controller.prototype.legendChanged = function (colourScheme) {\n  var callbacks = this.legendCallbacks;\n  var count = callbacks.length;\n\n  for (var i = 0; i < count; i++) {\n    callbacks[i](colourScheme);\n  }\n};\n\nxiNET.Controller.prototype.getComplexColours = function () {\n  return NaryLink.naryColours;\n};\n\nxiNET.Controller.prototype.collapseAll = function () {\n  var molecules = this.molecules.values();\n  var mCount = molecules.length;\n\n  for (var m = 0; m < mCount; m++) {\n    var molecule = molecules[m];\n\n    if (molecule.form === 1) {\n      molecule.setForm(0);\n    }\n  }\n};\n\nxiNET.Controller.prototype.expandAll = function () {\n  var molecules = this.molecules.values();\n  var mCount = molecules.length;\n\n  for (var m = 0; m < mCount; m++) {\n    var molecule = molecules[m];\n\n    if (molecule.form === 0) {\n      molecule.setForm(1);\n    }\n  }\n};\n/*\nxiNET.Controller.prototype.expandAndCollapseSelection = function(moleculesSelected) {\n    const molecules = this.molecules.values();\n    for (let m = 0; m < molecules.length; m++) {\n        const molecule = molecules[m];\n        const molecule_id = molecule.json.identifier.id;\n        if (moleculesSelected.includes(molecule_id)) {\n            if (molecule.form === 0) {\n                molecule.setForm(1);\n            }\n        } else if (molecule.form === 1) {\n            molecule.setForm(0);\n        }\n    }\n};\n*/\n\n\nmodule.exports = xiNET.Controller;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvY29udHJvbGxlci9Db250cm9sbGVyLmpzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8veGlORVQvLi9zcmMvY29udHJvbGxlci9Db250cm9sbGVyLmpzPzVlNTciXSwic291cmNlc0NvbnRlbnQiOlsiLy8gICAgeGlORVQgSW50ZXJhY3Rpb24gVmlld2VyXG4vLyAgICBDb3B5cmlnaHQgMjAxMyBSYXBwc2lsYmVyIExhYm9yYXRvcnksIFVuaXZlcnNpdHkgb2YgRWRpbmJ1cmdoXG4vL1xuLy8gICAgVGhpcyBwcm9kdWN0IGluY2x1ZGVzIHNvZnR3YXJlIGRldmVsb3BlZCBhdFxuLy8gICAgdGhlIFJhcHBzaWxiZXIgTGFib3JhdG9yeSAoaHR0cDovL3d3dy5yYXBwc2lsYmVybGFiLm9yZy8pLlxuLy9cbi8vICAgIGF1dGhvcjogQ29saW4gQ29tYmVcbi8vXG4vLyAgICBDb250cm9sbGVyLmpzXG5cblwidXNlIHN0cmljdFwiO1xuXG5jb25zdCB4aU5FVCA9IHt9O1xuY29uc3QgZDMgPSByZXF1aXJlKCdkMycpO1xuY29uc3QgY29sb3JicmV3ZXIgPSByZXF1aXJlKCdjb2xvcmJyZXdlcicpO1xuY29uc3QgY29sYSA9IHJlcXVpcmUoJ3dlYmNvbGEnKTtcbmNvbnN0IHhpTkVUX1N0b3JhZ2UgPSByZXF1aXJlKCcuL3hpTkVUX1N0b3JhZ2UnKTtcbmNvbnN0IEFubm90YXRpb24gPSByZXF1aXJlKCcuLi9tb2RlbC9pbnRlcmFjdG9yL0Fubm90YXRpb24nKTtcbmNvbnN0IEludGVyYWN0b3IgPSByZXF1aXJlKCcuLi9tb2RlbC9pbnRlcmFjdG9yL0ludGVyYWN0b3InKTtcbmNvbnN0IFByb3RlaW4gPSByZXF1aXJlKCcuLi9tb2RlbC9pbnRlcmFjdG9yL1Byb3RlaW4nKTtcbmNvbnN0IEJpb2FjdGl2ZUVudGl0eSA9IHJlcXVpcmUoJy4uL21vZGVsL2ludGVyYWN0b3IvQmlvYWN0aXZlRW50aXR5Jyk7XG5jb25zdCBHZW5lID0gcmVxdWlyZSgnLi4vbW9kZWwvaW50ZXJhY3Rvci9HZW5lJyk7XG5jb25zdCBETkEgPSByZXF1aXJlKCcuLi9tb2RlbC9pbnRlcmFjdG9yL0ROQScpO1xuY29uc3QgUk5BID0gcmVxdWlyZSgnLi4vbW9kZWwvaW50ZXJhY3Rvci9STkEnKTtcbmNvbnN0IENvbXBsZXggPSByZXF1aXJlKCcuLi9tb2RlbC9pbnRlcmFjdG9yL0NvbXBsZXgnKTtcbmNvbnN0IENvbXBsZXhfc3ltYm9sID0gcmVxdWlyZSgnLi4vbW9kZWwvaW50ZXJhY3Rvci9Db21wbGV4X3N5bWJvbCcpO1xuY29uc3QgTW9sZWN1bGVTZXQgPSByZXF1aXJlKCcuLi9tb2RlbC9pbnRlcmFjdG9yL01vbGVjdWxlU2V0Jyk7XG5jb25zdCBOYXJ5TGluayA9IHJlcXVpcmUoJy4uL21vZGVsL2xpbmsvTmFyeUxpbmsnKTtcbmNvbnN0IFNlcXVlbmNlTGluayA9IHJlcXVpcmUoJy4uL21vZGVsL2xpbmsvU2VxdWVuY2VMaW5rJyk7XG5jb25zdCBTZXF1ZW5jZUZlYXR1cmUgPSByZXF1aXJlKCcuLy4uL21vZGVsL1NlcXVlbmNlRmVhdHVyZScpO1xuY29uc3QgQmluYXJ5TGluayA9IHJlcXVpcmUoJy4uL21vZGVsL2xpbmsvQmluYXJ5TGluaycpO1xuY29uc3QgVW5hcnlMaW5rID0gcmVxdWlyZSgnLi4vbW9kZWwvbGluay9VbmFyeUxpbmsnKTtcbmNvbnN0IEV4cGFuZCA9IHJlcXVpcmUoJy4vRXhwYW5kJyk7XG5jb25zdCBDb25maWcgPSByZXF1aXJlKCcuL0NvbmZpZycpO1xuXG5cbnhpTkVULkNvbnRyb2xsZXIgPSBmdW5jdGlvbih0YXJnZXREaXYsIGRlYnVnKSB7XG4gICAgdGhpcy5kZWJ1ZyA9ICEhZGVidWc7XG5cbiAgICBpZiAodHlwZW9mIHRhcmdldERpdiA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICB0aGlzLmVsID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQodGFyZ2V0RGl2KTtcbiAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLmVsID0gdGFyZ2V0RGl2O1xuICAgIH1cblxuICAgIHRoaXMuU1RBVEVTID0ge307XG4gICAgdGhpcy5TVEFURVMuTU9VU0VfVVAgPSAwOyAvL3N0YXJ0IHN0YXRlLCBhbHNvIHNldCB3aGVuIG1vdXNlIHVwIG9uIHN2Z0VsZW1lbnRcbiAgICB0aGlzLlNUQVRFUy5QQU5OSU5HID0gMTsgLy9zZXQgYnkgbW91c2UgZG93biBvbiBzdmdFbGVtZW50IC0gbGVmdCBidXR0b24sIG5vIHNoaWZ0IG9yIGNvbnRyb2xsZXJcbiAgICB0aGlzLlNUQVRFUy5EUkFHR0lORyA9IDI7IC8vc2V0IGJ5IG1vdXNlIGRvd24gb24gUHJvdGVpbiBvciBMaW5rXG4gICAgdGhpcy5TVEFURVMuUk9UQVRJTkcgPSAzOyAvL3NldCBieSBtb3VzZSBkb3duIG9uIFJvdGF0b3IsIGRyYWc/XG4gICAgdGhpcy5TVEFURVMuU0VMRUNUSU5HID0gNDsgLy9zZXQgYnkgbW91c2UgZG93biBvbiBzdmdFbGVtZW50LSByaWdodCBidXR0b24gb3IgbGVmdCBidXR0b24gc2hpZnQgb3IgY29udHJvbGxlciwgZHJhZ1xuXG4gICAgLy9hdm9pZHMgcHJvYiB3aXRoICdzYXZlIC0gd2ViIHBhZ2UgY29tcGxldGUnXG4gICAgZDMuc2VsZWN0KHRoaXMuZWwpLnNlbGVjdEFsbChcIipcIikucmVtb3ZlKCk7XG5cbiAgICBjb25zdCBjdXN0b21NZW51U2VsID0gZDMuc2VsZWN0KHRoaXMuZWwpXG4gICAgICAgIC5hcHBlbmQoXCJkaXZcIikuY2xhc3NlZChcImN1c3RvbS1tZW51LW1hcmdpblwiLCB0cnVlKVxuICAgICAgICAuYXBwZW5kKFwiZGl2XCIpLmNsYXNzZWQoXCJjdXN0b20tbWVudVwiLCB0cnVlKVxuICAgICAgICAuYXBwZW5kKFwidWxcIik7XG5cbiAgICBjb25zdCBzZWxmID0gdGhpcztcbiAgICBjb25zdCBjb2xsYXBzZSA9IGN1c3RvbU1lbnVTZWwuYXBwZW5kKFwibGlcIikuY2xhc3NlZChcImNvbGxhcHNlXCIsIHRydWUpOyAvLy5hcHBlbmQoXCJidXR0b25cIik7XG4gICAgY29sbGFwc2UudGV4dChcIkNvbGxhcHNlXCIpO1xuICAgIGNvbGxhcHNlWzBdWzBdLm9uY2xpY2sgPSBmdW5jdGlvbihldnQpIHtcbiAgICAgICAgc2VsZi5jb2xsYXBzZVByb3RlaW4oZXZ0KTtcbiAgICB9O1xuICAgIGNvbnN0IHNjYWxlQnV0dG9uc0xpc3RJdGVtU2VsID0gY3VzdG9tTWVudVNlbC5hcHBlbmQoXCJsaVwiKS50ZXh0KFwiU2NhbGU6IFwiKTtcblxuICAgIHRoaXMuYmFyU2NhbGVzID0gWzAuMDEsIDAuMiwgMSwgMiwgNCwgOF07XG4gICAgY29uc3Qgc2NhbGVCdXR0b25zID0gc2NhbGVCdXR0b25zTGlzdEl0ZW1TZWwuc2VsZWN0QWxsKFwidWwuY3VzdG9tLW1lbnVcIilcbiAgICAgICAgLmRhdGEodGhpcy5iYXJTY2FsZXMpXG4gICAgICAgIC5lbnRlcigpXG4gICAgICAgIC5hcHBlbmQoXCJkaXZcIilcbiAgICAgICAgLmF0dHIoXCJjbGFzc1wiLCBcImJhclNjYWxlXCIpXG4gICAgICAgIC5hcHBlbmQoXCJsYWJlbFwiKTtcbiAgICBzY2FsZUJ1dHRvbnMuYXBwZW5kKFwic3BhblwiKVxuICAgICAgICAudGV4dChmdW5jdGlvbihkKSB7XG4gICAgICAgICAgICBpZiAoZCA9PT0gOCkgcmV0dXJuIFwiQUFcIjtcbiAgICAgICAgICAgIGVsc2UgcmV0dXJuIGQ7XG4gICAgICAgIH0pO1xuICAgIHNjYWxlQnV0dG9ucy5hcHBlbmQoXCJpbnB1dFwiKVxuICAgICAgICAvLyAuYXR0ciAoXCJpZFwiLCBmdW5jdGlvbihkKSB7IHJldHVybiBkKjEwMDsgfSlcbiAgICAgICAgLmF0dHIoXCJjbGFzc1wiLCBmdW5jdGlvbihkKSB7XG4gICAgICAgICAgICByZXR1cm4gXCJzY2FsZUJ1dHRvbiBzY2FsZUJ1dHRvbl9cIiArIChkICogMTAwKTtcbiAgICAgICAgfSlcbiAgICAgICAgLmF0dHIoXCJuYW1lXCIsIFwic2NhbGVCdXR0b25zXCIpXG4gICAgICAgIC5hdHRyKFwidHlwZVwiLCBcInJhZGlvXCIpXG4gICAgICAgIC5vbihcImNoYW5nZVwiLCBmdW5jdGlvbihkKSB7XG4gICAgICAgICAgICBzZWxmLnByZXZlbnREZWZhdWx0c0FuZFN0b3BQcm9wYWdhdGlvbihkKTtcbiAgICAgICAgICAgIHNlbGYuY29udGV4dE1lbnVQcm90LnNldFN0aWNrU2NhbGUoZCwgc2VsZi5jb250ZXh0TWVudVBvaW50KTtcbiAgICAgICAgfSk7XG5cbiAgICBjb25zdCBjb250ZXh0TWVudSA9IGQzLnNlbGVjdChcIi5jdXN0b20tbWVudS1tYXJnaW5cIikubm9kZSgpO1xuICAgIGNvbnRleHRNZW51Lm9ubW91c2VvdXQgPSBmdW5jdGlvbihldnQpIHtcbiAgICAgICAgbGV0IGUgPSBldnQucmVsYXRlZFRhcmdldDtcbiAgICAgICAgZG8ge1xuICAgICAgICAgICAgaWYgKGUgPT09IHRoaXMpIHJldHVybjtcbiAgICAgICAgICAgIGUgPSBlLnBhcmVudE5vZGU7XG4gICAgICAgIH0gd2hpbGUgKGUpO1xuICAgICAgICBzZWxmLmNvbnRleHRNZW51UHJvdCA9IG51bGw7XG4gICAgICAgIGQzLnNlbGVjdCh0aGlzKS5zdHlsZShcImRpc3BsYXlcIiwgXCJub25lXCIpO1xuICAgIH07XG5cblxuICAgIC8vY3JlYXRlIFNWRyBlbGVtbmVudFxuICAgIHRoaXMuc3ZnRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUyhDb25maWcuc3ZnbnMsIFwic3ZnXCIpO1xuICAgIHRoaXMuc3ZnRWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2lkJywgJ2NvbXBsZXhWaWV3ZXJTVkcnKTtcblxuICAgIC8vYWRkIGxpc3RlbmVyc1xuICAgIHRoaXMuc3ZnRWxlbWVudC5vbm1vdXNlZG93biA9IGZ1bmN0aW9uKGV2dCkge1xuICAgICAgICBzZWxmLm1vdXNlRG93bihldnQpO1xuICAgIH07XG4gICAgdGhpcy5zdmdFbGVtZW50Lm9ubW91c2Vtb3ZlID0gZnVuY3Rpb24oZXZ0KSB7XG4gICAgICAgIHNlbGYubW91c2VNb3ZlKGV2dCk7XG4gICAgfTtcbiAgICB0aGlzLnN2Z0VsZW1lbnQub25tb3VzZXVwID0gZnVuY3Rpb24oZXZ0KSB7XG4gICAgICAgIHNlbGYubW91c2VVcChldnQpO1xuICAgIH07XG4gICAgdGhpcy5zdmdFbGVtZW50Lm9ubW91c2VvdXQgPSBmdW5jdGlvbihldnQpIHtcbiAgICAgICAgc2VsZi5oaWRlVG9vbHRpcChldnQpO1xuICAgIH07XG4gICAgdGhpcy5sYXN0TW91c2VVcCA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpO1xuICAgIC8qdGhpcy5zdmdFbGVtZW50Lm9udG91Y2hzdGFydCA9IGZ1bmN0aW9uKGV2dCkge1xuICAgICAgICBzZWxmLnRvdWNoU3RhcnQoZXZ0KTtcbiAgICB9O1xuICAgIHRoaXMuc3ZnRWxlbWVudC5vbnRvdWNobW92ZSA9IGZ1bmN0aW9uKGV2dCkge1xuICAgICAgICBzZWxmLnRvdWNoTW92ZShldnQpO1xuICAgIH07XG4gICAgdGhpcy5zdmdFbGVtZW50Lm9udG91Y2hlbmQgPSBmdW5jdGlvbihldnQpIHtcbiAgICAgICAgc2VsZi50b3VjaEVuZChldnQpO1xuICAgIH07XG4gICAgKi9cbiAgICB0aGlzLmVsLm9uY29udGV4dG1lbnUgPSBmdW5jdGlvbihldnQpIHtcbiAgICAgICAgaWYgKGV2dC5wcmV2ZW50RGVmYXVsdCkgeyAvLyBuZWNlc3NhcnkgZm9yIGFkZEV2ZW50TGlzdGVuZXIsIHdvcmtzIHdpdGggdHJhZGl0aW9uYWxcbiAgICAgICAgICAgIGV2dC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICB9XG4gICAgICAgIGV2dC5yZXR1cm5WYWx1ZSA9IGZhbHNlOyAvLyBuZWNlc3NhcnkgZm9yIGF0dGFjaEV2ZW50LCB3b3JrcyB3aXRoIHRyYWRpdGlvbmFsXG4gICAgICAgIHJldHVybiBmYWxzZTsgLy8gd29ya3Mgd2l0aCB0cmFkaXRpb25hbCwgbm90IHdpdGggYXR0YWNoRXZlbnQgb3IgYWRkRXZlbnRMaXN0ZW5lclxuICAgIH07XG5cbiAgICAvL2xlZ2VuZCBjaGFuZ2VkIGNhbGxiYWNrc1xuICAgIHRoaXMubGVnZW5kQ2FsbGJhY2tzID0gW107XG5cbiAgICB0aGlzLmVsLmFwcGVuZENoaWxkKHRoaXMuc3ZnRWxlbWVudCk7XG5cbiAgICAvLyB2YXJpb3VzIGdyb3VwcyBuZWVkZWRcbiAgICB0aGlzLmNvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUyhDb25maWcuc3ZnbnMsIFwiZ1wiKTtcbiAgICB0aGlzLmNvbnRhaW5lci5zZXRBdHRyaWJ1dGUoXCJpZFwiLCBcImNvbnRhaW5lclwiKTtcblxuICAgIGNvbnN0IHN2ZyA9IGQzLnNlbGVjdCh0aGlzLnN2Z0VsZW1lbnQpO1xuICAgIHRoaXMuZGVmcyA9IHN2Zy5hcHBlbmQoJ2RlZnMnKTtcbiAgICB0aGlzLmNyZWF0ZUhhdGNoZWRGaWxsKCdjaGVja2Vyc191bmNlcnRhaW4nLCAnYmxhY2snKTtcblxuICAgIC8vbWFya2Vyc1xuICAgIGNvbnN0IGRhdGEgPSBbe1xuICAgICAgICBpZDogMSxcbiAgICAgICAgbmFtZTogJ2RpYW1vbmQnLFxuICAgICAgICBwYXRoOiAnTSAwLC03LjA3MTA3NjggTCAgMCw3LjA3MTA1ODkgTCA3LjA3MTA0NjIsMCAgeicsXG4gICAgICAgIHZpZXdib3g6ICctMTUgLTE1IDI1IDI1JyxcbiAgICAgICAgdHJhbnNmb3JtOiAnc2NhbGUoMS41KSB0cmFuc2xhdGUoLTUsMCknLFxuICAgICAgICBjb2xvcjogJ2JsYWNrJ1xuICAgIH1dO1xuXG4gICAgdGhpcy5kZWZzLnNlbGVjdEFsbCgnbWFya2VyJylcbiAgICAgICAgLmRhdGEoZGF0YSlcbiAgICAgICAgLmVudGVyKClcbiAgICAgICAgLmFwcGVuZCgnc3ZnOm1hcmtlcicpXG4gICAgICAgIC5hdHRyKCdpZCcsIGZ1bmN0aW9uIChkKSB7XG4gICAgICAgICAgICByZXR1cm4gJ21hcmtlcl8nICsgZC5uYW1lO1xuICAgICAgICB9KVxuICAgICAgICAuYXR0cignbWFya2VySGVpZ2h0JywgMTUpXG4gICAgICAgIC5hdHRyKCdtYXJrZXJXaWR0aCcsIDE1KVxuICAgICAgICAuYXR0cignbWFya2VyVW5pdHMnLCAndXNlclNwYWNlT25Vc2UnKVxuICAgICAgICAuYXR0cignb3JpZW50JywgJ2F1dG8nKVxuICAgICAgICAuYXR0cigncmVmWCcsIDApXG4gICAgICAgIC5hdHRyKCdyZWZZJywgMClcbiAgICAgICAgLmF0dHIoJ3ZpZXdCb3gnLCBmdW5jdGlvbiAoZCkge1xuICAgICAgICAgICAgcmV0dXJuIGQudmlld2JveDtcbiAgICAgICAgfSlcbiAgICAgICAgLmFwcGVuZCgnc3ZnOnBhdGgnKVxuICAgICAgICAuYXR0cignZCcsIGZ1bmN0aW9uIChkKSB7XG4gICAgICAgICAgICByZXR1cm4gZC5wYXRoO1xuICAgICAgICB9KVxuICAgICAgICAuYXR0cignZmlsbCcsIGZ1bmN0aW9uIChkKSB7XG4gICAgICAgICAgICByZXR1cm4gZC5jb2xvcjtcbiAgICAgICAgfSlcbiAgICAgICAgLmF0dHIoJ3RyYW5zZm9ybScsIGZ1bmN0aW9uIChkKSB7XG4gICAgICAgICAgICByZXR1cm4gZC50cmFuc2Zvcm07XG4gICAgICAgIH0pO1xuXG4gICAgdGhpcy5hY2tub3dsZWRnZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50TlMoQ29uZmlnLnN2Z25zLCBcImdcIik7XG4gICAgY29uc3QgYWNrVGV4dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUyhDb25maWcuc3ZnbnMsIFwidGV4dFwiKTtcbiAgICBhY2tUZXh0LmlubmVySFRNTCA9IFwiPGEgaHJlZj0naHR0cHM6Ly9hY2FkZW1pYy5vdXAuY29tL2Jpb2luZm9ybWF0aWNzL2FydGljbGUvMzMvMjIvMzY3My80MDYxMjgwJyB0YXJnZXQ9J19ibGFuayc+PHRzcGFuIHg9JzAnIGR5PScxLjJlbScgc3R5bGU9J3RleHQtZGVjb3JhdGlvbjogdW5kZXJsaW5lJz5Db21wbGV4Vmlld2VyPC90c3Bhbj48L2E+PHRzcGFuIHg9JzAnIGR5PScxLjJlbSc+YnkgPGEgaHJlZj0naHR0cDovL3JhcHBzaWxiZXJsYWIub3JnLycgdGFyZ2V0PSdfYmxhbmsnPlJhcHBzaWxiZXIgTGFib3JhdG9yeTwvYT48L3RzcGFuPlwiXG5cbiAgICB0aGlzLmFja25vd2xlZGdlbWVudC5hcHBlbmRDaGlsZChhY2tUZXh0KTtcbiAgICBhY2tUZXh0LnNldEF0dHJpYnV0ZShcImZvbnQtc2l6ZVwiLCBcIjEycHhcIik7XG4gICAgdGhpcy5jb250YWluZXIuYXBwZW5kQ2hpbGQodGhpcy5hY2tub3dsZWRnZW1lbnQpO1xuXG4gICAgdGhpcy5uYXJ5TGlua3MgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50TlMoQ29uZmlnLnN2Z25zLCBcImdcIik7XG4gICAgdGhpcy5uYXJ5TGlua3Muc2V0QXR0cmlidXRlKFwiaWRcIiwgXCJuYXJ5TGlua3NcIik7XG4gICAgdGhpcy5jb250YWluZXIuYXBwZW5kQ2hpbGQodGhpcy5uYXJ5TGlua3MpO1xuXG4gICAgdGhpcy5wX3BMaW5rc1dpZGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50TlMoQ29uZmlnLnN2Z25zLCBcImdcIik7XG4gICAgdGhpcy5wX3BMaW5rc1dpZGUuc2V0QXR0cmlidXRlKFwiaWRcIiwgXCJwX3BMaW5rc1dpZGVcIik7XG4gICAgdGhpcy5jb250YWluZXIuYXBwZW5kQ2hpbGQodGhpcy5wX3BMaW5rc1dpZGUpO1xuXG4gICAgdGhpcy5oaWdobGlnaHRzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKENvbmZpZy5zdmducywgXCJnXCIpO1xuICAgIHRoaXMuaGlnaGxpZ2h0cy5zZXRBdHRyaWJ1dGUoXCJjbGFzc1wiLCBcImhpZ2hsaWdodHNcIik7IC8vaW50ZXJhY3RvcnMgYWxzbyBjb250YWluIGhpZ2hsaWdodCBncm91cHNcbiAgICB0aGlzLmNvbnRhaW5lci5hcHBlbmRDaGlsZCh0aGlzLmhpZ2hsaWdodHMpO1xuXG4gICAgdGhpcy5yZXNfcmVzTGlua3MgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50TlMoQ29uZmlnLnN2Z25zLCBcImdcIik7XG4gICAgdGhpcy5yZXNfcmVzTGlua3Muc2V0QXR0cmlidXRlKFwiaWRcIiwgXCJyZXNfcmVzTGlua3NcIik7XG4gICAgdGhpcy5jb250YWluZXIuYXBwZW5kQ2hpbGQodGhpcy5yZXNfcmVzTGlua3MpO1xuXG4gICAgdGhpcy5wX3BMaW5rcyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUyhDb25maWcuc3ZnbnMsIFwiZ1wiKTtcbiAgICB0aGlzLnBfcExpbmtzLnNldEF0dHJpYnV0ZShcImlkXCIsIFwicF9wTGlua3NcIik7XG4gICAgdGhpcy5jb250YWluZXIuYXBwZW5kQ2hpbGQodGhpcy5wX3BMaW5rcyk7XG5cbiAgICB0aGlzLnByb3RlaW5VcHBlciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUyhDb25maWcuc3ZnbnMsIFwiZ1wiKTtcbiAgICB0aGlzLnByb3RlaW5VcHBlci5zZXRBdHRyaWJ1dGUoXCJpZFwiLCBcInByb3RlaW5VcHBlclwiKTtcbiAgICB0aGlzLmNvbnRhaW5lci5hcHBlbmRDaGlsZCh0aGlzLnByb3RlaW5VcHBlcik7XG5cbiAgICB0aGlzLnNlbGZSZXNfcmVzTGlua3MgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50TlMoQ29uZmlnLnN2Z25zLCBcImdcIik7XG4gICAgdGhpcy5zZWxmUmVzX3Jlc0xpbmtzLnNldEF0dHJpYnV0ZShcImlkXCIsIFwicmVzX3Jlc0xpbmtzXCIpO1xuICAgIHRoaXMuY29udGFpbmVyLmFwcGVuZENoaWxkKHRoaXMuc2VsZlJlc19yZXNMaW5rcyk7XG5cbiAgICB0aGlzLnN2Z0VsZW1lbnQuYXBwZW5kQ2hpbGQodGhpcy5jb250YWluZXIpO1xuXG4gICAgLy9zaG93aW5nIHRpdGxlIGFzIHRvb2x0aXBzIGlzIE5PVCBwYXJ0IG9mIHN2ZyBzcGVjIChldmVuIHRob3VnaCBzb21lIGJyb3dzZXJzIGRvIHRoaXMpXG4gICAgLy9hbHNvIG1vcmUgcmVwc29uc2l2ZSAvIG1vcmUgY29udHJvbCBpZiB3ZSBkbyBvdXQgb3duXG4gICAgdGhpcy50b29sdGlwID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKENvbmZpZy5zdmducywgXCJ0ZXh0XCIpO1xuICAgIHRoaXMudG9vbHRpcC5zZXRBdHRyaWJ1dGUoJ3gnLCAwKTtcbiAgICB0aGlzLnRvb2x0aXAuc2V0QXR0cmlidXRlKCd5JywgMCk7XG4gICAgdGhpcy50b29sdGlwLnNldEF0dHJpYnV0ZSgnY2xhc3MnLCAneGx2X3RleHQnKTtcbiAgICBjb25zdCB0b29sdGlwVGV4dE5vZGUgPSBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZSgndG9vbHRpcCcpO1xuXG4gICAgdGhpcy50b29sdGlwLmFwcGVuZENoaWxkKHRvb2x0aXBUZXh0Tm9kZSk7XG5cbiAgICB0aGlzLnRvb2x0aXBfYmcgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50TlMoQ29uZmlnLnN2Z25zLCBcInJlY3RcIik7XG4gICAgdGhpcy50b29sdGlwX2JnLnNldEF0dHJpYnV0ZSgnY2xhc3MnLCAndG9vbHRpcF9iZycpO1xuXG4gICAgdGhpcy50b29sdGlwX2JnLnNldEF0dHJpYnV0ZSgnZmlsbC1vcGFjaXR5JywgMC43NSk7XG4gICAgdGhpcy50b29sdGlwX2JnLnNldEF0dHJpYnV0ZSgnc3Ryb2tlLW9wYWNpdHknLCAxKTtcbiAgICB0aGlzLnRvb2x0aXBfYmcuc2V0QXR0cmlidXRlKCdzdHJva2Utd2lkdGgnLCAxKTtcblxuICAgIHRoaXMudG9vbHRpcF9zdWJCZyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUyhDb25maWcuc3ZnbnMsIFwicmVjdFwiKTtcbiAgICB0aGlzLnRvb2x0aXBfc3ViQmcuc2V0QXR0cmlidXRlKCdmaWxsJywgJ3doaXRlJyk7XG4gICAgdGhpcy50b29sdGlwX3N1YkJnLnNldEF0dHJpYnV0ZSgnc3Ryb2tlJywgJ3doaXRlJyk7XG4gICAgdGhpcy50b29sdGlwX3N1YkJnLnNldEF0dHJpYnV0ZSgnY2xhc3MnLCAndG9vbHRpcF9iZycpO1xuICAgIHRoaXMudG9vbHRpcF9zdWJCZy5zZXRBdHRyaWJ1dGUoJ29wYWNpdHknLCAxKTtcbiAgICB0aGlzLnRvb2x0aXBfc3ViQmcuc2V0QXR0cmlidXRlKCdzdHJva2Utd2lkdGgnLCAxKTtcblxuICAgIHRoaXMuc3ZnRWxlbWVudC5hcHBlbmRDaGlsZCh0aGlzLnRvb2x0aXBfc3ViQmcpO1xuICAgIHRoaXMuc3ZnRWxlbWVudC5hcHBlbmRDaGlsZCh0aGlzLnRvb2x0aXBfYmcpO1xuICAgIHRoaXMuc3ZnRWxlbWVudC5hcHBlbmRDaGlsZCh0aGlzLnRvb2x0aXApO1xuXG4gICAgdGhpcy5jbGVhcigpO1xufTtcblxueGlORVQuQ29udHJvbGxlci5wcm90b3R5cGUuY3JlYXRlSGF0Y2hlZEZpbGwgPSBmdW5jdGlvbihuYW1lLCBjb2xvdXIpIHtcbiAgICBjb25zdCBwYXR0ZXJuID0gdGhpcy5kZWZzLmFwcGVuZCgncGF0dGVybicpXG4gICAgICAgIC5hdHRyKCdpZCcsIG5hbWUpXG4gICAgICAgIC5hdHRyKCdwYXR0ZXJuVW5pdHMnLCAndXNlclNwYWNlT25Vc2UnKVxuICAgICAgICAuYXR0cihcInhcIiwgMClcbiAgICAgICAgLmF0dHIoXCJ5XCIsIDApXG4gICAgICAgIC5hdHRyKCd3aWR0aCcsIDEyKVxuICAgICAgICAuYXR0cignaGVpZ2h0JywgMTIpXG4gICAgICAgIC5hdHRyKFwicGF0dGVyblRyYW5zZm9ybVwiLCBcInJvdGF0ZSg0NSlcIik7XG5cbiAgICBwYXR0ZXJuLmFwcGVuZCgncmVjdCcpXG4gICAgICAgIC5hdHRyKFwieFwiLCAwKVxuICAgICAgICAuYXR0cihcInlcIiwgMilcbiAgICAgICAgLmF0dHIoXCJ3aWR0aFwiLCAxMilcbiAgICAgICAgLmF0dHIoXCJoZWlnaHRcIiwgNClcbiAgICAgICAgLmF0dHIoXCJmaWxsXCIsIGNvbG91cik7XG5cbiAgICAgICAgcGF0dGVybi5hcHBlbmQoJ3JlY3QnKVxuICAgICAgICAuYXR0cihcInhcIiwgMClcbiAgICAgICAgLmF0dHIoXCJ5XCIsIDgpXG4gICAgICAgIC5hdHRyKFwid2lkdGhcIiwgMTIpXG4gICAgICAgIC5hdHRyKFwiaGVpZ2h0XCIsIDQpXG4gICAgICAgIC5hdHRyKFwiZmlsbFwiLCBjb2xvdXIpO1xuXG5cbiAgICAgICAgLy8gY2hlY2tzIC0geXVrXG4gICAgICAgIC8vIHBhdHRlcm4uYXBwZW5kKCdyZWN0JylcbiAgICAgICAgLy8gICAgIC5hdHRyKFwieFwiLCAwKVxuICAgICAgICAvLyAgICAgLmF0dHIoXCJ5XCIsIDApXG4gICAgICAgIC8vICAgICAuYXR0cihcIndpZHRoXCIsIDUpXG4gICAgICAgIC8vICAgICAuYXR0cihcImhlaWdodFwiLCA1KVxuICAgICAgICAvLyAgICAgLnN0eWxlKFwiZmlsbFwiLCBcImJsYWNrXCIpOy8vIFwiI0EwMTI4NFwiKTtcbiAgICAgICAgLy8gcGF0dGVybi5hcHBlbmQoJ3JlY3QnKVxuICAgICAgICAvLyAgICAgLmF0dHIoXCJ4XCIsIDUpXG4gICAgICAgIC8vICAgICAuYXR0cihcInlcIiwgNSlcbiAgICAgICAgLy8gICAgIC5hdHRyKFwid2lkdGhcIiwgNSlcbiAgICAgICAgLy8gICAgIC5hdHRyKFwiaGVpZ2h0XCIsIDUpXG4gICAgICAgIC8vICAgICAuc3R5bGUoXCJmaWxsXCIsIFwiYmxhY2tcIik7Ly9cIiNBMDEyODRcIik7XG59XG5cbnhpTkVULkNvbnRyb2xsZXIucHJvdG90eXBlLmNsZWFyID0gZnVuY3Rpb24oKSB7XG4gICAgaWYgKHRoaXMuZDNjb2xhKSB7XG4gICAgICAgIHRoaXMuZDNjb2xhLnN0b3AoKTtcbiAgICB9XG4gICAgdGhpcy5kM2NvbGEgPSBudWxsO1xuXG4gICAgTmFyeUxpbmsubmFyeUNvbG91cnMgPSBkMy5zY2FsZS5vcmRpbmFsKCkucmFuZ2UoY29sb3JicmV3ZXIuUGFzdGVsMls4XSk7XG4gICAgdGhpcy5kZWZzLnNlbGVjdEFsbChcIi5mZWF0dXJlX2NoZWNrZXJzXCIpLnJlbW92ZSgpO1xuXG4gICAgZDMuc2VsZWN0KHRoaXMubmFyeUxpbmtzKS5zZWxlY3RBbGwoXCIqXCIpLnJlbW92ZSgpO1xuICAgIGQzLnNlbGVjdCh0aGlzLnBfcExpbmtzV2lkZSkuc2VsZWN0QWxsKFwiKlwiKS5yZW1vdmUoKTtcbiAgICBkMy5zZWxlY3QodGhpcy5oaWdobGlnaHRzKS5zZWxlY3RBbGwoXCIqXCIpLnJlbW92ZSgpO1xuICAgIGQzLnNlbGVjdCh0aGlzLnBfcExpbmtzKS5zZWxlY3RBbGwoXCIqXCIpLnJlbW92ZSgpO1xuICAgIGQzLnNlbGVjdCh0aGlzLnJlc19yZXNMaW5rcykuc2VsZWN0QWxsKFwiKlwiKS5yZW1vdmUoKTtcbiAgICBkMy5zZWxlY3QodGhpcy5wcm90ZWluVXBwZXIpLnNlbGVjdEFsbChcIipcIikucmVtb3ZlKCk7XG4gICAgZDMuc2VsZWN0KHRoaXMuc2VsZlJlc19yZXNMaW5rcykuc2VsZWN0QWxsKFwiKlwiKS5yZW1vdmUoKTtcblxuICAgIC8vIGlmIHdlIGFyZSBkcmFnZ2luZyBzb21ldGhpbmcgYXQgdGhlIG1vbWVudCAtIHRoaXMgd2lsbCBiZSB0aGUgZWxlbWVudCB0aGF0IGlzIGRyYWdnZWRcbiAgICB0aGlzLmRyYWdFbGVtZW50ID0gbnVsbDtcbiAgICAvLyBmcm9tIHdoZXJlIGRpZCB3ZSBzdGFydCBkcmFnZ2luZ1xuICAgIHRoaXMuZHJhZ1N0YXJ0ID0ge307XG5cbiAgICB0aGlzLm1vbGVjdWxlcyA9IG5ldyBNYXAoKTsgLy8gdG9kbyAtIHJlbmFtZVxuICAgIHRoaXMuYWxsTmFyeUxpbmtzID0gZDMubWFwKCk7XG4gICAgdGhpcy5hbGxCaW5hcnlMaW5rcyA9IGQzLm1hcCgpO1xuICAgIHRoaXMuYWxsVW5hcnlMaW5rcyA9IGQzLm1hcCgpO1xuICAgIHRoaXMuYWxsU2VxdWVuY2VMaW5rcyA9IGQzLm1hcCgpO1xuICAgIHRoaXMuY29tcGxleGVzID0gW107XG5cbiAgICB0aGlzLnByb3RlaW5Db3VudCA9IDA7XG4gICAgLy8gdGhpcy5tYXhCbG9iUmFkaXVzID0gMzA7XG4gICAgLy8gSW50ZXJhY3Rvci5NQVhTSVpFID0gMTAwO1xuXG4gICAgdGhpcy56ID0gMTtcblxuICAgIHRoaXMuaGlkZVRvb2x0aXAoKTtcblxuICAgIHRoaXMuc3RhdGUgPSB0aGlzLlNUQVRFUy5NT1VTRV9VUDtcbn07XG5cbnhpTkVULkNvbnRyb2xsZXIucHJvdG90eXBlLmNvbGxhcHNlUHJvdGVpbiA9IGZ1bmN0aW9uKCkge1xuICAgIGNvbnN0IHAgPSB0aGlzLmNvbnRleHRNZW51UG9pbnQ7XG4gICAgY29uc3QgYyA9IHAubWF0cml4VHJhbnNmb3JtKHRoaXMuY29udGFpbmVyLmdldENUTSgpLmludmVyc2UoKSk7XG5cbiAgICBkMy5zZWxlY3QoXCIuY3VzdG9tLW1lbnUtbWFyZ2luXCIpLnN0eWxlKFwiZGlzcGxheVwiLCBcIm5vbmVcIik7XG4gICAgdGhpcy5jb250ZXh0TWVudVByb3Quc2V0Rm9ybSgwLCBjKTtcbiAgICB0aGlzLmNvbnRleHRNZW51UHJvdCA9IG51bGw7XG59O1xuXG4vL3RoaXMgY2FuIGJlIGRvbmUgYmVmb3JlIGFsbCBwcm90ZWlucyBoYXZlIHRoZWlyIHNlcXVlbmNlc1xueGlORVQuQ29udHJvbGxlci5wcm90b3R5cGUuaW5pdCA9IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuY2hlY2tMaW5rcygpOyAvLyB0b2RvIC0gc2hvdWxkIHRoaXMgcmVhbGx5IGJlIGhlcmVcbiAgICBsZXQgbWF4U2VxTGVuZ3RoID0gMDtcbiAgICBmb3IgKGxldCBwYXJ0aWNpcGFudCBvZiB0aGlzLm1vbGVjdWxlcy52YWx1ZXMoKSApIHtcbiAgICAgICAgaWYgKHBhcnRpY2lwYW50LnNpemUgPiBtYXhTZXFMZW5ndGgpIHtcbiAgICAgICAgICAgIG1heFNlcUxlbmd0aCA9IHBhcnRpY2lwYW50LnNpemU7XG4gICAgICAgIH1cbiAgICB9XG4gICAgY29uc3Qgd2lkdGggPSB0aGlzLnN2Z0VsZW1lbnQucGFyZW50Tm9kZS5jbGllbnRXaWR0aDtcbiAgICBjb25zdCBkZWZhdWx0UGl4UGVyUmVzID0gKCh3aWR0aCAqIDAuOCkgLSBJbnRlcmFjdG9yLkxBQkVMTUFYTEVOR1RIKSAvIG1heFNlcUxlbmd0aDtcbiAgICAvL2NvbnNvbGUubG9nKFwiZGVmYXV0UGl4UGVyUmVzOlwiICsgZGVmYXVsdFBpeFBlclJlcyk7XG5cbiAgICAvLyBodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy8xMjE0MTE1MC9mcm9tLWxpc3Qtb2YtaW50ZWdlcnMtZ2V0LW51bWJlci1jbG9zZXN0LXRvLWEtZ2l2ZW4tdmFsdWUvMTIxNDE1MTEjMTIxNDE1MTFcbiAgICBmdW5jdGlvbiB0YWtlQ2xvc2VzdChteUxpc3QsIG15TnVtYmVyKSB7XG4gICAgICAgIGNvbnN0IGJpc2VjdCA9IGQzLmJpc2VjdG9yKGZ1bmN0aW9uIChkKSB7XG4gICAgICAgICAgICByZXR1cm4gZDtcbiAgICAgICAgfSkubGVmdDtcbiAgICAgICAgY29uc3QgcG9zID0gYmlzZWN0KG15TGlzdCwgbXlOdW1iZXIpO1xuICAgICAgICBpZiAocG9zID09PSAwIHx8IHBvcyA9PT0gMSkge1xuICAgICAgICAgICAgcmV0dXJuIG15TGlzdFsxXTsgLy8gZG9uJ3QgcmV0dXJuIHNtYWxsZXN0IHNjYWxlIGFzIGRlZmF1bHRcbiAgICAgICAgfVxuICAgICAgICBpZiAocG9zID09PSBteUxpc3QubGVuZ3RoKSB7XG4gICAgICAgICAgICByZXR1cm4gbXlMaXN0W215TGlzdC5sZW5ndGggLSAxXVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBteUxpc3RbcG9zIC0gMV07XG4gICAgfVxuXG4gICAgdGhpcy5kZWZhdWx0QmFyU2NhbGUgPSB0YWtlQ2xvc2VzdCh0aGlzLmJhclNjYWxlcywgZGVmYXVsdFBpeFBlclJlcyk7XG4gICAgLy9jb25zb2xlLmxvZyhcImRlZmF1bHQgYmFyIHNjYWxlOiBcIiArIHRoaXMuZGVmYXVsdEJhclNjYWxlKVxuXG4gICAgaWYgKHRoaXMuYW5ub3RhdGlvbkNob2ljZSkge1xuICAgICAgICB0aGlzLnNldEFubm90YXRpb25zKHRoaXMuYW5ub3RhdGlvbkNob2ljZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5zZXRBbm5vdGF0aW9ucygnTUkgRkVBVFVSRVMnKTtcbiAgICB9XG5cbiAgICBmb3IgKGxldCBwYXJ0aWNpcGFudCBvZiB0aGlzLm1vbGVjdWxlcy52YWx1ZXMoKSkge1xuICAgICAgICBpZiAocGFydGljaXBhbnQudXBwZXJHcm91cCkge1xuICAgICAgICAgICAgdGhpcy5wcm90ZWluVXBwZXIuYXBwZW5kQ2hpbGQocGFydGljaXBhbnQudXBwZXJHcm91cCk7XG4gICAgICAgICAgICBpZiAocGFydGljaXBhbnQuanNvbi50eXBlLm5hbWUgPT09IFwicHJvdGVpblwiKSB7XG4gICAgICAgICAgICAgICAgcGFydGljaXBhbnQuc3RpY2tab29tID0gdGhpcy5kZWZhdWx0QmFyU2NhbGU7XG4gICAgICAgICAgICAgICAgcGFydGljaXBhbnQuaW5pdCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHRoaXMubW9sZWN1bGVzLnNpemUgPCA0KSB7XG4gICAgICAgIGZvciAobGV0IHBhcnRpY2lwYW50IG9mIHRoaXMubW9sZWN1bGVzLnZhbHVlcygpKSB7XG4gICAgICAgICAgICBpZiAocGFydGljaXBhbnQuanNvbi50eXBlLm5hbWUgPT09IFwicHJvdGVpblwiKSB7XG4gICAgICAgICAgICAgICAgcGFydGljaXBhbnQudG9TdGlja05vVHJhbnNpdGlvbigpXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLmF1dG9MYXlvdXQoKTtcbn1cblxueGlORVQuQ29udHJvbGxlci5wcm90b3R5cGUuc2V0QW5ub3RhdGlvbnMgPSBmdW5jdGlvbihhbm5vdGF0aW9uQ2hvaWNlKSB7XG4gICAgdGhpcy5hbm5vdGF0aW9uQ2hvaWNlID0gYW5ub3RhdGlvbkNob2ljZTtcbiAgICBjb25zdCBzZWxmID0gdGhpcztcbiAgICAvL2NsZWFyIGFsbCBhbm5vdCdzXG4gICAgZm9yIChsZXQgbW9sIG9mIHRoaXMubW9sZWN1bGVzLnZhbHVlcygpKSB7XG4gICAgICAgIGlmIChtb2wuaWQuaW5kZXhPZigndW5pcHJvdGtiXycpID09PSAwKSB7IC8vTElNSVQgSVQgVE8gUFJPVEVJTlMgLy8gdG9kbyAtIGlzIHRoaXMgYmVzdCB3YXkgdG8gY2hlY2sgaWYgcHJvdGVpblxuICAgICAgICAgICAgbW9sLmNsZWFyUG9zaXRpb25hbEZlYXR1cmVzKCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgdGhpcy5sZWdlbmRDaGFuZ2VkKG51bGwpO1xuXG4gICAgbGV0IG1vbHNBbm5vdGF0ZWQgPSAwO1xuICAgIGNvbnN0IG1vbENvdW50ID0gdGhpcy5tb2xlY3VsZXMudmFsdWVzKCkuc2l6ZTtcbiAgICBpZiAoYW5ub3RhdGlvbkNob2ljZS50b1VwcGVyQ2FzZSgpID09PSBcIk1JIEZFQVRVUkVTXCIpIHtcbiAgICAgICAgZm9yIChsZXQgbW9sIG9mIHRoaXMubW9sZWN1bGVzLnZhbHVlcygpKSB7XG4gICAgICAgICAgICBpZiAobW9sLmlkLmluZGV4T2YoJ3VuaXByb3RrYl8nKSA9PT0gMCkgeyAvL0xJTUlUIElUIFRPIFBST1RFSU5TXG4gICAgICAgICAgICAgICAgbW9sLnNldFBvc2l0aW9uYWxGZWF0dXJlcyhtb2wubWlGZWF0dXJlcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgY2hvb3NlQ29sb3VycygpO1xuICAgIH0gZWxzZSBpZiAoYW5ub3RhdGlvbkNob2ljZS50b1VwcGVyQ2FzZSgpID09PSBcIklOVEVSQUNUT1JcIikge1xuICAgICAgICBpZiAoc2VsZi5wcm90ZWluQ291bnQgPCAyMSkge1xuICAgICAgICAgICAgZm9yIChsZXQgbW9sIG9mIHRoaXMubW9sZWN1bGVzLnZhbHVlcygpKSB7XG4gICAgICAgICAgICAgICAgaWYgKG1vbC5pZC5pbmRleE9mKCd1bmlwcm90a2JfJykgPT09IDApIHsgLy9MSU1JVCBJVCBUTyBQUk9URUlOU1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBhbm5vdGF0aW9uID0gbmV3IEFubm90YXRpb24obW9sLmpzb24ubGFiZWwsIG5ldyBTZXF1ZW5jZUZlYXR1cmUobnVsbCwgMSArIFwiLVwiICsgbW9sLnNpemUpKTtcbiAgICAgICAgICAgICAgICAgICAgbW9sLnNldFBvc2l0aW9uYWxGZWF0dXJlcyhbYW5ub3RhdGlvbl0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNob29zZUNvbG91cnMoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGFsZXJ0KFwiVG9vIG1hbnkgKD4gMjApIC0gY2FuJ3QgY29sb3VyIGJ5IGludGVyYWN0b3IuXCIpO1xuICAgICAgICB9XG4gICAgfSBlbHNlIGlmIChhbm5vdGF0aW9uQ2hvaWNlLnRvVXBwZXJDYXNlKCkgPT09IFwiU1VQRVJGQU1cIiB8fCBhbm5vdGF0aW9uQ2hvaWNlLnRvVXBwZXJDYXNlKCkgPT09IFwiU1VQRVJGQU1JTFlcIikge1xuICAgICAgICBmb3IgKGxldCBtb2wgb2YgdGhpcy5tb2xlY3VsZXMudmFsdWVzKCkpIHtcbiAgICAgICAgICAgIGlmIChtb2wuaWQuaW5kZXhPZigndW5pcHJvdGtiXycpID09PSAwKSB7IC8vTElNSVQgSVQgVE8gUFJPVEVJTlNcbiAgICAgICAgICAgICAgICB4aU5FVF9TdG9yYWdlLmdldFN1cGVyRmFtRmVhdHVyZXMobW9sLmlkLCBmdW5jdGlvbihpZCwgZnRzKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IG0gPSBzZWxmLm1vbGVjdWxlcy5nZXQoaWQpO1xuICAgICAgICAgICAgICAgICAgICBtLnNldFBvc2l0aW9uYWxGZWF0dXJlcyhmdHMpO1xuICAgICAgICAgICAgICAgICAgICBtb2xzQW5ub3RhdGVkKys7XG4gICAgICAgICAgICAgICAgICAgIGlmIChtb2xzQW5ub3RhdGVkID09PSBtb2xDb3VudCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY2hvb3NlQ29sb3VycygpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIG1vbHNBbm5vdGF0ZWQrKztcbiAgICAgICAgICAgICAgICBpZiAobW9sc0Fubm90YXRlZCA9PT0gbW9sQ291bnQpIHtcbiAgICAgICAgICAgICAgICAgICAgY2hvb3NlQ29sb3VycygpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0gZWxzZSBpZiAoYW5ub3RhdGlvbkNob2ljZS50b1VwcGVyQ2FzZSgpID09PSBcIlVOSVBST1RcIiB8fCBhbm5vdGF0aW9uQ2hvaWNlLnRvVXBwZXJDYXNlKCkgPT09IFwiVU5JUFJPVEtCXCIpIHtcbiAgICAgICAgZm9yIChsZXQgbW9sIG9mIHRoaXMubW9sZWN1bGVzLnZhbHVlcygpKSB7XG4gICAgICAgICAgICBpZiAobW9sLmlkLmluZGV4T2YoJ3VuaXByb3RrYl8nKSA9PT0gMCkgeyAvL0xJTUlUIElUIFRPIFBST1RFSU5TXG4gICAgICAgICAgICAgICAgeGlORVRfU3RvcmFnZS5nZXRVbmlQcm90RmVhdHVyZXMobW9sLmlkLCBmdW5jdGlvbihpZCwgZnRzKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IG0gPSBzZWxmLm1vbGVjdWxlcy5nZXQoaWQpO1xuICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBmID0gMDsgZiA8IGZ0cy5sZW5ndGg7IGYrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZmVhdHVyZSA9IGZ0c1tmXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZlYXR1cmUuc2VxRGF0dW0gPSBuZXcgU2VxdWVuY2VGZWF0dXJlKG51bGwsIGZlYXR1cmUuYmVnaW4gKyBcIi1cIiArIGZlYXR1cmUuZW5kKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBtLnNldFBvc2l0aW9uYWxGZWF0dXJlcyhmdHMpO1xuICAgICAgICAgICAgICAgICAgICBtb2xzQW5ub3RhdGVkKys7XG4gICAgICAgICAgICAgICAgICAgIGlmIChtb2xzQW5ub3RhdGVkID09PSBtb2xDb3VudCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY2hvb3NlQ29sb3VycygpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIG1vbHNBbm5vdGF0ZWQrKztcbiAgICAgICAgICAgICAgICBpZiAobW9sc0Fubm90YXRlZCA9PT0gbW9sQ291bnQpIHtcbiAgICAgICAgICAgICAgICAgICAgY2hvb3NlQ29sb3VycygpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNob29zZUNvbG91cnMoKSB7XG4gICAgICAgIGNvbnN0IGNhdGVnb3JpZXMgPSBkMy5zZXQoKTtcbiAgICAgICAgZm9yIChsZXQgbW9sIG9mIHNlbGYubW9sZWN1bGVzLnZhbHVlcygpKSB7XG4gICAgICAgICAgICBpZiAobW9sLmFubm90YXRpb25zKSB7XG4gICAgICAgICAgICAgICAgZm9yIChsZXQgYW5ub3RhdGlvbiBvZiBtb2wuYW5ub3RhdGlvbnMpIHtcbiAgICAgICAgICAgICAgICAgICAgY2F0ZWdvcmllcy5hZGQoYW5ub3RhdGlvbi5kZXNjcmlwdGlvbik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGxldCBjYXRDb3VudCA9IGNhdGVnb3JpZXMudmFsdWVzKCkubGVuZ3RoO1xuXG4gICAgICAgIGxldCBjb2xvdXJTY2hlbWU7XG5cbiAgICAgICAgaWYgKGNhdENvdW50IDwgMyl7XG4gICAgICAgICAgY2F0Q291bnQgPSAzO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGNhdENvdW50IDwgOSkge1xuICAgICAgICAgICAgY29sb3VyU2NoZW1lID0gZDMuc2NhbGUub3JkaW5hbCgpLnJhbmdlKGNvbG9yYnJld2VyLkRhcmsyW2NhdENvdW50XS5zbGljZSgpLnJldmVyc2UoKSk7XG4gICAgICAgIC8vIH0gZWxzZSBpZiAoY2F0Q291bnQgPCAxMykge1xuICAgICAgICAvLyAgICAgdmFyIHJldmVyc2VkID0gY29sb3JicmV3ZXIuUGFpcmVkW2NhdENvdW50XTsvLy5zbGljZSgpLnJldmVyc2UoKTtcbiAgICAgICAgLy8gICAgIGNvbG91clNjaGVtZSA9IGQzLnNjYWxlLm9yZGluYWwoKS5yYW5nZShyZXZlcnNlZCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb2xvdXJTY2hlbWUgPSBkMy5zY2FsZS5jYXRlZ29yeTIwKCk7XG4gICAgICAgIH1cblxuICAgICAgICBmb3IgKGxldCBtb2wgb2Ygc2VsZi5tb2xlY3VsZXMudmFsdWVzKCkpIHtcbiAgICAgICAgICAgIGlmIChtb2wuYW5ub3RhdGlvbnMpIHtcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBhbm5vIG9mIG1vbC5hbm5vdGF0aW9ucykge1xuICAgICAgICAgICAgICAgICAgICBsZXQgY29sb3VyO1xuICAgICAgICAgICAgICAgICAgICBpZiAoYW5uby5kZXNjcmlwdGlvbiA9PT0gXCJObyBhbm5vdGF0aW9uc1wiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb2xvdXIgPSBcIiNjY2NjY2NcIjtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbG91ciA9IGNvbG91clNjaGVtZShhbm5vLmRlc2NyaXB0aW9uKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIC8vVG9ETyAtIHdheSBtb3JlIG9mIHRoZXNlIGFyZSBiZWluZyBjcmVhdGVkIHRoYW4gbmVlZGVkXG4gICAgICAgICAgICAgICAgICAgIHNlbGYuY3JlYXRlSGF0Y2hlZEZpbGwoXCJjaGVja2Vyc19cIiArIGFubm8uZGVzY3JpcHRpb24sIGNvbG91cilcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgY2hlY2tlZEZpbGwgPSBcInVybCgnI2NoZWNrZXJzX1wiICsgYW5uby5kZXNjcmlwdGlvbiArIFwiJylcIjtcblxuICAgICAgICAgICAgICAgICAgICBhbm5vLmZ1enp5U3RhcnQuc2V0QXR0cmlidXRlKFwiZmlsbFwiLCBjaGVja2VkRmlsbCk7XG4gICAgICAgICAgICAgICAgICAgIGFubm8uZnV6enlTdGFydC5zZXRBdHRyaWJ1dGUoXCJzdHJva2VcIiwgY29sb3VyKTtcbiAgICAgICAgICAgICAgICAgICAgYW5uby5mdXp6eUVuZC5zZXRBdHRyaWJ1dGUoXCJmaWxsXCIsIGNoZWNrZWRGaWxsKTtcbiAgICAgICAgICAgICAgICAgICAgYW5uby5mdXp6eUVuZC5zZXRBdHRyaWJ1dGUoXCJzdHJva2VcIiwgY29sb3VyKTtcbiAgICAgICAgICAgICAgICAgICAgYW5uby5jZXJ0YWluLnNldEF0dHJpYnV0ZShcImZpbGxcIiwgY29sb3VyKTtcbiAgICAgICAgICAgICAgICAgICAgYW5uby5jZXJ0YWluLnNldEF0dHJpYnV0ZShcInN0cm9rZVwiLCBjb2xvdXIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBzZWxmLmxlZ2VuZENoYW5nZWQoY29sb3VyU2NoZW1lKTtcbiAgICB9XG59O1xuXG4vL2xpc3RlbmVycyBhbHNvIGF0dGFjaGVkIHRvIG1vdXNlIGV2bnRzIGJ5IEludGVyYWN0b3IgKGFuZCBSb3RhdG9yKSBhbmQgTGluaywgdGhvc2UgY29uc3VtZSB0aGVpciBldmVudHNcbi8vbW91c2UgZG93biBvbiBzdmdFbGVtZW50IG11c3QgYmUgYWxsb3dlZCB0byBwcm9wb2dhdGUgKHRvIGZpcmUgZXZlbnQgb24gUHJvdHMvTGlua3MpXG5cbi8qKlxuICogSGFuZGxlIG1vdXNlZG93biBldmVudC5cbiAqL1xueGlORVQuQ29udHJvbGxlci5wcm90b3R5cGUubW91c2VEb3duID0gZnVuY3Rpb24oZXZ0KSB7XG4gICAgLy9wcmV2ZW50IGRlZmF1bHQsIGJ1dCBhbGxvdyBwcm9wb2dhdGlvblxuICAgIGV2dC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIC8vc3RvcCBmb3JjZSBsYXlvdXRcbiAgICBpZiAodHlwZW9mIHRoaXMuZDNjb2xhICE9PSAndW5kZWZpbmVkJyAmJiB0aGlzLmQzY29sYSAhPSBudWxsKSB7XG4gICAgICAgIHRoaXMuZDNjb2xhLnN0b3AoKTtcbiAgICB9XG5cbiAgICBjb25zdCBwID0gdGhpcy5nZXRFdmVudFBvaW50KGV2dCk7IC8vIHNlZW1zIHRvIGJlIGNvcnJlY3QsIHNlZSBiZWxvd1xuICAgIHRoaXMuZHJhZ1N0YXJ0ID0gdGhpcy5tb3VzZVRvU1ZHKHAueCwgcC55KTtcblxuICAgIHJldHVybiBmYWxzZTtcbn07XG5cbi8vIGRyYWdnaW5nL3JvdGF0aW9uL3Bhbm5pbmcvc2VsZWN0aW5nXG54aU5FVC5Db250cm9sbGVyLnByb3RvdHlwZS5tb3VzZU1vdmUgPSBmdW5jdGlvbihldnQpIHtcbiAgICBjb25zdCBwID0gdGhpcy5nZXRFdmVudFBvaW50KGV2dCk7IC8vIHNlZW1zIHRvIGJlIGNvcnJlY3QsIHNlZSBiZWxvd1xuICAgIGNvbnN0IGMgPSB0aGlzLm1vdXNlVG9TVkcocC54LCBwLnkpO1xuXG4gICAgaWYgKHRoaXMuZHJhZ0VsZW1lbnQgIT0gbnVsbCkgeyAvL2RyYWdnaW5nIG9yIHJvdGF0aW5nXG4gICAgICAgIHRoaXMuaGlkZVRvb2x0aXAoKTtcbiAgICAgICAgY29uc3QgZHggPSB0aGlzLmRyYWdTdGFydC54IC0gYy54O1xuICAgICAgICBjb25zdCBkeSA9IHRoaXMuZHJhZ1N0YXJ0LnkgLSBjLnk7XG5cbiAgICAgICAgaWYgKHRoaXMuc3RhdGUgPT09IHRoaXMuU1RBVEVTLkRSQUdHSU5HKSB7XG4gICAgICAgICAgICAvLyB3ZSBhcmUgY3VycmVudGx5IGRyYWdnaW5nIHRoaW5ncyBhcm91bmRcbiAgICAgICAgICAgIGxldCBveCwgb3ksIG54LCBueTtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgdGhpcy5kcmFnRWxlbWVudC5jeCA9PT0gJ3VuZGVmaW5lZCcpIHsgLy8gaWYgbm90IGFuIEludGVyYWN0b3JcbiAgICAgICAgICAgICAgICBjb25zdCBub2RlcyA9IHRoaXMuZHJhZ0VsZW1lbnQuaW50ZXJhY3RvcnM7XG4gICAgICAgICAgICAgICAgZm9yIChsZXQgcHJvdGVpbiBvZiBub2Rlcykge1xuICAgICAgICAgICAgICAgICAgICBveCA9IHByb3RlaW4uY3g7XG4gICAgICAgICAgICAgICAgICAgIG95ID0gcHJvdGVpbi5jeTtcbiAgICAgICAgICAgICAgICAgICAgbnggPSBveCAtIGR4O1xuICAgICAgICAgICAgICAgICAgICBueSA9IG95IC0gZHk7XG4gICAgICAgICAgICAgICAgICAgIHByb3RlaW4uc2V0UG9zaXRpb24obngsIG55KTtcbiAgICAgICAgICAgICAgICAgICAgcHJvdGVpbi5zZXRBbGxMaW5rQ29vcmRpbmF0ZXMoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZm9yIChsZXQgbm9kZSBvZiBub2Rlcykge1xuICAgICAgICAgICAgICAgICAgICBub2RlLnNldEFsbExpbmtDb29yZGluYXRlcygpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgLy9pdHMgYSBwcm90ZWluIC0gZHJhZyBpdCBUT0RPOiBEUkFHIFNFTEVDVEVEXG4gICAgICAgICAgICAgICAgb3ggPSB0aGlzLmRyYWdFbGVtZW50LmN4O1xuICAgICAgICAgICAgICAgIG95ID0gdGhpcy5kcmFnRWxlbWVudC5jeTtcbiAgICAgICAgICAgICAgICBueCA9IG94IC0gZHg7XG4gICAgICAgICAgICAgICAgbnkgPSBveSAtIGR5O1xuICAgICAgICAgICAgICAgIHRoaXMuZHJhZ0VsZW1lbnQuc2V0UG9zaXRpb24obngsIG55KTtcbiAgICAgICAgICAgICAgICB0aGlzLmRyYWdFbGVtZW50LnNldEFsbExpbmtDb29yZGluYXRlcygpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5kcmFnU3RhcnQgPSBjO1xuICAgICAgICB9IGVsc2UgeyAvL25vdCBkcmFnZ2luZyBvciByb3RhdGluZyB5ZXQsIG1heWJlIHdlIHNob3VsZCBzdGFydFxuICAgICAgICAgICAgLy8gZG9uJ3Qgc3RhcnQgZHJhZ2dpbmcganVzdCBvbiBhIGNsaWNrIC0gd2UgbmVlZCB0byBtb3ZlIHRoZSBtb3VzZSBhIGJpdCBmaXJzdFxuICAgICAgICAgICAgaWYgKE1hdGguc3FydChkeCAqIGR4ICsgZHkgKiBkeSkgPiAoNSAqIHRoaXMueikpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnN0YXRlID0gdGhpcy5TVEFURVMuRFJBR0dJTkc7XG5cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuc2hvd1Rvb2x0aXAocCk7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbn07XG5cbi8vIHRoaXMgZW5kcyBhbGwgZHJhZ2dpbmcgYW5kIHJvdGF0aW5nXG54aU5FVC5Db250cm9sbGVyLnByb3RvdHlwZS5tb3VzZVVwID0gZnVuY3Rpb24oZXZ0KSB7XG4gICAgY29uc3QgdGltZSA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpO1xuICAgIC8vY29uc29sZS5sb2coXCJNb3VzZSB1cDogXCIgKyBldnQuc3JjRWxlbWVudCArIFwiIFwiICsgKHRpbWUgLSB0aGlzLmxhc3RNb3VzZVVwKSk7XG4gICAgdGhpcy5wcmV2ZW50RGVmYXVsdHNBbmRTdG9wUHJvcGFnYXRpb24oZXZ0KTtcbiAgICAvL2VsaW1pbmF0ZSBzb21lIHNwdXJpb3VzIG1vdXNlIHVwIGV2ZW50c1xuICAgIGlmICgodGltZSAtIHRoaXMubGFzdE1vdXNlVXApID4gMTUwKSB7XG5cbiAgICAgICAgY29uc3QgcCA9IHRoaXMuZ2V0RXZlbnRQb2ludChldnQpOyAvLyBzZWVtcyB0byBiZSBjb3JyZWN0LCBzZWUgYmVsb3dcbiAgICAgICAgY29uc3QgYyA9IHRoaXMubW91c2VUb1NWRyhwLngsIHAueSk7XG5cbiAgICAgICAgaWYgKHRoaXMuZHJhZ0VsZW1lbnQgIT0gbnVsbCkge1xuICAgICAgICAgICAgaWYgKCEodGhpcy5zdGF0ZSA9PT0gdGhpcy5TVEFURVMuRFJBR0dJTkcgfHwgdGhpcy5zdGF0ZSA9PT0gdGhpcy5TVEFURVMuUk9UQVRJTkcpKSB7IC8vbm90IGRyYWdnaW5nIG9yIHJvdGF0aW5nXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuZHJhZ0VsZW1lbnQuZm9ybSA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmRyYWdFbGVtZW50LnNldEZvcm0oMSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jb250ZXh0TWVudVByb3QgPSB0aGlzLmRyYWdFbGVtZW50O1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmNvbnRleHRNZW51UG9pbnQgPSBjO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBtZW51ID0gZDMuc2VsZWN0KFwiLmN1c3RvbS1tZW51LW1hcmdpblwiKTtcbiAgICAgICAgICAgICAgICAgICAgbWVudS5zdHlsZShcInRvcFwiLCAoZXZ0LnBhZ2VZIC0gMjApICsgXCJweFwiKS5zdHlsZShcImxlZnRcIiwgKGV2dC5wYWdlWCAtIDIwKSArIFwicHhcIikuc3R5bGUoXCJkaXNwbGF5XCIsIFwiYmxvY2tcIik7XG4gICAgICAgICAgICAgICAgICAgIGQzLnNlbGVjdChcIi5zY2FsZUJ1dHRvbl9cIiArICh0aGlzLmRyYWdFbGVtZW50LnN0aWNrWm9vbSAqIDEwMCkpLnByb3BlcnR5KFwiY2hlY2tlZFwiLCB0cnVlKVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMuZHJhZ0VsZW1lbnQgPSBudWxsO1xuICAgIHRoaXMuc3RhdGUgPSB0aGlzLlNUQVRFUy5NT1VTRV9VUDtcblxuICAgIHRoaXMubGFzdE1vdXNlVXAgPSB0aW1lO1xuICAgIHJldHVybiBmYWxzZTtcbn07XG5cbi8vZ2V0cyBtb3VzZSBwb3NpdGlvblxueGlORVQuQ29udHJvbGxlci5wcm90b3R5cGUuZ2V0RXZlbnRQb2ludCA9IGZ1bmN0aW9uKGV2dCkge1xuICAgIGNvbnN0IHAgPSB0aGlzLnN2Z0VsZW1lbnQuY3JlYXRlU1ZHUG9pbnQoKTtcbiAgICBsZXQgZWxlbWVudCA9IHRoaXMuc3ZnRWxlbWVudC5wYXJlbnROb2RlO1xuICAgIGxldCB0b3AgPSAwLFxuICAgICAgICBsZWZ0ID0gMDtcbiAgICBkbyB7XG4gICAgICAgIHRvcCArPSBlbGVtZW50Lm9mZnNldFRvcCB8fCAwO1xuICAgICAgICBsZWZ0ICs9IGVsZW1lbnQub2Zmc2V0TGVmdCB8fCAwO1xuICAgICAgICBlbGVtZW50ID0gZWxlbWVudC5vZmZzZXRQYXJlbnQ7XG4gICAgfSB3aGlsZSAoZWxlbWVudCk7XG4gICAgcC54ID0gZXZ0LnBhZ2VYIC0gbGVmdDtcbiAgICBwLnkgPSBldnQucGFnZVkgLSB0b3A7XG4gICAgcmV0dXJuIHA7XG59O1xuXG4vL3N0b3AgZXZlbnQgcHJvcG9nYXRpb24gYW5kIGRlZmF1bHRzOyBvbmx5IGRvIHdoYXQgd2UgYXNrXG54aU5FVC5Db250cm9sbGVyLnByb3RvdHlwZS5wcmV2ZW50RGVmYXVsdHNBbmRTdG9wUHJvcGFnYXRpb24gPSBmdW5jdGlvbihldnQpIHtcbiAgICBpZiAoZXZ0LnN0b3BQcm9wYWdhdGlvbilcbiAgICAgICAgZXZ0LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgIGlmIChldnQuY2FuY2VsQnViYmxlICE9IG51bGwpXG4gICAgICAgIGV2dC5jYW5jZWxCdWJibGUgPSB0cnVlO1xuICAgIGlmIChldnQucHJldmVudERlZmF1bHQpXG4gICAgICAgIGV2dC5wcmV2ZW50RGVmYXVsdCgpO1xufTtcblxuLyoqXG4gKiBIYW5kbGUgdG91Y2hzdGFydCBldmVudC5cblxueGlORVQuQ29udHJvbGxlci5wcm90b3R5cGUudG91Y2hTdGFydCA9IGZ1bmN0aW9uKGV2dCkge1xuICAgIC8vcHJldmVudCBkZWZhdWx0LCBidXQgYWxsb3cgcHJvcG9nYXRpb25cbiAgICBldnQucHJldmVudERlZmF1bHQoKTtcblxuICAgIC8vc3RvcCBmb3JjZSBsYXlvdXRcbiAgICBpZiAodHlwZW9mIHRoaXMuZDNjb2xhICE9PSAndW5kZWZpbmVkJyAmJiB0aGlzLmQzY29sYSAhPSBudWxsKSB7XG4gICAgICAgIHRoaXMuZDNjb2xhLnN0b3AoKTtcbiAgICB9XG5cbiAgICB2YXIgcCA9IHRoaXMuZ2V0VG91Y2hFdmVudFBvaW50KGV2dCk7IC8vIHNlZW1zIHRvIGJlIGNvcnJlY3QsIHNlZSBiZWxvd1xuICAgIHRoaXMuZHJhZ1N0YXJ0ID0gdGhpcy5tb3VzZVRvU1ZHKHAueCwgcC55KTtcbn07XG5cbi8vIGRyYWdnaW5nL3JvdGF0aW9uL3Bhbm5pbmcvc2VsZWN0aW5nXG54aU5FVC5Db250cm9sbGVyLnByb3RvdHlwZS50b3VjaE1vdmUgPSBmdW5jdGlvbihldnQpIHtcbiAgICAvLyBpZiAodGhpcy5zZXF1ZW5jZUluaXRDb21wbGV0ZSkgeyAvLyBqdXN0IGJlaW5nIGNhdXRpb3VzXG4gICAgdmFyIHAgPSB0aGlzLmdldFRvdWNoRXZlbnRQb2ludChldnQpOyAvLyBzZWVtcyB0byBiZSBjb3JyZWN0LCBzZWUgYmVsb3dcbiAgICB2YXIgYyA9IHRoaXMubW91c2VUb1NWRyhwLngsIHAueSk7XG5cbiAgICBpZiAodGhpcy5kcmFnRWxlbWVudCAhPSBudWxsKSB7IC8vZHJhZ2dpbmcgb3Igcm90YXRpbmdcbiAgICAgICAgdGhpcy5oaWRlVG9vbHRpcCgpO1xuICAgICAgICB2YXIgZHggPSB0aGlzLmRyYWdTdGFydC54IC0gYy54O1xuICAgICAgICB2YXIgZHkgPSB0aGlzLmRyYWdTdGFydC55IC0gYy55O1xuXG4gICAgICAgIGlmICh0aGlzLnN0YXRlID09PSB0aGlzLlNUQVRFUy5EUkFHR0lORykge1xuICAgICAgICAgICAgLy8gd2UgYXJlIGN1cnJlbnRseSBkcmFnZ2luZyB0aGluZ3MgYXJvdW5kXG4gICAgICAgICAgICB2YXIgb3gsIG95LCBueCwgbnk7XG4gICAgICAgICAgICBpZiAodHlwZW9mIHRoaXMuZHJhZ0VsZW1lbnQuY3ggPT09ICd1bmRlZmluZWQnKSB7IC8vIGlmIG5vdCBhbiBJbnRlcmFjdG9yXG4gICAgICAgICAgICAgICAgdmFyIG5vZGVzID0gdGhpcy5kcmFnRWxlbWVudC5pbnRlcmFjdG9ycztcbiAgICAgICAgICAgICAgICB2YXIgbm9kZUNvdW50ID0gbm9kZXMubGVuZ3RoO1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbm9kZUNvdW50OyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHByb3RlaW4gPSBub2Rlc1tpXTtcbiAgICAgICAgICAgICAgICAgICAgb3ggPSBwcm90ZWluLmN4O1xuICAgICAgICAgICAgICAgICAgICBveSA9IHByb3RlaW4uY3k7XG4gICAgICAgICAgICAgICAgICAgIG54ID0gb3ggLSBkeDtcbiAgICAgICAgICAgICAgICAgICAgbnkgPSBveSAtIGR5O1xuICAgICAgICAgICAgICAgICAgICBwcm90ZWluLnNldFBvc2l0aW9uKG54LCBueSk7XG4gICAgICAgICAgICAgICAgICAgIHByb3RlaW4uc2V0QWxsTGlua0Nvb3JkaW5hdGVzKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBub2RlQ291bnQ7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICBub2Rlc1tpXS5zZXRBbGxMaW5rQ29vcmRpbmF0ZXMoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vaXRzIGEgcHJvdGVpbiAtIGRyYWcgaXQgVE9ETzogRFJBRyBTRUxFQ1RFRFxuICAgICAgICAgICAgICAgIG94ID0gdGhpcy5kcmFnRWxlbWVudC5jeDtcbiAgICAgICAgICAgICAgICBveSA9IHRoaXMuZHJhZ0VsZW1lbnQuY3k7XG4gICAgICAgICAgICAgICAgbnggPSBveCAtIGR4O1xuICAgICAgICAgICAgICAgIG55ID0gb3kgLSBkeTtcbiAgICAgICAgICAgICAgICB0aGlzLmRyYWdFbGVtZW50LnNldFBvc2l0aW9uKG54LCBueSk7XG4gICAgICAgICAgICAgICAgdGhpcy5kcmFnRWxlbWVudC5zZXRBbGxMaW5rQ29vcmRpbmF0ZXMoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuZHJhZ1N0YXJ0ID0gYztcbiAgICAgICAgfSBlbHNlIHsgLy9ub3QgZHJhZ2dpbmcgb3Igcm90YXRpbmcgeWV0LCBtYXliZSB3ZSBzaG91bGQgc3RhcnRcbiAgICAgICAgICAgIC8vIGRvbid0IHN0YXJ0IGRyYWdnaW5nIGp1c3Qgb24gYSBjbGljayAtIHdlIG5lZWQgdG8gbW92ZSB0aGUgbW91c2UgYSBiaXQgZmlyc3RcbiAgICAgICAgICAgIGlmIChNYXRoLnNxcnQoZHggKiBkeCArIGR5ICogZHkpID4gKDUgKiB0aGlzLnopKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zdGF0ZSA9IHRoaXMuU1RBVEVTLkRSQUdHSU5HO1xuXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLnNob3dUb29sdGlwKHApO1xuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG59O1xuXG4vLyB0aGlzIGVuZHMgYWxsIGRyYWdnaW5nIGFuZCByb3RhdGluZ1xueGlORVQuQ29udHJvbGxlci5wcm90b3R5cGUudG91Y2hFbmQgPSBmdW5jdGlvbihldnQpIHtcbiAgICB2YXIgdGltZSA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpO1xuICAgIC8vY29uc29sZS5sb2coXCJNb3VzZSB1cDogXCIgKyBldnQuc3JjRWxlbWVudCArIFwiIFwiICsgKHRpbWUgLSB0aGlzLmxhc3RNb3VzZVVwKSk7XG4gICAgdGhpcy5wcmV2ZW50RGVmYXVsdHNBbmRTdG9wUHJvcGFnYXRpb24oZXZ0KTtcbiAgICAvL2VsaW1pbmF0ZSBzb21lIHNwdXJpb3VzIG1vdXNlIHVwIGV2ZW50c1xuICAgIGlmICgodGltZSAtIHRoaXMubGFzdE1vdXNlVXApID4gMTUwKSB7XG5cbiAgICAgICAgdmFyIHAgPSB0aGlzLmdldFRvdWNoRXZlbnRQb2ludChldnQpOyAvLyBzZWVtcyB0byBiZSBjb3JyZWN0LCBzZWUgYmVsb3dcbiAgICAgICAgdmFyIGMgPSB0aGlzLm1vdXNlVG9TVkcocC54LCBwLnkpO1xuXG4gICAgICAgIGlmICh0aGlzLmRyYWdFbGVtZW50ICE9IG51bGwpIHtcbiAgICAgICAgICAgIGlmICghKHRoaXMuc3RhdGUgPT09IHRoaXMuU1RBVEVTLkRSQUdHSU5HIHx8IHRoaXMuc3RhdGUgPT09IHRoaXMuU1RBVEVTLlJPVEFUSU5HKSkgeyAvL25vdCBkcmFnZ2luZyBvciByb3RhdGluZ1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLmRyYWdFbGVtZW50LmZvcm0gPT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5kcmFnRWxlbWVudC5zZXRGb3JtKDEpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY29udGV4dE1lbnVQcm90ID0gdGhpcy5kcmFnRWxlbWVudDtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jb250ZXh0TWVudVBvaW50ID0gYztcbiAgICAgICAgICAgICAgICAgICAgdmFyIG1lbnUgPSBkMy5zZWxlY3QoXCIuY3VzdG9tLW1lbnUtbWFyZ2luXCIpXG4gICAgICAgICAgICAgICAgICAgIG1lbnUuc3R5bGUoXCJ0b3BcIiwgKGV2dC5wYWdlWSAtIDIwKSArIFwicHhcIikuc3R5bGUoXCJsZWZ0XCIsIChldnQucGFnZVggLSAyMCkgKyBcInB4XCIpLnN0eWxlKFwiZGlzcGxheVwiLCBcImJsb2NrXCIpO1xuICAgICAgICAgICAgICAgICAgICBkMy5zZWxlY3QoXCIuc2NhbGVCdXR0b25fXCIgKyAodGhpcy5kcmFnRWxlbWVudC5zdGlja1pvb20gKiAxMDApKS5wcm9wZXJ0eShcImNoZWNrZWRcIiwgdHJ1ZSlcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLmRyYWdFbGVtZW50ID0gbnVsbDtcbiAgICB0aGlzLndoaWNoUm90YXRvciA9IC0xO1xuICAgIHRoaXMuc3RhdGUgPSB0aGlzLlNUQVRFUy5NT1VTRV9VUDtcblxuICAgIHRoaXMubGFzdE1vdXNlVXAgPSB0aW1lO1xuICAgIHJldHVybiBmYWxzZTtcbn07XG5cbi8vZ2V0cyBtb3VzZSBwb3NpdGlvblxueGlORVQuQ29udHJvbGxlci5wcm90b3R5cGUuZ2V0VG91Y2hFdmVudFBvaW50ID0gZnVuY3Rpb24oZXZ0KSB7XG4gICAgdmFyIHAgPSB0aGlzLnN2Z0VsZW1lbnQuY3JlYXRlU1ZHUG9pbnQoKTtcbiAgICB2YXIgZWxlbWVudCA9IHRoaXMuc3ZnRWxlbWVudC5wYXJlbnROb2RlO1xuICAgIHZhciB0b3AgPSAwLFxuICAgICAgICBsZWZ0ID0gMDtcbiAgICBkbyB7XG4gICAgICAgIHRvcCArPSBlbGVtZW50Lm9mZnNldFRvcCB8fCAwO1xuICAgICAgICBsZWZ0ICs9IGVsZW1lbnQub2Zmc2V0TGVmdCB8fCAwO1xuICAgICAgICBlbGVtZW50ID0gZWxlbWVudC5vZmZzZXRQYXJlbnQ7XG4gICAgfSB3aGlsZSAoZWxlbWVudCk7XG4gICAgcC54ID0gZXZ0LnRvdWNoZXNbMF0ucGFnZVggLSBsZWZ0O1xuICAgIHAueSA9IGV2dC50b3VjaGVzWzBdLnBhZ2VZIC0gdG9wO1xuICAgIHJldHVybiBwO1xufTtcbiovXG54aU5FVC5Db250cm9sbGVyLnByb3RvdHlwZS5hdXRvTGF5b3V0ID0gZnVuY3Rpb24oKSB7XG4gICAgaWYgKHRoaXMuZDNjb2xhKSB7XG4gICAgICAgIHRoaXMuZDNjb2xhLnN0b3AoKTtcbiAgICB9XG5cbiAgICBjb25zdCB3aWR0aCA9IHRoaXMuc3ZnRWxlbWVudC5wYXJlbnROb2RlLmNsaWVudFdpZHRoOyAvL3RoaXMuc3ZnRWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS53aWR0aDtcbiAgICBjb25zdCBoZWlnaHQgPSB0aGlzLnN2Z0VsZW1lbnQucGFyZW50Tm9kZS5jbGllbnRIZWlnaHQ7XG5cbiAgICBpZiAodGhpcy5hY2tub3dsZWRnZW1lbnQpIHtcbiAgICAgICAgdGhpcy5hY2tub3dsZWRnZW1lbnQuc2V0QXR0cmlidXRlKFwidHJhbnNmb3JtXCIsIFwidHJhbnNsYXRlKDUsIFwiICsgKGhlaWdodCAtIDQwKSArIFwiKVwiKTtcbiAgICB9XG4gICAgLy8vLyBUT0RPOiBwcnVuZSBsZWF2ZXMgZnJvbSBuZXR3b3JrIHRoZW4gbGF5b3V0LCB0aGVuIGFkZCBiYWNrIGxlYXZlcyBhbmQgbGF5b3V0IGFnYWluXG5cbiAgICBjb25zdCBzZWxmID0gdGhpcztcbiAgICBsZXQgbm9kZXMgPSBBcnJheS5mcm9tKHRoaXMubW9sZWN1bGVzLnZhbHVlcygpKTtcbiAgICBub2RlcyA9IG5vZGVzLmZpbHRlcihmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICByZXR1cm4gdmFsdWUudHlwZSAhPT0gXCJjb21wbGV4XCJcbiAgICB9KTtcbiAgICBjb25zdCBub2RlQ291bnQgPSBub2Rlcy5sZW5ndGg7XG5cbiAgICBjb25zdCBsYXlvdXRPYmogPSB7fTtcbiAgICBsYXlvdXRPYmoubm9kZXMgPSBub2RlcztcbiAgICBsYXlvdXRPYmoubGlua3MgPSBbXTtcblxuICAgIGNvbnN0IG1vbExvb2tVcCA9IHt9O1xuICAgIGxldCBtaSA9IDA7XG4gICAgZm9yIChsZXQgbW9sIG9mIG5vZGVzKSB7XG4gICAgICAgIG1vbExvb2tVcFttb2wuaWRdID0gbWk7XG4gICAgICAgIG1pKys7XG4gICAgfVxuXG4gICAgY29uc3QgbGlua3MgPSB0aGlzLmFsbEJpbmFyeUxpbmtzLnZhbHVlcygpO1xuICAgIGNvbnN0IGxpbmtDb3VudCA9IGxpbmtzLmxlbmd0aDtcbiAgICBmb3IgKGxldCBsID0gMDsgbCA8IGxpbmtDb3VudDsgbCsrKSB7XG4gICAgICAgIGNvbnN0IGxpbmsgPSBsaW5rc1tsXTtcbiAgICAgICAgY29uc3QgZnJvbU1vbCA9IGxpbmsuaW50ZXJhY3RvcnNbMF07XG4gICAgICAgIGNvbnN0IHRvTW9sID0gbGluay5pbnRlcmFjdG9yc1sxXTtcbiAgICAgICAgY29uc3Qgc291cmNlID0gZnJvbU1vbDsgLy9tb2xMb29rVXBbZnJvbU1vbC5pZF07XG4gICAgICAgIGNvbnN0IHRhcmdldCA9IHRvTW9sOyAvL21vbExvb2tVcFt0b01vbC5pZF07XG5cbiAgICAgICAgaWYgKHNvdXJjZSAhPT0gdGFyZ2V0ICYmIG5vZGVzLmluZGV4T2Yoc291cmNlKSAhPT0gLTEgJiYgbm9kZXMuaW5kZXhPZih0YXJnZXQpICE9PSAtMSkge1xuXG4gICAgICAgICAgICBpZiAodHlwZW9mIHNvdXJjZSAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIHRhcmdldCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBsaW5rT2JqID0ge307XG4gICAgICAgICAgICAgICAgbGlua09iai5zb3VyY2UgPSBtb2xMb29rVXBbZnJvbU1vbC5pZF07XG4gICAgICAgICAgICAgICAgbGlua09iai50YXJnZXQgPSBtb2xMb29rVXBbdG9Nb2wuaWRdO1xuICAgICAgICAgICAgICAgIGxpbmtPYmouaWQgPSBsaW5rLmlkO1xuICAgICAgICAgICAgICAgIGxheW91dE9iai5saW5rcy5wdXNoKGxpbmtPYmopO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBhbGVydChcIk5PVCBSSUdIVFwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vIHRvZG86IGFkZCBjb250YWluaW5nIGdyb3VwP1xuICAgIGNvbnN0IGdyb3VwcyA9IFtdO1xuICAgIGlmICh0aGlzLmNvbXBsZXhlcykge1xuICAgICAgICBmb3IgKGxldCBnIG9mIHRoaXMuY29tcGxleGVzKSB7XG4gICAgICAgICAgICBnLmxlYXZlcyA9IFtdO1xuICAgICAgICAgICAgZy5ncm91cHMgPSBbXTtcbiAgICAgICAgICAgIGZvciAobGV0IGludGVyYWN0b3Igb2YgZy5uYXJ5TGluay5pbnRlcmFjdG9ycykge1xuICAgICAgICAgICAgICAgIGlmIChpbnRlcmFjdG9yLnR5cGUgIT09IFwiY29tcGxleFwiKSB7XG4gICAgICAgICAgICAgICAgICAgIGcubGVhdmVzLnB1c2gobGF5b3V0T2JqLm5vZGVzLmluZGV4T2YoaW50ZXJhY3RvcikpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGdyb3Vwcy5wdXNoKGcpO1xuICAgICAgICB9XG4gICAgICAgIGZvciAobGV0IGcgb2YgdGhpcy5jb21wbGV4ZXMpIHtcbiAgICAgICAgICAgIGZvciAobGV0IGludGVyYWN0b3Igb2YgZy5uYXJ5TGluay5pbnRlcmFjdG9ycykge1xuICAgICAgICAgICAgICAgIGlmIChpbnRlcmFjdG9yLnR5cGUgPT09IFwiY29tcGxleFwiKSB7XG4gICAgICAgICAgICAgICAgICAgIGcuZ3JvdXBzLnB1c2goZ3JvdXBzLmluZGV4T2YoaW50ZXJhY3RvcikpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICB0aGlzLmQzY29sYSA9IGNvbGEuZDNhZGFwdG9yKCk7XG4gICAgLy9jb25zb2xlLmxvZyhcImdyb3Vwc1wiLCBncm91cHMpO1xuICAgIGRlbGV0ZSB0aGlzLmQzY29sYS5fbGFzdFN0cmVzcztcbiAgICBkZWxldGUgdGhpcy5kM2NvbGEuX2FscGhhO1xuICAgIGRlbGV0ZSB0aGlzLmQzY29sYS5fZGVzY2VudDtcbiAgICBkZWxldGUgdGhpcy5kM2NvbGEuX3Jvb3RHcm91cDtcblxuICAgIHRoaXMuZDNjb2xhLm5vZGVzKGxheW91dE9iai5ub2RlcykuZ3JvdXBzKGdyb3VwcykubGlua3MobGF5b3V0T2JqLmxpbmtzKS5hdm9pZE92ZXJsYXBzKHRydWUpO1xuICAgIGxldCBncm91cERlYnVnU2VsLCBwYXJ0aWNpcGFudERlYnVnU2VsO1xuICAgIGlmIChzZWxmLmRlYnVnKSB7XG4gICAgICAgIGdyb3VwRGVidWdTZWwgPSBkMy5zZWxlY3QodGhpcy5zdmdFbGVtZW50KS5zZWxlY3RBbGwoJy5ncm91cCcpXG4gICAgICAgICAgICAuZGF0YShncm91cHMpO1xuXG4gICAgICAgIGdyb3VwRGVidWdTZWwuZW50ZXIoKS5hcHBlbmQoJ3JlY3QnKVxuICAgICAgICAgICAgLmNsYXNzZWQoJ2dyb3VwJywgdHJ1ZSlcbiAgICAgICAgICAgIC5hdHRyKHtcbiAgICAgICAgICAgICAgICByeDogNSxcbiAgICAgICAgICAgICAgICByeTogNVxuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC5zdHlsZSgnc3Ryb2tlJywgXCJibHVlXCIpXG4gICAgICAgICAgICAuc3R5bGUoJ2ZpbGwnLCBcIm5vbmVcIik7XG5cbiAgICAgICAgcGFydGljaXBhbnREZWJ1Z1NlbCA9IGQzLnNlbGVjdCh0aGlzLnN2Z0VsZW1lbnQpLnNlbGVjdEFsbCgnLm5vZGUnKVxuICAgICAgICAgICAgLmRhdGEobGF5b3V0T2JqLm5vZGVzKTtcblxuICAgICAgICBwYXJ0aWNpcGFudERlYnVnU2VsLmVudGVyKCkuYXBwZW5kKCdyZWN0JylcbiAgICAgICAgICAgIC5jbGFzc2VkKCdub2RlJywgdHJ1ZSlcbiAgICAgICAgICAgIC5hdHRyKHtcbiAgICAgICAgICAgICAgICByeDogNSxcbiAgICAgICAgICAgICAgICByeTogNVxuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC5zdHlsZSgnc3Ryb2tlJywgXCJyZWRcIilcbiAgICAgICAgICAgIC5zdHlsZSgnZmlsbCcsIFwibm9uZVwiKTtcblxuICAgICAgICBncm91cERlYnVnU2VsLmV4aXQoKS5yZW1vdmUoKTtcbiAgICAgICAgcGFydGljaXBhbnREZWJ1Z1NlbC5leGl0KCkucmVtb3ZlKCk7XG4gICAgfVxuXG4gICAgdGhpcy5kM2NvbGEuc3ltbWV0cmljRGlmZkxpbmtMZW5ndGhzKDMwKS5vbihcInRpY2tcIiwgZnVuY3Rpb24oKSB7XG4gICAgICAgIGNvbnN0IG5vZGVzID0gc2VsZi5kM2NvbGEubm9kZXMoKTtcbiAgICAgICAgLy8gY29uc29sZS5sb2coXCJub2Rlc1wiLCBub2Rlcyk7XG4gICAgICAgIGZvciAobGV0IG4gPSAwOyBuIDwgbm9kZUNvdW50OyBuKyspIHtcbiAgICAgICAgICAgIGNvbnN0IG5vZGUgPSBub2Rlc1tuXTtcblxuICAgICAgICAgICAgY29uc3Qgb3V0bGluZVdpZHRoID0gbm9kZS5vdXRsaW5lLmdldEJCb3goKS53aWR0aDtcbiAgICAgICAgICAgIGNvbnN0IHVwcGVyR3JvdXBXaWR0aCA9IG5vZGUudXBwZXJHcm91cC5nZXRCQm94KCkud2lkdGg7XG5cbiAgICAgICAgICAgIGNvbnN0IG54ID0gbm9kZS5ib3VuZHMueCArIHVwcGVyR3JvdXBXaWR0aCAtIChvdXRsaW5lV2lkdGggLyAyKSArICh3aWR0aCAvIDIpO1xuICAgICAgICAgICAgY29uc3QgbnkgPSBub2RlLnkgKyAoaGVpZ2h0IC8gMik7XG4gICAgICAgICAgICBub2RlLnNldFBvc2l0aW9uKG54LCBueSk7XG4gICAgICAgIH1cbiAgICAgICAgc2VsZi5zZXRBbGxMaW5rQ29vcmRpbmF0ZXMoKTtcblxuICAgICAgICBpZiAoc2VsZi5kZWJ1Zykge1xuICAgICAgICAgICAgZ3JvdXBEZWJ1Z1NlbC5hdHRyKHtcbiAgICAgICAgICAgICAgICB4OiBmdW5jdGlvbihkKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBkLmJvdW5kcy54ICsgKHdpZHRoIC8gMik7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB5OiBmdW5jdGlvbihkKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBkLmJvdW5kcy55ICsgKGhlaWdodCAvIDIpO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgd2lkdGg6IGZ1bmN0aW9uKGQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGQuYm91bmRzLndpZHRoKClcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGhlaWdodDogZnVuY3Rpb24oZCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZC5ib3VuZHMuaGVpZ2h0KClcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgcGFydGljaXBhbnREZWJ1Z1NlbC5hdHRyKHtcbiAgICAgICAgICAgICAgICB4OiBmdW5jdGlvbihkKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBkLmJvdW5kcy54ICsgKHdpZHRoIC8gMik7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB5OiBmdW5jdGlvbihkKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBkLmJvdW5kcy55ICsgKGhlaWdodCAvIDIpO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgd2lkdGg6IGZ1bmN0aW9uKGQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGQuYm91bmRzLndpZHRoKClcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGhlaWdodDogZnVuY3Rpb24oZCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZC5ib3VuZHMuaGVpZ2h0KClcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH0pO1xuICAgIHRoaXMuZDNjb2xhLnN0YXJ0KDIwLCAwLCAyMCk7XG59O1xuXG54aU5FVC5Db250cm9sbGVyLnByb3RvdHlwZS5nZXRTVkcgPSBmdW5jdGlvbigpIHtcbiAgICBsZXQgc3ZnWG1sID0gdGhpcy5zdmdFbGVtZW50Lm91dGVySFRNTC5yZXBsYWNlKC88cmVjdCAuKj9cXC9yZWN0Pi9pLCBcIlwiKTsgLy90YWtlIG91dCB3aGl0ZSBiYWNrZ3JvdW5kIGZpbGxcbiAgICBjb25zdCB2aWV3Qm94ID0gJ3ZpZXdCb3g9XCIwIDAgJyArIHRoaXMuc3ZnRWxlbWVudC5wYXJlbnROb2RlLmNsaWVudFdpZHRoICsgXCIgXCIgKyB0aGlzLnN2Z0VsZW1lbnQucGFyZW50Tm9kZS5jbGllbnRIZWlnaHQgKyAnXCIgJztcbiAgICBzdmdYbWwgPSBzdmdYbWwucmVwbGFjZSgnPHN2ZyAnLCAnPHN2ZyB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIgeG1sbnM6eGxpbms9XCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rXCIgeG1sbnM6ZXY9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAxL3htbC1ldmVudHNcIiAnICsgdmlld0JveCk7XG5cbiAgICByZXR1cm4gJzw/eG1sIHZlcnNpb249XCIxLjBcIiBlbmNvZGluZz1cIlVURi04XCIgc3RhbmRhbG9uZT1cIm5vXCI/PicgK1xuICAgICAgICAnPCFET0NUWVBFIHN2ZyBQVUJMSUMgXCItLy9XM0MvL0RURCBTVkcgMS4xLy9FTlwiIFwiaHR0cDovL3d3dy53My5vcmcvR3JhcGhpY3MvU1ZHLzEuMS9EVEQvc3ZnMTEuZHRkXCI+JyArXG4gICAgICAgIHN2Z1htbDtcbn1cblxuLy8gdHJhbnNmb3JtIHRoZSBtb3VzZS1wb3NpdGlvbiBpbnRvIGEgcG9zaXRpb24gb24gdGhlIHN2Z1xueGlORVQuQ29udHJvbGxlci5wcm90b3R5cGUubW91c2VUb1NWRyA9IGZ1bmN0aW9uKHgsIHkpIHtcbiAgICBjb25zdCBwID0gdGhpcy5zdmdFbGVtZW50LmNyZWF0ZVNWR1BvaW50KCk7XG4gICAgcC54ID0geDtcbiAgICBwLnkgPSB5O1xuICAgIHJldHVybiBwLm1hdHJpeFRyYW5zZm9ybSh0aGlzLmNvbnRhaW5lci5nZXRDVE0oKS5pbnZlcnNlKCkpO1xufTtcblxuLy8gcmVhZHMgTUkgSlNPTiBmb3JtYXRcbnhpTkVULkNvbnRyb2xsZXIucHJvdG90eXBlLnJlYWRNSUpTT04gPSBmdW5jdGlvbihtaUpzb24sIGV4cGFuZCkge1xuICAgIC8vY2hlY2sgdGhhdCB3ZSd2ZSBnb3QgYSBwYXJzZWQgamF2YXNjcmlwdCBvYmplY3QgaGVyZSwgbm90IGEgU3RyaW5nXG4gICAgbWlKc29uID0gKHR5cGVvZiBtaUpzb24gPT09ICdvYmplY3QnKSA/IG1pSnNvbiA6IEpTT04ucGFyc2UobWlKc29uKTtcbiAgICBtaUpzb24uZGF0YSA9IG1pSnNvbi5kYXRhLnJldmVyc2UoKTtcbiAgICAvL2RlZmF1bHQgaXMgdG8gZXhwYW5kXG4gICAgaWYgKHR5cGVvZiBleHBhbmQgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIGV4cGFuZCA9IHRydWU7XG4gICAgfVxuICAgIGNvbnN0IGRhdGEgPSBtaUpzb24uZGF0YTtcbiAgICBjb25zdCBzZWxmID0gdGhpcztcbiAgICBzZWxmLmZlYXR1cmVzID0gZDMubWFwKCk7XG5cbiAgICBjb25zdCBjb21wbGV4ZXMgPSBkMy5tYXAoKTtcbiAgICBjb25zdCBuZWVkc1NlcXVlbmNlID0gZDMuc2V0KCk7IC8vdGhpbmdzIHRoYXQgbmVlZCBzZXEgbG9va2VkIHVwXG5cbiAgICAvL2dldCBpbnRlcmFjdG9yc1xuICAgIHNlbGYucHJvdGVpbkNvdW50ID0gMDtcbiAgICBzZWxmLmludGVyYWN0b3JzID0gZDMubWFwKCk7XG4gICAgZm9yIChsZXQgZGF0dW0gb2YgZGF0YSkge1xuICAgICAgICBpZiAoZGF0dW0ub2JqZWN0ID09PSAnaW50ZXJhY3RvcicpIHtcbiAgICAgICAgICAgIHNlbGYuaW50ZXJhY3RvcnMuc2V0KGRhdHVtLmlkLCBkYXR1bSk7XG4gICAgICAgICAgICBpZiAoZGF0dW0uaWQuaW5kZXhPZigndW5pcHJvdGtiXycpID09PSAwKSB7IC8vIHRvZG8gLSBpcyB0aGlzIGJlc3Qgd2F5IHRvIHRlc3QgdGhpcz9cbiAgICAgICAgICAgICAgICBzZWxmLnByb3RlaW5Db3VudCsrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgZXhwYW5kID8gcmVhZFN0b2ljaEV4cGFuZGVkKCkgOiByZWFkU3RvaWNoVW5leHBhbmRlZCgpO1xuXG4gICAgLy8gbG9vcCB0aHJvdWdoIHBhcnRpY3BhbnRzIGFuZCBmZWF0dXJlc1xuICAgIC8vIGluaXQgYmluYXJ5LCB1bmFyeSBhbmQgc2VxdWVuY2UgbGlua3MsXG4gICAgLy8gYW5kIG1ha2UgbmVlZGVkIGFzc29jaWF0aW9ucyBiZXR3ZWVuIHRoZXNlIGFuZCBjb250YWluaW5nIG5hcnlMaW5rXG4gICAgZm9yIChsZXQgZGF0dW0gb2YgZGF0YSkge1xuICAgICAgICBpZiAoZGF0dW0ub2JqZWN0ID09PSAnaW50ZXJhY3Rpb24nKSB7XG4gICAgICAgICAgICBmb3IgKGxldCBqc29uUGFydGljaXBhbnQgb2YgZGF0dW0ucGFydGljaXBhbnRzKSB7XG4gICAgICAgICAgICAgICAgbGV0IGZlYXR1cmVzID0gbmV3IEFycmF5KDApO1xuICAgICAgICAgICAgICAgIGlmIChqc29uUGFydGljaXBhbnQuZmVhdHVyZXMpIGZlYXR1cmVzID0ganNvblBhcnRpY2lwYW50LmZlYXR1cmVzO1xuXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgZmVhdHVyZSBvZiBmZWF0dXJlcykgeyAvLyBmb3IgZWFjaCBmZWF0dXJlXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGZyb21TZXF1ZW5jZURhdGEgPSBmZWF0dXJlLnNlcXVlbmNlRGF0YTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGZlYXR1cmUubGlua2VkRmVhdHVyZXMpIHsgLy8gaWYgbGlua2VkIGZlYXR1cmVzXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBsaW5rZWRGZWF0dXJlSURzID0gZmVhdHVyZS5saW5rZWRGZWF0dXJlcztcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGxpbmtlZEZlYXR1cmVDb3VudCA9IGxpbmtlZEZlYXR1cmVJRHMubGVuZ3RoO1xuICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgbGZpID0gMDsgbGZpIDwgbGlua2VkRmVhdHVyZUNvdW50OyBsZmkrKykgeyAvL2ZvciBlYWNoIGxpbmtlZCBmZWF0dXJlXG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyAhISBmb2xsb3dpbmcgaXMgYSBoYWNrLCBjb2RlIGNhbid0IGRlYWwgd2l0aFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vICEhIGNvbXBvc2l0ZSBiaW5kaW5nIHJlZ2lvbiBhY3Jvc3MgdHdvIGRpZmZlcmVudCBpbnRlcmFjdG9yc1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGJyZWFrIGZlYXR1cmUgbGlua3MgdG8gZGlmZmVyZW50IG5vZGVzIGludG8gc2VwZXJhdGUgYmluYXJ5IGxpbmtzXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdG9TZXF1ZW5jZURhdGFfaW5kZXhlZEJ5Tm9kZUlkID0gZDMubWFwKCk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBsaW5rZWRGZWF0dXJlID0gc2VsZi5mZWF0dXJlcy5nZXQobGlua2VkRmVhdHVyZUlEc1tsZmldKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBzZXFEYXRhIG9mIGxpbmtlZEZlYXR1cmUuc2VxdWVuY2VEYXRhKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBub2RlSWQgPSBzZXFEYXRhLmludGVyYWN0b3JSZWY7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChleHBhbmQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5vZGVJZCA9IG5vZGVJZCArICcoJyArIHNlcURhdGEucGFydGljaXBhbnRSZWYgKyAnKSc7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHRvU2VxdWVuY2VEYXRhID0gdG9TZXF1ZW5jZURhdGFfaW5kZXhlZEJ5Tm9kZUlkLmdldChub2RlSWQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHRvU2VxdWVuY2VEYXRhID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9TZXF1ZW5jZURhdGEgPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvU2VxdWVuY2VEYXRhX2luZGV4ZWRCeU5vZGVJZC5zZXQobm9kZUlkLCB0b1NlcXVlbmNlRGF0YSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9TZXF1ZW5jZURhdGEgPSB0b1NlcXVlbmNlRGF0YS5wdXNoKHNlcURhdGEpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgdG9TZXF1ZW5jZURhdGEgb2YgdG9TZXF1ZW5jZURhdGFfaW5kZXhlZEJ5Tm9kZUlkLnZhbHVlcygpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGZyb21JbnRlcmFjdG9yID0gZ2V0Tm9kZShmcm9tU2VxdWVuY2VEYXRhWzBdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdG9JbnRlcmFjdG9yID0gZ2V0Tm9kZSh0b1NlcXVlbmNlRGF0YVswXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBsaW5rO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZnJvbUludGVyYWN0b3IgPT09IHRvSW50ZXJhY3Rvcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGluayA9IGdldFVuYXJ5TGluayhmcm9tSW50ZXJhY3RvciwgZGF0dW0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGluayA9IGdldEJpbmFyeUxpbmsoZnJvbUludGVyYWN0b3IsIHRvSW50ZXJhY3RvciwgZGF0dW0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHNlcXVlbmNlTGluayA9IGdldEZlYXR1cmVMaW5rKGZyb21TZXF1ZW5jZURhdGEsIHRvU2VxdWVuY2VEYXRhLCBkYXR1bSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZyb21JbnRlcmFjdG9yLnNlcXVlbmNlTGlua3Muc2V0KHNlcXVlbmNlTGluay5pZCwgc2VxdWVuY2VMaW5rKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9JbnRlcmFjdG9yLnNlcXVlbmNlTGlua3Muc2V0KHNlcXVlbmNlTGluay5pZCwgc2VxdWVuY2VMaW5rKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGluay5zZXF1ZW5jZUxpbmtzLnNldChzZXF1ZW5jZUxpbmsuaWQsIHNlcXVlbmNlTGluayk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICB9IC8vIGVuZCBmb3IgZWFjaCBsaW5rZWQgZmVhdHVyZVxuXG4gICAgICAgICAgICAgICAgICAgIH0gLy8gZW5kIGlmIGxpbmtlZCBmZWF0dXJlc1xuICAgICAgICAgICAgICAgIH0gLy8gZW5kIGZvciBlYWNoIGZlYXR1cmVcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vaW5pdCBjb21wbGV4ZXNcbiAgICB0aGlzLmNvbXBsZXhlcyA9IGNvbXBsZXhlcy52YWx1ZXMoKVxuICAgIGZvciAobGV0IGMgPSAwOyBjIDwgdGhpcy5jb21wbGV4ZXMubGVuZ3RoOyBjKyspIHtcbiAgICAgICAgY29uc3QgY29tcGxleCA9IHRoaXMuY29tcGxleGVzW2NdO1xuICAgICAgICBsZXQgaW50ZXJhY3Rpb25JZDtcbiAgICAgICAgaWYgKGV4cGFuZCkge1xuICAgICAgICAgICAgaW50ZXJhY3Rpb25JZCA9IGNvbXBsZXguaWQuc3Vic3RyaW5nKDAsIGNvbXBsZXguaWQuaW5kZXhPZignKCcpKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGludGVyYWN0aW9uSWQgPSBjb21wbGV4LmlkO1xuICAgICAgICB9XG4gICAgICAgIGZvciAobGV0IGRhdHVtIG9mIGRhdGEpIHtcbiAgICAgICAgICAgIGlmIChkYXR1bS5vYmplY3QgPT09IFwiaW50ZXJhY3Rpb25cIiAmJiBkYXR1bS5pZCA9PT0gaW50ZXJhY3Rpb25JZCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IG5MaW5rSWQgPSBnZXROYXJ5TGlua0lkRnJvbUludGVyYWN0aW9uKGRhdHVtKTtcbiAgICAgICAgICAgICAgICBjb25zdCBuYXJ5TGluayA9IHNlbGYuYWxsTmFyeUxpbmtzLmdldChuTGlua0lkKTtcbiAgICAgICAgICAgICAgICBjb21wbGV4LmluaXRJbnRlcmFjdG9yKG5hcnlMaW5rKTtcbiAgICAgICAgICAgICAgICBuYXJ5TGluay5jb21wbGV4ID0gY29tcGxleDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vbWFrZSBtaSBmZWF0dXJlcyBpbnRvIGFubm90YXRpb25zXG4gICAgZm9yIChsZXQgZmVhdHVyZSBvZiBzZWxmLmZlYXR1cmVzLnZhbHVlcygpKSB7XG4gICAgICAgIC8vIGFkZCBmZWF0dXJlcyB0byBpbnRlcmFjdG9ycy9wYXJ0aWNpcGFudHMvbm9kZXNcbiAgICAgICAgLy9jb25zb2xlLmxvZyhcIkZFQVRVUkU6XCIgKyBmZWF0dXJlLm5hbWUsIGZlYXR1cmUuc2VxdWVuY2VEYXRhKTtcbiAgICAgICAgbGV0IGFubm90TmFtZSA9IFwiXCI7XG4gICAgICAgIGlmICh0eXBlb2YgZmVhdHVyZS5uYW1lICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgYW5ub3ROYW1lICs9IGZlYXR1cmUubmFtZSArICcgJztcbiAgICAgICAgfVxuICAgICAgICBpZiAodHlwZW9mIGZlYXR1cmUuZGV0bWV0aG9kICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgYW5ub3ROYW1lICs9ICcsICcgKyBmZWF0dXJlLmRldG1ldGhvZC5uYW1lO1xuICAgICAgICB9XG4gICAgICAgIC8vIHRoZSBpZCBpbmZvIHdlIG5lZWQgaXMgaW5zaWRlIHNlcXVlbmNlRGF0YSBhdHRcbiAgICAgICAgaWYgKGZlYXR1cmUuc2VxdWVuY2VEYXRhKSB7IC8vIHRvZG8gLSBzdGlsbCBuZWVkZWQ/XG4gICAgICAgICAgICBmb3IgKGxldCBzZXFEYXR1bSBvZiBmZWF0dXJlLnNlcXVlbmNlRGF0YSkge1xuICAgICAgICAgICAgICAgIGxldCBtSUQgPSBzZXFEYXR1bS5pbnRlcmFjdG9yUmVmO1xuICAgICAgICAgICAgICAgIGlmIChleHBhbmQpIHtcbiAgICAgICAgICAgICAgICAgICAgbUlEID0gbUlEICsgXCIoXCIgKyBzZXFEYXR1bS5wYXJ0aWNpcGFudFJlZiArIFwiKVwiO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjb25zdCBtb2xlY3VsZSA9IHNlbGYubW9sZWN1bGVzLmdldChtSUQpO1xuICAgICAgICAgICAgICAgIGNvbnN0IHNlcUZlYXR1cmUgPSBuZXcgU2VxdWVuY2VGZWF0dXJlKG1vbGVjdWxlLCBzZXFEYXR1bS5wb3MpXG4gICAgICAgICAgICAgICAgY29uc3QgYW5ub3RhdGlvbiA9IG5ldyBBbm5vdGF0aW9uKGFubm90TmFtZSwgc2VxRmVhdHVyZSk7XG4gICAgICAgICAgICAgICAgaWYgKG1vbGVjdWxlLm1pRmVhdHVyZXMgPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICBtb2xlY3VsZS5taUZlYXR1cmVzID0gW107XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIG1vbGVjdWxlLm1pRmVhdHVyZXMucHVzaChhbm5vdGF0aW9uKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIHNlbGYuaW5pdCgpO1xuXG4gICAgZnVuY3Rpb24gcmVhZFN0b2ljaEV4cGFuZGVkKCkge1xuICAgICAgICAvL2dldCBtYXhpbXVtIHN0b2ljaGlvbWV0cnlcbiAgICAgICAgbGV0IG1heFN0b2ljaCA9IDA7XG4gICAgICAgIGZvciAobGV0IGRhdHVtIG9mIGRhdGEpIHtcbiAgICAgICAgICAgIGlmIChkYXR1bS5vYmplY3QgPT09ICdpbnRlcmFjdGlvbicpIHtcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBqc29uUGFydGljaXBhbnQgb2YgZGF0dW0ucGFydGljaXBhbnRzKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChqc29uUGFydGljaXBhbnQuc3RvaWNoaW9tZXRyeSAmJiAoanNvblBhcnRpY2lwYW50LnN0b2ljaGlvbWV0cnkgLSAwKSA+IG1heFN0b2ljaCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbWF4U3RvaWNoID0gKGpzb25QYXJ0aWNpcGFudC5zdG9pY2hpb21ldHJ5IC0gMCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1heFN0b2ljaCA8IDMwKSB7XG4gICAgICAgICAgICBtaUpzb24gPSBFeHBhbmQubWF0cml4KG1pSnNvbik7XG4gICAgICAgIH1cblxuICAgICAgICBpbmRleEZlYXR1cmVzKCk7XG5cbiAgICAgICAgLy9hZGQgbmFyeUxpbmtzIGFuZCBwYXJ0aWNpcGFudHNcbiAgICAgICAgZm9yIChsZXQgZGF0dW0gb2YgZGF0YSkge1xuICAgICAgICAgICAgaWYgKGRhdHVtLm9iamVjdCA9PT0gJ2ludGVyYWN0aW9uJykge1xuICAgICAgICAgICAgICAgIC8vaW5pdCBuLWFyeSBsaW5rXG4gICAgICAgICAgICAgICAgY29uc3QgbkxpbmtJZCA9IGRhdHVtLmlkIHx8IGdldE5hcnlMaW5rSWRGcm9tSW50ZXJhY3Rpb24oZGF0dW0pO1xuICAgICAgICAgICAgICAgIGxldCBuTGluayA9IHNlbGYuYWxsTmFyeUxpbmtzLmdldChuTGlua0lkKTtcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIG5MaW5rID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgICAgICAgICAvL2RvZXNuJ3QgYWxyZWFkeSBleGlzdCwgbWFrZSBuZXcgbkxpbmtcbiAgICAgICAgICAgICAgICAgICAgbkxpbmsgPSBuZXcgTmFyeUxpbmsobkxpbmtJZCwgc2VsZik7XG4gICAgICAgICAgICAgICAgICAgIHNlbGYuYWxsTmFyeUxpbmtzLnNldChuTGlua0lkLCBuTGluayk7XG4gICAgICAgICAgICAgICAgICAgIC8vYWxvdCBvZiB0aW1lIGlzIGJlaW5nIHNwZW50IG9uIGNyZWF0aW5nIHRoZXNlIElEcywgc3Rhc2ggdGhlbSBpbiB0aGUgaW50ZXJhY3Rpb24gb2JqZWN0P1xuICAgICAgICAgICAgICAgICAgICBkYXR1bS5uYXJ5SWQgPSBuTGlua0lkO1xuXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIG5MaW5rLmFkZEV2aWRlbmNlKGRhdHVtKTtcblxuICAgICAgICAgICAgICAgIC8vaW5pdCBwYXJ0aWNpcGFudHNcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBqc29uUGFydGljaXBhbnQgb2YgZGF0dW0ucGFydGljaXBhbnRzKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGludFJlZiA9IGpzb25QYXJ0aWNpcGFudC5pbnRlcmFjdG9yUmVmO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBwYXJ0UmVmID0ganNvblBhcnRpY2lwYW50LmlkO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBwYXJ0aWNpcGFudElkID0gaW50UmVmICsgXCIoXCIgKyBwYXJ0UmVmICsgXCIpXCI7XG4gICAgICAgICAgICAgICAgICAgIGxldCBwYXJ0aWNpcGFudCA9IHNlbGYubW9sZWN1bGVzLmdldChwYXJ0aWNpcGFudElkKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBwYXJ0aWNpcGFudCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGludGVyYWN0b3IgPSBzZWxmLmludGVyYWN0b3JzLmdldChpbnRSZWYpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcGFydGljaXBhbnQgPSBuZXdQYXJ0aWNpcGFudChpbnRlcmFjdG9yLCBwYXJ0aWNpcGFudElkLCBpbnRSZWYpO1xuICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5tb2xlY3VsZXMuc2V0KHBhcnRpY2lwYW50SWQsIHBhcnRpY2lwYW50KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIHBhcnRpY2lwYW50Lm5hcnlMaW5rcy5zZXQobkxpbmtJZCwgbkxpbmspO1xuICAgICAgICAgICAgICAgICAgICAvL1RPRE86IHRpZHkgdXAgd2hhdHMgaGFwcGVuaW5nIGluIE5hcnlMaW5rIHJlIGludGVyYWN0b3IvcGFydGljaXBhbnQgdGVybWlub2xvZ3lcbiAgICAgICAgICAgICAgICAgICAgaWYgKG5MaW5rLmludGVyYWN0b3JzLmluZGV4T2YocGFydGljaXBhbnQpID09PSAtMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbkxpbmsuaW50ZXJhY3RvcnMucHVzaChwYXJ0aWNpcGFudCk7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBpZiAoanNvblBhcnRpY2lwYW50LnN0b2ljaGlvbWV0cnkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGludGVyYWN0b3IgPSBzZWxmLm1vbGVjdWxlcy5nZXQocGFydGljaXBhbnRJZCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpbnRlcmFjdG9yLmFkZFN0b2ljaGlvbWV0cnlMYWJlbChqc29uUGFydGljaXBhbnQuc3RvaWNoaW9tZXRyeSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBuZXdQYXJ0aWNpcGFudChpbnRlcmFjdG9yLCBwYXJ0aWNpcGFudElkLCBpbnRlcmFjdG9yUmVmKSB7XG4gICAgICAgIGxldCBwYXJ0aWNpcGFudDtcbiAgICAgICAgaWYgKHR5cGVvZiBpbnRlcmFjdG9yID09IFwidW5kZWZpbmVkXCIgfHwgaW50ZXJhY3Rvci50eXBlLmlkID09PSAnTUk6MTMwMicpIHtcbiAgICAgICAgICAgIC8vbXVzdCBiZSBhIHByZXZpb3VzbHkgdW5lbmNvdW50ZXJlZCBjb21wbGV4IC1cbiAgICAgICAgICAgIC8vIE1JOjAzMTQgLSBpbnRlcmFjdGlvbj8sIE1JOjAzMTcgLSBjb21wbGV4PyBhbmQgaXRzIG1hbnkgc3ViY2xhc3Nlc1xuXG4gICAgICAgICAgICBsZXQgaW50ZXJhY3Rpb25FeGlzdHMgPSBmYWxzZTtcbiAgICAgICAgICAgIGZvciAobGV0IGRhdHVtIG9mIGRhdGEpIHtcbiAgICAgICAgICAgICAgICBpZiAoZGF0dW0ub2JqZWN0ID09PSBcImludGVyYWN0aW9uXCIgJiYgZGF0dW0uaWQgPT09IGludGVyYWN0b3JSZWYpIHtcbiAgICAgICAgICAgICAgICAgICAgaW50ZXJhY3Rpb25FeGlzdHMgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cblxuICAgICAgICAgICAgaWYgKGludGVyYWN0aW9uRXhpc3RzKSB7XG4gICAgICAgICAgICAgICAgcGFydGljaXBhbnQgPSBuZXcgQ29tcGxleChwYXJ0aWNpcGFudElkLCBzZWxmLCBpbnRlcmFjdG9yUmVmKTtcbiAgICAgICAgICAgICAgICBjb21wbGV4ZXMuc2V0KHBhcnRpY2lwYW50SWQsIHBhcnRpY2lwYW50KTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcGFydGljaXBhbnQgPSBuZXcgQ29tcGxleF9zeW1ib2wocGFydGljaXBhbnRJZCwgc2VsZiwgaW50ZXJhY3RvclJlZiwgaW50ZXJhY3Rvcik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLy9tb2xlY3VsZSBzZXRzXG4gICAgICAgIGVsc2UgaWYgKGludGVyYWN0b3IudHlwZS5pZCA9PT0gJ01JOjEzMDQnIC8vbW9sZWN1bGUgc2V0XG4gICAgICAgICAgICB8fFxuICAgICAgICAgICAgaW50ZXJhY3Rvci50eXBlLmlkID09PSAnTUk6MTMwNScgLy9tb2xlY3VsZSBzZXQgLSBjYW5kaWRhdGUgc2V0XG4gICAgICAgICAgICB8fFxuICAgICAgICAgICAgaW50ZXJhY3Rvci50eXBlLmlkID09PSAnTUk6MTMwNycgLy9tb2xlY3VsZSBzZXQgLSBkZWZpbmVkIHNldFxuICAgICAgICAgICAgfHxcbiAgICAgICAgICAgIGludGVyYWN0b3IudHlwZS5pZCA9PT0gJ01JOjEzMDYnIC8vbW9sZWN1bGUgc2V0IC0gb3BlbiBzZXRcbiAgICAgICAgKSB7XG4gICAgICAgICAgICBwYXJ0aWNpcGFudCA9IG5ldyBNb2xlY3VsZVNldChwYXJ0aWNpcGFudElkLCBzZWxmLCBpbnRlcmFjdG9yLCBpbnRlcmFjdG9yLmxhYmVsKTtcbiAgICAgICAgfVxuICAgICAgICAvL2Jpb2FjdGl2ZSBlbnRpdGllc1xuICAgICAgICBlbHNlIGlmIChpbnRlcmFjdG9yLnR5cGUuaWQgPT09ICdNSToxMTAwJyAvLyBiaW9hY3RpdmUgZW50aXR5XG4gICAgICAgICAgICB8fFxuICAgICAgICAgICAgaW50ZXJhY3Rvci50eXBlLmlkID09PSAnTUk6MDkwNCcgLy8gYmlvYWN0aXZlIGVudGl0eSAtIHBvbHlzYWNjaGFyaWRlXG4gICAgICAgICAgICB8fFxuICAgICAgICAgICAgaW50ZXJhY3Rvci50eXBlLmlkID09PSAnTUk6MDMyOCcgLy9iaW9hY3RpdmUgZW50aXR5IC0gc21hbGwgbW9sXG4gICAgICAgICkge1xuICAgICAgICAgICAgcGFydGljaXBhbnQgPSBuZXcgQmlvYWN0aXZlRW50aXR5KHBhcnRpY2lwYW50SWQsIHNlbGYsIGludGVyYWN0b3IsIGludGVyYWN0b3IubGFiZWwpO1xuICAgICAgICB9XG4gICAgICAgIC8vIHByb3RlaW5zLCBwZXB0aWRlc1xuICAgICAgICBlbHNlIGlmIChpbnRlcmFjdG9yLnR5cGUuaWQgPT09ICdNSTowMzI2JyB8fCBpbnRlcmFjdG9yLnR5cGUuaWQgPT09ICdNSTowMzI3Jykge1xuICAgICAgICAgICAgcGFydGljaXBhbnQgPSBuZXcgUHJvdGVpbihwYXJ0aWNpcGFudElkLCBzZWxmLCBpbnRlcmFjdG9yLCBpbnRlcmFjdG9yLmxhYmVsKTtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgaW50ZXJhY3Rvci5zZXF1ZW5jZSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgICAgICBwYXJ0aWNpcGFudC5zZXRTZXF1ZW5jZShpbnRlcmFjdG9yLnNlcXVlbmNlKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgLy9zaG91bGQgbG9vayBpdCB1cCB1c2luZyBhY2Nlc3Npb24gbnVtYmVyXG4gICAgICAgICAgICAgICAgaWYgKHBhcnRpY2lwYW50SWQuaW5kZXhPZigndW5pcHJvdGtiJykgPT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgbmVlZHNTZXF1ZW5jZS5hZGQocGFydGljaXBhbnRJZCk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcGFydGljaXBhbnQuc2V0U2VxdWVuY2UoXCJTRVFVRU5DRU1JU1NJTkdcIik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8vZ2VuZXNcbiAgICAgICAgZWxzZSBpZiAoaW50ZXJhY3Rvci50eXBlLmlkID09PSAnTUk6MDI1MCcpIHtcbiAgICAgICAgICAgIHBhcnRpY2lwYW50ID0gbmV3IEdlbmUocGFydGljaXBhbnRJZCwgc2VsZiwgaW50ZXJhY3RvciwgaW50ZXJhY3Rvci5sYWJlbCk7XG4gICAgICAgIH1cbiAgICAgICAgLy9STkFcbiAgICAgICAgZWxzZSBpZiAoaW50ZXJhY3Rvci50eXBlLmlkID09PSAnTUk6MDMyMCcgLy8gUk5BXG4gICAgICAgICAgICB8fFxuICAgICAgICAgICAgaW50ZXJhY3Rvci50eXBlLmlkID09PSAnTUk6MDMyMScgLy8gUk5BIC0gY2F0YWx5dGljXG4gICAgICAgICAgICB8fFxuICAgICAgICAgICAgaW50ZXJhY3Rvci50eXBlLmlkID09PSAnTUk6MDMyMicgLy8gUk5BIC0gZ3VpZGVcbiAgICAgICAgICAgIHx8XG4gICAgICAgICAgICBpbnRlcmFjdG9yLnR5cGUuaWQgPT09ICdNSTowMzIzJyAvLyBSTkEgLSBoZXRlcm9nZW5lb3VzIG51Y2xlYXJcbiAgICAgICAgICAgIHx8XG4gICAgICAgICAgICBpbnRlcmFjdG9yLnR5cGUuaWQgPT09ICdNSToyMTkwJyAvLyBSTkEgLSBsb25nIG5vbi1jb2RpbmdcbiAgICAgICAgICAgIHx8XG4gICAgICAgICAgICBpbnRlcmFjdG9yLnR5cGUuaWQgPT09ICdNSTowMzI0JyAvLyBSTkEgLSBtZXNzZW5nZXJcbiAgICAgICAgICAgIHx8XG4gICAgICAgICAgICBpbnRlcmFjdG9yLnR5cGUuaWQgPT09ICdNSTowNjc5JyAvLyBSTkEgLSBwb2x5IGFkZW5pbmVcbiAgICAgICAgICAgIHx8XG4gICAgICAgICAgICBpbnRlcmFjdG9yLnR5cGUuaWQgPT09ICdNSTowNjA4JyAvLyBSTkEgLSByaWJvc29tYWxcbiAgICAgICAgICAgIHx8XG4gICAgICAgICAgICBpbnRlcmFjdG9yLnR5cGUuaWQgPT09ICdNSTowNjExJyAvLyBSTkEgLSBzaWduYWwgcmVjb2duaXRpb24gcGFydGljbGVcbiAgICAgICAgICAgIHx8XG4gICAgICAgICAgICBpbnRlcmFjdG9yLnR5cGUuaWQgPT09ICdNSTowNjEwJyAvLyBSTkEgLSBzbWFsbCBpbnRlcmZlcmluZ1xuICAgICAgICAgICAgfHxcbiAgICAgICAgICAgIGludGVyYWN0b3IudHlwZS5pZCA9PT0gJ01JOjA2MDcnIC8vIFJOQSAtIHNtYWxsIG51Y2xlYXJcbiAgICAgICAgICAgIHx8XG4gICAgICAgICAgICBpbnRlcmFjdG9yLnR5cGUuaWQgPT09ICdNSTowNjA5JyAvLyBSTkEgLSBzbWFsbCBudWNsZW9sYXJcbiAgICAgICAgICAgIHx8XG4gICAgICAgICAgICBpbnRlcmFjdG9yLnR5cGUuaWQgPT09ICdNSTowMzI1JyAvLyBSTkEgLSB0cmFuc2ZlclxuICAgICAgICApIHtcbiAgICAgICAgICAgIHBhcnRpY2lwYW50ID0gbmV3IFJOQShwYXJ0aWNpcGFudElkLCBzZWxmLCBpbnRlcmFjdG9yLCBpbnRlcmFjdG9yLmxhYmVsKTtcbiAgICAgICAgfVxuICAgICAgICAvL0ROQVxuICAgICAgICBlbHNlIGlmIChpbnRlcmFjdG9yLnR5cGUuaWQgPT09ICdNSTowMzE5JyAvLyBETkFcbiAgICAgICAgICAgIHx8XG4gICAgICAgICAgICBpbnRlcmFjdG9yLnR5cGUuaWQgPT09ICdNSTowNjgxJyAvLyBETkEgLSBkb3VibGUgc3RyYW5kZWRcbiAgICAgICAgICAgIHx8XG4gICAgICAgICAgICBpbnRlcmFjdG9yLnR5cGUuaWQgPT09ICdNSTowNjgwJyAvLyBETkEgLSBzaW5nbGUgc3RyYW5kZWRcbiAgICAgICAgKSB7XG4gICAgICAgICAgICBwYXJ0aWNpcGFudCA9IG5ldyBETkEocGFydGljaXBhbnRJZCwgc2VsZiwgaW50ZXJhY3RvciwgaW50ZXJhY3Rvci5sYWJlbCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBNSTowMzI5IC0gdW5rbm93biBwYXJ0aWNpcGFudCA/XG4gICAgICAgICAgICAvLyBNSTowMzgzIC0gYmlvcG9seW1lciA/XG4gICAgICAgICAgICBhbGVydChcIlVucmVjb2duaXNlZCB0eXBlOlwiICsgaW50ZXJhY3Rvci50eXBlLm5hbWUpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBwYXJ0aWNpcGFudDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpbmRleEZlYXR1cmVzKCkge1xuICAgICAgICAvL2NyZWF0ZSBpbmRleGVkIGNvbGxlY3Rpb24gb2YgYWxsIGZlYXR1cmVzIGZyb20gaW50ZXJhY3Rpb25zXG4gICAgICAgIC8vIC0gc3RpbGwgc2VlbXMgbGlrZSBhIGdvb2Qgc3RhcnRpbmcgcG9pbnQ/XG4gICAgICAgIGZvciAobGV0IGRhdHVtIG9mIGRhdGEpIHtcbiAgICAgICAgICAgIGlmIChkYXR1bS5vYmplY3QgPT09ICdpbnRlcmFjdGlvbicpIHtcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBqc29uUGFydGljaXBhbnQgb2YgZGF0dW0ucGFydGljaXBhbnRzKSB7XG4gICAgICAgICAgICAgICAgICAgIGxldCBmZWF0dXJlcyA9IG5ldyBBcnJheSgwKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGpzb25QYXJ0aWNpcGFudC5mZWF0dXJlcykgZmVhdHVyZXMgPSBqc29uUGFydGljaXBhbnQuZmVhdHVyZXM7XG5cbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZkNvdW50ID0gZmVhdHVyZXMubGVuZ3RoO1xuICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBmID0gMDsgZiA8IGZDb3VudDsgZisrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBmZWF0dXJlID0gZmVhdHVyZXNbZl07XG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxmLmZlYXR1cmVzLnNldChmZWF0dXJlLmlkLCBmZWF0dXJlKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHJlYWRTdG9pY2hVbmV4cGFuZGVkKCkge1xuICAgICAgICAvL2dldCBpbnRlcmFjdG9yc1xuICAgICAgICBmb3IgKGxldCBpbnRlcmFjdG9yIG9mIHNlbGYuaW50ZXJhY3RvcnMudmFsdWVzKCkpIHtcbiAgICAgICAgICAgIGNvbnN0IHBhcnRpY2lwYW50SWQgPSBpbnRlcmFjdG9yLmlkO1xuICAgICAgICAgICAgY29uc3QgcGFydGljaXBhbnQgPSBuZXdQYXJ0aWNpcGFudChpbnRlcmFjdG9yLCBwYXJ0aWNpcGFudElkKTtcbiAgICAgICAgICAgIHNlbGYubW9sZWN1bGVzLnNldChwYXJ0aWNpcGFudElkLCBwYXJ0aWNpcGFudCk7XG4gICAgICAgIH1cblxuICAgICAgICBpbmRleEZlYXR1cmVzKCk7XG5cbiAgICAgICAgLy9hZGQgbmFyeUxpbmtzXG4gICAgICAgIGZvciAobGV0IGRhdHVtIG9mIGRhdGEpIHtcbiAgICAgICAgICAgIGlmIChkYXR1bS5vYmplY3QgPT09ICdpbnRlcmFjdGlvbicpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBqc29uUGFydGljaXBhbnRzID0gZGF0dW0ucGFydGljaXBhbnRzO1xuICAgICAgICAgICAgICAgIGNvbnN0IHBhcnRpY2lwYW50Q291bnQgPSBqc29uUGFydGljaXBhbnRzLmxlbmd0aDtcblxuICAgICAgICAgICAgICAgIC8vaW5pdCBuLWFyeSBsaW5rXG4gICAgICAgICAgICAgICAgY29uc3QgbkxpbmtJZCA9IGdldE5hcnlMaW5rSWRGcm9tSW50ZXJhY3Rpb24oZGF0dW0pO1xuICAgICAgICAgICAgICAgIGxldCBuTGluayA9IHNlbGYuYWxsTmFyeUxpbmtzLmdldChuTGlua0lkKTtcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIG5MaW5rID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgICAgICAgICAvL2RvZXNuJ3QgYWxyZWFkeSBleGlzdCwgbWFrZSBuZXcgbkxpbmtcbiAgICAgICAgICAgICAgICAgICAgbkxpbmsgPSBuZXcgTmFyeUxpbmsobkxpbmtJZCwgc2VsZik7XG4gICAgICAgICAgICAgICAgICAgIHNlbGYuYWxsTmFyeUxpbmtzLnNldChuTGlua0lkLCBuTGluayk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIG5MaW5rLmFkZEV2aWRlbmNlKGRhdHVtKTtcblxuICAgICAgICAgICAgICAgIC8vfiAvL2luaXQgcGFydGljaXBhbnRzXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgcGkgPSAwOyBwaSA8IHBhcnRpY2lwYW50Q291bnQ7IHBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QganNvblBhcnRpY2lwYW50ID0ganNvblBhcnRpY2lwYW50c1twaV07XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGludFJlZiA9IGpzb25QYXJ0aWNpcGFudC5pbnRlcmFjdG9yUmVmO1xuICAgICAgICAgICAgICAgICAgICBsZXQgcGFydGljaXBhbnQgPSBzZWxmLm1vbGVjdWxlcy5nZXQoaW50UmVmKTtcblxuICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHBhcnRpY2lwYW50ID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy9tdXN0IGJlIGEgcHJldmlvdXNseSB1bmVuY291bnRlcmVkIGNvbXBsZXhcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhcnRpY2lwYW50ID0gbmV3IENvbXBsZXgoaW50UmVmLCBzZWxmKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbXBsZXhlcy5zZXQoaW50UmVmLCBwYXJ0aWNpcGFudCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxmLm1vbGVjdWxlcy5zZXQoaW50UmVmLCBwYXJ0aWNpcGFudCk7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuXG4gICAgICAgICAgICAgICAgICAgIHBhcnRpY2lwYW50Lm5hcnlMaW5rcy5zZXQobkxpbmtJZCwgbkxpbmspO1xuICAgICAgICAgICAgICAgICAgICAvL1RPRE86IHRpZHkgdXAgd2hhdHMgaGFwcGVuaW5nIGluIE5hcnlMaW5rIHJlIGludGVyYWN0b3IvcGFydGljaXBhbnQgdGVybWlub2xvZ3lcbiAgICAgICAgICAgICAgICAgICAgaWYgKG5MaW5rLmludGVyYWN0b3JzLmluZGV4T2YocGFydGljaXBhbnQpID09PSAtMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbkxpbmsuaW50ZXJhY3RvcnMucHVzaChwYXJ0aWNpcGFudCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgLy90ZW1wIC0gdG8gZ2l2ZSBzZW5zaWJsZSBpbmZvIHdoZW4gc3RvaWNoIGNvbGxhcHNlZFxuICAgICAgICAgICAgICAgICAgICBjb25zdCBpbnRlcmFjdG9yID0gc2VsZi5tb2xlY3VsZXMuZ2V0KGludFJlZik7XG4gICAgICAgICAgICAgICAgICAgIGludGVyYWN0b3Iuc3RvaWNoID0gaW50ZXJhY3Rvci5zdG9pY2ggPyBpbnRlcmFjdG9yLnN0b2ljaCA6IDA7XG4gICAgICAgICAgICAgICAgICAgIGlmIChqc29uUGFydGljaXBhbnQuc3RvaWNoaW9tZXRyeSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaW50ZXJhY3Rvci5zdG9pY2ggPSBpbnRlcmFjdG9yLnN0b2ljaCArICtqc29uUGFydGljaXBhbnQuc3RvaWNoaW9tZXRyeTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGludGVyYWN0b3Iuc3RvaWNoID0gaW50ZXJhY3Rvci5zdG9pY2ggKyAxO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgY29uc3QgaW50ZXJhY3RvckFyciA9IHNlbGYubW9sZWN1bGVzLnZhbHVlcygpO1xuICAgICAgICAgICAgICAgIGNvbnN0IGlDb3VudCA9IGludGVyYWN0b3JBcnIubGVuZ3RoO1xuICAgICAgICAgICAgICAgIGZvciAobGV0IGlpID0gMDsgaWkgPCBpQ291bnQ7IGlpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgaW50ID0gaW50ZXJhY3RvckFycltpaV07XG4gICAgICAgICAgICAgICAgICAgIGludC5hZGRTdG9pY2hpb21ldHJ5TGFiZWwoaW50LnN0b2ljaCk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgIH1cblxuXG4gICAgZnVuY3Rpb24gZ2V0TmFyeUxpbmtJZEZyb21JbnRlcmFjdGlvbihpbnRlcmFjdGlvbikge1xuICAgICAgICBpZiAoaW50ZXJhY3Rpb24ubmFyeUlkKSB7XG4gICAgICAgICAgICByZXR1cm4gaW50ZXJhY3Rpb24ubmFyeUlkO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGpzb25QYXJ0aWNpcGFudHMgPSBpbnRlcmFjdGlvbi5wYXJ0aWNpcGFudHM7XG4gICAgICAgIGNvbnN0IHBhcnRpY2lwYW50Q291bnQgPSBqc29uUGFydGljaXBhbnRzLmxlbmd0aDtcblxuICAgICAgICBjb25zdCBwSURzID0gZDMuc2V0KCk7IC8vdXNlZCB0byBlbGltaW5hdGUgZHVwbGljYXRlc1xuICAgICAgICAvL21ha2UgaWRcbiAgICAgICAgZm9yIChsZXQgcGkgPSAwOyBwaSA8IHBhcnRpY2lwYW50Q291bnQ7IHBpKyspIHtcbiAgICAgICAgICAgIGxldCBwSUQgPSBqc29uUGFydGljaXBhbnRzW3BpXS5pbnRlcmFjdG9yUmVmO1xuICAgICAgICAgICAgaWYgKGV4cGFuZCkge1xuICAgICAgICAgICAgICAgIHBJRCA9IHBJRCArIFwiKFwiICsganNvblBhcnRpY2lwYW50c1twaV0uaWQgKyBcIilcIjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHBJRHMuYWRkKHBJRCk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gcElEcy52YWx1ZXMoKS5zb3J0KCkuam9pbignLScpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldE5vZGUoc2VxRGF0dW0pIHtcbiAgICAgICAgbGV0IGlkID0gc2VxRGF0dW0uaW50ZXJhY3RvclJlZjtcbiAgICAgICAgaWYgKGV4cGFuZCkge1xuICAgICAgICAgICAgaWQgPSBpZCArICcoJyArIHNlcURhdHVtLnBhcnRpY2lwYW50UmVmICsgJyknO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzZWxmLm1vbGVjdWxlcy5nZXQoaWQpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldEZlYXR1cmVMaW5rKGZyb21TZXFEYXRhLCB0b1NlcURhdGEsIGludGVyYWN0aW9uKSB7XG4gICAgICAgIGZ1bmN0aW9uIHNlcURhdGFUb1N0cmluZyhzZXFEYXRhKSB7XG4gICAgICAgICAgICBjb25zdCBub2RlSWRzID0gZDMuc2V0KCk7IC8vdXNlZCB0byBlbGltaW5hdGUgZHVwbGljYXRlc1xuICAgICAgICAgICAgLy9tYWtlIGlkXG4gICAgICAgICAgICBmb3IgKGxldCBzID0gMDsgcyA8IHNlcURhdGEubGVuZ3RoOyBzKyspIHtcbiAgICAgICAgICAgICAgICBjb25zdCBzZXEgPSBzZXFEYXRhW3NdO1xuICAgICAgICAgICAgICAgIGxldCBpZCA9IHNlcS5pbnRlcmFjdG9yUmVmO1xuICAgICAgICAgICAgICAgIGlmIChleHBhbmQpIHtcbiAgICAgICAgICAgICAgICAgICAgaWQgPSBpZCArICcoJyArIHNlcS5wYXJ0aWNpcGFudFJlZiArICcpJztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWQgPSBpZCArICc6JyArIHNlcS5wb3M7XG4gICAgICAgICAgICAgICAgbm9kZUlkcy5hZGQoaWQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy9zb3J0IGlkc1xuICAgICAgICAgICAgcmV0dXJuIG5vZGVJZHMudmFsdWVzKCkuc29ydCgpLmpvaW4oJzsnKTtcbiAgICAgICAgfVxuXG5cbiAgICAgICAgY29uc3Qgc3RhcnQgPSBzZXFEYXRhVG9TdHJpbmcoZnJvbVNlcURhdGEpO1xuICAgICAgICBjb25zdCBlbmQgPSBzZXFEYXRhVG9TdHJpbmcodG9TZXFEYXRhKTtcbiAgICAgICAgbGV0IHNlcUxpbmtJZDsvLywgZW5kc1N3YXBwZWQ7XG4gICAgICAgIGlmIChzdGFydCA8IGVuZCkge1xuICAgICAgICAgICAgc2VxTGlua0lkID0gc3RhcnQgKyAnPjwnICsgZW5kO1xuICAgICAgICAgICAgLy9lbmRzU3dhcHBlZCA9IGZhbHNlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgc2VxTGlua0lkID0gZW5kICsgJz48JyArIHN0YXJ0O1xuICAgICAgICAgICAgLy9lbmRzU3dhcHBlZCA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IHNlcXVlbmNlTGluayA9IHNlbGYuYWxsU2VxdWVuY2VMaW5rcy5nZXQoc2VxTGlua0lkKTtcbiAgICAgICAgaWYgKHR5cGVvZiBzZXF1ZW5jZUxpbmsgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICBjb25zdCBmcm9tRmVhdHVyZVBvc2l0aW9ucyA9IFtdO1xuICAgICAgICAgICAgZm9yIChsZXQgZnJvbVNlcURhdHVtIG9mIGZyb21TZXFEYXRhKSB7XG4gICAgICAgICAgICAgICAgZnJvbUZlYXR1cmVQb3NpdGlvbnMucHVzaChuZXcgU2VxdWVuY2VGZWF0dXJlKGdldE5vZGUoZnJvbVNlcURhdHVtKSwgZnJvbVNlcURhdHVtLnBvcykpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgdG9GZWF0dXJlUG9zaXRpb25zID0gW107XG4gICAgICAgICAgICBmb3IgKGxldCB0b1NlcURhdHVtIG9mIHRvU2VxRGF0YSkge1xuICAgICAgICAgICAgICAgIHRvRmVhdHVyZVBvc2l0aW9ucy5wdXNoKG5ldyBTZXF1ZW5jZUZlYXR1cmUoZ2V0Tm9kZSh0b1NlcURhdHVtKSwgdG9TZXFEYXR1bS5wb3MpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vfiBpZiAoZW5kc1N3YXBwZWQgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICBzZXF1ZW5jZUxpbmsgPSBuZXcgU2VxdWVuY2VMaW5rKHNlcUxpbmtJZCwgZnJvbUZlYXR1cmVQb3NpdGlvbnMsIHRvRmVhdHVyZVBvc2l0aW9ucywgc2VsZiwgaW50ZXJhY3Rpb24pO1xuICAgICAgICAgICAgLy9+IH1lbHNlIHtcbiAgICAgICAgICAgIC8vfiBzZXF1ZW5jZUxpbmsgPSBuZXcgU2VxdWVuY2VMaW5rKHNlcUxpbmtJZCwgdG9GZWF0dXJlUG9zaXRpb25zLCBmcm9tRmVhdHVyZVBvc2l0aW9ucywgc2VsZiwgaW50ZXJhY3Rpb24pO1xuICAgICAgICAgICAgLy9+IH1cbiAgICAgICAgICAgIHNlbGYuYWxsU2VxdWVuY2VMaW5rcy5zZXQoc2VxTGlua0lkLCBzZXF1ZW5jZUxpbmspO1xuICAgICAgICB9XG5cbiAgICAgICAgc2VxdWVuY2VMaW5rLmFkZEV2aWRlbmNlKGludGVyYWN0aW9uKTtcbiAgICAgICAgY29uc3QgbkxpbmtJZCA9IGdldE5hcnlMaW5rSWRGcm9tSW50ZXJhY3Rpb24oaW50ZXJhY3Rpb24pO1xuICAgICAgICBjb25zdCBuTGluayA9IHNlbGYuYWxsTmFyeUxpbmtzLmdldChuTGlua0lkKTtcbiAgICAgICAgbkxpbmsuc2VxdWVuY2VMaW5rcy5zZXQoc2VxTGlua0lkLCBzZXF1ZW5jZUxpbmspO1xuICAgICAgICByZXR1cm4gc2VxdWVuY2VMaW5rO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldFVuYXJ5TGluayhpbnRlcmFjdG9yLCBpbnRlcmFjdGlvbikge1xuICAgICAgICBjb25zdCBsaW5rSUQgPSAnLScgKyBpbnRlcmFjdG9yLmlkICsgJy0nICsgaW50ZXJhY3Rvci5pZDtcbiAgICAgICAgbGV0IGxpbmsgPSBzZWxmLmFsbFVuYXJ5TGlua3MuZ2V0KGxpbmtJRCk7XG4gICAgICAgIGlmICh0eXBlb2YgbGluayA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgIGxpbmsgPSBuZXcgVW5hcnlMaW5rKGxpbmtJRCwgc2VsZiwgaW50ZXJhY3Rvcik7XG4gICAgICAgICAgICBzZWxmLmFsbFVuYXJ5TGlua3Muc2V0KGxpbmtJRCwgbGluayk7XG4gICAgICAgICAgICBpbnRlcmFjdG9yLnNlbGZMaW5rID0gbGluaztcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBuTGlua0lkID0gZ2V0TmFyeUxpbmtJZEZyb21JbnRlcmFjdGlvbihpbnRlcmFjdGlvbik7XG4gICAgICAgIGNvbnN0IG5MaW5rID0gc2VsZi5hbGxOYXJ5TGlua3MuZ2V0KG5MaW5rSWQpO1xuICAgICAgICBuTGluay51bmFyeUxpbmtzLnNldChsaW5rSUQsIGxpbmspO1xuICAgICAgICBsaW5rLmFkZEV2aWRlbmNlKGludGVyYWN0aW9uKTtcbiAgICAgICAgcmV0dXJuIGxpbms7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0QmluYXJ5TGluayhzb3VyY2VJbnRlcmFjdG9yLCB0YXJnZXRJbnRlcmFjdG9yLCBpbnRlcmFjdGlvbikge1xuICAgICAgICBsZXQgbGlua0lELCBmaSwgdGk7XG4gICAgICAgIC8vIHRoZXNlIGxpbmtzIGFyZSB1bmRpcmVjdGVkIGFuZCBzaG91bGQgaGF2ZSBzYW1lIElEIHJlZ2FyZGxlc3Mgb2Ygd2hpY2ggd2F5IHJvdW5kXG4gICAgICAgIC8vIHNvdXJjZSBhbmQgdGFyZ2V0IGFyZVxuICAgICAgICBpZiAoc291cmNlSW50ZXJhY3Rvci5pZCA8IHRhcmdldEludGVyYWN0b3IuaWQpIHtcbiAgICAgICAgICAgIGxpbmtJRCA9ICctJyArIHNvdXJjZUludGVyYWN0b3IuaWQgKyAnLScgKyB0YXJnZXRJbnRlcmFjdG9yLmlkO1xuICAgICAgICAgICAgZmkgPSBzb3VyY2VJbnRlcmFjdG9yO1xuICAgICAgICAgICAgdGkgPSB0YXJnZXRJbnRlcmFjdG9yO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbGlua0lEID0gXCItXCIgKyB0YXJnZXRJbnRlcmFjdG9yLmlkICsgJy0nICsgc291cmNlSW50ZXJhY3Rvci5pZDtcbiAgICAgICAgICAgIGZpID0gdGFyZ2V0SW50ZXJhY3RvcjtcbiAgICAgICAgICAgIHRpID0gc291cmNlSW50ZXJhY3RvcjtcbiAgICAgICAgfVxuICAgICAgICBsZXQgbGluayA9IHNlbGYuYWxsQmluYXJ5TGlua3MuZ2V0KGxpbmtJRCk7XG4gICAgICAgIGlmICh0eXBlb2YgbGluayA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgIGxpbmsgPSBuZXcgQmluYXJ5TGluayhsaW5rSUQsIHNlbGYsIGZpLCB0aSk7XG4gICAgICAgICAgICBmaS5iaW5hcnlMaW5rcy5zZXQobGlua0lELCBsaW5rKTtcbiAgICAgICAgICAgIHRpLmJpbmFyeUxpbmtzLnNldChsaW5rSUQsIGxpbmspO1xuICAgICAgICAgICAgc2VsZi5hbGxCaW5hcnlMaW5rcy5zZXQobGlua0lELCBsaW5rKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBuTGlua0lkID0gZ2V0TmFyeUxpbmtJZEZyb21JbnRlcmFjdGlvbihpbnRlcmFjdGlvbik7XG4gICAgICAgIGNvbnN0IG5MaW5rID0gc2VsZi5hbGxOYXJ5TGlua3MuZ2V0KG5MaW5rSWQpO1xuICAgICAgICBuTGluay5iaW5hcnlMaW5rcy5zZXQobGlua0lELCBsaW5rKTtcbiAgICAgICAgbGluay5hZGRFdmlkZW5jZShpbnRlcmFjdGlvbik7XG4gICAgICAgIHJldHVybiBsaW5rO1xuICAgIH1cbn07XG5cbnhpTkVULkNvbnRyb2xsZXIucHJvdG90eXBlLmNoZWNrTGlua3MgPSBmdW5jdGlvbigpIHtcbiAgICBmdW5jdGlvbiBjaGVja0FsbChsaW5rTWFwKSB7XG4gICAgICAgIGNvbnN0IGxpbmtzID0gbGlua01hcC52YWx1ZXMoKTtcbiAgICAgICAgY29uc3QgYyA9IGxpbmtzLmxlbmd0aDtcbiAgICAgICAgZm9yIChsZXQgbCA9IDA7IGwgPCBjOyBsKyspIHtcbiAgICAgICAgICAgIGxpbmtzW2xdLmNoZWNrKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBjaGVja0FsbCh0aGlzLmFsbE5hcnlMaW5rcyk7XG4gICAgY2hlY2tBbGwodGhpcy5hbGxCaW5hcnlMaW5rcyk7XG4gICAgY2hlY2tBbGwodGhpcy5hbGxVbmFyeUxpbmtzKTtcbiAgICBjaGVja0FsbCh0aGlzLmFsbFNlcXVlbmNlTGlua3MpO1xufTtcblxueGlORVQuQ29udHJvbGxlci5wcm90b3R5cGUuc2V0QWxsTGlua0Nvb3JkaW5hdGVzID0gZnVuY3Rpb24oKSB7XG4gICAgZnVuY3Rpb24gc2V0QWxsKGxpbmtNYXApIHtcbiAgICAgICAgY29uc3QgbGlua3MgPSBsaW5rTWFwLnZhbHVlcygpO1xuICAgICAgICBjb25zdCBjID0gbGlua3MubGVuZ3RoO1xuICAgICAgICBmb3IgKGxldCBsID0gMDsgbCA8IGM7IGwrKykge1xuICAgICAgICAgICAgbGlua3NbbF0uc2V0TGlua0Nvb3JkaW5hdGVzKCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgc2V0QWxsKHRoaXMuYWxsTmFyeUxpbmtzKTtcbiAgICBzZXRBbGwodGhpcy5hbGxCaW5hcnlMaW5rcyk7XG4gICAgc2V0QWxsKHRoaXMuYWxsVW5hcnlMaW5rcyk7XG4gICAgc2V0QWxsKHRoaXMuYWxsU2VxdWVuY2VMaW5rcyk7XG59O1xuXG54aU5FVC5Db250cm9sbGVyLnByb3RvdHlwZS5zaG93VG9vbHRpcCA9IGZ1bmN0aW9uKHApIHtcbiAgICBsZXQgdHRYLCB0dFk7XG4gICAgY29uc3QgbGVuZ3RoID0gdGhpcy50b29sdGlwLmdldENvbXB1dGVkVGV4dExlbmd0aCgpICsgMTY7XG4gICAgY29uc3Qgd2lkdGggPSB0aGlzLnN2Z0VsZW1lbnQucGFyZW50Tm9kZS5jbGllbnRXaWR0aDtcbiAgICBjb25zdCBoZWlnaHQgPSB0aGlzLnN2Z0VsZW1lbnQucGFyZW50Tm9kZS5jbGllbnRIZWlnaHQ7XG4gICAgaWYgKHAueCArIDIwICsgbGVuZ3RoIDwgd2lkdGgpIHtcbiAgICAgICAgdHRYID0gcC54O1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHR0WCA9IHdpZHRoIC0gbGVuZ3RoIC0gMjA7XG4gICAgfVxuXG4gICAgaWYgKHAueSArIDYwIDwgaGVpZ2h0KSB7XG4gICAgICAgIHR0WSA9IHAueTtcbiAgICB9IGVsc2Uge1xuICAgICAgICB0dFkgPSBoZWlnaHQgLSA2MDtcbiAgICB9XG4gICAgdGhpcy50b29sdGlwLnNldEF0dHJpYnV0ZShcInhcIiwgdHRYICsgMjIpO1xuICAgIHRoaXMudG9vbHRpcC5zZXRBdHRyaWJ1dGUoXCJ5XCIsIHR0WSArIDQ3KTtcbiAgICB0aGlzLnRvb2x0aXBfYmcuc2V0QXR0cmlidXRlKFwieFwiLCB0dFggKyAxNik7XG4gICAgdGhpcy50b29sdGlwX2JnLnNldEF0dHJpYnV0ZShcInlcIiwgdHRZICsgMjgpO1xuICAgIHRoaXMudG9vbHRpcF9zdWJCZy5zZXRBdHRyaWJ1dGUoXCJ4XCIsIHR0WCArIDE2KTtcbiAgICB0aGlzLnRvb2x0aXBfc3ViQmcuc2V0QXR0cmlidXRlKFwieVwiLCB0dFkgKyAyOCk7XG59O1xuXG54aU5FVC5Db250cm9sbGVyLnByb3RvdHlwZS5zZXRUb29sdGlwID0gZnVuY3Rpb24odGV4dCwgY29sb3VyKSB7XG4gICAgaWYgKHRleHQpIHtcbiAgICAgICAgdGhpcy50b29sdGlwLmZpcnN0Q2hpbGQuZGF0YSA9IHRleHQudG9TdHJpbmcoKS5yZXBsYWNlKC8mKHF1b3QpOy9nLCAnXCInKTtcbiAgICAgICAgdGhpcy50b29sdGlwLnNldEF0dHJpYnV0ZShcImRpc3BsYXlcIiwgXCJibG9ja1wiKTtcbiAgICAgICAgY29uc3QgbGVuZ3RoID0gdGhpcy50b29sdGlwLmdldENvbXB1dGVkVGV4dExlbmd0aCgpO1xuICAgICAgICB0aGlzLnRvb2x0aXBfYmcuc2V0QXR0cmlidXRlKFwid2lkdGhcIiwgbGVuZ3RoICsgMTYpO1xuICAgICAgICB0aGlzLnRvb2x0aXBfc3ViQmcuc2V0QXR0cmlidXRlKFwid2lkdGhcIiwgbGVuZ3RoICsgMTYpO1xuICAgICAgICBpZiAodHlwZW9mIGNvbG91ciAhPT0gJ3VuZGVmaW5lZCcgJiYgY29sb3VyICE9IG51bGwpIHtcbiAgICAgICAgICAgIHRoaXMudG9vbHRpcF9iZy5zZXRBdHRyaWJ1dGUoJ2ZpbGwnLCBjb2xvdXIpO1xuICAgICAgICAgICAgdGhpcy50b29sdGlwX2JnLnNldEF0dHJpYnV0ZSgnc3Ryb2tlJywgY29sb3VyKTtcbiAgICAgICAgICAgIHRoaXMudG9vbHRpcF9iZy5zZXRBdHRyaWJ1dGUoJ2ZpbGwtb3BhY2l0eScsICcwLjUnKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMudG9vbHRpcF9iZy5zZXRBdHRyaWJ1dGUoJ2ZpbGwnLCAnd2hpdGUnKTtcbiAgICAgICAgICAgIHRoaXMudG9vbHRpcF9iZy5zZXRBdHRyaWJ1dGUoJ3N0cm9rZScsICdncmV5Jyk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy50b29sdGlwX2JnLnNldEF0dHJpYnV0ZSgnaGVpZ2h0JywgMjgpO1xuICAgICAgICB0aGlzLnRvb2x0aXBfc3ViQmcuc2V0QXR0cmlidXRlKCdoZWlnaHQnLCAyOCk7XG4gICAgICAgIHRoaXMudG9vbHRpcF9iZy5zZXRBdHRyaWJ1dGUoXCJkaXNwbGF5XCIsIFwiYmxvY2tcIik7XG4gICAgICAgIHRoaXMudG9vbHRpcF9zdWJCZy5zZXRBdHRyaWJ1dGUoXCJkaXNwbGF5XCIsIFwiYmxvY2tcIik7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5oaWRlVG9vbHRpcCgpO1xuICAgIH1cbn07XG5cbnhpTkVULkNvbnRyb2xsZXIucHJvdG90eXBlLmhpZGVUb29sdGlwID0gZnVuY3Rpb24oKSB7XG4gICAgdGhpcy50b29sdGlwLnNldEF0dHJpYnV0ZShcImRpc3BsYXlcIiwgXCJub25lXCIpO1xuICAgIHRoaXMudG9vbHRpcF9iZy5zZXRBdHRyaWJ1dGUoXCJkaXNwbGF5XCIsIFwibm9uZVwiKTtcbiAgICB0aGlzLnRvb2x0aXBfc3ViQmcuc2V0QXR0cmlidXRlKFwiZGlzcGxheVwiLCBcIm5vbmVcIik7XG59O1xuXG54aU5FVC5Db250cm9sbGVyLnByb3RvdHlwZS5sZWdlbmRDaGFuZ2VkID0gZnVuY3Rpb24oY29sb3VyU2NoZW1lKSB7XG4gICAgY29uc3QgY2FsbGJhY2tzID0gdGhpcy5sZWdlbmRDYWxsYmFja3M7XG4gICAgY29uc3QgY291bnQgPSBjYWxsYmFja3MubGVuZ3RoO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY291bnQ7IGkrKykge1xuICAgICAgICBjYWxsYmFja3NbaV0oY29sb3VyU2NoZW1lKTtcbiAgICB9XG59XG5cbnhpTkVULkNvbnRyb2xsZXIucHJvdG90eXBlLmdldENvbXBsZXhDb2xvdXJzID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIE5hcnlMaW5rLm5hcnlDb2xvdXJzO1xufTtcblxueGlORVQuQ29udHJvbGxlci5wcm90b3R5cGUuY29sbGFwc2VBbGwgPSBmdW5jdGlvbigpIHtcbiAgICBjb25zdCBtb2xlY3VsZXMgPSB0aGlzLm1vbGVjdWxlcy52YWx1ZXMoKTtcbiAgICBjb25zdCBtQ291bnQgPSBtb2xlY3VsZXMubGVuZ3RoO1xuICAgIGZvciAobGV0IG0gPSAwOyBtIDwgbUNvdW50OyBtKyspIHtcbiAgICAgICAgY29uc3QgbW9sZWN1bGUgPSBtb2xlY3VsZXNbbV07XG4gICAgICAgIGlmIChtb2xlY3VsZS5mb3JtID09PSAxKSB7XG4gICAgICAgICAgICBtb2xlY3VsZS5zZXRGb3JtKDApO1xuICAgICAgICB9XG4gICAgfVxufTtcblxueGlORVQuQ29udHJvbGxlci5wcm90b3R5cGUuZXhwYW5kQWxsID0gZnVuY3Rpb24oKSB7XG4gICAgY29uc3QgbW9sZWN1bGVzID0gdGhpcy5tb2xlY3VsZXMudmFsdWVzKCk7XG4gICAgY29uc3QgbUNvdW50ID0gbW9sZWN1bGVzLmxlbmd0aDtcbiAgICBmb3IgKGxldCBtID0gMDsgbSA8IG1Db3VudDsgbSsrKSB7XG4gICAgICAgIGNvbnN0IG1vbGVjdWxlID0gbW9sZWN1bGVzW21dO1xuICAgICAgICBpZiAobW9sZWN1bGUuZm9ybSA9PT0gMCkge1xuICAgICAgICAgICAgbW9sZWN1bGUuc2V0Rm9ybSgxKTtcbiAgICAgICAgfVxuICAgIH1cbn07XG5cbi8qXG54aU5FVC5Db250cm9sbGVyLnByb3RvdHlwZS5leHBhbmRBbmRDb2xsYXBzZVNlbGVjdGlvbiA9IGZ1bmN0aW9uKG1vbGVjdWxlc1NlbGVjdGVkKSB7XG4gICAgY29uc3QgbW9sZWN1bGVzID0gdGhpcy5tb2xlY3VsZXMudmFsdWVzKCk7XG4gICAgZm9yIChsZXQgbSA9IDA7IG0gPCBtb2xlY3VsZXMubGVuZ3RoOyBtKyspIHtcbiAgICAgICAgY29uc3QgbW9sZWN1bGUgPSBtb2xlY3VsZXNbbV07XG4gICAgICAgIGNvbnN0IG1vbGVjdWxlX2lkID0gbW9sZWN1bGUuanNvbi5pZGVudGlmaWVyLmlkO1xuICAgICAgICBpZiAobW9sZWN1bGVzU2VsZWN0ZWQuaW5jbHVkZXMobW9sZWN1bGVfaWQpKSB7XG4gICAgICAgICAgICBpZiAobW9sZWN1bGUuZm9ybSA9PT0gMCkge1xuICAgICAgICAgICAgICAgIG1vbGVjdWxlLnNldEZvcm0oMSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAobW9sZWN1bGUuZm9ybSA9PT0gMSkge1xuICAgICAgICAgICAgbW9sZWN1bGUuc2V0Rm9ybSgwKTtcbiAgICAgICAgfVxuICAgIH1cbn07XG4qL1xuXG5tb2R1bGUuZXhwb3J0cyA9IHhpTkVULkNvbnRyb2xsZXI7XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7Ozs7Ozs7OztBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQUE7QUFDQTtBQUFBO0FBQ0E7QUFBQTtBQUNBO0FBQUE7QUFDQTtBQUFBO0FBQ0E7QUFBQTtBQUNBO0FBQUE7QUFDQTtBQUFBO0FBQ0E7QUFBQTtBQUNBO0FBQUE7QUFDQTtBQUFBO0FBQ0E7QUFBQTtBQUNBO0FBQUE7QUFDQTtBQUFBO0FBQ0E7QUFBQTtBQUNBO0FBQUE7QUFDQTtBQUFBO0FBQ0E7QUFBQTtBQUNBO0FBQUE7QUFDQTtBQUFBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQUE7QUFDQTtBQUFBO0FBQ0E7QUFBQTtBQUVBO0FBQ0E7QUFBQTtBQUVBO0FBS0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFFQTtBQUNBO0FBTUE7QUFFQTtBQUVBO0FBQ0E7QUFBQTtBQUdBO0FBQ0E7QUFJQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7Ozs7Ozs7Ozs7O0FBVUE7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFOQTtBQVNBO0FBS0E7QUFDQTtBQVFBO0FBQ0E7QUFHQTtBQUNBO0FBRUE7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFBQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBR0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBU0E7QUFPQTtBQVNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFFQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFIQTtBQUFBO0FBQ0E7QUFEQTtBQUdBO0FBQUE7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBUEE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FBT0E7QUFDQTtBQUdBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQW5DQTtBQUFBO0FBQ0E7QUFEQTtBQW9DQTtBQUFBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQTVDQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUE2Q0E7QUFBQTtBQUFBO0FBQ0E7QUFEQTtBQUNBO0FBQUE7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBTEE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQU1BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUhBO0FBQUE7QUFDQTtBQURBO0FBSUE7QUFBQTtBQUNBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQVJBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFDQTtBQVFBO0FBRUE7QUFDQTtBQUNBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUFEQTtBQUNBO0FBQUE7QUFDQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFMQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUFLQTtBQUNBO0FBQ0E7QUFBQTtBQUFBO0FBQ0E7QUFEQTtBQUNBO0FBQUE7QUFDQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBTkE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FBTUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQUE7QUFDQTtBQURBO0FBQ0E7QUFBQTtBQUNBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFqQkE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQWtCQTtBQUFBO0FBQUE7QUFDQTtBQURBO0FBQ0E7QUFBQTtBQUNBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFyQkE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQXNCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRkE7QUFBQTtBQUNBO0FBREE7QUFFQTtBQUFBO0FBQ0E7QUFBQTtBQUFBO0FBQUE7QUFDQTtBQURBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFIQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBSUE7QUFDQTtBQVJBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFDQTtBQVFBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQXpCQTtBQUFBO0FBQ0E7QUFEQTtBQTBCQTtBQUFBO0FBQ0E7QUFBQTtBQUFBO0FBQUE7QUFDQTtBQURBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQW5CQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBb0JBO0FBQ0E7QUFoREE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FBZ0RBO0FBQ0E7QUFDQTtBQUdBO0FBQ0E7QUFDQTs7Ozs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUZBO0FBQUE7QUFDQTtBQURBO0FBRUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBVEE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FBREE7QUFBQTtBQUNBO0FBREE7QUFVQTtBQUFBO0FBQ0E7QUFDQTtBQVpBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFhQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBRUE7QUFFQTtBQUVBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFzSEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQTFCQTtBQUFBO0FBQ0E7QUFEQTtBQTBCQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBN0JBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFDQTtBQThCQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUFBO0FBQUE7QUFDQTtBQURBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUhBO0FBQUE7QUFDQTtBQURBO0FBR0E7QUFBQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFQQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUFPQTtBQUNBO0FBVkE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FBREE7QUFBQTtBQUNBO0FBREE7QUFXQTtBQUFBO0FBQ0E7QUFEQTtBQUFBO0FBQ0E7QUFEQTtBQUNBO0FBQUE7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBTEE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQU1BO0FBakJBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFrQkE7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFHQTtBQUdBO0FBQ0E7QUFGQTtBQU9BO0FBR0E7QUFHQTtBQUNBO0FBRkE7QUFPQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBWkE7QUFlQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQVpBO0FBY0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFFQTtBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQWxCQTtBQUFBO0FBQ0E7QUFEQTtBQWtCQTtBQUFBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUF6QkE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FBMEJBO0FBR0E7QUFDQTtBQUNBO0FBaENBO0FBQUE7QUFDQTtBQURBO0FBZ0NBO0FBQUE7QUFDQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FBREE7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBSEE7QUFBQTtBQUNBO0FBREE7QUFJQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQUE7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFSQTtBQUFBO0FBQ0E7QUFEQTtBQVFBO0FBQUE7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFuQkE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FBREE7QUFBQTtBQUNBO0FBREE7QUFxQkE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQWxDQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBb0NBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQWpEQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBaURBO0FBbERBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFtREE7QUFDQTtBQUNBO0FBdEZBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFDQTtBQXVGQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFSQTtBQUFBO0FBQ0E7QUFEQTtBQVFBO0FBQUE7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBZkE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQWdCQTtBQUNBO0FBQ0E7QUEzR0E7QUFBQTtBQUNBO0FBREE7QUE0R0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFDQTtBQURBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBYkE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQWNBO0FBQ0E7QUF0SUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FBdUlBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUhBO0FBQUE7QUFDQTtBQURBO0FBR0E7QUFBQTtBQUNBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUFEQTtBQUNBO0FBQUE7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBTEE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQU1BO0FBQ0E7QUFYQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUFXQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFqQkE7QUFBQTtBQUNBO0FBREE7QUFtQkE7QUFBQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUFBO0FBQ0E7QUFiQTtBQUFBO0FBQ0E7QUFEQTtBQWVBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBcENBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFxQ0E7QUFDQTtBQTFEQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBMkRBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBTEE7QUFBQTtBQUNBO0FBREE7QUFLQTtBQUFBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBVkE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FBWUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFuQkE7QUFxQkE7QUFBQTtBQUFBO0FBQUE7QUFRQTtBQUNBO0FBVEE7QUFXQTtBQUFBO0FBQUE7QUFNQTtBQUNBO0FBUEE7QUFVQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQVpBO0FBZUE7QUFDQTtBQUZBO0FBSUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUEwQkE7QUFDQTtBQTNCQTtBQTZCQTtBQUFBO0FBQUE7QUFNQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUZBO0FBQUE7QUFDQTtBQURBO0FBR0E7QUFBQTtBQUNBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUFEQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFWQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBV0E7QUFDQTtBQWhCQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBaUJBO0FBQ0E7QUFDQTtBQUNBO0FBREE7QUFBQTtBQUNBO0FBREE7QUFFQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFOQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUFPQTtBQUNBO0FBVEE7QUFBQTtBQUNBO0FBREE7QUFXQTtBQUFBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFBQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFBQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBRUE7QUFDQTtBQS9EQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBaUVBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7QUFDQTtBQUFBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFGQTtBQUFBO0FBQ0E7QUFEQTtBQUVBO0FBQUE7QUFDQTtBQUNBO0FBSkE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FBSUE7QUFDQTtBQU5BO0FBQUE7QUFDQTtBQURBO0FBTUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQVRBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFDQTtBQVNBO0FBRUE7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQWlCQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/controller/Controller.js\n");

/***/ }),

/***/ "./src/controller/Expand.js":
/*!**********************************!*\
  !*** ./src/controller/Expand.js ***!
  \**********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar d3 = __webpack_require__(/*! d3 */ \"./node_modules/d3/d3.js\");\n\nvar matrix = function matrix(json) {\n  // We'll need collections of our interactions and interactors for later..\n  var interactions = json.data.filter(function (interaction) {\n    return interaction.object == \"interaction\";\n  });\n  var interactors = json.data.filter(function (interactor) {\n    return interactor.object == \"interactor\";\n  });\n  var newParticipants = []; // Loop through our interactions\n\n  interactions.forEach(function (interaction) {\n    // Get a collection of participants where the stoichiometry is greater than one.\n    var participantsToExpand = interaction.participants.filter(function (participant) {\n      if (participant.stoichiometry > 1) {\n        return participant;\n      }\n    }); // Loop through our participants that need expanding\n\n    participantsToExpand.forEach(function (participant) {\n      // Do we have an interactor? TODO: Will his affect complexes?\n      var foundInteractor = findFirstObjWithAttr(interactors, \"id\", participant.interactorRef); // If we found an interactor then we need to clone it.\n\n      if (foundInteractor) {\n        var _loop = function _loop(i) {\n          /********** PARTICIPANTS **********/\n          var clonedParticipant = JSON.parse(JSON.stringify(participant)); //~ clonedParticipant.interactorRef = clonedInteractor.id;\n\n          clonedParticipant.id = clonedParticipant.id + \"_\" + i; // Store a reference from where we were cloned\n\n          clonedParticipant.cloneParentID = participant.id;\n          clonedParticipant.cloneIteration = i;\n          participant.cloned = true; // We need to relink to our binding site IDs:\n\n          if (clonedParticipant.features) {\n            clonedParticipant.features.forEach(function (feature) {\n              feature.clonedfrom = feature.id;\n              feature.id = feature.id + \"_\" + i; // Also, adjust our sequence data\n\n              feature.sequenceData.forEach(function (sequenceData) {\n                sequenceData.participantRef = clonedParticipant.id; //~ sequenceData.interactorRef = clonedInteractor.id;\n              });\n            });\n          }\n\n          interaction.participants.push(clonedParticipant);\n          newParticipants.push(clonedParticipant);\n        };\n\n        for (var i = 0; i < participant.stoichiometry - 1; i++) {\n          _loop(i);\n        }\n      }\n    }); // Get ALL of our features.\n\n    var featureMap = d3.map();\n    interaction.participants.forEach(function (participant) {\n      if (participant.features) {\n        participant.features.forEach(function (feature) {\n          feature.parentParticipant = participant.id;\n          featureMap.set(feature.id, feature);\n        });\n      }\n    });\n    var values = featureMap.values();\n    values.forEach(function (feature) {\n      if (feature.clonedfrom) {\n        // Find all binding sites that have a linked feature to me and add the clone id\n        values.forEach(function (nFeature) {\n          var linkedFeatures = nFeature.linkedFeatures;\n\n          if (linkedFeatures) {\n            if (linkedFeatures.indexOf(feature.clonedfrom) > -1) {\n              var clonedFeature = JSON.parse(JSON.stringify(nFeature));\n              clonedFeature.id = nFeature.id + \"_\" + feature.id;\n              clonedFeature.linkedFeatures = [];\n              clonedFeature.linkedFeatures.push(feature.id);\n              var parts = findFirstObjWithAttr(interaction.participants, \"id\", clonedFeature.parentParticipant);\n              parts.features.push(clonedFeature);\n            }\n          }\n        });\n      }\n    });\n  }); //clear stoichiometry info from participant?\n\n  interactions.forEach(function (interaction) {\n    interaction.participants.forEach(function (participant) {\n      participant.stoichiometry = null;\n    });\n  }); //actually the expansion code doesn't seem to take up that much time\n  //console.log(\"Expand time:\" + ( +new Date() - startTime));\n\n  return json;\n}; // Returns the first object in an array that has an attribute with a matching value.\n\n\nfunction findFirstObjWithAttr(collection, attribute, value) {\n  for (var i = 0; i < collection.length; i += 1) {\n    if (collection[i][attribute] === value) {\n      return collection[i];\n    }\n  }\n}\n\nmodule.exports = {\n  matrix: matrix\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvY29udHJvbGxlci9FeHBhbmQuanMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly94aU5FVC8uL3NyYy9jb250cm9sbGVyL0V4cGFuZC5qcz8xZjU3Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5jb25zdCBkMyA9IHJlcXVpcmUoJ2QzJyk7XG5cbmNvbnN0IG1hdHJpeCA9IGZ1bmN0aW9uIChqc29uKSB7XG5cbiAgICAvLyBXZSdsbCBuZWVkIGNvbGxlY3Rpb25zIG9mIG91ciBpbnRlcmFjdGlvbnMgYW5kIGludGVyYWN0b3JzIGZvciBsYXRlci4uXG4gICAgY29uc3QgaW50ZXJhY3Rpb25zID0ganNvbi5kYXRhLmZpbHRlcihmdW5jdGlvbiAoaW50ZXJhY3Rpb24pIHtcbiAgICAgICAgcmV0dXJuIGludGVyYWN0aW9uLm9iamVjdCA9PSBcImludGVyYWN0aW9uXCI7XG4gICAgfSk7XG5cbiAgICBjb25zdCBpbnRlcmFjdG9ycyA9IGpzb24uZGF0YS5maWx0ZXIoZnVuY3Rpb24gKGludGVyYWN0b3IpIHtcbiAgICAgICAgcmV0dXJuIGludGVyYWN0b3Iub2JqZWN0ID09IFwiaW50ZXJhY3RvclwiO1xuICAgIH0pO1xuXG4gICAgY29uc3QgbmV3UGFydGljaXBhbnRzID0gW107XG5cbiAgICAvLyBMb29wIHRocm91Z2ggb3VyIGludGVyYWN0aW9uc1xuICAgIGludGVyYWN0aW9ucy5mb3JFYWNoKGZ1bmN0aW9uIChpbnRlcmFjdGlvbikge1xuXG4gICAgICAgIC8vIEdldCBhIGNvbGxlY3Rpb24gb2YgcGFydGljaXBhbnRzIHdoZXJlIHRoZSBzdG9pY2hpb21ldHJ5IGlzIGdyZWF0ZXIgdGhhbiBvbmUuXG4gICAgICAgIGNvbnN0IHBhcnRpY2lwYW50c1RvRXhwYW5kID0gaW50ZXJhY3Rpb24ucGFydGljaXBhbnRzLmZpbHRlcihmdW5jdGlvbiAocGFydGljaXBhbnQpIHtcbiAgICAgICAgICAgIGlmIChwYXJ0aWNpcGFudC5zdG9pY2hpb21ldHJ5ID4gMSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBwYXJ0aWNpcGFudDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgLy8gTG9vcCB0aHJvdWdoIG91ciBwYXJ0aWNpcGFudHMgdGhhdCBuZWVkIGV4cGFuZGluZ1xuICAgICAgICBwYXJ0aWNpcGFudHNUb0V4cGFuZC5mb3JFYWNoKGZ1bmN0aW9uIChwYXJ0aWNpcGFudCkge1xuXG4gICAgICAgICAgICAvLyBEbyB3ZSBoYXZlIGFuIGludGVyYWN0b3I/IFRPRE86IFdpbGwgaGlzIGFmZmVjdCBjb21wbGV4ZXM/XG4gICAgICAgICAgICBjb25zdCBmb3VuZEludGVyYWN0b3IgPSBmaW5kRmlyc3RPYmpXaXRoQXR0cihpbnRlcmFjdG9ycywgXCJpZFwiLCBwYXJ0aWNpcGFudC5pbnRlcmFjdG9yUmVmKTtcblxuICAgICAgICAgICAgLy8gSWYgd2UgZm91bmQgYW4gaW50ZXJhY3RvciB0aGVuIHdlIG5lZWQgdG8gY2xvbmUgaXQuXG4gICAgICAgICAgICBpZiAoZm91bmRJbnRlcmFjdG9yKSB7XG5cbiAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHBhcnRpY2lwYW50LnN0b2ljaGlvbWV0cnkgLSAxOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgLyoqKioqKioqKiogUEFSVElDSVBBTlRTICoqKioqKioqKiovXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGNsb25lZFBhcnRpY2lwYW50ID0gSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeShwYXJ0aWNpcGFudCkpO1xuXG4gICAgICAgICAgICAgICAgICAgIC8vfiBjbG9uZWRQYXJ0aWNpcGFudC5pbnRlcmFjdG9yUmVmID0gY2xvbmVkSW50ZXJhY3Rvci5pZDtcbiAgICAgICAgICAgICAgICAgICAgY2xvbmVkUGFydGljaXBhbnQuaWQgPSBjbG9uZWRQYXJ0aWNpcGFudC5pZCArIFwiX1wiICsgaTtcblxuICAgICAgICAgICAgICAgICAgICAvLyBTdG9yZSBhIHJlZmVyZW5jZSBmcm9tIHdoZXJlIHdlIHdlcmUgY2xvbmVkXG4gICAgICAgICAgICAgICAgICAgIGNsb25lZFBhcnRpY2lwYW50LmNsb25lUGFyZW50SUQgPSBwYXJ0aWNpcGFudC5pZDtcbiAgICAgICAgICAgICAgICAgICAgY2xvbmVkUGFydGljaXBhbnQuY2xvbmVJdGVyYXRpb24gPSBpO1xuICAgICAgICAgICAgICAgICAgICBwYXJ0aWNpcGFudC5jbG9uZWQgPSB0cnVlXG5cbiAgICAgICAgICAgICAgICAgICAgLy8gV2UgbmVlZCB0byByZWxpbmsgdG8gb3VyIGJpbmRpbmcgc2l0ZSBJRHM6XG4gICAgICAgICAgICAgICAgICAgIGlmIChjbG9uZWRQYXJ0aWNpcGFudC5mZWF0dXJlcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgY2xvbmVkUGFydGljaXBhbnQuZmVhdHVyZXMuZm9yRWFjaChmdW5jdGlvbiAoZmVhdHVyZSkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZmVhdHVyZS5jbG9uZWRmcm9tID0gZmVhdHVyZS5pZDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmZWF0dXJlLmlkID0gZmVhdHVyZS5pZCArIFwiX1wiICsgaTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEFsc28sIGFkanVzdCBvdXIgc2VxdWVuY2UgZGF0YVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZlYXR1cmUuc2VxdWVuY2VEYXRhLmZvckVhY2goZnVuY3Rpb24gKHNlcXVlbmNlRGF0YSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXF1ZW5jZURhdGEucGFydGljaXBhbnRSZWYgPSBjbG9uZWRQYXJ0aWNpcGFudC5pZDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9+IHNlcXVlbmNlRGF0YS5pbnRlcmFjdG9yUmVmID0gY2xvbmVkSW50ZXJhY3Rvci5pZDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgaW50ZXJhY3Rpb24ucGFydGljaXBhbnRzLnB1c2goY2xvbmVkUGFydGljaXBhbnQpO1xuICAgICAgICAgICAgICAgICAgICBuZXdQYXJ0aWNpcGFudHMucHVzaChjbG9uZWRQYXJ0aWNpcGFudCk7XG5cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIC8vIEdldCBBTEwgb2Ygb3VyIGZlYXR1cmVzLlxuICAgICAgICBjb25zdCBmZWF0dXJlTWFwID0gZDMubWFwKCk7XG4gICAgICAgIGludGVyYWN0aW9uLnBhcnRpY2lwYW50cy5mb3JFYWNoKGZ1bmN0aW9uIChwYXJ0aWNpcGFudCkge1xuICAgICAgICAgICAgaWYgKHBhcnRpY2lwYW50LmZlYXR1cmVzKSB7XG4gICAgICAgICAgICAgICAgcGFydGljaXBhbnQuZmVhdHVyZXMuZm9yRWFjaChmdW5jdGlvbiAoZmVhdHVyZSkge1xuICAgICAgICAgICAgICAgICAgICBmZWF0dXJlLnBhcmVudFBhcnRpY2lwYW50ID0gcGFydGljaXBhbnQuaWQ7XG4gICAgICAgICAgICAgICAgICAgIGZlYXR1cmVNYXAuc2V0KGZlYXR1cmUuaWQsIGZlYXR1cmUpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcblxuXG4gICAgICAgIGNvbnN0IHZhbHVlcyA9IGZlYXR1cmVNYXAudmFsdWVzKCk7XG5cbiAgICAgICAgdmFsdWVzLmZvckVhY2goZnVuY3Rpb24gKGZlYXR1cmUpIHtcbiAgICAgICAgICAgIGlmIChmZWF0dXJlLmNsb25lZGZyb20pIHtcbiAgICAgICAgICAgICAgICAvLyBGaW5kIGFsbCBiaW5kaW5nIHNpdGVzIHRoYXQgaGF2ZSBhIGxpbmtlZCBmZWF0dXJlIHRvIG1lIGFuZCBhZGQgdGhlIGNsb25lIGlkXG4gICAgICAgICAgICAgICAgdmFsdWVzLmZvckVhY2goZnVuY3Rpb24gKG5GZWF0dXJlKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGxpbmtlZEZlYXR1cmVzID0gbkZlYXR1cmUubGlua2VkRmVhdHVyZXM7XG4gICAgICAgICAgICAgICAgICAgIGlmIChsaW5rZWRGZWF0dXJlcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGxpbmtlZEZlYXR1cmVzLmluZGV4T2YoZmVhdHVyZS5jbG9uZWRmcm9tKSA+IC0xKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgY2xvbmVkRmVhdHVyZSA9IEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkobkZlYXR1cmUpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbG9uZWRGZWF0dXJlLmlkID0gbkZlYXR1cmUuaWQgKyBcIl9cIiArIGZlYXR1cmUuaWQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xvbmVkRmVhdHVyZS5saW5rZWRGZWF0dXJlcyA9IFtdXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xvbmVkRmVhdHVyZS5saW5rZWRGZWF0dXJlcy5wdXNoKGZlYXR1cmUuaWQpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgcGFydHMgPSBmaW5kRmlyc3RPYmpXaXRoQXR0cihpbnRlcmFjdGlvbi5wYXJ0aWNpcGFudHMsIFwiaWRcIiwgY2xvbmVkRmVhdHVyZS5wYXJlbnRQYXJ0aWNpcGFudCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFydHMuZmVhdHVyZXMucHVzaChjbG9uZWRGZWF0dXJlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9KTtcblxuXG4gICAgLy9jbGVhciBzdG9pY2hpb21ldHJ5IGluZm8gZnJvbSBwYXJ0aWNpcGFudD9cbiAgICBpbnRlcmFjdGlvbnMuZm9yRWFjaChmdW5jdGlvbiAoaW50ZXJhY3Rpb24pIHtcbiAgICAgICAgaW50ZXJhY3Rpb24ucGFydGljaXBhbnRzLmZvckVhY2goZnVuY3Rpb24gKHBhcnRpY2lwYW50KSB7XG4gICAgICAgICAgICBwYXJ0aWNpcGFudC5zdG9pY2hpb21ldHJ5ID0gbnVsbDtcbiAgICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICAvL2FjdHVhbGx5IHRoZSBleHBhbnNpb24gY29kZSBkb2Vzbid0IHNlZW0gdG8gdGFrZSB1cCB0aGF0IG11Y2ggdGltZVxuICAgIC8vY29uc29sZS5sb2coXCJFeHBhbmQgdGltZTpcIiArICggK25ldyBEYXRlKCkgLSBzdGFydFRpbWUpKTtcbiAgICByZXR1cm4ganNvblxufTtcblxuLy8gUmV0dXJucyB0aGUgZmlyc3Qgb2JqZWN0IGluIGFuIGFycmF5IHRoYXQgaGFzIGFuIGF0dHJpYnV0ZSB3aXRoIGEgbWF0Y2hpbmcgdmFsdWUuXG5mdW5jdGlvbiBmaW5kRmlyc3RPYmpXaXRoQXR0cihjb2xsZWN0aW9uLCBhdHRyaWJ1dGUsIHZhbHVlKSB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjb2xsZWN0aW9uLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgIGlmIChjb2xsZWN0aW9uW2ldW2F0dHJpYnV0ZV0gPT09IHZhbHVlKSB7XG4gICAgICAgICAgICByZXR1cm4gY29sbGVjdGlvbltpXTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gICAgbWF0cml4OiBtYXRyaXhcbn1cbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUVBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQUE7QUFHQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQTlCQTtBQUNBO0FBQ0E7QUFBQTtBQThCQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUdBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUdBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBREEiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/controller/Expand.js\n");

/***/ }),

/***/ "./src/controller/xiNET_Storage.js":
/*!*****************************************!*\
  !*** ./src/controller/xiNET_Storage.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("//    xiNET Cross-link Viewer\n//    Copyright 2014 Rappsilber Laboratory\n//\n//    This product includes software developed at\n//    the Rappsilber Laboratory (http://www.rappsilberlab.org/).\n//\n//    author: Colin Combe\n//\n//    xiNET_Storage.js\n//// TODO: get rid of\n\n\nvar d3 = __webpack_require__(/*! d3 */ \"./node_modules/d3/d3.js\");\n\nfunction xiNET_Storage() {}\n\nvar Annotation = __webpack_require__(/*! ../model/interactor/Annotation */ \"./src/model/interactor/Annotation.js\");\n\nvar SequenceFeature = __webpack_require__(/*! ./../model/SequenceFeature */ \"./src/model/SequenceFeature.js\");\n\nxiNET_Storage.ns = \"xiNET.\";\n\nxiNET_Storage.accessionFromId = function (id) {\n  var idRegex; // i cant figure out way to do this purely with regex... who cares\n\n  if (id.indexOf(\"(\") !== -1) {\n    //id has participant number in it\n    idRegex = /uniprotkb_(.*)(\\()/;\n  } else {\n    idRegex = /uniprotkb_(.*)/;\n  }\n\n  var match = idRegex.exec(id);\n\n  if (match) {\n    return match[1];\n  } else if (id.indexOf('|') !== -1) {\n    //following reads swiss-prot style identifiers\n    return id.split('|')[1];\n  } else {\n    return id;\n  }\n};\n\nxiNET_Storage.getUniProtTxt = function (id, callback) {\n  var accession = xiNET_Storage.accessionFromId(id);\n\n  function uniprotWebService() {\n    var url = \"https://www.ebi.ac.uk/proteins/api/proteins/\" + accession;\n    d3.json(url, function (txt) {\n      //~ // console.log(accession + \" retrieved from UniProt.\");\n      //~ if(typeof(Storage) !== \"undefined\") {\n      //~ localStorage.setItem(xiNET_Storage.ns  + \"UniProtKB.\"+ accession, txt);\n      //~ //console.log(accession + \" UniProt added to local storage.\");\n      //~ }\n      callback(id, txt);\n    });\n  } //~ if(typeof(Storage) !== \"undefined\") {\n  //~ // Code for localStorage/sessionStorage.\n  //~ // console.log(\"Local storage found.\");\n  //~ // Retrieve\n  //~ var stored = localStorage.getItem(xiNET_Storage.ns + \"UniProtKB.\" + accession);\n  //~ if (stored){\n  // console.log(accession + \" UniProt from local storage.\");\n  //~ callback(id, stored);\n  //~ }\n  //~ else {\n  //~ // console.log(accession + \" UniProt not in local storage.\");\n  //~ uniprotWebService();\n  //~ }\n  //~ }\n  //~ else {\n  // console.log(\"No local storage found.\");\n\n\n  uniprotWebService(); //~ }\n};\n\nxiNET_Storage.getSequence = function (id, callback) {\n  //~ var accession = xiNET_Storage.accessionFromId(id);\n  xiNET_Storage.getUniProtTxt(id, function (noNeed, json) {\n    //~ var sequence = \"\";\n    //~ var lines = txt.split('\\n');\n    //~ var lineCount = lines.length;\n    //~ for (var l = 0; l < lineCount; l++){\n    //~ var line = lines[l];\n    //~ if (line.indexOf(\"SQ\") === 0){\n    //~ //sequence = line;\n    //~ l++;\n    //~ for (l; l < lineCount; l++){\n    //~ line = lines[l];\n    //~ sequence += line;\n    //~ }\n    //~ }\n    //~ }\n    callback(id, json.sequence.replace(/[^A-Z]/g, ''));\n  });\n};\n\nxiNET_Storage.getUniProtFeatures = function (id, callback) {\n  //var accession = xiNET_Storage.accessionFromId(id);\n  xiNET_Storage.getUniProtTxt(id, function (id, json) {\n    //~ var features = new Array();\n    //~ var lines = txt.split('\\n');\n    //~ var lineCount = lines.length;\n    //~ for (var l = 0; l < lineCount; l++){\n    //~ var line = lines[l];\n    //~ if (line.indexOf(\"FT\") === 0){\n    //~ var fields = line.split(/\\s{2,}/g);\n    //~ if (fields.length > 4 && fields[1] === 'DOMAIN') {\n    //~ //console.log(fields[1]);fields[4].substring(0, fields[4].indexOf(\".\"))\n    //~ var name = fields[4].substring(0, fields[4].indexOf(\".\"));\n    //~ features.push(new Annotation (name, fields[2], fields[3], null, fields[4]));\n    //~ }\n    //~ }\n    //~ }\n    callback(id, json.features.filter(function (ft) {\n      return ft.type === \"DOMAIN\";\n    }));\n  });\n};\n\nxiNET_Storage.getSuperFamFeatures = function (id, callback) {\n  var accession = xiNET_Storage.accessionFromId(id);\n\n  function superFamDAS() {\n    var url = \"https://supfam.mrc-lmb.cam.ac.uk/SUPERFAMILY/cgi-bin/das/up/features?segment=\" + accession;\n    d3.xml(url, function (xml) {\n      xml = new XMLSerializer().serializeToString(xml); //~ console.log(accession + \" SuperFamDAS  retrieved.\");\n      //~ if(typeof(Storage) !== \"undefined\") {\n      //~ localStorage.setItem(xiNET_Storage.ns  + \"SuperFamDAS.\" + accession, xml);\n      //~ // console.log(accession + \" SuperFamDAS added to local storage.\");\n      //~ }\n\n      parseSuperFamDAS(xml);\n    });\n  }\n\n  function parseSuperFamDAS(dasXml) {\n    //~ console.log(dasXml);\n    var xmlDoc;\n\n    if (window.DOMParser) {\n      var parser = new DOMParser();\n      xmlDoc = parser.parseFromString(dasXml, \"text/xml\");\n    } else // Internet Explorer\n      {\n        xmlDoc = new ActiveXObject(\"Microsoft.XMLDOM\");\n        xmlDoc.async = false;\n        xmlDoc.loadXML(dasXml);\n      }\n\n    var features = [];\n    var xmlFeatures = xmlDoc.getElementsByTagName('FEATURE');\n    var featureCount = xmlFeatures.length;\n\n    for (var f = 0; f < featureCount; f++) {\n      var xmlFeature = xmlFeatures[f];\n      var type = xmlFeature.getElementsByTagName('TYPE')[0]; //might need to watch for text nodes getting mixed in here\n\n      var category = type.getAttribute('category');\n\n      if (category === 'miscellaneous') {\n        var name = type.getAttribute('id');\n        var start = xmlFeature.getElementsByTagName('START')[0].textContent;\n        var end = xmlFeature.getElementsByTagName('END')[0].textContent;\n        features.push(new Annotation(name, new SequenceFeature(null, start + \"-\" + end)));\n      }\n    } //~ console.log(JSON.stringify(features));\n\n\n    callback(id, features);\n  } //~ if(typeof(Storage) !== \"undefined\") {\n  //~ // console.log(\"Local storage found.\");\n  //~ // Retrieve\n  //~ var stored = localStorage.getItem(xiNET_Storage.ns + \"SuperFamDAS.\"  + accession);\n  //~ if (stored){\n  //~ // console.log(accession + \" SuperFamDAS from local storage.\");\n  //~ parseSuperFamDAS(stored);\n  //~ }\n  //~ else {\n  //~ // console.log(accession + \" SuperFamDAS not in local storage.\");\n  //~ superFamDAS();\n  //~ }\n  //~ }\n  //~ else {\n  // console.log(\"No local storage found.\");\n\n\n  superFamDAS(); //~ }\n};\n\nmodule.exports = xiNET_Storage;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/controller/xiNET_Storage.js\n");

/***/ }),

/***/ "./src/model/SequenceFeature.js":
/*!**************************************!*\
  !*** ./src/model/SequenceFeature.js ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("//    xiNET interaction viewer\n//    Copyright 2013 Rappsilber Laboratory\n//\n//    This product includes software developed at\n//    the Rappsilber Laboratory (http://www.rappsilberlab.org/).\n\n/* constructor parameter sequenceDatumString is string with following format:\n *\n *              \"?-?\" = unknown\n *              \"n-n\" = n-terminal range (to be represented as link to box beside n terminal)\n *              \"c-c\" = c-terminal range (to be represented as link to box beside c terminal)\n *              \"123-123\" = specific residue\n *              \"123-456\" = feature sequence\n *              \"86..123-456..464\" = feature sequence with uncertain boundaries\n *              \"86..123-456\" = feature sequence with one uncertain boundary\n *              \"<8-123\" = feature sequence w uncertain start between 1 and 8 to 123\n *              \"123->256\" = feature sequence w uncertain end between 256 and interactor.sequence.length\n */\n\nfunction SequenceFeature(node, sequenceDatumString) {\n  this.node = node; //todo: rename to participant\n\n  this.sequenceDatumString = sequenceDatumString.trim();\n\n  if (this.sequenceDatumString === \"?-?\") {\n    this.begin = 0;\n    this.end = 0;\n    this.uncertainEnd = node.size;\n  } else if (this.sequenceDatumString === \"n-n\") {\n    this.uncertainBegin = \"n-n\";\n    this.begin = 0;\n    this.end = 0;\n    node.nTerminusFeature = true;\n  } else if (this.sequenceDatumString === \"c-c\") {\n    this.begin = node.size + 1;\n    this.end = node.size + 1;\n    this.uncertainEnd = \"c-c\"; //node.size + 21;\n  } else {\n    var dashPosition = sequenceDatumString.indexOf('-');\n    var firstPart = sequenceDatumString.substring(0, dashPosition);\n    var secondPart = sequenceDatumString.substring(dashPosition + 1);\n    var firstDotPosition;\n\n    if (firstPart.indexOf('.') === -1) {\n      this.begin = firstPart;\n    } else {\n      firstDotPosition = firstPart.indexOf('.');\n      this.uncertainBegin = firstPart.substring(0, firstDotPosition) * 1;\n      this.begin = firstPart.substring(firstDotPosition + 2) * 1;\n    }\n\n    if (secondPart.indexOf('.') === -1) {\n      this.end = secondPart;\n    } else {\n      firstDotPosition = secondPart.indexOf('.');\n      this.end = secondPart.substring(0, firstDotPosition) * 1;\n      this.uncertainEnd = secondPart.substring(firstDotPosition + 2) * 1;\n    }\n\n    if (this.begin === 'n') {\n      this.uncertainBegin = 0;\n      this.begin = this.end;\n      this.uncertainEnd = this.end;\n    }\n\n    if (this.end === 'c') {\n      this.uncertainEnd = node.size;\n      this.end = this.begin;\n      this.uncertainBegin = this.begin;\n    }\n\n    if (firstPart.indexOf('<') > -1) {\n      this.uncertainBegin = 0;\n      this.begin = firstPart.substring(1, firstPart.length);\n    }\n\n    if (secondPart.indexOf('>') > -1) {\n      this.end = secondPart.substring(1, firstPart.length);\n      this.uncertainEnd = node.size;\n    }\n\n    if (firstPart.indexOf('>') > -1 && secondPart.indexOf('<') > -1) {\n      this.uncertainBegin = firstPart.substring(1, firstPart.length);\n      this.begin = secondPart.substring(1, firstPart.length);\n      this.end = this.begin;\n    }\n  }\n}\n\nSequenceFeature.prototype.toString = function () {\n  return this.sequenceDatumString;\n}; //On 06/06/13 09:22, marine@ebi.ac.uk wrote:\n//> Concerning the ranges, I think there was a confusion :\n//>\n//> \"n\" = residue 1\n//> \"c\" = residue at interactor.sequence.length\n//>\n//> In fact n is always used to describe a position that is unknown but we\n//> know it is in the N-terminal portion (somewhere at the beginning of the\n//> sequence) and c is always used to describe a position that is unknown but\n//> we know it is in the C-terminal portion of the sequence (somewhere at the\n//> end of the sequence). If we have an exact N-terminal position (residue 1),\n//> it will be represented as a certain position of 1. Same for C-terminal\n//> position (residue at interactor.sequence.length). We always use '-' to\n//> separate the start position from the end position so c-c means that the\n//> start and end positions of a feature are unknown but are bot in the\n//> C-terminal portion of the sequence.\n//>\n//> You will never have \"123\" = specific residue but rather \"123-123\" =\n//> specific residue which means the start and the end of the feature are\n//> known and are the same so it represents a single residue. If you want,\n//> JAMI could merge the start and end and give you 123 instead of 123-123 if\n//> it is what you want.\n//> \"123-456\" does not mean residue range, it means that the feature sequence\n//> is a sequence of 133 amino acids where the start position and the end\n//> positions are certain. For me, residue range is what you call 'residue\n//> range with fuzzy boundaries'. If the start is 22..25, it means that the\n//> starting amino acid position for the feature sequence is fuzzy and is\n//> between the 22nd and the 25th amino acid but we don't know which one it\n//> is. 22..22 will mean that the starting amino acid position for the feature\n//> sequence is fuzzy and is around amino acid 22 in the interactor sequence.\n//>\n//> \"<8\" = range between 1 and 8 : I have the same comment as for \"123\"\n//> instead of \"123-123\". JAMI could give you \"<8\" if both start and end\n//> positions of the feature are <8 but it could happen that you have a\n//> feature such as \"<8->22\" or \"<8-22\", etc.\n\n\nmodule.exports = SequenceFeature;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/model/SequenceFeature.js\n");

/***/ }),

/***/ "./src/model/interactor/Annotation.js":
/*!********************************************!*\
  !*** ./src/model/interactor/Annotation.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("//    xiNET Interaction Viewer\n//    Copyright 2013 Rappsilber Laboratory\n//\n//    This product includes software developed at\n//    the Rappsilber Laboratory (http://www.rappsilberlab.org/).\n//\n//    author: Colin Combe\n //constructor for annotations\n\nfunction Annotation(annotationName, seqDatum) {\n  this.description = annotationName.trim();\n  this.seqDatum = seqDatum;\n}\n\nmodule.exports = Annotation;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvbW9kZWwvaW50ZXJhY3Rvci9Bbm5vdGF0aW9uLmpzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8veGlORVQvLi9zcmMvbW9kZWwvaW50ZXJhY3Rvci9Bbm5vdGF0aW9uLmpzP2YwNjgiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gICAgeGlORVQgSW50ZXJhY3Rpb24gVmlld2VyXG4vLyAgICBDb3B5cmlnaHQgMjAxMyBSYXBwc2lsYmVyIExhYm9yYXRvcnlcbi8vXG4vLyAgICBUaGlzIHByb2R1Y3QgaW5jbHVkZXMgc29mdHdhcmUgZGV2ZWxvcGVkIGF0XG4vLyAgICB0aGUgUmFwcHNpbGJlciBMYWJvcmF0b3J5IChodHRwOi8vd3d3LnJhcHBzaWxiZXJsYWIub3JnLykuXG4vL1xuLy8gICAgYXV0aG9yOiBDb2xpbiBDb21iZVxuXG5cInVzZSBzdHJpY3RcIjtcblxuLy9jb25zdHJ1Y3RvciBmb3IgYW5ub3RhdGlvbnNcbmZ1bmN0aW9uIEFubm90YXRpb24oYW5ub3RhdGlvbk5hbWUsIHNlcURhdHVtKSB7XG4gICAgdGhpcy5kZXNjcmlwdGlvbiA9IGFubm90YXRpb25OYW1lLnRyaW0oKTtcbiAgICB0aGlzLnNlcURhdHVtID0gc2VxRGF0dW07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gQW5ub3RhdGlvbjtcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/model/interactor/Annotation.js\n");

/***/ }),

/***/ "./src/model/interactor/BioactiveEntity.js":
/*!*************************************************!*\
  !*** ./src/model/interactor/BioactiveEntity.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("//    \txiNET Interaction Viewer\n//    \tCopyright 2013 Rappsilber Laboratory\n//\n//    \tThis product includes software developed at\n//    \tthe Rappsilber Laboratory (http://www.rappsilberlab.org/).\n//\n//\t\tBioactiveEntity.js\n//\n//\t\tauthors: Colin Combe\n\n\nvar d3 = __webpack_require__(/*! d3 */ \"./node_modules/d3/d3.js\");\n\nvar Interactor = __webpack_require__(/*! ./Interactor */ \"./src/model/interactor/Interactor.js\");\n\nvar Config = __webpack_require__(/*! ../../controller/Config */ \"./src/controller/Config.js\");\n\nBioactiveEntity.prototype = new Interactor();\n\nfunction BioactiveEntity(id, xlvController, json, name) {\n  this.id = id; // id may not be accession (multiple Segments with same accession)\n\n  this.controller = xlvController;\n  this.json = json; //links\n\n  this.naryLinks = d3.map();\n  this.binaryLinks = d3.map();\n  this.selfLink = null;\n  this.sequenceLinks = d3.map();\n  this.name = name; // layout info\n\n  this.cx = 40;\n  this.cy = 40;\n  /*\n   * Upper group\n   * svg group for elements that appear above links\n   */\n\n  this.upperGroup = document.createElementNS(Config.svgns, \"g\"); //~ this.upperGroup.setAttribute(\"class\", \"protein upperGroup\");\n  //for polygon\n\n  var points = \"0, -10  8.66,5 -8.66,5\"; //make highlight\n\n  this.highlight = document.createElementNS(Config.svgns, \"polygon\");\n  this.highlight.setAttribute(\"points\", points);\n  this.highlight.setAttribute(\"stroke\", Config.highlightColour);\n  this.highlight.setAttribute(\"stroke-width\", \"5\");\n  this.highlight.setAttribute(\"fill\", \"none\"); //attributes that may change\n\n  d3.select(this.highlight).attr(\"stroke-opacity\", 0);\n  this.upperGroup.appendChild(this.highlight); //create label - we will move this svg element around when protein form changes\n\n  this.labelSVG = document.createElementNS(Config.svgns, \"text\");\n  this.labelSVG.setAttribute(\"text-anchor\", \"end\");\n  this.labelSVG.setAttribute(\"fill\", \"black\");\n  this.labelSVG.setAttribute(\"x\", \"0\");\n  this.labelSVG.setAttribute(\"y\", \"10\");\n  this.labelSVG.setAttribute(\"class\", \"xlv_text proteinLabel\");\n  this.labelSVG.setAttribute('font-family', 'Arial');\n  this.labelSVG.setAttribute('font-size', '16');\n  this.labelText = this.name;\n  this.labelTextNode = document.createTextNode(this.labelText);\n  this.labelSVG.appendChild(this.labelTextNode);\n  d3.select(this.labelSVG).attr(\"transform\", \"translate( -\" + 15 + \" \" + Interactor.labelY + \")\");\n  this.upperGroup.appendChild(this.labelSVG); //make blob\n\n  this.outline = document.createElementNS(Config.svgns, \"polygon\");\n  this.outline.setAttribute(\"points\", points);\n  this.outline.setAttribute(\"stroke\", \"black\");\n  this.outline.setAttribute(\"stroke-width\", \"1\");\n  d3.select(this.outline).attr(\"stroke-opacity\", 1).attr(\"fill-opacity\", 1).attr(\"fill\", \"#ffffff\"); //append outline\n\n  this.upperGroup.appendChild(this.outline); // events\n\n  var self = this; //    this.upperGroup.setAttribute('pointer-events','all');\n\n  this.upperGroup.onmousedown = function (evt) {\n    self.mouseDown(evt);\n  };\n\n  this.upperGroup.onmouseover = function (evt) {\n    self.mouseOver(evt);\n  };\n\n  this.upperGroup.onmouseout = function (evt) {\n    self.mouseOut(evt);\n  };\n\n  this.upperGroup.ontouchstart = function (evt) {\n    self.touchStart(evt);\n  };\n}\n/*\nBioactiveEntity.prototype.showData = function() {\n    const url = \"https://www.ebi.ac.uk/chebi/searchId.do;?chebiId=\" + this.json.identifier.id;\n    window.open(url, '_blank');\n}\n*/\n\n\nmodule.exports = BioactiveEntity;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvbW9kZWwvaW50ZXJhY3Rvci9CaW9hY3RpdmVFbnRpdHkuanMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly94aU5FVC8uL3NyYy9tb2RlbC9pbnRlcmFjdG9yL0Jpb2FjdGl2ZUVudGl0eS5qcz82ZDY0Il0sInNvdXJjZXNDb250ZW50IjpbIi8vICAgIFx0eGlORVQgSW50ZXJhY3Rpb24gVmlld2VyXG4vLyAgICBcdENvcHlyaWdodCAyMDEzIFJhcHBzaWxiZXIgTGFib3JhdG9yeVxuLy9cbi8vICAgIFx0VGhpcyBwcm9kdWN0IGluY2x1ZGVzIHNvZnR3YXJlIGRldmVsb3BlZCBhdFxuLy8gICAgXHR0aGUgUmFwcHNpbGJlciBMYWJvcmF0b3J5IChodHRwOi8vd3d3LnJhcHBzaWxiZXJsYWIub3JnLykuXG4vL1xuLy9cdFx0QmlvYWN0aXZlRW50aXR5LmpzXG4vL1xuLy9cdFx0YXV0aG9yczogQ29saW4gQ29tYmVcblxuXCJ1c2Ugc3RyaWN0XCI7XG5jb25zdCBkMyA9IHJlcXVpcmUoJ2QzJyk7XG5jb25zdCBJbnRlcmFjdG9yID0gcmVxdWlyZSgnLi9JbnRlcmFjdG9yJyk7XG5jb25zdCBDb25maWcgPSByZXF1aXJlKCcuLi8uLi9jb250cm9sbGVyL0NvbmZpZycpO1xuXG5CaW9hY3RpdmVFbnRpdHkucHJvdG90eXBlID0gbmV3IEludGVyYWN0b3IoKTtcblxuZnVuY3Rpb24gQmlvYWN0aXZlRW50aXR5KGlkLCB4bHZDb250cm9sbGVyLCBqc29uLCBuYW1lKSB7XG4gICAgdGhpcy5pZCA9IGlkOyAvLyBpZCBtYXkgbm90IGJlIGFjY2Vzc2lvbiAobXVsdGlwbGUgU2VnbWVudHMgd2l0aCBzYW1lIGFjY2Vzc2lvbilcbiAgICB0aGlzLmNvbnRyb2xsZXIgPSB4bHZDb250cm9sbGVyO1xuICAgIHRoaXMuanNvbiA9IGpzb247XG4gICAgLy9saW5rc1xuICAgIHRoaXMubmFyeUxpbmtzID0gZDMubWFwKCk7XG4gICAgdGhpcy5iaW5hcnlMaW5rcyA9IGQzLm1hcCgpO1xuICAgIHRoaXMuc2VsZkxpbmsgPSBudWxsO1xuICAgIHRoaXMuc2VxdWVuY2VMaW5rcyA9IGQzLm1hcCgpO1xuICAgIHRoaXMubmFtZSA9IG5hbWU7XG4gICAgLy8gbGF5b3V0IGluZm9cbiAgICB0aGlzLmN4ID0gNDA7XG4gICAgdGhpcy5jeSA9IDQwO1xuXG4gICAgLypcbiAgICAgKiBVcHBlciBncm91cFxuICAgICAqIHN2ZyBncm91cCBmb3IgZWxlbWVudHMgdGhhdCBhcHBlYXIgYWJvdmUgbGlua3NcbiAgICAgKi9cblxuICAgIHRoaXMudXBwZXJHcm91cCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUyhDb25maWcuc3ZnbnMsIFwiZ1wiKTtcbiAgICAvL34gdGhpcy51cHBlckdyb3VwLnNldEF0dHJpYnV0ZShcImNsYXNzXCIsIFwicHJvdGVpbiB1cHBlckdyb3VwXCIpO1xuXG4gICAgLy9mb3IgcG9seWdvblxuICAgIGNvbnN0IHBvaW50cyA9IFwiMCwgLTEwICA4LjY2LDUgLTguNjYsNVwiO1xuICAgIC8vbWFrZSBoaWdobGlnaHRcbiAgICB0aGlzLmhpZ2hsaWdodCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUyhDb25maWcuc3ZnbnMsIFwicG9seWdvblwiKTtcbiAgICB0aGlzLmhpZ2hsaWdodC5zZXRBdHRyaWJ1dGUoXCJwb2ludHNcIiwgcG9pbnRzKTtcbiAgICB0aGlzLmhpZ2hsaWdodC5zZXRBdHRyaWJ1dGUoXCJzdHJva2VcIiwgQ29uZmlnLmhpZ2hsaWdodENvbG91cik7XG4gICAgdGhpcy5oaWdobGlnaHQuc2V0QXR0cmlidXRlKFwic3Ryb2tlLXdpZHRoXCIsIFwiNVwiKTtcbiAgICB0aGlzLmhpZ2hsaWdodC5zZXRBdHRyaWJ1dGUoXCJmaWxsXCIsIFwibm9uZVwiKTtcbiAgICAvL2F0dHJpYnV0ZXMgdGhhdCBtYXkgY2hhbmdlXG4gICAgZDMuc2VsZWN0KHRoaXMuaGlnaGxpZ2h0KS5hdHRyKFwic3Ryb2tlLW9wYWNpdHlcIiwgMCk7XG4gICAgdGhpcy51cHBlckdyb3VwLmFwcGVuZENoaWxkKHRoaXMuaGlnaGxpZ2h0KTtcblxuICAgIC8vY3JlYXRlIGxhYmVsIC0gd2Ugd2lsbCBtb3ZlIHRoaXMgc3ZnIGVsZW1lbnQgYXJvdW5kIHdoZW4gcHJvdGVpbiBmb3JtIGNoYW5nZXNcbiAgICB0aGlzLmxhYmVsU1ZHID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKENvbmZpZy5zdmducywgXCJ0ZXh0XCIpO1xuICAgIHRoaXMubGFiZWxTVkcuc2V0QXR0cmlidXRlKFwidGV4dC1hbmNob3JcIiwgXCJlbmRcIik7XG4gICAgdGhpcy5sYWJlbFNWRy5zZXRBdHRyaWJ1dGUoXCJmaWxsXCIsIFwiYmxhY2tcIilcbiAgICB0aGlzLmxhYmVsU1ZHLnNldEF0dHJpYnV0ZShcInhcIiwgXCIwXCIpO1xuICAgIHRoaXMubGFiZWxTVkcuc2V0QXR0cmlidXRlKFwieVwiLCBcIjEwXCIpO1xuICAgIHRoaXMubGFiZWxTVkcuc2V0QXR0cmlidXRlKFwiY2xhc3NcIiwgXCJ4bHZfdGV4dCBwcm90ZWluTGFiZWxcIik7XG4gICAgdGhpcy5sYWJlbFNWRy5zZXRBdHRyaWJ1dGUoJ2ZvbnQtZmFtaWx5JywgJ0FyaWFsJyk7XG4gICAgdGhpcy5sYWJlbFNWRy5zZXRBdHRyaWJ1dGUoJ2ZvbnQtc2l6ZScsICcxNicpO1xuXG4gICAgdGhpcy5sYWJlbFRleHQgPSB0aGlzLm5hbWU7XG4gICAgdGhpcy5sYWJlbFRleHROb2RlID0gZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUodGhpcy5sYWJlbFRleHQpO1xuICAgIHRoaXMubGFiZWxTVkcuYXBwZW5kQ2hpbGQodGhpcy5sYWJlbFRleHROb2RlKTtcbiAgICBkMy5zZWxlY3QodGhpcy5sYWJlbFNWRykuYXR0cihcInRyYW5zZm9ybVwiLFxuICAgICAgICBcInRyYW5zbGF0ZSggLVwiICsgKDE1KSArIFwiIFwiICsgSW50ZXJhY3Rvci5sYWJlbFkgKyBcIilcIik7XG4gICAgdGhpcy51cHBlckdyb3VwLmFwcGVuZENoaWxkKHRoaXMubGFiZWxTVkcpO1xuXG4gICAgLy9tYWtlIGJsb2JcbiAgICB0aGlzLm91dGxpbmUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50TlMoQ29uZmlnLnN2Z25zLCBcInBvbHlnb25cIik7XG4gICAgdGhpcy5vdXRsaW5lLnNldEF0dHJpYnV0ZShcInBvaW50c1wiLCBwb2ludHMpO1xuXG4gICAgdGhpcy5vdXRsaW5lLnNldEF0dHJpYnV0ZShcInN0cm9rZVwiLCBcImJsYWNrXCIpO1xuICAgIHRoaXMub3V0bGluZS5zZXRBdHRyaWJ1dGUoXCJzdHJva2Utd2lkdGhcIiwgXCIxXCIpO1xuICAgIGQzLnNlbGVjdCh0aGlzLm91dGxpbmUpLmF0dHIoXCJzdHJva2Utb3BhY2l0eVwiLCAxKS5hdHRyKFwiZmlsbC1vcGFjaXR5XCIsIDEpXG4gICAgICAgIC5hdHRyKFwiZmlsbFwiLCBcIiNmZmZmZmZcIik7XG4gICAgLy9hcHBlbmQgb3V0bGluZVxuICAgIHRoaXMudXBwZXJHcm91cC5hcHBlbmRDaGlsZCh0aGlzLm91dGxpbmUpO1xuXG4gICAgLy8gZXZlbnRzXG4gICAgY29uc3Qgc2VsZiA9IHRoaXM7XG4gICAgLy8gICAgdGhpcy51cHBlckdyb3VwLnNldEF0dHJpYnV0ZSgncG9pbnRlci1ldmVudHMnLCdhbGwnKTtcbiAgICB0aGlzLnVwcGVyR3JvdXAub25tb3VzZWRvd24gPSBmdW5jdGlvbihldnQpIHtcbiAgICAgICAgc2VsZi5tb3VzZURvd24oZXZ0KTtcbiAgICB9O1xuICAgIHRoaXMudXBwZXJHcm91cC5vbm1vdXNlb3ZlciA9IGZ1bmN0aW9uKGV2dCkge1xuICAgICAgICBzZWxmLm1vdXNlT3ZlcihldnQpO1xuICAgIH07XG4gICAgdGhpcy51cHBlckdyb3VwLm9ubW91c2VvdXQgPSBmdW5jdGlvbihldnQpIHtcbiAgICAgICAgc2VsZi5tb3VzZU91dChldnQpO1xuICAgIH07XG5cbiAgICB0aGlzLnVwcGVyR3JvdXAub250b3VjaHN0YXJ0ID0gZnVuY3Rpb24oZXZ0KSB7XG4gICAgICAgIHNlbGYudG91Y2hTdGFydChldnQpO1xuICAgIH07XG59XG5cbi8qXG5CaW9hY3RpdmVFbnRpdHkucHJvdG90eXBlLnNob3dEYXRhID0gZnVuY3Rpb24oKSB7XG4gICAgY29uc3QgdXJsID0gXCJodHRwczovL3d3dy5lYmkuYWMudWsvY2hlYmkvc2VhcmNoSWQuZG87P2NoZWJpSWQ9XCIgKyB0aGlzLmpzb24uaWRlbnRpZmllci5pZDtcbiAgICB3aW5kb3cub3Blbih1cmwsICdfYmxhbmsnKTtcbn1cbiovXG5cbm1vZHVsZS5leHBvcnRzID0gQmlvYWN0aXZlRW50aXR5O1xuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQUE7QUFDQTtBQUFBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTs7Ozs7QUFLQTtBQUdBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTs7Ozs7Ozs7QUFPQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/model/interactor/BioactiveEntity.js\n");

/***/ }),

/***/ "./src/model/interactor/Complex.js":
/*!*****************************************!*\
  !*** ./src/model/interactor/Complex.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("//    \txiNET Interaction Viewer\n//    \tCopyright 2014 Rappsilber Laboratory\n//\n//    \tThis product includes software developed at\n//    \tthe Rappsilber Laboratory (http://www.rappsilberlab.org/).\n//\n//\t\tComplex.js\n//\n//\t\tauthors: Colin Combe\n\n\nvar d3 = __webpack_require__(/*! d3 */ \"./node_modules/d3/d3.js\");\n\nvar Interactor = __webpack_require__(/*! ./Interactor */ \"./src/model/interactor/Interactor.js\");\n\nComplex.prototype = new Interactor();\n\nfunction Complex(id, xlvController) {\n  this.id = id;\n  this.controller = xlvController; //links\n\n  this.naryLinks = d3.map();\n  this.binaryLinks = d3.map();\n  this.selfLink = null;\n  this.sequenceLinks = d3.map();\n  this.form = 0;\n  this.type = 'complex';\n  this.padding = 15; //TODO - this wastes a bit memory because the property is not on the prototype, fix\n  // Object.defineProperty(this, \"width\", {\n  //     get: function width() {\n  //         return this.naryLink.path.getBBox().width;\n  //     }\n  // });\n  // Object.defineProperty(this, \"height\", {\n  //     get: function height() {\n  //         return this.naryLink.path.getBBox().height;\n  //     }\n  // });\n}\n\nComplex.prototype.initInteractor = function (naryLink) {\n  this.naryLink = naryLink;\n  naryLink.path.setAttribute('stroke', 'gray');\n  naryLink.path.setAttribute('stroke-linejoin', 'round');\n  naryLink.path.setAttribute('stroke-width', 8);\n};\n\nComplex.prototype.getPosition = function () {\n  var mapped = this.naryLink.getMappedCoordinates();\n  var mc = mapped.length;\n  var xSum = 0,\n      ySum = 0;\n\n  for (var m = 0; m < mc; m++) {\n    xSum += mapped[m][0];\n    ySum += mapped[m][1];\n  }\n\n  return [xSum / mc, ySum / mc];\n};\n\nComplex.prototype.setPosition = function (x, y) {};\n\nComplex.prototype.getResidueCoordinates = function (x, y) {\n  return this.getPosition();\n};\n\nComplex.prototype.showHighlight = function () {};\n\nmodule.exports = Complex;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvbW9kZWwvaW50ZXJhY3Rvci9Db21wbGV4LmpzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8veGlORVQvLi9zcmMvbW9kZWwvaW50ZXJhY3Rvci9Db21wbGV4LmpzPzVmMmIiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gICAgXHR4aU5FVCBJbnRlcmFjdGlvbiBWaWV3ZXJcbi8vICAgIFx0Q29weXJpZ2h0IDIwMTQgUmFwcHNpbGJlciBMYWJvcmF0b3J5XG4vL1xuLy8gICAgXHRUaGlzIHByb2R1Y3QgaW5jbHVkZXMgc29mdHdhcmUgZGV2ZWxvcGVkIGF0XG4vLyAgICBcdHRoZSBSYXBwc2lsYmVyIExhYm9yYXRvcnkgKGh0dHA6Ly93d3cucmFwcHNpbGJlcmxhYi5vcmcvKS5cbi8vXG4vL1x0XHRDb21wbGV4LmpzXG4vL1xuLy9cdFx0YXV0aG9yczogQ29saW4gQ29tYmVcblxuXCJ1c2Ugc3RyaWN0XCI7XG5jb25zdCBkMyA9IHJlcXVpcmUoJ2QzJyk7XG5jb25zdCBJbnRlcmFjdG9yID0gcmVxdWlyZSgnLi9JbnRlcmFjdG9yJyk7XG5cbkNvbXBsZXgucHJvdG90eXBlID0gbmV3IEludGVyYWN0b3IoKTtcblxuZnVuY3Rpb24gQ29tcGxleChpZCwgeGx2Q29udHJvbGxlcikge1xuICAgIHRoaXMuaWQgPSBpZDtcbiAgICB0aGlzLmNvbnRyb2xsZXIgPSB4bHZDb250cm9sbGVyO1xuICAgIC8vbGlua3NcbiAgICB0aGlzLm5hcnlMaW5rcyA9IGQzLm1hcCgpO1xuICAgIHRoaXMuYmluYXJ5TGlua3MgPSBkMy5tYXAoKTtcbiAgICB0aGlzLnNlbGZMaW5rID0gbnVsbDtcbiAgICB0aGlzLnNlcXVlbmNlTGlua3MgPSBkMy5tYXAoKTtcbiAgICB0aGlzLmZvcm0gPSAwO1xuICAgIHRoaXMudHlwZSA9ICdjb21wbGV4JztcblxuICAgIHRoaXMucGFkZGluZyA9IDE1O1xuXG4gICAgLy9UT0RPIC0gdGhpcyB3YXN0ZXMgYSBiaXQgbWVtb3J5IGJlY2F1c2UgdGhlIHByb3BlcnR5IGlzIG5vdCBvbiB0aGUgcHJvdG90eXBlLCBmaXhcbiAgICAvLyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgXCJ3aWR0aFwiLCB7XG4gICAgLy8gICAgIGdldDogZnVuY3Rpb24gd2lkdGgoKSB7XG4gICAgLy8gICAgICAgICByZXR1cm4gdGhpcy5uYXJ5TGluay5wYXRoLmdldEJCb3goKS53aWR0aDtcbiAgICAvLyAgICAgfVxuICAgIC8vIH0pO1xuICAgIC8vIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcImhlaWdodFwiLCB7XG4gICAgLy8gICAgIGdldDogZnVuY3Rpb24gaGVpZ2h0KCkge1xuICAgIC8vICAgICAgICAgcmV0dXJuIHRoaXMubmFyeUxpbmsucGF0aC5nZXRCQm94KCkuaGVpZ2h0O1xuICAgIC8vICAgICB9XG4gICAgLy8gfSk7XG59XG5cbkNvbXBsZXgucHJvdG90eXBlLmluaXRJbnRlcmFjdG9yID0gZnVuY3Rpb24obmFyeUxpbmspIHtcbiAgICB0aGlzLm5hcnlMaW5rID0gbmFyeUxpbms7XG4gICAgbmFyeUxpbmsucGF0aC5zZXRBdHRyaWJ1dGUoJ3N0cm9rZScsICdncmF5Jyk7XG4gICAgbmFyeUxpbmsucGF0aC5zZXRBdHRyaWJ1dGUoJ3N0cm9rZS1saW5lam9pbicsICdyb3VuZCcpO1xuICAgIG5hcnlMaW5rLnBhdGguc2V0QXR0cmlidXRlKCdzdHJva2Utd2lkdGgnLCA4KTtcbn07XG5cbkNvbXBsZXgucHJvdG90eXBlLmdldFBvc2l0aW9uID0gZnVuY3Rpb24oKSB7XG4gICAgY29uc3QgbWFwcGVkID0gdGhpcy5uYXJ5TGluay5nZXRNYXBwZWRDb29yZGluYXRlcygpO1xuICAgIGNvbnN0IG1jID0gbWFwcGVkLmxlbmd0aDtcbiAgICBsZXQgeFN1bSA9IDAsXG4gICAgICAgIHlTdW0gPSAwO1xuICAgIGZvciAobGV0IG0gPSAwOyBtIDwgbWM7IG0rKykge1xuICAgICAgICB4U3VtICs9IG1hcHBlZFttXVswXTtcbiAgICAgICAgeVN1bSArPSBtYXBwZWRbbV1bMV07XG4gICAgfVxuICAgIHJldHVybiBbeFN1bSAvIG1jLCB5U3VtIC8gbWNdO1xufTtcblxuQ29tcGxleC5wcm90b3R5cGUuc2V0UG9zaXRpb24gPSBmdW5jdGlvbih4LCB5KSB7fTtcblxuQ29tcGxleC5wcm90b3R5cGUuZ2V0UmVzaWR1ZUNvb3JkaW5hdGVzID0gZnVuY3Rpb24oeCwgeSkge1xuICAgIHJldHVybiB0aGlzLmdldFBvc2l0aW9uKClcbn07XG5Db21wbGV4LnByb3RvdHlwZS5zaG93SGlnaGxpZ2h0ID0gZnVuY3Rpb24oKSB7fTtcblxubW9kdWxlLmV4cG9ydHMgPSBDb21wbGV4O1xuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQUE7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/model/interactor/Complex.js\n");

/***/ }),

/***/ "./src/model/interactor/Complex_symbol.js":
/*!************************************************!*\
  !*** ./src/model/interactor/Complex_symbol.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("//    \txiNET Interaction Viewer\n//    \tCopyright 2013 Rappsilber Laboratory\n//\n//    \tThis product includes software developed at\n//    \tthe Rappsilber Laboratory (http://www.rappsilberlab.org/).\n//\n//\t\tComplex.js\n//\n//\t\tauthors: Colin Combe\n\n\nvar d3 = __webpack_require__(/*! d3 */ \"./node_modules/d3/d3.js\");\n\nvar Interactor = __webpack_require__(/*! ./Interactor */ \"./src/model/interactor/Interactor.js\");\n\nvar Config = __webpack_require__(/*! ../../controller/Config */ \"./src/controller/Config.js\");\n\nComplexSymbol.prototype = new Interactor();\n\nfunction ComplexSymbol(id, xlvController, interactorRef, json) {\n  //, name) {\n  this.id = id; // id may not be accession (multiple Segments with same accession)\n\n  this.controller = xlvController;\n  this.isComplexSymbol = true;\n  this.json = json; //links\n\n  this.naryLinks = d3.map();\n  this.binaryLinks = d3.map();\n  this.selfLink = null;\n  this.sequenceLinks = d3.map();\n  this.name = interactorRef; // layout info\n\n  this.cx = 40;\n  this.cy = 40;\n  /*\n   * Upper group\n   * svg group for elements that appear above links\n   */\n\n  this.upperGroup = document.createElementNS(Config.svgns, \"g\"); //~ this.upperGroup.setAttribute(\"class\", \"protein upperGroup\");\n  //for polygon\n\n  var points = \"15,0 8,-13 -7,-13 -15,0 -8,13 7,13\"; //make highlight\n\n  this.highlight = document.createElementNS(Config.svgns, \"polygon\");\n  this.highlight.setAttribute(\"points\", points);\n  this.highlight.setAttribute(\"stroke\", Config.highlightColour);\n  this.highlight.setAttribute(\"stroke-width\", \"5\");\n  this.highlight.setAttribute(\"fill\", \"none\"); //attributes that may change\n\n  d3.select(this.highlight).attr(\"stroke-opacity\", 0);\n  this.upperGroup.appendChild(this.highlight); //create label - we will move this svg element around when protein form changes\n\n  this.labelSVG = document.createElementNS(Config.svgns, \"text\");\n  this.labelSVG.setAttribute(\"text-anchor\", \"end\");\n  this.labelSVG.setAttribute(\"fill\", \"black\");\n  this.labelSVG.setAttribute(\"x\", \"0\");\n  this.labelSVG.setAttribute(\"y\", \"10\");\n  this.labelSVG.setAttribute(\"class\", \"xlv_text proteinLabel\");\n  this.labelSVG.setAttribute('font-family', 'Arial');\n  this.labelSVG.setAttribute('font-size', '16');\n  this.labelText = this.name;\n  this.labelTextNode = document.createTextNode(this.labelText);\n  this.labelSVG.appendChild(this.labelTextNode);\n  d3.select(this.labelSVG).attr(\"transform\", \"translate( -\" + 20 + \" \" + Interactor.labelY + \")\"); // the hexagon has slightly bigger diameter\n\n  this.upperGroup.appendChild(this.labelSVG); //make blob\n\n  this.outline = document.createElementNS(Config.svgns, \"polygon\");\n  this.outline.setAttribute(\"points\", points);\n  this.outline.setAttribute(\"stroke\", \"black\");\n  this.outline.setAttribute(\"stroke-width\", \"1\");\n  d3.select(this.outline).attr(\"stroke-opacity\", 1).attr(\"fill-opacity\", 1).attr(\"fill\", \"#ffffff\"); //append outline\n\n  this.upperGroup.appendChild(this.outline); // events\n\n  var self = this; //    this.upperGroup.setAttribute('pointer-events','all');\n\n  this.upperGroup.onmousedown = function (evt) {\n    self.mouseDown(evt);\n  };\n\n  this.upperGroup.onmouseover = function (evt) {\n    self.mouseOver(evt);\n  };\n\n  this.upperGroup.onmouseout = function (evt) {\n    self.mouseOut(evt);\n  };\n\n  this.upperGroup.ontouchstart = function (evt) {\n    self.touchStart(evt);\n  };\n}\n/*\nComplexSymbol.prototype.showData = function() {\n    if (this.name.startsWith(\"intact_\")) {\n        const url = \"http://www.ebi.ac.uk/intact/complex/details/\" + this.name.substr(7);\n        window.open(url, '_blank');\n    }\n}\n*/\n\n\nmodule.exports = ComplexSymbol;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvbW9kZWwvaW50ZXJhY3Rvci9Db21wbGV4X3N5bWJvbC5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovL3hpTkVULy4vc3JjL21vZGVsL2ludGVyYWN0b3IvQ29tcGxleF9zeW1ib2wuanM/MjE2NCJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyAgICBcdHhpTkVUIEludGVyYWN0aW9uIFZpZXdlclxuLy8gICAgXHRDb3B5cmlnaHQgMjAxMyBSYXBwc2lsYmVyIExhYm9yYXRvcnlcbi8vXG4vLyAgICBcdFRoaXMgcHJvZHVjdCBpbmNsdWRlcyBzb2Z0d2FyZSBkZXZlbG9wZWQgYXRcbi8vICAgIFx0dGhlIFJhcHBzaWxiZXIgTGFib3JhdG9yeSAoaHR0cDovL3d3dy5yYXBwc2lsYmVybGFiLm9yZy8pLlxuLy9cbi8vXHRcdENvbXBsZXguanNcbi8vXG4vL1x0XHRhdXRob3JzOiBDb2xpbiBDb21iZVxuXG5cInVzZSBzdHJpY3RcIjtcblxuY29uc3QgZDMgPSByZXF1aXJlKCdkMycpO1xuY29uc3QgSW50ZXJhY3RvciA9IHJlcXVpcmUoJy4vSW50ZXJhY3RvcicpO1xuY29uc3QgQ29uZmlnID0gcmVxdWlyZSgnLi4vLi4vY29udHJvbGxlci9Db25maWcnKTtcblxuQ29tcGxleFN5bWJvbC5wcm90b3R5cGUgPSBuZXcgSW50ZXJhY3RvcigpO1xuXG5mdW5jdGlvbiBDb21wbGV4U3ltYm9sKGlkLCB4bHZDb250cm9sbGVyLCBpbnRlcmFjdG9yUmVmLCBqc29uKSB7IC8vLCBuYW1lKSB7XG4gICAgdGhpcy5pZCA9IGlkOyAvLyBpZCBtYXkgbm90IGJlIGFjY2Vzc2lvbiAobXVsdGlwbGUgU2VnbWVudHMgd2l0aCBzYW1lIGFjY2Vzc2lvbilcbiAgICB0aGlzLmNvbnRyb2xsZXIgPSB4bHZDb250cm9sbGVyO1xuICAgIHRoaXMuaXNDb21wbGV4U3ltYm9sID0gdHJ1ZTtcbiAgICB0aGlzLmpzb24gPSBqc29uO1xuICAgIC8vbGlua3NcbiAgICB0aGlzLm5hcnlMaW5rcyA9IGQzLm1hcCgpO1xuICAgIHRoaXMuYmluYXJ5TGlua3MgPSBkMy5tYXAoKTtcbiAgICB0aGlzLnNlbGZMaW5rID0gbnVsbDtcbiAgICB0aGlzLnNlcXVlbmNlTGlua3MgPSBkMy5tYXAoKTtcblxuICAgIHRoaXMubmFtZSA9IGludGVyYWN0b3JSZWY7XG4gICAgLy8gbGF5b3V0IGluZm9cbiAgICB0aGlzLmN4ID0gNDA7XG4gICAgdGhpcy5jeSA9IDQwO1xuXG4gICAgLypcbiAgICAgKiBVcHBlciBncm91cFxuICAgICAqIHN2ZyBncm91cCBmb3IgZWxlbWVudHMgdGhhdCBhcHBlYXIgYWJvdmUgbGlua3NcbiAgICAgKi9cblxuICAgIHRoaXMudXBwZXJHcm91cCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUyhDb25maWcuc3ZnbnMsIFwiZ1wiKTtcbiAgICAvL34gdGhpcy51cHBlckdyb3VwLnNldEF0dHJpYnV0ZShcImNsYXNzXCIsIFwicHJvdGVpbiB1cHBlckdyb3VwXCIpO1xuXG4gICAgLy9mb3IgcG9seWdvblxuICAgIGNvbnN0IHBvaW50cyA9IFwiMTUsMCA4LC0xMyAtNywtMTMgLTE1LDAgLTgsMTMgNywxM1wiO1xuICAgIC8vbWFrZSBoaWdobGlnaHRcbiAgICB0aGlzLmhpZ2hsaWdodCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUyhDb25maWcuc3ZnbnMsIFwicG9seWdvblwiKTtcbiAgICB0aGlzLmhpZ2hsaWdodC5zZXRBdHRyaWJ1dGUoXCJwb2ludHNcIiwgcG9pbnRzKTtcbiAgICB0aGlzLmhpZ2hsaWdodC5zZXRBdHRyaWJ1dGUoXCJzdHJva2VcIiwgQ29uZmlnLmhpZ2hsaWdodENvbG91cik7XG4gICAgdGhpcy5oaWdobGlnaHQuc2V0QXR0cmlidXRlKFwic3Ryb2tlLXdpZHRoXCIsIFwiNVwiKTtcbiAgICB0aGlzLmhpZ2hsaWdodC5zZXRBdHRyaWJ1dGUoXCJmaWxsXCIsIFwibm9uZVwiKTtcbiAgICAvL2F0dHJpYnV0ZXMgdGhhdCBtYXkgY2hhbmdlXG4gICAgZDMuc2VsZWN0KHRoaXMuaGlnaGxpZ2h0KS5hdHRyKFwic3Ryb2tlLW9wYWNpdHlcIiwgMCk7XG4gICAgdGhpcy51cHBlckdyb3VwLmFwcGVuZENoaWxkKHRoaXMuaGlnaGxpZ2h0KTtcblxuICAgIC8vY3JlYXRlIGxhYmVsIC0gd2Ugd2lsbCBtb3ZlIHRoaXMgc3ZnIGVsZW1lbnQgYXJvdW5kIHdoZW4gcHJvdGVpbiBmb3JtIGNoYW5nZXNcbiAgICB0aGlzLmxhYmVsU1ZHID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKENvbmZpZy5zdmducywgXCJ0ZXh0XCIpO1xuICAgIHRoaXMubGFiZWxTVkcuc2V0QXR0cmlidXRlKFwidGV4dC1hbmNob3JcIiwgXCJlbmRcIik7XG4gICAgdGhpcy5sYWJlbFNWRy5zZXRBdHRyaWJ1dGUoXCJmaWxsXCIsIFwiYmxhY2tcIilcbiAgICB0aGlzLmxhYmVsU1ZHLnNldEF0dHJpYnV0ZShcInhcIiwgXCIwXCIpO1xuICAgIHRoaXMubGFiZWxTVkcuc2V0QXR0cmlidXRlKFwieVwiLCBcIjEwXCIpO1xuICAgIHRoaXMubGFiZWxTVkcuc2V0QXR0cmlidXRlKFwiY2xhc3NcIiwgXCJ4bHZfdGV4dCBwcm90ZWluTGFiZWxcIik7XG4gICAgdGhpcy5sYWJlbFNWRy5zZXRBdHRyaWJ1dGUoJ2ZvbnQtZmFtaWx5JywgJ0FyaWFsJyk7XG4gICAgdGhpcy5sYWJlbFNWRy5zZXRBdHRyaWJ1dGUoJ2ZvbnQtc2l6ZScsICcxNicpO1xuXG4gICAgdGhpcy5sYWJlbFRleHQgPSB0aGlzLm5hbWU7XG4gICAgdGhpcy5sYWJlbFRleHROb2RlID0gZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUodGhpcy5sYWJlbFRleHQpO1xuICAgIHRoaXMubGFiZWxTVkcuYXBwZW5kQ2hpbGQodGhpcy5sYWJlbFRleHROb2RlKTtcbiAgICBkMy5zZWxlY3QodGhpcy5sYWJlbFNWRykuYXR0cihcInRyYW5zZm9ybVwiLFxuICAgICAgICBcInRyYW5zbGF0ZSggLVwiICsgKDIwKSArIFwiIFwiICsgSW50ZXJhY3Rvci5sYWJlbFkgKyBcIilcIik7IC8vIHRoZSBoZXhhZ29uIGhhcyBzbGlnaHRseSBiaWdnZXIgZGlhbWV0ZXJcbiAgICB0aGlzLnVwcGVyR3JvdXAuYXBwZW5kQ2hpbGQodGhpcy5sYWJlbFNWRyk7XG5cbiAgICAvL21ha2UgYmxvYlxuICAgIHRoaXMub3V0bGluZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUyhDb25maWcuc3ZnbnMsIFwicG9seWdvblwiKTtcbiAgICB0aGlzLm91dGxpbmUuc2V0QXR0cmlidXRlKFwicG9pbnRzXCIsIHBvaW50cyk7XG5cbiAgICB0aGlzLm91dGxpbmUuc2V0QXR0cmlidXRlKFwic3Ryb2tlXCIsIFwiYmxhY2tcIik7XG4gICAgdGhpcy5vdXRsaW5lLnNldEF0dHJpYnV0ZShcInN0cm9rZS13aWR0aFwiLCBcIjFcIik7XG4gICAgZDMuc2VsZWN0KHRoaXMub3V0bGluZSkuYXR0cihcInN0cm9rZS1vcGFjaXR5XCIsIDEpLmF0dHIoXCJmaWxsLW9wYWNpdHlcIiwgMSlcbiAgICAgICAgLmF0dHIoXCJmaWxsXCIsIFwiI2ZmZmZmZlwiKTtcbiAgICAvL2FwcGVuZCBvdXRsaW5lXG4gICAgdGhpcy51cHBlckdyb3VwLmFwcGVuZENoaWxkKHRoaXMub3V0bGluZSk7XG5cbiAgICAvLyBldmVudHNcbiAgICBjb25zdCBzZWxmID0gdGhpcztcbiAgICAvLyAgICB0aGlzLnVwcGVyR3JvdXAuc2V0QXR0cmlidXRlKCdwb2ludGVyLWV2ZW50cycsJ2FsbCcpO1xuICAgIHRoaXMudXBwZXJHcm91cC5vbm1vdXNlZG93biA9IGZ1bmN0aW9uKGV2dCkge1xuICAgICAgICBzZWxmLm1vdXNlRG93bihldnQpO1xuICAgIH07XG4gICAgdGhpcy51cHBlckdyb3VwLm9ubW91c2VvdmVyID0gZnVuY3Rpb24oZXZ0KSB7XG4gICAgICAgIHNlbGYubW91c2VPdmVyKGV2dCk7XG4gICAgfTtcbiAgICB0aGlzLnVwcGVyR3JvdXAub25tb3VzZW91dCA9IGZ1bmN0aW9uKGV2dCkge1xuICAgICAgICBzZWxmLm1vdXNlT3V0KGV2dCk7XG4gICAgfTtcbiAgICB0aGlzLnVwcGVyR3JvdXAub250b3VjaHN0YXJ0ID0gZnVuY3Rpb24oZXZ0KSB7XG4gICAgICAgIHNlbGYudG91Y2hTdGFydChldnQpO1xuICAgIH07XG59XG5cbi8qXG5Db21wbGV4U3ltYm9sLnByb3RvdHlwZS5zaG93RGF0YSA9IGZ1bmN0aW9uKCkge1xuICAgIGlmICh0aGlzLm5hbWUuc3RhcnRzV2l0aChcImludGFjdF9cIikpIHtcbiAgICAgICAgY29uc3QgdXJsID0gXCJodHRwOi8vd3d3LmViaS5hYy51ay9pbnRhY3QvY29tcGxleC9kZXRhaWxzL1wiICsgdGhpcy5uYW1lLnN1YnN0cig3KTtcbiAgICAgICAgd2luZG93Lm9wZW4odXJsLCAnX2JsYW5rJyk7XG4gICAgfVxufVxuKi9cblxubW9kdWxlLmV4cG9ydHMgPSBDb21wbGV4U3ltYm9sO1xuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7Ozs7O0FBS0E7QUFHQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTs7Ozs7Ozs7OztBQVNBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/model/interactor/Complex_symbol.js\n");

/***/ }),

/***/ "./src/model/interactor/DNA.js":
/*!*************************************!*\
  !*** ./src/model/interactor/DNA.js ***!
  \*************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("//    \txiNET Interaction Viewer\n//    \tCopyright 2013 Rappsilber Laboratory\n//\n//    \tThis product includes software developed at\n//    \tthe Rappsilber Laboratory (http://www.rappsilberlab.org/).\n//\n//\t\tDNA.js\n//\n//\t\tauthors: Colin Combe\n\n\nvar d3 = __webpack_require__(/*! d3 */ \"./node_modules/d3/d3.js\");\n\nvar Interactor = __webpack_require__(/*! ./Interactor */ \"./src/model/interactor/Interactor.js\");\n\nvar Config = __webpack_require__(/*! ../../controller/Config */ \"./src/controller/Config.js\");\n\nDNA.prototype = new Interactor();\n\nfunction DNA(id, xlvController, json, name) {\n  this.id = id; // id may not be accession (multiple Segments with same accession)\n\n  this.controller = xlvController;\n  this.json = json; //links\n\n  this.naryLinks = d3.map();\n  this.binaryLinks = d3.map();\n  this.selfLink = null;\n  this.sequenceLinks = d3.map();\n  this.name = name; // layout info\n\n  this.cx = 40;\n  this.cy = 40;\n  /*\n   * Upper group\n   * svg group for elements that appear above links\n   */\n\n  this.upperGroup = document.createElementNS(Config.svgns, \"g\"); //~ this.upperGroup.setAttribute(\"class\", \"protein upperGroup\");\n  //for polygon\n\n  var points = \"0, -5  10, -10 0, 10 -10, -10\"; //make highlight\n\n  this.highlight = document.createElementNS(Config.svgns, \"polygon\");\n  this.highlight.setAttribute(\"points\", points);\n  this.highlight.setAttribute(\"stroke\", Config.highlightColour);\n  this.highlight.setAttribute(\"stroke-width\", \"5\");\n  this.highlight.setAttribute(\"fill\", \"none\"); //attributes that may change\n\n  d3.select(this.highlight).attr(\"stroke-opacity\", 0);\n  this.upperGroup.appendChild(this.highlight); //svg groups for self links\n  //    this.intraLinksHighlights = document.createElementNS(Config.svgns, \"g\");\n  //    this.intraLinks = document.createElementNS(Config.svgns, \"g\");\n  //    this.upperGroup.appendChild(this.intraLinksHighlights);\n  //\tthis.upperGroup.appendChild(this.intraLinks);\n  //create label - we will move this svg element around when protein form changes\n\n  this.labelSVG = document.createElementNS(Config.svgns, \"text\");\n  this.labelSVG.setAttribute(\"text-anchor\", \"end\");\n  this.labelSVG.setAttribute(\"fill\", \"black\");\n  this.labelSVG.setAttribute(\"x\", \"0\");\n  this.labelSVG.setAttribute(\"y\", \"10\");\n  this.labelSVG.setAttribute(\"class\", \"xlv_text proteinLabel\");\n  this.labelSVG.setAttribute('font-family', 'Arial');\n  this.labelSVG.setAttribute('font-size', '16');\n  this.labelText = this.name;\n  this.labelTextNode = document.createTextNode(this.labelText);\n  this.labelSVG.appendChild(this.labelTextNode);\n  d3.select(this.labelSVG).attr(\"transform\", \"translate( -\" + 15 + \" \" + Interactor.labelY + \")\");\n  this.upperGroup.appendChild(this.labelSVG); //make blob\n\n  this.outline = document.createElementNS(Config.svgns, \"polygon\");\n  this.outline.setAttribute(\"points\", points);\n  this.outline.setAttribute(\"stroke\", \"black\");\n  this.outline.setAttribute(\"stroke-width\", \"1\");\n  d3.select(this.outline).attr(\"stroke-opacity\", 1).attr(\"fill-opacity\", 1).attr(\"fill\", \"#ffffff\"); //append outline\n\n  this.upperGroup.appendChild(this.outline); // events\n\n  var self = this; //    this.upperGroup.setAttribute('pointer-events','all');\n\n  this.upperGroup.onmousedown = function (evt) {\n    self.mouseDown(evt);\n  };\n\n  this.upperGroup.onmouseover = function (evt) {\n    self.mouseOver(evt);\n  };\n\n  this.upperGroup.onmouseout = function (evt) {\n    self.mouseOut(evt);\n  };\n\n  this.upperGroup.ontouchstart = function (evt) {\n    self.touchStart(evt);\n  };\n}\n\nmodule.exports = DNA;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvbW9kZWwvaW50ZXJhY3Rvci9ETkEuanMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly94aU5FVC8uL3NyYy9tb2RlbC9pbnRlcmFjdG9yL0ROQS5qcz9kMmFhIl0sInNvdXJjZXNDb250ZW50IjpbIi8vICAgIFx0eGlORVQgSW50ZXJhY3Rpb24gVmlld2VyXG4vLyAgICBcdENvcHlyaWdodCAyMDEzIFJhcHBzaWxiZXIgTGFib3JhdG9yeVxuLy9cbi8vICAgIFx0VGhpcyBwcm9kdWN0IGluY2x1ZGVzIHNvZnR3YXJlIGRldmVsb3BlZCBhdFxuLy8gICAgXHR0aGUgUmFwcHNpbGJlciBMYWJvcmF0b3J5IChodHRwOi8vd3d3LnJhcHBzaWxiZXJsYWIub3JnLykuXG4vL1xuLy9cdFx0RE5BLmpzXG4vL1xuLy9cdFx0YXV0aG9yczogQ29saW4gQ29tYmVcblxuXCJ1c2Ugc3RyaWN0XCI7XG5jb25zdCBkMyA9IHJlcXVpcmUoJ2QzJyk7XG5jb25zdCBJbnRlcmFjdG9yID0gcmVxdWlyZSgnLi9JbnRlcmFjdG9yJyk7XG5jb25zdCBDb25maWcgPSByZXF1aXJlKCcuLi8uLi9jb250cm9sbGVyL0NvbmZpZycpO1xuXG5ETkEucHJvdG90eXBlID0gbmV3IEludGVyYWN0b3IoKTtcblxuZnVuY3Rpb24gRE5BKGlkLCB4bHZDb250cm9sbGVyLCBqc29uLCBuYW1lKSB7XG4gICAgdGhpcy5pZCA9IGlkOyAvLyBpZCBtYXkgbm90IGJlIGFjY2Vzc2lvbiAobXVsdGlwbGUgU2VnbWVudHMgd2l0aCBzYW1lIGFjY2Vzc2lvbilcbiAgICB0aGlzLmNvbnRyb2xsZXIgPSB4bHZDb250cm9sbGVyO1xuICAgIHRoaXMuanNvbiA9IGpzb247XG4gICAgLy9saW5rc1xuICAgIHRoaXMubmFyeUxpbmtzID0gZDMubWFwKCk7XG4gICAgdGhpcy5iaW5hcnlMaW5rcyA9IGQzLm1hcCgpO1xuICAgIHRoaXMuc2VsZkxpbmsgPSBudWxsO1xuICAgIHRoaXMuc2VxdWVuY2VMaW5rcyA9IGQzLm1hcCgpO1xuXG4gICAgdGhpcy5uYW1lID0gbmFtZTtcbiAgICAvLyBsYXlvdXQgaW5mb1xuICAgIHRoaXMuY3ggPSA0MDtcbiAgICB0aGlzLmN5ID0gNDA7XG5cbiAgICAvKlxuICAgICAqIFVwcGVyIGdyb3VwXG4gICAgICogc3ZnIGdyb3VwIGZvciBlbGVtZW50cyB0aGF0IGFwcGVhciBhYm92ZSBsaW5rc1xuICAgICAqL1xuXG4gICAgdGhpcy51cHBlckdyb3VwID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKENvbmZpZy5zdmducywgXCJnXCIpO1xuICAgIC8vfiB0aGlzLnVwcGVyR3JvdXAuc2V0QXR0cmlidXRlKFwiY2xhc3NcIiwgXCJwcm90ZWluIHVwcGVyR3JvdXBcIik7XG5cbiAgICAvL2ZvciBwb2x5Z29uXG4gICAgY29uc3QgcG9pbnRzID0gXCIwLCAtNSAgMTAsIC0xMCAwLCAxMCAtMTAsIC0xMFwiO1xuICAgIC8vbWFrZSBoaWdobGlnaHRcbiAgICB0aGlzLmhpZ2hsaWdodCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUyhDb25maWcuc3ZnbnMsIFwicG9seWdvblwiKTtcbiAgICB0aGlzLmhpZ2hsaWdodC5zZXRBdHRyaWJ1dGUoXCJwb2ludHNcIiwgcG9pbnRzKTtcbiAgICB0aGlzLmhpZ2hsaWdodC5zZXRBdHRyaWJ1dGUoXCJzdHJva2VcIiwgQ29uZmlnLmhpZ2hsaWdodENvbG91cik7XG4gICAgdGhpcy5oaWdobGlnaHQuc2V0QXR0cmlidXRlKFwic3Ryb2tlLXdpZHRoXCIsIFwiNVwiKTtcbiAgICB0aGlzLmhpZ2hsaWdodC5zZXRBdHRyaWJ1dGUoXCJmaWxsXCIsIFwibm9uZVwiKTtcbiAgICAvL2F0dHJpYnV0ZXMgdGhhdCBtYXkgY2hhbmdlXG4gICAgZDMuc2VsZWN0KHRoaXMuaGlnaGxpZ2h0KS5hdHRyKFwic3Ryb2tlLW9wYWNpdHlcIiwgMCk7XG4gICAgdGhpcy51cHBlckdyb3VwLmFwcGVuZENoaWxkKHRoaXMuaGlnaGxpZ2h0KTtcblxuICAgIC8vc3ZnIGdyb3VwcyBmb3Igc2VsZiBsaW5rc1xuICAgIC8vICAgIHRoaXMuaW50cmFMaW5rc0hpZ2hsaWdodHMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50TlMoQ29uZmlnLnN2Z25zLCBcImdcIik7XG4gICAgLy8gICAgdGhpcy5pbnRyYUxpbmtzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKENvbmZpZy5zdmducywgXCJnXCIpO1xuICAgIC8vICAgIHRoaXMudXBwZXJHcm91cC5hcHBlbmRDaGlsZCh0aGlzLmludHJhTGlua3NIaWdobGlnaHRzKTtcbiAgICAvL1x0dGhpcy51cHBlckdyb3VwLmFwcGVuZENoaWxkKHRoaXMuaW50cmFMaW5rcyk7XG5cbiAgICAvL2NyZWF0ZSBsYWJlbCAtIHdlIHdpbGwgbW92ZSB0aGlzIHN2ZyBlbGVtZW50IGFyb3VuZCB3aGVuIHByb3RlaW4gZm9ybSBjaGFuZ2VzXG4gICAgdGhpcy5sYWJlbFNWRyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUyhDb25maWcuc3ZnbnMsIFwidGV4dFwiKTtcbiAgICB0aGlzLmxhYmVsU1ZHLnNldEF0dHJpYnV0ZShcInRleHQtYW5jaG9yXCIsIFwiZW5kXCIpO1xuICAgIHRoaXMubGFiZWxTVkcuc2V0QXR0cmlidXRlKFwiZmlsbFwiLCBcImJsYWNrXCIpXG4gICAgdGhpcy5sYWJlbFNWRy5zZXRBdHRyaWJ1dGUoXCJ4XCIsIFwiMFwiKTtcbiAgICB0aGlzLmxhYmVsU1ZHLnNldEF0dHJpYnV0ZShcInlcIiwgXCIxMFwiKTtcbiAgICB0aGlzLmxhYmVsU1ZHLnNldEF0dHJpYnV0ZShcImNsYXNzXCIsIFwieGx2X3RleHQgcHJvdGVpbkxhYmVsXCIpO1xuICAgIHRoaXMubGFiZWxTVkcuc2V0QXR0cmlidXRlKCdmb250LWZhbWlseScsICdBcmlhbCcpO1xuICAgIHRoaXMubGFiZWxTVkcuc2V0QXR0cmlidXRlKCdmb250LXNpemUnLCAnMTYnKTtcblxuICAgIHRoaXMubGFiZWxUZXh0ID0gdGhpcy5uYW1lO1xuICAgIHRoaXMubGFiZWxUZXh0Tm9kZSA9IGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKHRoaXMubGFiZWxUZXh0KTtcbiAgICB0aGlzLmxhYmVsU1ZHLmFwcGVuZENoaWxkKHRoaXMubGFiZWxUZXh0Tm9kZSk7XG4gICAgZDMuc2VsZWN0KHRoaXMubGFiZWxTVkcpLmF0dHIoXCJ0cmFuc2Zvcm1cIixcbiAgICAgICAgXCJ0cmFuc2xhdGUoIC1cIiArICgxNSkgKyBcIiBcIiArIEludGVyYWN0b3IubGFiZWxZICsgXCIpXCIpO1xuICAgIHRoaXMudXBwZXJHcm91cC5hcHBlbmRDaGlsZCh0aGlzLmxhYmVsU1ZHKTtcblxuICAgIC8vbWFrZSBibG9iXG4gICAgdGhpcy5vdXRsaW5lID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKENvbmZpZy5zdmducywgXCJwb2x5Z29uXCIpO1xuICAgIHRoaXMub3V0bGluZS5zZXRBdHRyaWJ1dGUoXCJwb2ludHNcIiwgcG9pbnRzKTtcblxuICAgIHRoaXMub3V0bGluZS5zZXRBdHRyaWJ1dGUoXCJzdHJva2VcIiwgXCJibGFja1wiKTtcbiAgICB0aGlzLm91dGxpbmUuc2V0QXR0cmlidXRlKFwic3Ryb2tlLXdpZHRoXCIsIFwiMVwiKTtcbiAgICBkMy5zZWxlY3QodGhpcy5vdXRsaW5lKS5hdHRyKFwic3Ryb2tlLW9wYWNpdHlcIiwgMSkuYXR0cihcImZpbGwtb3BhY2l0eVwiLCAxKVxuICAgICAgICAuYXR0cihcImZpbGxcIiwgXCIjZmZmZmZmXCIpO1xuICAgIC8vYXBwZW5kIG91dGxpbmVcbiAgICB0aGlzLnVwcGVyR3JvdXAuYXBwZW5kQ2hpbGQodGhpcy5vdXRsaW5lKTtcblxuICAgIC8vIGV2ZW50c1xuICAgIGNvbnN0IHNlbGYgPSB0aGlzO1xuICAgIC8vICAgIHRoaXMudXBwZXJHcm91cC5zZXRBdHRyaWJ1dGUoJ3BvaW50ZXItZXZlbnRzJywnYWxsJyk7XG4gICAgdGhpcy51cHBlckdyb3VwLm9ubW91c2Vkb3duID0gZnVuY3Rpb24oZXZ0KSB7XG4gICAgICAgIHNlbGYubW91c2VEb3duKGV2dCk7XG4gICAgfTtcbiAgICB0aGlzLnVwcGVyR3JvdXAub25tb3VzZW92ZXIgPSBmdW5jdGlvbihldnQpIHtcbiAgICAgICAgc2VsZi5tb3VzZU92ZXIoZXZ0KTtcbiAgICB9O1xuICAgIHRoaXMudXBwZXJHcm91cC5vbm1vdXNlb3V0ID0gZnVuY3Rpb24oZXZ0KSB7XG4gICAgICAgIHNlbGYubW91c2VPdXQoZXZ0KTtcbiAgICB9O1xuXG4gICAgdGhpcy51cHBlckdyb3VwLm9udG91Y2hzdGFydCA9IGZ1bmN0aW9uKGV2dCkge1xuICAgICAgICBzZWxmLnRvdWNoU3RhcnQoZXZ0KTtcbiAgICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IEROQTtcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUFBO0FBQ0E7QUFBQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7Ozs7O0FBS0E7QUFHQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/model/interactor/DNA.js\n");

/***/ }),

/***/ "./src/model/interactor/Gene.js":
/*!**************************************!*\
  !*** ./src/model/interactor/Gene.js ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("//    \txiNET Interaction Viewer\n//    \tCopyright 2013 Rappsilber Laboratory\n//\n//    \tThis product includes software developed at\n//    \tthe Rappsilber Laboratory (http://www.rappsilberlab.org/).\n//\n//\t\tGene.js\n//\n//\t\tauthors: Colin Combe\n\n\nvar d3 = __webpack_require__(/*! d3 */ \"./node_modules/d3/d3.js\");\n\nvar Interactor = __webpack_require__(/*! ./Interactor */ \"./src/model/interactor/Interactor.js\");\n\nvar Config = __webpack_require__(/*! ../../controller/Config */ \"./src/controller/Config.js\");\n\nGene.prototype = new Interactor();\n\nfunction Gene(id, xlvController, json, name) {\n  this.id = id; // id may not be accession (multiple Segments with same accession)\n\n  this.controller = xlvController;\n  this.json = json; //links\n\n  this.naryLinks = d3.map();\n  this.binaryLinks = d3.map();\n  this.selfLink = null;\n  this.sequenceLinks = d3.map();\n  this.name = name; // layout info\n\n  this.cx = 40;\n  this.cy = 40;\n  /*\n   * Upper group\n   * svg group for elements that appear above links\n   */\n\n  this.upperGroup = document.createElementNS(Config.svgns, \"g\"); //~ this.upperGroup.setAttribute(\"class\", \"protein upperGroup\");\n  //make highlight\n\n  this.highlight = document.createElementNS(Config.svgns, \"rect\");\n  this.highlight.setAttribute(\"stroke\", Config.highlightColour);\n  this.highlight.setAttribute(\"stroke-width\", \"5\");\n  this.highlight.setAttribute(\"fill\", \"none\");\n  this.upperGroup.appendChild(this.highlight); //make background\n  //http://stackoverflow.com/questions/17437408/how-do-i-change-a-circle-to-a-square-using-d3\n\n  this.background = document.createElementNS(Config.svgns, \"rect\");\n  this.background.setAttribute(\"fill\", \"#FFFFFF\");\n  this.upperGroup.appendChild(this.background); //create label - we will move this svg element around when protein form changes\n\n  this.labelSVG = document.createElementNS(Config.svgns, \"text\");\n  this.labelSVG.setAttribute(\"text-anchor\", \"end\");\n  this.labelSVG.setAttribute(\"fill\", \"black\");\n  this.labelSVG.setAttribute(\"x\", \"0\");\n  this.labelSVG.setAttribute(\"y\", \"10\");\n  this.labelSVG.setAttribute(\"class\", \"xlv_text proteinLabel\");\n  this.labelSVG.setAttribute('font-family', 'Arial');\n  this.labelSVG.setAttribute('font-size', '16'); //choose label text\n\n  if (this.name !== null && this.name !== \"\") {\n    this.labelText = this.name;\n  } else {\n    this.labelText = this.id;\n  }\n\n  if (this.labelText.length > 25) {\n    this.labelText = this.labelText.substr(0, 16) + \"...\";\n  }\n\n  this.labelTextNode = document.createTextNode(this.labelText);\n  this.labelSVG.appendChild(this.labelTextNode);\n  d3.select(this.labelSVG).attr(\"transform\", \"translate( -\" + 21 + \" \" + Interactor.labelY + \") rotate(0) scale(1, 1)\");\n  this.upperGroup.appendChild(this.labelSVG); //ticks (and amino acid letters)\n\n  this.ticks = document.createElementNS(Config.svgns, \"g\"); //annotation svg group\n\n  this.annotationsSvgGroup = document.createElementNS(Config.svgns, \"g\");\n  this.annotationsSvgGroup.setAttribute(\"opacity\", \"1\");\n  this.upperGroup.appendChild(this.annotationsSvgGroup); //make outline\n\n  this.outline = document.createElementNS(Config.svgns, \"rect\");\n  this.outline.setAttribute(\"stroke\", \"black\");\n  this.outline.setAttribute(\"stroke-width\", \"1\");\n  this.outline.setAttribute(\"fill\", \"none\");\n  this.upperGroup.appendChild(this.outline);\n  d3.select(this.background).transition().attr(\"x\", -16).attr(\"y\", -8).attr(\"width\", 32).attr(\"height\", 16).attr(\"rx\", 6).attr(\"ry\", 6);\n  d3.select(this.outline).transition().attr(\"x\", -16).attr(\"y\", -8).attr(\"width\", 32).attr(\"height\", 16).attr(\"rx\", 6).attr(\"ry\", 6);\n  d3.select(this.highlight).transition().attr(\"x\", -16).attr(\"y\", -8).attr(\"width\", 32).attr(\"height\", 16).attr(\"rx\", 6).attr(\"ry\", 6);\n  this.scaleLabels = []; // events\n\n  var self = this; //    this.upperGroup.setAttribute('pointer-events','all');\n\n  this.upperGroup.onmousedown = function (evt) {\n    self.mouseDown(evt);\n  };\n\n  this.upperGroup.onmouseover = function (evt) {\n    self.mouseOver(evt);\n  };\n\n  this.upperGroup.onmouseout = function (evt) {\n    self.mouseOut(evt);\n  };\n\n  this.upperGroup.ontouchstart = function (evt) {\n    self.touchStart(evt);\n  };\n\n  this.showHighlight(false);\n}\n\nmodule.exports = Gene;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvbW9kZWwvaW50ZXJhY3Rvci9HZW5lLmpzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8veGlORVQvLi9zcmMvbW9kZWwvaW50ZXJhY3Rvci9HZW5lLmpzP2YxYmIiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gICAgXHR4aU5FVCBJbnRlcmFjdGlvbiBWaWV3ZXJcbi8vICAgIFx0Q29weXJpZ2h0IDIwMTMgUmFwcHNpbGJlciBMYWJvcmF0b3J5XG4vL1xuLy8gICAgXHRUaGlzIHByb2R1Y3QgaW5jbHVkZXMgc29mdHdhcmUgZGV2ZWxvcGVkIGF0XG4vLyAgICBcdHRoZSBSYXBwc2lsYmVyIExhYm9yYXRvcnkgKGh0dHA6Ly93d3cucmFwcHNpbGJlcmxhYi5vcmcvKS5cbi8vXG4vL1x0XHRHZW5lLmpzXG4vL1xuLy9cdFx0YXV0aG9yczogQ29saW4gQ29tYmVcblxuXCJ1c2Ugc3RyaWN0XCI7XG5jb25zdCBkMyA9IHJlcXVpcmUoJ2QzJyk7XG5jb25zdCBJbnRlcmFjdG9yID0gcmVxdWlyZSgnLi9JbnRlcmFjdG9yJyk7XG5jb25zdCBDb25maWcgPSByZXF1aXJlKCcuLi8uLi9jb250cm9sbGVyL0NvbmZpZycpO1xuXG5HZW5lLnByb3RvdHlwZSA9IG5ldyBJbnRlcmFjdG9yKCk7XG5cbmZ1bmN0aW9uIEdlbmUoaWQsIHhsdkNvbnRyb2xsZXIsIGpzb24sIG5hbWUpIHtcbiAgICB0aGlzLmlkID0gaWQ7IC8vIGlkIG1heSBub3QgYmUgYWNjZXNzaW9uIChtdWx0aXBsZSBTZWdtZW50cyB3aXRoIHNhbWUgYWNjZXNzaW9uKVxuICAgIHRoaXMuY29udHJvbGxlciA9IHhsdkNvbnRyb2xsZXI7XG4gICAgdGhpcy5qc29uID0ganNvbjtcbiAgICAvL2xpbmtzXG4gICAgdGhpcy5uYXJ5TGlua3MgPSBkMy5tYXAoKTtcbiAgICB0aGlzLmJpbmFyeUxpbmtzID0gZDMubWFwKCk7XG4gICAgdGhpcy5zZWxmTGluayA9IG51bGw7XG4gICAgdGhpcy5zZXF1ZW5jZUxpbmtzID0gZDMubWFwKCk7XG4gICAgdGhpcy5uYW1lID0gbmFtZTtcbiAgICAvLyBsYXlvdXQgaW5mb1xuICAgIHRoaXMuY3ggPSA0MDtcbiAgICB0aGlzLmN5ID0gNDA7XG5cbiAgICAvKlxuICAgICAqIFVwcGVyIGdyb3VwXG4gICAgICogc3ZnIGdyb3VwIGZvciBlbGVtZW50cyB0aGF0IGFwcGVhciBhYm92ZSBsaW5rc1xuICAgICAqL1xuXG4gICAgdGhpcy51cHBlckdyb3VwID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKENvbmZpZy5zdmducywgXCJnXCIpO1xuICAgIC8vfiB0aGlzLnVwcGVyR3JvdXAuc2V0QXR0cmlidXRlKFwiY2xhc3NcIiwgXCJwcm90ZWluIHVwcGVyR3JvdXBcIik7XG5cbiAgICAvL21ha2UgaGlnaGxpZ2h0XG4gICAgdGhpcy5oaWdobGlnaHQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50TlMoQ29uZmlnLnN2Z25zLCBcInJlY3RcIik7XG4gICAgdGhpcy5oaWdobGlnaHQuc2V0QXR0cmlidXRlKFwic3Ryb2tlXCIsIENvbmZpZy5oaWdobGlnaHRDb2xvdXIpO1xuICAgIHRoaXMuaGlnaGxpZ2h0LnNldEF0dHJpYnV0ZShcInN0cm9rZS13aWR0aFwiLCBcIjVcIik7XG4gICAgdGhpcy5oaWdobGlnaHQuc2V0QXR0cmlidXRlKFwiZmlsbFwiLCBcIm5vbmVcIik7XG4gICAgdGhpcy51cHBlckdyb3VwLmFwcGVuZENoaWxkKHRoaXMuaGlnaGxpZ2h0KTtcblxuICAgIC8vbWFrZSBiYWNrZ3JvdW5kXG4gICAgLy9odHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzE3NDM3NDA4L2hvdy1kby1pLWNoYW5nZS1hLWNpcmNsZS10by1hLXNxdWFyZS11c2luZy1kM1xuICAgIHRoaXMuYmFja2dyb3VuZCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUyhDb25maWcuc3ZnbnMsIFwicmVjdFwiKTtcbiAgICB0aGlzLmJhY2tncm91bmQuc2V0QXR0cmlidXRlKFwiZmlsbFwiLCBcIiNGRkZGRkZcIik7XG4gICAgdGhpcy51cHBlckdyb3VwLmFwcGVuZENoaWxkKHRoaXMuYmFja2dyb3VuZCk7XG5cbiAgICAvL2NyZWF0ZSBsYWJlbCAtIHdlIHdpbGwgbW92ZSB0aGlzIHN2ZyBlbGVtZW50IGFyb3VuZCB3aGVuIHByb3RlaW4gZm9ybSBjaGFuZ2VzXG4gICAgdGhpcy5sYWJlbFNWRyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUyhDb25maWcuc3ZnbnMsIFwidGV4dFwiKTtcbiAgICB0aGlzLmxhYmVsU1ZHLnNldEF0dHJpYnV0ZShcInRleHQtYW5jaG9yXCIsIFwiZW5kXCIpO1xuICAgIHRoaXMubGFiZWxTVkcuc2V0QXR0cmlidXRlKFwiZmlsbFwiLCBcImJsYWNrXCIpXG4gICAgdGhpcy5sYWJlbFNWRy5zZXRBdHRyaWJ1dGUoXCJ4XCIsIFwiMFwiKTtcbiAgICB0aGlzLmxhYmVsU1ZHLnNldEF0dHJpYnV0ZShcInlcIiwgXCIxMFwiKTtcbiAgICB0aGlzLmxhYmVsU1ZHLnNldEF0dHJpYnV0ZShcImNsYXNzXCIsIFwieGx2X3RleHQgcHJvdGVpbkxhYmVsXCIpO1xuICAgIHRoaXMubGFiZWxTVkcuc2V0QXR0cmlidXRlKCdmb250LWZhbWlseScsICdBcmlhbCcpO1xuICAgIHRoaXMubGFiZWxTVkcuc2V0QXR0cmlidXRlKCdmb250LXNpemUnLCAnMTYnKTtcbiAgICAvL2Nob29zZSBsYWJlbCB0ZXh0XG4gICAgaWYgKHRoaXMubmFtZSAhPT0gbnVsbCAmJiB0aGlzLm5hbWUgIT09IFwiXCIpIHtcbiAgICAgICAgdGhpcy5sYWJlbFRleHQgPSB0aGlzLm5hbWU7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5sYWJlbFRleHQgPSB0aGlzLmlkO1xuICAgIH1cbiAgICBpZiAodGhpcy5sYWJlbFRleHQubGVuZ3RoID4gMjUpIHtcbiAgICAgICAgdGhpcy5sYWJlbFRleHQgPSB0aGlzLmxhYmVsVGV4dC5zdWJzdHIoMCwgMTYpICsgXCIuLi5cIjtcbiAgICB9XG4gICAgdGhpcy5sYWJlbFRleHROb2RlID0gZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUodGhpcy5sYWJlbFRleHQpO1xuICAgIHRoaXMubGFiZWxTVkcuYXBwZW5kQ2hpbGQodGhpcy5sYWJlbFRleHROb2RlKTtcbiAgICBkMy5zZWxlY3QodGhpcy5sYWJlbFNWRykuYXR0cihcInRyYW5zZm9ybVwiLFxuICAgICAgICBcInRyYW5zbGF0ZSggLVwiICsgKDIxKSArIFwiIFwiICsgSW50ZXJhY3Rvci5sYWJlbFkgKyBcIikgcm90YXRlKDApIHNjYWxlKDEsIDEpXCIpO1xuICAgIHRoaXMudXBwZXJHcm91cC5hcHBlbmRDaGlsZCh0aGlzLmxhYmVsU1ZHKTtcbiAgICAvL3RpY2tzIChhbmQgYW1pbm8gYWNpZCBsZXR0ZXJzKVxuICAgIHRoaXMudGlja3MgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50TlMoQ29uZmlnLnN2Z25zLCBcImdcIik7XG4gICAgLy9hbm5vdGF0aW9uIHN2ZyBncm91cFxuICAgIHRoaXMuYW5ub3RhdGlvbnNTdmdHcm91cCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUyhDb25maWcuc3ZnbnMsIFwiZ1wiKTtcbiAgICB0aGlzLmFubm90YXRpb25zU3ZnR3JvdXAuc2V0QXR0cmlidXRlKFwib3BhY2l0eVwiLCBcIjFcIik7XG4gICAgdGhpcy51cHBlckdyb3VwLmFwcGVuZENoaWxkKHRoaXMuYW5ub3RhdGlvbnNTdmdHcm91cCk7XG5cbiAgICAvL21ha2Ugb3V0bGluZVxuICAgIHRoaXMub3V0bGluZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUyhDb25maWcuc3ZnbnMsIFwicmVjdFwiKTtcbiAgICB0aGlzLm91dGxpbmUuc2V0QXR0cmlidXRlKFwic3Ryb2tlXCIsIFwiYmxhY2tcIik7XG4gICAgdGhpcy5vdXRsaW5lLnNldEF0dHJpYnV0ZShcInN0cm9rZS13aWR0aFwiLCBcIjFcIik7XG4gICAgdGhpcy5vdXRsaW5lLnNldEF0dHJpYnV0ZShcImZpbGxcIiwgXCJub25lXCIpO1xuICAgIHRoaXMudXBwZXJHcm91cC5hcHBlbmRDaGlsZCh0aGlzLm91dGxpbmUpO1xuXG4gICAgZDMuc2VsZWN0KHRoaXMuYmFja2dyb3VuZCkudHJhbnNpdGlvbigpXG4gICAgICAgIC5hdHRyKFwieFwiLCAtMTYpLmF0dHIoXCJ5XCIsIC04KVxuICAgICAgICAuYXR0cihcIndpZHRoXCIsIDMyKS5hdHRyKFwiaGVpZ2h0XCIsIDE2KVxuICAgICAgICAuYXR0cihcInJ4XCIsIDYpLmF0dHIoXCJyeVwiLCA2KTtcbiAgICBkMy5zZWxlY3QodGhpcy5vdXRsaW5lKS50cmFuc2l0aW9uKClcbiAgICAgICAgLmF0dHIoXCJ4XCIsIC0xNikuYXR0cihcInlcIiwgLTgpXG4gICAgICAgIC5hdHRyKFwid2lkdGhcIiwgMzIpLmF0dHIoXCJoZWlnaHRcIiwgMTYpXG4gICAgICAgIC5hdHRyKFwicnhcIiwgNikuYXR0cihcInJ5XCIsIDYpO1xuICAgIGQzLnNlbGVjdCh0aGlzLmhpZ2hsaWdodCkudHJhbnNpdGlvbigpXG4gICAgICAgIC5hdHRyKFwieFwiLCAtMTYpLmF0dHIoXCJ5XCIsIC04KVxuICAgICAgICAuYXR0cihcIndpZHRoXCIsIDMyKS5hdHRyKFwiaGVpZ2h0XCIsIDE2KVxuICAgICAgICAuYXR0cihcInJ4XCIsIDYpLmF0dHIoXCJyeVwiLCA2KTtcblxuICAgIHRoaXMuc2NhbGVMYWJlbHMgPSBbXTtcblxuICAgIC8vIGV2ZW50c1xuICAgIGNvbnN0IHNlbGYgPSB0aGlzO1xuICAgIC8vICAgIHRoaXMudXBwZXJHcm91cC5zZXRBdHRyaWJ1dGUoJ3BvaW50ZXItZXZlbnRzJywnYWxsJyk7XG4gICAgdGhpcy51cHBlckdyb3VwLm9ubW91c2Vkb3duID0gZnVuY3Rpb24oZXZ0KSB7XG4gICAgICAgIHNlbGYubW91c2VEb3duKGV2dCk7XG4gICAgfTtcbiAgICB0aGlzLnVwcGVyR3JvdXAub25tb3VzZW92ZXIgPSBmdW5jdGlvbihldnQpIHtcbiAgICAgICAgc2VsZi5tb3VzZU92ZXIoZXZ0KTtcbiAgICB9O1xuICAgIHRoaXMudXBwZXJHcm91cC5vbm1vdXNlb3V0ID0gZnVuY3Rpb24oZXZ0KSB7XG4gICAgICAgIHNlbGYubW91c2VPdXQoZXZ0KTtcbiAgICB9O1xuICAgIHRoaXMudXBwZXJHcm91cC5vbnRvdWNoc3RhcnQgPSBmdW5jdGlvbihldnQpIHtcbiAgICAgICAgc2VsZi50b3VjaFN0YXJ0KGV2dCk7XG4gICAgfTtcblxuICAgIHRoaXMuc2hvd0hpZ2hsaWdodChmYWxzZSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gR2VuZTtcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUFBO0FBQ0E7QUFBQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7Ozs7O0FBS0E7QUFHQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUdBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUlBO0FBSUE7QUFLQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/model/interactor/Gene.js\n");

/***/ }),

/***/ "./src/model/interactor/Interactor.js":
/*!********************************************!*\
  !*** ./src/model/interactor/Interactor.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("//      xiNET Interaction Viewer\n//      Copyright 2013 Rappsilber Laboratory\n//\n//      This product includes software developed at\n//      the Rappsilber Laboratory (http://www.rappsilberlab.org/).\n//\n//      Interactor.js\n//\n//      authors: Colin Combe\n\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nInteractor.LABELMAXLENGTH = 90; // maximal width reserved for protein-labels\n\nInteractor.labelY = -5; //label Y offset, better if calc'd half height of label once rendered\n\nfunction Interactor() {}\n\nInteractor.prototype = {\n  get width() {\n    return this.upperGroup.getBBox().width;\n  },\n\n  get height() {\n    return this.upperGroup.getBBox().height;\n  }\n\n};\n\nInteractor.prototype.addStoichiometryLabel = function (stoichiometry) {\n  if (this.labelSVG) {\n    //complexes don't have labels (yet?)\n    this.labelSVG.childNodes[0].data = this.labelSVG.childNodes[0].data + ' [' + stoichiometry + ']';\n  }\n};\n\nInteractor.prototype.mouseDown = function (evt) {\n  this.controller.preventDefaultsAndStopPropagation(evt); //see MouseEvents.js\n\n  if (typeof this.controller.d3cola !== 'undefined' && this.controller.d3cola != null) {\n    this.controller.d3cola.stop();\n  }\n\n  this.controller.dragElement = this;\n  var p = this.controller.getEventPoint(evt);\n  this.controller.dragStart = this.controller.mouseToSVG(p.x, p.y);\n  return false;\n}; //// TODO: test on touch screen\n// Interactor.prototype.touchStart = function(evt) {\n//     this.controller.preventDefaultsAndStopPropagation(evt); //see MouseEvents.js\n//     if (this.controller.d3cola !== undefined) {\n//         this.controller.d3cola.stop();\n//     }\n//     this.controller.dragElement = this;\n//     //store start location\n//     var p = this.controller.getTouchEventPoint(evt);\n//     this.controller.dragStart = this.controller.mouseToSVG(p.x, p.y);\n//     return false;\n// };\n\n\nInteractor.prototype.mouseOver = function (evt) {\n  this.controller.preventDefaultsAndStopPropagation(evt);\n  this.showHighlight(true); //~ this.controller.setTooltip(this.id);\n\n  return false;\n};\n\nInteractor.prototype.mouseOut = function (evt) {\n  this.controller.preventDefaultsAndStopPropagation(evt);\n  this.showHighlight(false);\n  this.controller.hideTooltip();\n  return false;\n};\n\nInteractor.prototype.getBlobRadius = function () {\n  return 15;\n};\n\nInteractor.prototype.showHighlight = function (show) {\n  // if (show === true) {\n  //~ this.highlight.setAttribute(\"stroke\", xiNET.highlightColour.toRGB());\n  // this.highlight.setAttribute(\"stroke-opacity\", \"1\");\n  // } else {\n  //~ if (this.isSelected == false) {\n  this.highlight.setAttribute(\"stroke-opacity\", \"0\"); //~ }\n  //~ this.highlight.setAttribute(\"stroke\", xiNET.selectedColour.toRGB());\n  // }\n};\n/*\nInteractor.prototype.setSelected = function(select) {\n     if (select && this.isSelected === false) {\n         this.controller.selected.set(this.id, this);\n         this.isSelected = true;\n         this.highlight.setAttribute(\"stroke\", Config.selectedColour);\n         this.highlight.setAttribute(\"stroke-opacity\", \"1\");\n     }\n     else if (select === false && this.isSelected === true) {\n         this.controller.selected.remove(this.id);\n         this.isSelected = false;\n         this.highlight.setAttribute(\"stroke-opacity\", \"0\");\n         this.highlight.setAttribute(\"stroke\", Config.highlightColour);\n     }\n}\n*/\n\n\nInteractor.prototype.getPosition = function () {\n  return [this.cx, this.cy];\n}; // more accurately described as setting transform for top svg elements (sets scale also)\n\n\nInteractor.prototype.setPosition = function (x, y) {\n  this.cx = x;\n  this.cy = y; // if (this.form === 1) {\n\n  this.upperGroup.setAttribute(\"transform\", \"translate(\" + this.cx + \" \" + this.cy + \")\"); // +\n  //         \" scale(\" + (this.controller.z) + \") \" + \"rotate(\" + this.rotation + \")\");\n  // } else {\n  //     this.upperGroup.setAttribute(\"transform\", \"translate(\" + this.cx + \" \" + this.cy + \")\" +\n  //         \" scale(\" + (this.controller.z) + \") \");\n  // }\n};\n\nInteractor.prototype.getAggregateSelfLinkPath = function () {\n  var intraR = this.getBlobRadius() + 7;\n  var sectorSize = 45;\n  var arcStart = Interactor.trig(intraR, 25 + sectorSize);\n  var arcEnd = Interactor.trig(intraR, -25 + sectorSize);\n  var cp1 = Interactor.trig(intraR, 40 + sectorSize);\n  var cp2 = Interactor.trig(intraR, -40 + sectorSize);\n  return 'M 0,0 ' + 'Q ' + cp1.x + ',' + -cp1.y + ' ' + arcStart.x + ',' + -arcStart.y + ' A ' + intraR + ' ' + intraR + ' 0 0 1 ' + arcEnd.x + ',' + -arcEnd.y + ' Q ' + cp2.x + ',' + -cp2.y + ' 0,0';\n};\n\nInteractor.rotatePointAboutPoint = function (p, o, theta) {\n  theta = theta / 360 * Math.PI * 2; //TODO: change theta arg to radians not degrees\n\n  var rx = Math.cos(theta) * (p[0] - o[0]) - Math.sin(theta) * (p[1] - o[1]) + o[0];\n  var ry = Math.sin(theta) * (p[0] - o[0]) + Math.cos(theta) * (p[1] - o[1]) + o[1];\n  return [rx, ry];\n};\n\nInteractor.prototype.checkLinks = function () {\n  function checkAll(linkMap) {\n    var links = linkMap.values();\n    var c = links.length;\n\n    for (var l = 0; l < c; l++) {\n      links[l].check();\n    }\n  } // checkAll(this.naryLinks); // hacked out to help fix ordering od nLinks\n\n\n  checkAll(this.binaryLinks);\n  checkAll(this.sequenceLinks);\n\n  if (this.selfLink !== null) {\n    this.selfLink.check();\n  }\n}; // update all lines (e.g after a move)\n\n\nInteractor.prototype.setAllLinkCoordinates = function () {\n  var _iterator = _createForOfIteratorHelper(this.naryLinks.values()),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var link = _step.value;\n      link.setLinkCoordinates();\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n\n  var _iterator2 = _createForOfIteratorHelper(this.binaryLinks.values()),\n      _step2;\n\n  try {\n    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n      var _link = _step2.value;\n\n      _link.setLinkCoordinates();\n    }\n  } catch (err) {\n    _iterator2.e(err);\n  } finally {\n    _iterator2.f();\n  }\n\n  if (this.selfLink) {\n    this.selfLink.setLinkCoordinates();\n  }\n\n  var _iterator3 = _createForOfIteratorHelper(this.sequenceLinks.values()),\n      _step3;\n\n  try {\n    for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n      var _link2 = _step3.value;\n\n      _link2.setLinkCoordinates();\n    }\n  } catch (err) {\n    _iterator3.e(err);\n  } finally {\n    _iterator3.f();\n  }\n}; //TODO: remove this, use rotateAboutPoint instead\n\n\nInteractor.trig = function (radius, angleDegrees) {\n  //x = rx + radius * cos(theta) and y = ry + radius * sin(theta)\n  var radians = angleDegrees / 360 * Math.PI * 2;\n  return {\n    x: radius * Math.cos(radians),\n    y: radius * Math.sin(radians)\n  };\n};\n/*\nInteractor.prototype.showData = function() {\n    //~ alert (\"molecule!\");\n}\n*/\n\n\nInteractor.prototype.setForm = function (form, svgP) {};\n\nmodule.exports = Interactor;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/model/interactor/Interactor.js\n");

/***/ }),

/***/ "./src/model/interactor/MoleculeSet.js":
/*!*********************************************!*\
  !*** ./src/model/interactor/MoleculeSet.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("//    \txiNET Interaction Viewer\n//    \tCopyright 2013 Rappsilber Laboratory\n//\n//    \tThis product includes software developed at\n//    \tthe Rappsilber Laboratory (http://www.rappsilberlab.org/).\n//\n//\t\tMoleculeSet.js\n//\n//\t\tauthors: Colin Combe\n\n\nvar d3 = __webpack_require__(/*! d3 */ \"./node_modules/d3/d3.js\");\n\nvar Interactor = __webpack_require__(/*! ./Interactor */ \"./src/model/interactor/Interactor.js\");\n\nvar Config = __webpack_require__(/*! ../../controller/Config */ \"./src/controller/Config.js\");\n\nMoleculeSet.prototype = new Interactor();\n\nfunction MoleculeSet(id, xlvController, json, name) {\n  this.id = id; // id may not be accession (multiple Segments with same accession)\n\n  this.controller = xlvController;\n  this.json = json; //links\n\n  this.naryLinks = d3.map();\n  this.binaryLinks = d3.map();\n  this.selfLink = null;\n  this.sequenceLinks = d3.map();\n  this.name = name;\n  this.tooltip = this.id; // layout info\n\n  this.cx = 40;\n  this.cy = 40;\n  /*\n   * Upper group\n   * svg group for elements that appear above links\n   */\n\n  this.upperGroup = document.createElementNS(Config.svgns, \"g\");\n  this.upperGroup.setAttribute(\"class\", \"upperGroup\");\n  var points = \"0, -10  8.66,5 -8.66,5\"; //make highlight\n\n  this.highlight = document.createElementNS(Config.svgns, \"polygon\");\n  this.highlight.setAttribute(\"points\", points);\n  this.highlight.setAttribute(\"stroke\", Config.highlightColour);\n  this.highlight.setAttribute(\"stroke-width\", \"5\");\n  this.highlight.setAttribute(\"fill\", \"none\"); //attributes that may change\n\n  d3.select(this.highlight).attr(\"stroke-opacity\", 0);\n  this.upperGroup.appendChild(this.highlight); //svg groups for self links\n\n  this.intraLinksHighlights = document.createElementNS(Config.svgns, \"g\");\n  this.intraLinks = document.createElementNS(Config.svgns, \"g\");\n  this.upperGroup.appendChild(this.intraLinksHighlights);\n  this.upperGroup.appendChild(this.intraLinks); //create label - we will move this svg element around when protein form changes\n\n  this.labelSVG = document.createElementNS(Config.svgns, \"text\");\n  this.labelSVG.setAttribute(\"text-anchor\", \"end\");\n  this.labelSVG.setAttribute(\"fill\", \"black\");\n  this.labelSVG.setAttribute(\"x\", \"0\");\n  this.labelSVG.setAttribute(\"y\", \"10\");\n  this.labelSVG.setAttribute(\"class\", \"xlv_text proteinLabel\");\n  this.labelSVG.setAttribute('font-family', 'Arial');\n  this.labelSVG.setAttribute('font-size', '16');\n  this.labelText = this.name;\n  this.labelTextNode = document.createTextNode(this.labelText);\n  this.labelSVG.appendChild(this.labelTextNode);\n  d3.select(this.labelSVG).attr(\"transform\", \"translate( -\" + 25 + \" \" + Interactor.labelY + \")\");\n  this.upperGroup.appendChild(this.labelSVG); //make symbol\n\n  this.outline = document.createElementNS(Config.svgns, \"rect\");\n  d3.select(this.outline).attr(\"height\", 20).attr(\"width\", 40).attr(\"x\", -20).attr(\"y\", -10).attr(\"rx\", 5).attr(\"ry\", 5).attr(\"stroke\", \"black\").attr(\"stroke-width\", \"4\").attr(\"stroke-opacity\", 1).attr(\"fill-opacity\", 1).attr(\"fill\", \"#ffffff\"); //append outline\n\n  this.upperGroup.appendChild(this.outline);\n  this.upperLine = document.createElementNS(Config.svgns, \"rect\");\n  d3.select(this.upperLine).attr(\"height\", 20).attr(\"width\", 40).attr(\"x\", -20).attr(\"y\", -10).attr(\"rx\", 5).attr(\"ry\", 5).attr(\"stroke\", \"white\").attr(\"stroke-width\", \"2\").attr(\"stroke-opacity\", 1).attr(\"fill-opacity\", 0); //append outline\n\n  this.upperGroup.appendChild(this.upperLine); // events\n\n  var self = this; //    this.upperGroup.setAttribute('pointer-events','all');\n\n  this.upperGroup.onmousedown = function (evt) {\n    self.mouseDown(evt);\n  };\n\n  this.upperGroup.onmouseover = function (evt) {\n    self.mouseOver(evt);\n  };\n\n  this.upperGroup.onmouseout = function (evt) {\n    self.mouseOut(evt);\n  };\n\n  this.upperGroup.ontouchstart = function (evt) {\n    self.touchStart(evt);\n  }; //~ this.upperGroup.ontouchmove = function(evt) {};\n  //~ this.upperGroup.ontouchend = function(evt) {\n  //~ self.ctrl.message(\"protein touch end\");\n  //~ self.mouseOut(evt);\n  //~ };\n  //~ this.upperGroup.ontouchenter = function(evt) {\n  //~ self.message(\"protein touch enter\");\n  //~ self.touchStart(evt);\n  //~ };\n  //~ this.upperGroup.ontouchleave = function(evt) {\n  //~ self.message(\"protein touch leave\");\n  //~ self.mouseOut(evt);\n  //~ };\n  //~ this.upperGroup.ontouchcancel = function(evt) {\n  //~ self.message(\"protein touch cancel\");\n  //~ self.mouseOut(evt);\n  //~ };\n\n}\n/*\nMoleculeSet.prototype.getBlobRadius = function() {\n    return 20;\n}\n*/\n\n\nmodule.exports = MoleculeSet;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvbW9kZWwvaW50ZXJhY3Rvci9Nb2xlY3VsZVNldC5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovL3hpTkVULy4vc3JjL21vZGVsL2ludGVyYWN0b3IvTW9sZWN1bGVTZXQuanM/NzQ1YSJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyAgICBcdHhpTkVUIEludGVyYWN0aW9uIFZpZXdlclxuLy8gICAgXHRDb3B5cmlnaHQgMjAxMyBSYXBwc2lsYmVyIExhYm9yYXRvcnlcbi8vXG4vLyAgICBcdFRoaXMgcHJvZHVjdCBpbmNsdWRlcyBzb2Z0d2FyZSBkZXZlbG9wZWQgYXRcbi8vICAgIFx0dGhlIFJhcHBzaWxiZXIgTGFib3JhdG9yeSAoaHR0cDovL3d3dy5yYXBwc2lsYmVybGFiLm9yZy8pLlxuLy9cbi8vXHRcdE1vbGVjdWxlU2V0LmpzXG4vL1xuLy9cdFx0YXV0aG9yczogQ29saW4gQ29tYmVcblxuXCJ1c2Ugc3RyaWN0XCI7XG5jb25zdCBkMyA9IHJlcXVpcmUoJ2QzJyk7XG5cbmNvbnN0IEludGVyYWN0b3IgPSByZXF1aXJlKCcuL0ludGVyYWN0b3InKTtcbmNvbnN0IENvbmZpZyA9IHJlcXVpcmUoJy4uLy4uL2NvbnRyb2xsZXIvQ29uZmlnJyk7XG5cbk1vbGVjdWxlU2V0LnByb3RvdHlwZSA9IG5ldyBJbnRlcmFjdG9yKCk7XG5cbmZ1bmN0aW9uIE1vbGVjdWxlU2V0KGlkLCB4bHZDb250cm9sbGVyLCBqc29uLCBuYW1lKSB7XG4gICAgdGhpcy5pZCA9IGlkOyAvLyBpZCBtYXkgbm90IGJlIGFjY2Vzc2lvbiAobXVsdGlwbGUgU2VnbWVudHMgd2l0aCBzYW1lIGFjY2Vzc2lvbilcbiAgICB0aGlzLmNvbnRyb2xsZXIgPSB4bHZDb250cm9sbGVyO1xuICAgIHRoaXMuanNvbiA9IGpzb247XG4gICAgLy9saW5rc1xuICAgIHRoaXMubmFyeUxpbmtzID0gZDMubWFwKCk7XG4gICAgdGhpcy5iaW5hcnlMaW5rcyA9IGQzLm1hcCgpO1xuICAgIHRoaXMuc2VsZkxpbmsgPSBudWxsO1xuICAgIHRoaXMuc2VxdWVuY2VMaW5rcyA9IGQzLm1hcCgpO1xuICAgIHRoaXMubmFtZSA9IG5hbWU7XG4gICAgdGhpcy50b29sdGlwID0gdGhpcy5pZDtcbiAgICAvLyBsYXlvdXQgaW5mb1xuICAgIHRoaXMuY3ggPSA0MDtcbiAgICB0aGlzLmN5ID0gNDA7XG5cbiAgICAvKlxuICAgICAqIFVwcGVyIGdyb3VwXG4gICAgICogc3ZnIGdyb3VwIGZvciBlbGVtZW50cyB0aGF0IGFwcGVhciBhYm92ZSBsaW5rc1xuICAgICAqL1xuXG4gICAgdGhpcy51cHBlckdyb3VwID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKENvbmZpZy5zdmducywgXCJnXCIpO1xuICAgIHRoaXMudXBwZXJHcm91cC5zZXRBdHRyaWJ1dGUoXCJjbGFzc1wiLCBcInVwcGVyR3JvdXBcIik7XG4gICAgY29uc3QgcG9pbnRzID0gXCIwLCAtMTAgIDguNjYsNSAtOC42Niw1XCI7XG4gICAgLy9tYWtlIGhpZ2hsaWdodFxuICAgIHRoaXMuaGlnaGxpZ2h0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKENvbmZpZy5zdmducywgXCJwb2x5Z29uXCIpO1xuICAgIHRoaXMuaGlnaGxpZ2h0LnNldEF0dHJpYnV0ZShcInBvaW50c1wiLCBwb2ludHMpO1xuICAgIHRoaXMuaGlnaGxpZ2h0LnNldEF0dHJpYnV0ZShcInN0cm9rZVwiLCBDb25maWcuaGlnaGxpZ2h0Q29sb3VyKTtcbiAgICB0aGlzLmhpZ2hsaWdodC5zZXRBdHRyaWJ1dGUoXCJzdHJva2Utd2lkdGhcIiwgXCI1XCIpO1xuICAgIHRoaXMuaGlnaGxpZ2h0LnNldEF0dHJpYnV0ZShcImZpbGxcIiwgXCJub25lXCIpO1xuICAgIC8vYXR0cmlidXRlcyB0aGF0IG1heSBjaGFuZ2VcbiAgICBkMy5zZWxlY3QodGhpcy5oaWdobGlnaHQpLmF0dHIoXCJzdHJva2Utb3BhY2l0eVwiLCAwKTtcbiAgICB0aGlzLnVwcGVyR3JvdXAuYXBwZW5kQ2hpbGQodGhpcy5oaWdobGlnaHQpO1xuXG4gICAgLy9zdmcgZ3JvdXBzIGZvciBzZWxmIGxpbmtzXG4gICAgdGhpcy5pbnRyYUxpbmtzSGlnaGxpZ2h0cyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUyhDb25maWcuc3ZnbnMsIFwiZ1wiKTtcbiAgICB0aGlzLmludHJhTGlua3MgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50TlMoQ29uZmlnLnN2Z25zLCBcImdcIik7XG4gICAgdGhpcy51cHBlckdyb3VwLmFwcGVuZENoaWxkKHRoaXMuaW50cmFMaW5rc0hpZ2hsaWdodHMpO1xuICAgIHRoaXMudXBwZXJHcm91cC5hcHBlbmRDaGlsZCh0aGlzLmludHJhTGlua3MpO1xuXG4gICAgLy9jcmVhdGUgbGFiZWwgLSB3ZSB3aWxsIG1vdmUgdGhpcyBzdmcgZWxlbWVudCBhcm91bmQgd2hlbiBwcm90ZWluIGZvcm0gY2hhbmdlc1xuICAgIHRoaXMubGFiZWxTVkcgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50TlMoQ29uZmlnLnN2Z25zLCBcInRleHRcIik7XG4gICAgdGhpcy5sYWJlbFNWRy5zZXRBdHRyaWJ1dGUoXCJ0ZXh0LWFuY2hvclwiLCBcImVuZFwiKTtcbiAgICB0aGlzLmxhYmVsU1ZHLnNldEF0dHJpYnV0ZShcImZpbGxcIiwgXCJibGFja1wiKVxuICAgIHRoaXMubGFiZWxTVkcuc2V0QXR0cmlidXRlKFwieFwiLCBcIjBcIik7XG4gICAgdGhpcy5sYWJlbFNWRy5zZXRBdHRyaWJ1dGUoXCJ5XCIsIFwiMTBcIik7XG4gICAgdGhpcy5sYWJlbFNWRy5zZXRBdHRyaWJ1dGUoXCJjbGFzc1wiLCBcInhsdl90ZXh0IHByb3RlaW5MYWJlbFwiKTtcbiAgICB0aGlzLmxhYmVsU1ZHLnNldEF0dHJpYnV0ZSgnZm9udC1mYW1pbHknLCAnQXJpYWwnKTtcbiAgICB0aGlzLmxhYmVsU1ZHLnNldEF0dHJpYnV0ZSgnZm9udC1zaXplJywgJzE2Jyk7XG5cbiAgICB0aGlzLmxhYmVsVGV4dCA9IHRoaXMubmFtZTtcbiAgICB0aGlzLmxhYmVsVGV4dE5vZGUgPSBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZSh0aGlzLmxhYmVsVGV4dCk7XG4gICAgdGhpcy5sYWJlbFNWRy5hcHBlbmRDaGlsZCh0aGlzLmxhYmVsVGV4dE5vZGUpO1xuICAgIGQzLnNlbGVjdCh0aGlzLmxhYmVsU1ZHKS5hdHRyKFwidHJhbnNmb3JtXCIsXG4gICAgICAgIFwidHJhbnNsYXRlKCAtXCIgKyAoMjUpICsgXCIgXCIgKyBJbnRlcmFjdG9yLmxhYmVsWSArIFwiKVwiKTtcbiAgICB0aGlzLnVwcGVyR3JvdXAuYXBwZW5kQ2hpbGQodGhpcy5sYWJlbFNWRyk7XG5cbiAgICAvL21ha2Ugc3ltYm9sXG4gICAgdGhpcy5vdXRsaW5lID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKENvbmZpZy5zdmducywgXCJyZWN0XCIpO1xuICAgIGQzLnNlbGVjdCh0aGlzLm91dGxpbmUpLmF0dHIoXCJoZWlnaHRcIiwgMjApXG4gICAgICAgIC5hdHRyKFwid2lkdGhcIiwgNDApXG4gICAgICAgIC5hdHRyKFwieFwiLCAtMjApXG4gICAgICAgIC5hdHRyKFwieVwiLCAtMTApXG4gICAgICAgIC5hdHRyKFwicnhcIiwgNSlcbiAgICAgICAgLmF0dHIoXCJyeVwiLCA1KVxuICAgICAgICAuYXR0cihcInN0cm9rZVwiLCBcImJsYWNrXCIpXG4gICAgICAgIC5hdHRyKFwic3Ryb2tlLXdpZHRoXCIsIFwiNFwiKVxuICAgICAgICAuYXR0cihcInN0cm9rZS1vcGFjaXR5XCIsIDEpXG4gICAgICAgIC5hdHRyKFwiZmlsbC1vcGFjaXR5XCIsIDEpXG4gICAgICAgIC5hdHRyKFwiZmlsbFwiLCBcIiNmZmZmZmZcIik7XG4gICAgLy9hcHBlbmQgb3V0bGluZVxuICAgIHRoaXMudXBwZXJHcm91cC5hcHBlbmRDaGlsZCh0aGlzLm91dGxpbmUpO1xuXG4gICAgdGhpcy51cHBlckxpbmUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50TlMoQ29uZmlnLnN2Z25zLCBcInJlY3RcIik7XG4gICAgZDMuc2VsZWN0KHRoaXMudXBwZXJMaW5lKS5hdHRyKFwiaGVpZ2h0XCIsIDIwKVxuICAgICAgICAuYXR0cihcIndpZHRoXCIsIDQwKVxuICAgICAgICAuYXR0cihcInhcIiwgLTIwKVxuICAgICAgICAuYXR0cihcInlcIiwgLTEwKVxuICAgICAgICAuYXR0cihcInJ4XCIsIDUpXG4gICAgICAgIC5hdHRyKFwicnlcIiwgNSlcbiAgICAgICAgLmF0dHIoXCJzdHJva2VcIiwgXCJ3aGl0ZVwiKVxuICAgICAgICAuYXR0cihcInN0cm9rZS13aWR0aFwiLCBcIjJcIilcbiAgICAgICAgLmF0dHIoXCJzdHJva2Utb3BhY2l0eVwiLCAxKVxuICAgICAgICAuYXR0cihcImZpbGwtb3BhY2l0eVwiLCAwKTtcbiAgICAvL2FwcGVuZCBvdXRsaW5lXG4gICAgdGhpcy51cHBlckdyb3VwLmFwcGVuZENoaWxkKHRoaXMudXBwZXJMaW5lKTtcblxuICAgIC8vIGV2ZW50c1xuICAgIGNvbnN0IHNlbGYgPSB0aGlzO1xuICAgIC8vICAgIHRoaXMudXBwZXJHcm91cC5zZXRBdHRyaWJ1dGUoJ3BvaW50ZXItZXZlbnRzJywnYWxsJyk7XG4gICAgdGhpcy51cHBlckdyb3VwLm9ubW91c2Vkb3duID0gZnVuY3Rpb24oZXZ0KSB7XG4gICAgICAgIHNlbGYubW91c2VEb3duKGV2dCk7XG4gICAgfTtcbiAgICB0aGlzLnVwcGVyR3JvdXAub25tb3VzZW92ZXIgPSBmdW5jdGlvbihldnQpIHtcbiAgICAgICAgc2VsZi5tb3VzZU92ZXIoZXZ0KTtcbiAgICB9O1xuICAgIHRoaXMudXBwZXJHcm91cC5vbm1vdXNlb3V0ID0gZnVuY3Rpb24oZXZ0KSB7XG4gICAgICAgIHNlbGYubW91c2VPdXQoZXZ0KTtcbiAgICB9O1xuXG4gICAgdGhpcy51cHBlckdyb3VwLm9udG91Y2hzdGFydCA9IGZ1bmN0aW9uKGV2dCkge1xuICAgICAgICBzZWxmLnRvdWNoU3RhcnQoZXZ0KTtcbiAgICB9O1xuICAgIC8vfiB0aGlzLnVwcGVyR3JvdXAub250b3VjaG1vdmUgPSBmdW5jdGlvbihldnQpIHt9O1xuICAgIC8vfiB0aGlzLnVwcGVyR3JvdXAub250b3VjaGVuZCA9IGZ1bmN0aW9uKGV2dCkge1xuICAgIC8vfiBzZWxmLmN0cmwubWVzc2FnZShcInByb3RlaW4gdG91Y2ggZW5kXCIpO1xuICAgIC8vfiBzZWxmLm1vdXNlT3V0KGV2dCk7XG4gICAgLy9+IH07XG4gICAgLy9+IHRoaXMudXBwZXJHcm91cC5vbnRvdWNoZW50ZXIgPSBmdW5jdGlvbihldnQpIHtcbiAgICAvL34gc2VsZi5tZXNzYWdlKFwicHJvdGVpbiB0b3VjaCBlbnRlclwiKTtcbiAgICAvL34gc2VsZi50b3VjaFN0YXJ0KGV2dCk7XG4gICAgLy9+IH07XG4gICAgLy9+IHRoaXMudXBwZXJHcm91cC5vbnRvdWNobGVhdmUgPSBmdW5jdGlvbihldnQpIHtcbiAgICAvL34gc2VsZi5tZXNzYWdlKFwicHJvdGVpbiB0b3VjaCBsZWF2ZVwiKTtcbiAgICAvL34gc2VsZi5tb3VzZU91dChldnQpO1xuICAgIC8vfiB9O1xuICAgIC8vfiB0aGlzLnVwcGVyR3JvdXAub250b3VjaGNhbmNlbCA9IGZ1bmN0aW9uKGV2dCkge1xuICAgIC8vfiBzZWxmLm1lc3NhZ2UoXCJwcm90ZWluIHRvdWNoIGNhbmNlbFwiKTtcbiAgICAvL34gc2VsZi5tb3VzZU91dChldnQpO1xuICAgIC8vfiB9O1xuXG59XG5cbi8qXG5Nb2xlY3VsZVNldC5wcm90b3R5cGUuZ2V0QmxvYlJhZGl1cyA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiAyMDtcbn1cbiovXG5tb2R1bGUuZXhwb3J0cyA9IE1vbGVjdWxlU2V0O1xuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBOzs7OztBQUtBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFXQTtBQUVBO0FBQ0E7QUFDQTtBQVVBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7Ozs7Ozs7QUFLQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/model/interactor/MoleculeSet.js\n");

/***/ }),

/***/ "./src/model/interactor/Polymer.js":
/*!*****************************************!*\
  !*** ./src/model/interactor/Polymer.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("//      xiNET Interaction Viewer\n//      Copyright 2013 Rappsilber Laboratory\n//\n//      This product includes software developed at\n//      the Rappsilber Laboratory (http://www.rappsilberlab.org/).\n//\n//      Polymer.js\n//\n//      authors: Lutz Fischer, Colin Combe\n\n\nvar d3 = __webpack_require__(/*! d3 */ \"./node_modules/d3/d3.js\");\n\nvar Interactor = __webpack_require__(/*! ./Interactor */ \"./src/model/interactor/Interactor.js\");\n\nvar Annotation = __webpack_require__(/*! ./Annotation */ \"./src/model/interactor/Annotation.js\");\n\nvar SequenceFeature = __webpack_require__(/*! ./../SequenceFeature */ \"./src/model/SequenceFeature.js\"); //var Rotator = require('../../controller/Rotator');\n\n\nvar Config = __webpack_require__(/*! ../../controller/Config */ \"./src/controller/Config.js\");\n\nPolymer.STICKHEIGHT = 20; //height of stick in pixels\n\nPolymer.MAXSIZE = 0; // residue count of longest sequence\n\nPolymer.transitionTime = 650;\n\nfunction Polymer() {}\n\nPolymer.prototype = new Interactor(); //sequence = amino acids in UPPERCASE, digits or lowercase can be used for modification info\n\nPolymer.prototype.setSequence = function (sequence) {\n  //remove modification site info from sequence\n  this.sequence = sequence.replace(/[^A-Z]/g, '');\n  this.size = this.sequence.length;\n}; //by the time we get here all prot's have had their sequence set, so Polymer.MAXSIZE has correct value;\n\n\nPolymer.prototype.init = function () {\n  //this.setForm(this.form);\n  if (this.selfLink) this.selfLink.initSelfLinkSVG();\n  this.setAllLinkCoordinates();\n};\n\nPolymer.prototype.getBlobRadius = function () {\n  //~ if (this.size) {\n  //~ return Math.sqrt(this.size / 2 / Math.PI);\n  //~ }\n  //~ else\n  return 10;\n};\n\nPolymer.prototype.showHighlight = function (show) {\n  if (show === true) {\n    this.highlight.setAttribute(\"stroke-opacity\", \"1\");\n  } else {\n    this.highlight.setAttribute(\"stroke-opacity\", \"0\");\n  }\n};\n\nPolymer.minXDist = 30;\n\nPolymer.prototype.setStickScale = function (scale, svgP) {\n  var oldScale = this.stickZoom; //dist from centre\n\n  var dx = this.cx - svgP.x;\n  var dy = this.cy - svgP.y; // new dist from centre\n\n  var nx = dx * scale / oldScale;\n  var ny = dy * scale / oldScale; //required change\n\n  var rx = nx - dx;\n  var ry = ny - dy;\n\n  if (this.rotation === 0 || this.rotation === 180) {\n    ry = 0;\n  } //new pos\n\n\n  var x = this.cx + rx;\n  var y = this.cy + ry;\n  this.stickZoom = scale;\n  this.scale();\n  this.setPosition(x, y);\n  this.setAllLinkCoordinates();\n};\n\nPolymer.prototype.scale = function () {\n  var protLength = this.size * this.stickZoom;\n\n  if (this.form === 1) {\n    var labelTransform = d3.transform(this.labelSVG.getAttribute(\"transform\"));\n    var k = this.controller.svgElement.createSVGMatrix().rotate(labelTransform.rotate).translate(-(this.size / 2 * this.stickZoom + (this.nTerminusFeature ? 25 : 10)), Interactor.labelY); //.scale(z).translate(-c.x, -c.y);\n\n    this.labelSVG.transform.baseVal.initialize(this.controller.svgElement.createSVGTransformFromMatrix(k));\n\n    if (this.annotations) {\n      var ca = this.annotations.length;\n\n      for (var a = 0; a < ca; a++) {\n        var anno = this.annotations[a];\n\n        if (typeof anno.seqDatum.uncertainBegin != \"undefined\") {\n          anno.fuzzyStart.setAttribute(\"d\", this.getAnnotationRectPath(anno.seqDatum.uncertainBegin, anno.seqDatum.begin, anno));\n        }\n\n        anno.certain.setAttribute(\"d\", this.getAnnotationRectPath(anno.seqDatum.begin, anno.seqDatum.end, anno));\n\n        if (anno.seqDatum.uncertainEnd) {\n          anno.fuzzyEnd.setAttribute(\"d\", this.getAnnotationRectPath(anno.seqDatum.end, anno.seqDatum.uncertainEnd, anno));\n        }\n      }\n    }\n\n    d3.select(this.background).attr(\"width\", protLength).attr(\"x\", this.getResXwithStickZoom(0.5));\n    d3.select(this.outline).attr(\"width\", protLength).attr(\"x\", this.getResXwithStickZoom(0.5));\n    d3.select(this.highlight).attr(\"width\", protLength + 5).attr(\"x\", this.getResXwithStickZoom(0.5) - 2.5);\n    this.setScaleGroup();\n  }\n};\n\nPolymer.prototype.setScaleGroup = function () {\n  this.upperGroup.appendChild(this.ticks); //will do nothing if this.ticks already appended to this.uppergroup\n\n  d3.select(this.ticks).selectAll(\"*\").remove();\n  this.scaleLabels = [];\n  var ScaleTicksPerLabel = 2; // varies with scale?\n\n  var tick = -1;\n  var lastTickX = this.getResXwithStickZoom(this.size);\n\n  for (var res = 1; res <= this.size; res++) {\n    if (res === 1 || res % 100 === 0 && 200 * this.stickZoom > Polymer.minXDist || res % 10 === 0 && 20 * this.stickZoom > Polymer.minXDist) {\n      var tx = this.getResXwithStickZoom(res);\n\n      if (this.stickZoom >= 8 || res !== 1) {\n        tickAt(this, tx);\n      }\n\n      tick = (tick + 1) % ScaleTicksPerLabel; // does this one get a label?\n\n      if (tick === 0) {\n        // && tx > 20) {\n        if (tx + Polymer.minXDist < lastTickX) {\n          scaleLabelAt(this, res, tx);\n        }\n      }\n    }\n\n    if (this.stickZoom >= 8) {\n      var seqLabelGroup = document.createElementNS(Config.svgns, \"g\");\n      seqLabelGroup.setAttribute(\"transform\", \"translate(\" + this.getResXwithStickZoom(res) + \" \" + 0 + \")\");\n      var seqLabel = document.createElementNS(Config.svgns, \"text\");\n      seqLabel.setAttribute('font-family', \"'Courier New', monospace\");\n      seqLabel.setAttribute('font-size', '10px');\n      seqLabel.setAttribute(\"text-anchor\", \"middle\");\n      seqLabel.setAttribute(\"x\", \"0\");\n      seqLabel.setAttribute(\"y\", \"3\");\n      seqLabel.appendChild(document.createTextNode(this.sequence[res - 1]));\n      seqLabelGroup.appendChild(seqLabel);\n      this.scaleLabels.push(seqLabel);\n      this.ticks.appendChild(seqLabelGroup);\n    }\n  }\n\n  scaleLabelAt(this, this.size, lastTickX);\n\n  if (this.stickZoom >= 8) {\n    tickAt(this, lastTickX);\n  }\n\n  function scaleLabelAt(self, text, tickX) {\n    var scaleLabelGroup = document.createElementNS(Config.svgns, \"g\");\n    scaleLabelGroup.setAttribute(\"transform\", \"translate(\" + tickX + \" \" + 0 + \")\");\n    var scaleLabel = document.createElementNS(Config.svgns, \"text\");\n    scaleLabel.setAttribute(\"class\", \"Polymer xlv_text PolymerLabel\");\n    scaleLabel.setAttribute('font-family', \"'Courier New', monospace\");\n    scaleLabel.setAttribute('font-size', '14');\n    scaleLabel.setAttribute(\"text-anchor\", \"middle\");\n    scaleLabel.setAttribute(\"x\", \"0\");\n    scaleLabel.setAttribute(\"y\", Polymer.STICKHEIGHT + 4);\n    scaleLabel.appendChild(document.createTextNode(text));\n    scaleLabelGroup.appendChild(scaleLabel);\n    self.scaleLabels.push(scaleLabel);\n    self.ticks.appendChild(scaleLabelGroup);\n  }\n\n  function tickAt(self, tickX) {\n    var tick = document.createElementNS(Config.svgns, \"line\");\n    tick.setAttribute(\"x1\", tickX);\n    tick.setAttribute(\"y1\", \"5\");\n    tick.setAttribute(\"x2\", tickX);\n    tick.setAttribute(\"y2\", \"10\");\n    tick.setAttribute(\"stroke\", \"black\");\n    self.ticks.appendChild(tick);\n  }\n};\n\nPolymer.prototype.setForm = function (form, svgP) {\n  if (this.busy !== true) {\n    if (form === 1) {\n      if (this.form !== 1) {\n        this.toStick();\n      }\n    } else {\n      // if (this.form !== 0) {\n      this.toCircle(svgP); // var r = this.getBlobRadius();\n    } // }\n\n  }\n};\n\nPolymer.prototype.toCircle = function (svgP) {\n  var _this = this;\n\n  //svgP = null;// temp hack - you can uncomment this is you experience things 'flying off screen'\n  this.busy = true; // var protLength = this.size * this.stickZoom;\n\n  var r = this.getBlobRadius(); //\n\n  d3.select(this.background).transition().attr(\"x\", -r).attr(\"y\", -r).attr(\"width\", r * 2).attr(\"height\", r * 2).attr(\"rx\", r).attr(\"ry\", r).duration(Polymer.transitionTime);\n  d3.select(this.outline).transition().attr(\"x\", -r).attr(\"y\", -r).attr(\"width\", r * 2).attr(\"height\", r * 2).attr(\"rx\", r).attr(\"ry\", r).duration(Polymer.transitionTime);\n  d3.select(this.annotationsSvgGroup).transition().attr(\"transform\", \"scale(1, 1)\").duration(Polymer.transitionTime);\n  d3.select(this.highlight).transition().attr(\"x\", -r).attr(\"y\", -r).attr(\"width\", r * 2).attr(\"height\", r * 2).attr(\"rx\", r).attr(\"ry\", r).duration(Polymer.transitionTime);\n  var stickZoomInterpol = d3.interpolate(this.stickZoom, 0); // var rotationInterpol = d3.interpolate((this.rotation > 180) ? this.rotation - 360 : this.rotation, 0);\n\n  var labelTransform = d3.transform(this.labelSVG.getAttribute(\"transform\"));\n  var labelStartPoint = labelTransform.translate[0];\n  var labelTranslateInterpol = d3.interpolate(labelStartPoint, -(r + 5));\n  var xInterpol = null,\n      yInterpol = null;\n\n  if (typeof svgP !== 'undefined' && svgP !== null) {\n    xInterpol = d3.interpolate(this.cx, svgP.x);\n    yInterpol = d3.interpolate(this.cy, svgP.y);\n  }\n\n  var self = this;\n  d3.select(this.ticks).transition().attr(\"opacity\", 0).duration(Polymer.transitionTime / 4).each(\"end\", function () {\n    d3.select(this).selectAll(\"*\").remove();\n  });\n  d3.select(this.highlight).transition().attr(\"width\", r * 2 + 5).attr(\"height\", r * 2 + 5).attr(\"x\", -r - 2.5).attr(\"y\", -r - 2.5).attr(\"rx\", r + 2.5).attr(\"ry\", r + 2.5).duration(Polymer.transitionTime);\n\n  if (this.annotations) {\n    (function () {\n      var annots = _this.annotations;\n      var ca = annots.length;\n\n      for (var a = 0; a < ca; a++) {\n        var anno = annots[a];\n\n        if (typeof anno.seqDatum.uncertainBegin != \"undefined\") {\n          var fuzzyStart = anno.fuzzyStart;\n          d3.select(fuzzyStart).transition().attr(\"d\", _this.getAnnotationPieSliceApproximatePath(anno.seqDatum.uncertainBegin, anno.seqDatum.begin)).duration(Polymer.transitionTime).each(\"end\", function () {\n            for (var b = 0; b < ca; b++) {\n              var annoB = self.annotations[b];\n\n              if (this === annoB.fuzzyStart) {\n                d3.select(this).attr(\"d\", self.getAnnotationPieSliceArcPath(annoB.seqDatum.uncertainBegin, annoB.seqDatum.begin));\n              }\n            }\n          });\n        } // if (anno.begin && anno.end) {\n\n\n        var certain = anno.certain;\n        d3.select(certain).transition().attr(\"d\", _this.getAnnotationPieSliceApproximatePath(anno.seqDatum.begin, anno.seqDatum.end)).duration(Polymer.transitionTime).each(\"end\", function () {\n          for (var b = 0; b < ca; b++) {\n            var annoB = self.annotations[b];\n\n            if (this === annoB.certain) {\n              d3.select(this).attr(\"d\", self.getAnnotationPieSliceArcPath(annoB.seqDatum.begin, annoB.seqDatum.end));\n            }\n          }\n        }); // }\n\n        if (typeof anno.seqDatum.uncertainEnd != \"undefined\") {\n          var fuzzyEnd = anno.fuzzyEnd;\n          d3.select(fuzzyEnd).transition().attr(\"d\", _this.getAnnotationPieSliceApproximatePath(anno.seqDatum.end, anno.seqDatum.uncertainEnd)).duration(Polymer.transitionTime).each(\"end\", function () {\n            for (var b = 0; b < ca; b++) {\n              var annoB = self.annotations[b];\n\n              if (this === annoB.fuzzyEnd) {\n                d3.select(this).attr(\"d\", self.getAnnotationPieSliceArcPath(annoB.seqDatum.end, annoB.seqDatum.uncertainEnd));\n              }\n            }\n          });\n        }\n      }\n    })();\n  }\n\n  var originalStickZoom = this.stickZoom;\n  var originalRotation = this.rotation;\n  var cubicInOut = d3.ease('cubic-in-out');\n  d3.timer(function (elapsed) {\n    return update(elapsed / Polymer.transitionTime);\n  });\n\n  function update(interp) {\n    var labelTransform = d3.transform(self.labelSVG.getAttribute(\"transform\"));\n    var k = self.controller.svgElement.createSVGMatrix().rotate(labelTransform.rotate).translate(labelTranslateInterpol(cubicInOut(interp)), Interactor.labelY); //.scale(z).translate(-c.x, -c.y);\n\n    self.labelSVG.transform.baseVal.initialize(self.controller.svgElement.createSVGTransformFromMatrix(k)); //~\n\n    if (xInterpol !== null) {\n      self.setPosition(xInterpol(cubicInOut(interp)), yInterpol(cubicInOut(interp)));\n    }\n\n    self.stickZoom = stickZoomInterpol(cubicInOut(interp));\n    self.setAllLinkCoordinates();\n\n    if (interp === 1) {\n      // finished - tidy up\n      self.form = 0;\n      self.checkLinks();\n      self.stickZoom = originalStickZoom;\n      self.rotation = originalRotation;\n      self.busy = false;\n      return true;\n    } else if (interp > 1) {\n      return update(1);\n    } else {\n      return false;\n    }\n  }\n};\n\nPolymer.prototype.toStick = function () {\n  this.busy = true;\n  this.form = 1; //remove prot-prot links - would it be better if checkLinks did this? - think not\n\n  var c = this.binaryLinks.values().length;\n\n  for (var l = 0; l < c; l++) {\n    var link = this.binaryLinks.values()[l]; //out with the old\n\n    if (link.shown) {\n      link.hide();\n    }\n  }\n\n  var protLength = this.size * this.stickZoom;\n  var r = this.getBlobRadius();\n  var lengthInterpol = d3.interpolate(2 * r, protLength);\n  var stickZoomInterpol = d3.interpolate(0, this.stickZoom);\n  var labelTranslateInterpol = d3.interpolate(-(r + 5), -(this.size / 2 * this.stickZoom + (this.nTerminusFeature ? 25 : 10)));\n  var origStickZoom = this.stickZoom;\n  this.stickZoom = 0;\n  this.checkLinks(this.binaryLinks);\n  this.checkLinks(this.selfLink);\n  this.checkLinks(this.sequenceLinks);\n  this.stickZoom = origStickZoom;\n  d3.select(this.background).transition() //.attr(\"stroke-opacity\", 1)\n  .attr(\"height\", Polymer.STICKHEIGHT).attr(\"y\", -Polymer.STICKHEIGHT / 2).attr(\"rx\", 0).attr(\"ry\", 0).duration(Polymer.transitionTime);\n  d3.select(this.outline).transition() //.attr(\"stroke-opacity\", 1)\n  .attr(\"height\", Polymer.STICKHEIGHT).attr(\"y\", -Polymer.STICKHEIGHT / 2).attr(\"rx\", 0).attr(\"ry\", 0).duration(Polymer.transitionTime);\n  d3.select(this.highlight).transition().attr(\"width\", protLength + 5).attr(\"height\", Polymer.STICKHEIGHT + 5).attr(\"x\", this.getResXwithStickZoom(0.5) - 2.5).attr(\"y\", -Polymer.STICKHEIGHT / 2 - 2.5).attr(\"rx\", 0).attr(\"ry\", 0).duration(Polymer.transitionTime);\n\n  if (this.annotations) {\n    var annots = this.annotations;\n    var ca = annots.length;\n\n    for (var a = 0; a < ca; a++) {\n      var anno = annots[a];\n\n      if (typeof anno.seqDatum.uncertainBegin != \"undefined\") {\n        var fuzzyStart = anno.fuzzyStart;\n        fuzzyStart.setAttribute(\"d\", this.getAnnotationPieSliceApproximatePath(anno.seqDatum.uncertainBegin, anno.seqDatum.begin));\n        d3.select(fuzzyStart).transition().attr(\"d\", this.getAnnotationRectPath(anno.seqDatum.uncertainBegin, anno.seqDatum.begin, anno)).duration(Polymer.transitionTime);\n      } // if (anno.seqDatum.begin && anno.seqDatum.end) {\n\n\n      var certain = anno.certain;\n      certain.setAttribute(\"d\", this.getAnnotationPieSliceApproximatePath(anno.seqDatum.begin, anno.seqDatum.end));\n      d3.select(certain).transition().attr(\"d\", this.getAnnotationRectPath(anno.seqDatum.begin, anno.seqDatum.end, anno)).duration(Polymer.transitionTime); // }\n\n      if (typeof anno.seqDatum.uncertainEnd != \"undefined\") {\n        var fuzzyEnd = anno.fuzzyEnd;\n        fuzzyEnd.setAttribute(\"d\", this.getAnnotationPieSliceApproximatePath(anno.seqDatum.end, anno.seqDatum.uncertainEnd));\n        d3.select(fuzzyEnd).transition().attr(\"d\", this.getAnnotationRectPath(anno.seqDatum.end, anno.seqDatum.uncertainEnd, anno)).duration(Polymer.transitionTime);\n      }\n    }\n  }\n\n  var self = this;\n  var cubicInOut = d3.ease('cubic-in-out');\n  d3.timer(function (elapsed) {\n    return update(elapsed / Polymer.transitionTime);\n  });\n\n  function update(interp) {\n    var labelTransform = d3.transform(self.labelSVG.getAttribute(\"transform\"));\n    var k = self.controller.svgElement.createSVGMatrix().rotate(labelTransform.rotate).translate(labelTranslateInterpol(cubicInOut(interp)), Interactor.labelY); //.scale(z).translate(-c.x, -c.y);\n\n    self.labelSVG.transform.baseVal.initialize(self.controller.svgElement.createSVGTransformFromMatrix(k));\n    var currentLength = lengthInterpol(cubicInOut(interp));\n    d3.select(self.highlight).attr(\"width\", currentLength).attr(\"x\", -(currentLength / 2) + 0.5 * self.stickZoom);\n    d3.select(self.outline).attr(\"width\", currentLength).attr(\"x\", -(currentLength / 2) + 0.5 * self.stickZoom);\n    d3.select(self.background).attr(\"width\", currentLength).attr(\"x\", -(currentLength / 2) + 0.5 * self.stickZoom);\n    self.stickZoom = stickZoomInterpol(cubicInOut(interp));\n    self.setAllLinkCoordinates();\n\n    if (interp === 1) {\n      // finished - tidy up\n      self.busy = false;\n      return true;\n    } else if (interp > 1) {\n      return update(1);\n    } else {\n      return false;\n    }\n  }\n\n  d3.select(this.ticks).attr(\"opacity\", 0);\n  this.setScaleGroup();\n  d3.select(this.ticks).transition().attr(\"opacity\", 1).delay(Polymer.transitionTime * 0.8).duration(Polymer.transitionTime / 2);\n};\n\nPolymer.prototype.toStickNoTransition = function () {\n  this.busy = true;\n  this.form = 1; //remove prot-prot links - would it be better if checkLinks did this? - think not\n\n  var c = this.binaryLinks.values().length;\n\n  for (var l = 0; l < c; l++) {\n    var link = this.binaryLinks.values()[l]; //out with the old\n\n    if (link.shown) {\n      link.hide();\n    }\n  }\n\n  var protLength = this.size * this.stickZoom;\n  var r = this.getBlobRadius();\n  var lengthInterpol = d3.interpolate(2 * r, protLength); // var stickZoomInterpol = d3.interpolate(0, this.stickZoom);\n  // var rotationInterpol = d3.interpolate(0, (this.rotation > 180) ? this.rotation - 360 : this.rotation);\n\n  var labelTranslateInterpol = d3.interpolate(-(r + 5), -(this.size / 2 * this.stickZoom + (this.nTerminusFeature ? 25 : 10))); // var origStickZoom = this.stickZoom;\n  // this.stickZoom = 0;\n\n  this.checkLinks(this.binaryLinks);\n  this.checkLinks(this.selfLink);\n  this.checkLinks(this.sequenceLinks); // this.stickZoom = origStickZoom;\n\n  d3.select(this.background) //.transition() //.attr(\"stroke-opacity\", 1)\n  .attr(\"height\", Polymer.STICKHEIGHT).attr(\"y\", -Polymer.STICKHEIGHT / 2).attr(\"rx\", 0).attr(\"ry\", 0); //  .duration(Polymer.transitionTime);\n\n  d3.select(this.outline) //.transition() //.attr(\"stroke-opacity\", 1)\n  .attr(\"height\", Polymer.STICKHEIGHT).attr(\"y\", -Polymer.STICKHEIGHT / 2).attr(\"rx\", 0).attr(\"ry\", 0); //  .duration(Polymer.transitionTime);\n\n  d3.select(this.highlight) //.transition()\n  .attr(\"width\", protLength + 5).attr(\"height\", Polymer.STICKHEIGHT + 5).attr(\"x\", this.getResXwithStickZoom(0.5) - 2.5).attr(\"y\", -Polymer.STICKHEIGHT / 2 - 2.5).attr(\"rx\", 0).attr(\"ry\", 0); // .duration(Polymer.transitionTime);\n\n  if (this.annotations) {\n    var annots = this.annotations;\n    var ca = annots.length;\n\n    for (var a = 0; a < ca; a++) {\n      var anno = annots[a];\n\n      if (typeof anno.seqDatum.uncertainBegin != \"undefined\") {\n        var fuzzyStart = anno.fuzzyStart; // fuzzyStart.setAttribute(\"d\", this.getAnnotationPieSliceApproximatePath(anno.seqDatum.uncertainBegin, anno.seqDatum.begin));\n\n        d3.select(fuzzyStart).attr(\"d\", this.getAnnotationRectPath(anno.seqDatum.uncertainBegin, anno.seqDatum.begin, anno)); // .duration(Polymer.transitionTime);\n      } // if (anno.seqDatum.begin && anno.seqDatum.end) {\n\n\n      var certain = anno.certain;\n      certain.setAttribute(\"d\", this.getAnnotationPieSliceApproximatePath(anno.seqDatum.begin, anno.seqDatum.end));\n      d3.select(certain)\n      /*.transition()*/\n      .attr(\"d\", this.getAnnotationRectPath(anno.seqDatum.begin, anno.seqDatum.end, anno)); // .duration(Polymer.transitionTime);\n      // }\n\n      if (typeof anno.seqDatum.uncertainEnd != \"undefined\") {\n        var fuzzyEnd = anno.fuzzyEnd; // fuzzyEnd.setAttribute(\"d\", this.getAnnotationPieSliceApproximatePath(anno.seqDatum.end, anno.seqDatum.uncertainEnd));\n\n        d3.select(fuzzyEnd)\n        /*.transition()*/\n        .attr(\"d\", this.getAnnotationRectPath(anno.seqDatum.end, anno.seqDatum.uncertainEnd, anno)); // .duration(Polymer.transitionTime);\n      }\n    }\n  }\n\n  var self = this; // var cubicInOut = d3.ease('cubic-in-out');\n  // d3.timer(function(elapsed) {\n  //     return update(elapsed / Polymer.transitionTime);\n  // });\n  // update(1)\n  //\n  // function update(interp) {\n\n  var labelTransform = d3.transform(self.labelSVG.getAttribute(\"transform\"));\n  var k = self.controller.svgElement.createSVGMatrix().rotate(labelTransform.rotate).translate(labelTranslateInterpol(1), Interactor.labelY); //.scale(z).translate(-c.x, -c.y);\n\n  self.labelSVG.transform.baseVal.initialize(self.controller.svgElement.createSVGTransformFromMatrix(k));\n  var currentLength = lengthInterpol(1);\n  d3.select(self.highlight).attr(\"width\", currentLength).attr(\"x\", -(currentLength / 2) + 0.5 * self.stickZoom);\n  d3.select(self.outline).attr(\"width\", currentLength).attr(\"x\", -(currentLength / 2) + 0.5 * self.stickZoom);\n  d3.select(self.background).attr(\"width\", currentLength).attr(\"x\", -(currentLength / 2) + 0.5 * self.stickZoom); // self.stickZoom = stickZoomInterpol(cubicInOut(interp))\n\n  self.setAllLinkCoordinates(); // if (interp === 1) { // finished - tidy up\n  // return true;\n  // } else if (interp > 1) {\n  //     return update(1);\n  // } else {\n  //     return false;\n  // }\n  // }\n  //d3.select(this.ticks).attr(\"opacity\", 0);\n\n  this.setScaleGroup();\n  d3.select(this.ticks)\n  /*.transition()*/\n  .attr(\"opacity\", 1); //.delay(Polymer.transitionTime * 0.8).duration(Polymer.transitionTime / 2);\n\n  self.busy = false;\n};\n\nPolymer.prototype.getResXwithStickZoom = function (r) {\n  if (r === \"n-n\") {\n    return -this.size / 2 * this.stickZoom - 20;\n  } else if (r === \"c-c\") {\n    return this.size / 2 * this.stickZoom + 20;\n  } else {\n    return (r - this.size / 2) * this.stickZoom;\n  }\n}; //calculate the  coordinates of a residue (relative to this.controller.container)\n\n\nPolymer.prototype.getResidueCoordinates = function (r, yOff) {\n  if (typeof r === \"undefined\") {\n    alert(\"Error: residue number is undefined\");\n  }\n\n  var x = this.getResXwithStickZoom(r * 1) * this.controller.z;\n  var y;\n\n  if (x !== 0) {\n    var l = Math.abs(x);\n    var a = Math.acos(x / l);\n    var rotRad = this.rotation / 360 * Math.PI * 2;\n    x = l * Math.cos(rotRad + a);\n    y = l * Math.sin(rotRad + a);\n\n    if (typeof yOff !== 'undefined') {\n      x += yOff * this.controller.z * Math.cos(rotRad + Math.PI / 2);\n      y += yOff * this.controller.z * Math.sin(rotRad + Math.PI / 2);\n    }\n  } else {\n    y = yOff;\n  }\n\n  x = x + this.cx;\n  y = y + this.cy;\n  return [x, y];\n};\n\nPolymer.prototype.clearPositionalFeatures = function () {\n  this.annotations = [];\n  this.annotationTypes = [];\n  if (this.annotationsSvgGroup) d3.select(this.annotationsSvgGroup).selectAll(\"*\").remove();\n};\n\nPolymer.prototype.setPositionalFeatures = function (posFeats) {\n  var _this2 = this;\n\n  if (posFeats) {\n    var annotationTypesSet = new Set(); // var y = -Interactor.STICKHEIGHT / 2;\n    //draw longest regions first\n\n    posFeats.sort(function (a, b) {\n      return b.end - b.begin - (a.end - a.begin);\n    });\n    this.annotations = posFeats;\n\n    if (this.annotations.length === 0) {\n      //~ alert(\"no annot\");\n      this.annotations.push(new Annotation(\"No annotations\", new SequenceFeature(null, 1 + \"-\" + this.size)));\n    }\n\n    var _loop = function _loop(i) {\n      var anno = posFeats[i];\n\n      if (anno.seqDatum.sequenceDatumString !== \"n-n\" && anno.seqDatum.sequenceDatumString !== \"c-c\") {\n        annotationTypesSet.add(anno.description);\n      }\n\n      anno.fuzzyStart = document.createElementNS(Config.svgns, \"path\");\n      anno.certain = document.createElementNS(Config.svgns, \"path\");\n      anno.fuzzyEnd = document.createElementNS(Config.svgns, \"path\");\n\n      if (_this2.form === 0) {\n        if (typeof anno.seqDatum.uncertainBegin != \"undefined\") {\n          anno.fuzzyStart.setAttribute(\"d\", _this2.getAnnotationPieSliceArcPath(anno.seqDatum.uncertainBegin, anno.seqDatum.begin));\n        } // if (anno.seqDatum.begin && anno.seqDatum.end) {\n\n\n        anno.certain.setAttribute(\"d\", _this2.getAnnotationPieSliceArcPath(anno.seqDatum.begin, anno.seqDatum.end)); // }\n\n        if (typeof anno.seqDatum.uncertainEnd != \"undefined\") {\n          anno.fuzzyEnd.setAttribute(\"d\", _this2.getAnnotationPieSliceArcPath(anno.seqDatum.end, anno.seqDatum.uncertainEnd));\n        }\n      } else {\n        if (typeof anno.seqDatum.uncertainBegin != \"undefined\") {\n          anno.fuzzyStart.setAttribute(\"d\", _this2.getAnnotationRectPath(anno.seqDatum.uncertainBegin, anno.seqDatum.begin, anno));\n        } // if (anno.seqDatum.begin && anno.seqDatum.end) {\n\n\n        anno.certain.setAttribute(\"d\", _this2.getAnnotationRectPath(anno.seqDatum.begin, anno.seqDatum.end, anno)); // }\n\n        if (typeof anno.seqDatum.uncertainEnd != \"undefined\") {\n          anno.fuzzyEnd.setAttribute(\"d\", _this2.getAnnotationRectPath(anno.seqDatum.end, anno.seqDatum.uncertainEnd, anno));\n        }\n      }\n\n      anno.fuzzyStart.setAttribute(\"stroke-width\", \"1\");\n      anno.fuzzyStart.setAttribute(\"fill-opacity\", \"0.6\");\n      anno.certain.setAttribute(\"stroke-width\", \"1\");\n      anno.certain.setAttribute(\"fill-opacity\", \"0.6\");\n      anno.fuzzyEnd.setAttribute(\"stroke-width\", \"1\");\n      anno.fuzzyEnd.setAttribute(\"fill-opacity\", \"0.6\");\n      var text = anno.description + \" [\" + (anno.seqDatum ? anno.seqDatum.toString() : anno.seqDatum.begin + \" - \" + anno.seqDatum.end) + \"]\";\n      anno.fuzzyStart.name = text;\n      anno.certain.name = text;\n      anno.fuzzyEnd.name = text;\n      var xlv = _this2.controller;\n      var self = _this2;\n\n      var toolTipFunc = function toolTipFunc(evt) {\n        var el = evt.target.correspondingUseElement ? evt.target.correspondingUseElement : evt.target;\n        xlv.preventDefaultsAndStopPropagation(evt);\n        xlv.setTooltip(el.name, el.getAttribute('fill'));\n        self.showHighlight(true);\n      };\n\n      anno.fuzzyStart.onmouseover = toolTipFunc;\n      anno.certain.onmouseover = toolTipFunc;\n      anno.fuzzyEnd.onmouseover = toolTipFunc; // if (this.annotationsSvgGroup) { //hack\n\n      if (typeof anno.seqDatum.uncertainBegin != \"undefined\") {\n        _this2.annotationsSvgGroup.appendChild(anno.fuzzyStart);\n      }\n\n      _this2.annotationsSvgGroup.appendChild(anno.certain);\n\n      if (typeof anno.seqDatum.uncertainEnd != \"undefined\") {\n        _this2.annotationsSvgGroup.appendChild(anno.fuzzyEnd);\n      } // }\n\n    };\n\n    for (var i = 0; i < posFeats.length; i++) {\n      _loop(i);\n    }\n\n    this.annotationTypes = Array.from(annotationTypesSet.values());\n  }\n};\n\nPolymer.stepsInArc = 5;\n\nPolymer.prototype.getAnnotationPieSliceArcPath = function (startRes, endRes) {\n  // var startAngle = ((startRes - 1) / this.size) * 360;\n  // var endAngle = ((endRes - 1) / this.size) * 360;\n  var startAngle, endAngle;\n\n  if (startRes === \"n-n\") {\n    startAngle = -20; //((startRes - 1) / this.size) * 360;\n\n    endAngle = (endRes - 1) / this.size * 360;\n  } else if (endRes === \"c-c\") {\n    startAngle = (startRes - 1) / this.size * 360;\n    endAngle = +20; //((endRes) / this.size) * 360;\n  } else {\n    startAngle = (startRes - 1) / this.size * 360;\n    endAngle = (endRes - 1) / this.size * 360;\n  }\n\n  var radius = this.getBlobRadius() - 2;\n  var arcStart = Interactor.trig(radius, startAngle - 90);\n  var arcEnd = Interactor.trig(radius, endAngle - 90);\n  var largeArch = 0;\n\n  if (endAngle - startAngle > 180 || endAngle === startAngle) {\n    largeArch = 1;\n  }\n\n  return \"M0,0 L\" + arcStart.x + \",\" + arcStart.y + \" A\" + radius + \",\" + radius + \" 0 \" + largeArch + \" 1 \" + arcEnd.x + \",\" + arcEnd.y + \" Z\";\n};\n\nPolymer.prototype.getAnnotationPieSliceApproximatePath = function (startRes, endRes) {\n  //approximate pie slice\n  var startAngle, endAngle;\n\n  if (startRes === \"n-n\") {\n    startAngle = -20; //((startRes - 1) / this.size) * 360;\n\n    endAngle = endRes / this.size * 360;\n  } else if (endRes === \"c-c\") {\n    startAngle = (startRes - 1) / this.size * 360;\n    endAngle = +20; //((endRes) / this.size) * 360;\n  } else {\n    startAngle = (startRes - 1) / this.size * 360;\n    endAngle = endRes / this.size * 360;\n  }\n\n  var pieRadius = this.getBlobRadius() - 2; // var arcStart = Interactor.trig(pieRadius, startAngle - 90);\n  // var arcEnd = Interactor.trig(pieRadius, endAngle - 90);\n\n  var approximatePiePath = \"M 0,0\";\n  var stepsInArc = 5;\n\n  for (var sia = 0; sia <= Polymer.stepsInArc; sia++) {\n    var angle = startAngle + (endAngle - startAngle) * (sia / stepsInArc);\n    var siaCoord = Interactor.trig(pieRadius, angle - 90);\n    approximatePiePath += \" L \" + siaCoord.x + \",\" + siaCoord.y;\n  }\n\n  approximatePiePath += \" L \" + 0 + \",\" + 0;\n  approximatePiePath += \"  Z\";\n  return approximatePiePath;\n};\n\nPolymer.prototype.getAnnotationRectPath = function (startRes, endRes, anno) {\n  //domain as rectangle path\n  var top, bottom, rungHeight;\n  var rung = this.annotationTypes.indexOf(anno.description);\n\n  if (rung === -1) {\n    bottom = Polymer.STICKHEIGHT / 2;\n    top = -Polymer.STICKHEIGHT / 2;\n  } else {\n    rungHeight = Polymer.STICKHEIGHT / this.annotationTypes.length;\n    top = -Polymer.STICKHEIGHT / 2 + rung * rungHeight; // todo - looks like top and bottom wrong way round?\n\n    bottom = top + rungHeight;\n  }\n\n  var annotX, annotSize, annotLength;\n\n  if (startRes === \"n-n\") {\n    annotX = this.getResXwithStickZoom(0 - 0.5) - 20; // var annotSize = (1 + (endRes - startRes));\n\n    annotLength = 20; //annotSize * this.stickZoom;\n  } else if (endRes === \"c-c\") {\n    annotX = this.getResXwithStickZoom(startRes - 0 + 0.5); // var annotSize = (1 + (endRes - startRes));\n\n    annotLength = 20; //annotSize * this.stickZoom;\n  } else {\n    annotX = this.getResXwithStickZoom(startRes - 0.5); // todo - look out for positions being strings\n\n    annotSize = 1 + (endRes - startRes);\n    annotLength = annotSize * this.stickZoom;\n  }\n\n  var rectPath = \"M \" + annotX + \",\" + bottom;\n\n  for (var sia = 0; sia <= Polymer.stepsInArc; sia++) {\n    var step = annotX + annotLength * (sia / Polymer.stepsInArc);\n    rectPath += \" L \" + step + \",\" + top;\n  }\n\n  rectPath += \" L \" + (annotX + annotLength) + \",\" + bottom + \" Z\";\n  return rectPath;\n};\n\nmodule.exports = Polymer;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvbW9kZWwvaW50ZXJhY3Rvci9Qb2x5bWVyLmpzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8veGlORVQvLi9zcmMvbW9kZWwvaW50ZXJhY3Rvci9Qb2x5bWVyLmpzPzViODMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gICAgICB4aU5FVCBJbnRlcmFjdGlvbiBWaWV3ZXJcbi8vICAgICAgQ29weXJpZ2h0IDIwMTMgUmFwcHNpbGJlciBMYWJvcmF0b3J5XG4vL1xuLy8gICAgICBUaGlzIHByb2R1Y3QgaW5jbHVkZXMgc29mdHdhcmUgZGV2ZWxvcGVkIGF0XG4vLyAgICAgIHRoZSBSYXBwc2lsYmVyIExhYm9yYXRvcnkgKGh0dHA6Ly93d3cucmFwcHNpbGJlcmxhYi5vcmcvKS5cbi8vXG4vLyAgICAgIFBvbHltZXIuanNcbi8vXG4vLyAgICAgIGF1dGhvcnM6IEx1dHogRmlzY2hlciwgQ29saW4gQ29tYmVcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbmNvbnN0IGQzID0gcmVxdWlyZSgnZDMnKTtcbmNvbnN0IEludGVyYWN0b3IgPSByZXF1aXJlKCcuL0ludGVyYWN0b3InKTtcbmNvbnN0IEFubm90YXRpb24gPSByZXF1aXJlKCcuL0Fubm90YXRpb24nKTtcbmNvbnN0IFNlcXVlbmNlRmVhdHVyZSA9IHJlcXVpcmUoJy4vLi4vU2VxdWVuY2VGZWF0dXJlJyk7XG4vL3ZhciBSb3RhdG9yID0gcmVxdWlyZSgnLi4vLi4vY29udHJvbGxlci9Sb3RhdG9yJyk7XG5jb25zdCBDb25maWcgPSByZXF1aXJlKCcuLi8uLi9jb250cm9sbGVyL0NvbmZpZycpO1xuXG5Qb2x5bWVyLlNUSUNLSEVJR0hUID0gMjA7IC8vaGVpZ2h0IG9mIHN0aWNrIGluIHBpeGVsc1xuUG9seW1lci5NQVhTSVpFID0gMDsgLy8gcmVzaWR1ZSBjb3VudCBvZiBsb25nZXN0IHNlcXVlbmNlXG5Qb2x5bWVyLnRyYW5zaXRpb25UaW1lID0gNjUwO1xuXG5mdW5jdGlvbiBQb2x5bWVyKCkge31cblxuUG9seW1lci5wcm90b3R5cGUgPSBuZXcgSW50ZXJhY3RvcigpO1xuXG4vL3NlcXVlbmNlID0gYW1pbm8gYWNpZHMgaW4gVVBQRVJDQVNFLCBkaWdpdHMgb3IgbG93ZXJjYXNlIGNhbiBiZSB1c2VkIGZvciBtb2RpZmljYXRpb24gaW5mb1xuUG9seW1lci5wcm90b3R5cGUuc2V0U2VxdWVuY2UgPSBmdW5jdGlvbihzZXF1ZW5jZSkge1xuICAgIC8vcmVtb3ZlIG1vZGlmaWNhdGlvbiBzaXRlIGluZm8gZnJvbSBzZXF1ZW5jZVxuICAgIHRoaXMuc2VxdWVuY2UgPSBzZXF1ZW5jZS5yZXBsYWNlKC9bXkEtWl0vZywgJycpO1xuICAgIHRoaXMuc2l6ZSA9IHRoaXMuc2VxdWVuY2UubGVuZ3RoO1xufVxuXG4vL2J5IHRoZSB0aW1lIHdlIGdldCBoZXJlIGFsbCBwcm90J3MgaGF2ZSBoYWQgdGhlaXIgc2VxdWVuY2Ugc2V0LCBzbyBQb2x5bWVyLk1BWFNJWkUgaGFzIGNvcnJlY3QgdmFsdWU7XG5Qb2x5bWVyLnByb3RvdHlwZS5pbml0ID0gZnVuY3Rpb24oKSB7XG4gICAgLy90aGlzLnNldEZvcm0odGhpcy5mb3JtKTtcbiAgICBpZiAodGhpcy5zZWxmTGluaykgdGhpcy5zZWxmTGluay5pbml0U2VsZkxpbmtTVkcoKTtcbiAgICB0aGlzLnNldEFsbExpbmtDb29yZGluYXRlcygpO1xufTtcblxuUG9seW1lci5wcm90b3R5cGUuZ2V0QmxvYlJhZGl1cyA9IGZ1bmN0aW9uKCkge1xuICAgIC8vfiBpZiAodGhpcy5zaXplKSB7XG4gICAgLy9+IHJldHVybiBNYXRoLnNxcnQodGhpcy5zaXplIC8gMiAvIE1hdGguUEkpO1xuICAgIC8vfiB9XG4gICAgLy9+IGVsc2VcbiAgICByZXR1cm4gMTA7XG59O1xuXG5Qb2x5bWVyLnByb3RvdHlwZS5zaG93SGlnaGxpZ2h0ID0gZnVuY3Rpb24oc2hvdykge1xuICAgIGlmIChzaG93ID09PSB0cnVlKSB7XG4gICAgICAgIHRoaXMuaGlnaGxpZ2h0LnNldEF0dHJpYnV0ZShcInN0cm9rZS1vcGFjaXR5XCIsIFwiMVwiKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLmhpZ2hsaWdodC5zZXRBdHRyaWJ1dGUoXCJzdHJva2Utb3BhY2l0eVwiLCBcIjBcIik7XG4gICAgfVxufTtcblxuUG9seW1lci5taW5YRGlzdCA9IDMwO1xuUG9seW1lci5wcm90b3R5cGUuc2V0U3RpY2tTY2FsZSA9IGZ1bmN0aW9uKHNjYWxlLCBzdmdQKSB7XG4gICAgY29uc3Qgb2xkU2NhbGUgPSB0aGlzLnN0aWNrWm9vbTtcblxuICAgIC8vZGlzdCBmcm9tIGNlbnRyZVxuICAgIGNvbnN0IGR4ID0gKHRoaXMuY3ggLSBzdmdQLngpO1xuICAgIGNvbnN0IGR5ID0gKHRoaXMuY3kgLSBzdmdQLnkpO1xuXG4gICAgLy8gbmV3IGRpc3QgZnJvbSBjZW50cmVcbiAgICBjb25zdCBueCA9IGR4ICogc2NhbGUgLyBvbGRTY2FsZTtcbiAgICBjb25zdCBueSA9IGR5ICogc2NhbGUgLyBvbGRTY2FsZTtcblxuICAgIC8vcmVxdWlyZWQgY2hhbmdlXG4gICAgY29uc3QgcnggPSBueCAtIGR4O1xuICAgIGxldCByeSA9IG55IC0gZHk7XG5cbiAgICBpZiAodGhpcy5yb3RhdGlvbiA9PT0gMCB8fCB0aGlzLnJvdGF0aW9uID09PSAxODApIHtcbiAgICAgICAgcnkgPSAwO1xuICAgIH1cblxuICAgIC8vbmV3IHBvc1xuICAgIGNvbnN0IHggPSB0aGlzLmN4ICsgcng7XG4gICAgY29uc3QgeSA9IHRoaXMuY3kgKyByeTtcblxuICAgIHRoaXMuc3RpY2tab29tID0gc2NhbGU7XG4gICAgdGhpcy5zY2FsZSgpO1xuICAgIHRoaXMuc2V0UG9zaXRpb24oeCwgeSlcbiAgICB0aGlzLnNldEFsbExpbmtDb29yZGluYXRlcygpO1xufTtcblxuUG9seW1lci5wcm90b3R5cGUuc2NhbGUgPSBmdW5jdGlvbigpIHtcbiAgICBjb25zdCBwcm90TGVuZ3RoID0gKHRoaXMuc2l6ZSkgKiB0aGlzLnN0aWNrWm9vbTtcbiAgICBpZiAodGhpcy5mb3JtID09PSAxKSB7XG4gICAgICAgIGNvbnN0IGxhYmVsVHJhbnNmb3JtID0gZDMudHJhbnNmb3JtKHRoaXMubGFiZWxTVkcuZ2V0QXR0cmlidXRlKFwidHJhbnNmb3JtXCIpKTtcbiAgICAgICAgY29uc3QgayA9IHRoaXMuY29udHJvbGxlci5zdmdFbGVtZW50LmNyZWF0ZVNWR01hdHJpeCgpLnJvdGF0ZShsYWJlbFRyYW5zZm9ybS5yb3RhdGUpXG4gICAgICAgICAgICAudHJhbnNsYXRlKCgtKCgodGhpcy5zaXplIC8gMikgKiB0aGlzLnN0aWNrWm9vbSkgKyAodGhpcy5uVGVybWludXNGZWF0dXJlID8gMjUgOiAxMCkpKSwgSW50ZXJhY3Rvci5sYWJlbFkpOyAvLy5zY2FsZSh6KS50cmFuc2xhdGUoLWMueCwgLWMueSk7XG4gICAgICAgIHRoaXMubGFiZWxTVkcudHJhbnNmb3JtLmJhc2VWYWwuaW5pdGlhbGl6ZSh0aGlzLmNvbnRyb2xsZXIuc3ZnRWxlbWVudC5jcmVhdGVTVkdUcmFuc2Zvcm1Gcm9tTWF0cml4KGspKTtcblxuICAgICAgICBpZiAodGhpcy5hbm5vdGF0aW9ucykge1xuICAgICAgICAgICAgY29uc3QgY2EgPSB0aGlzLmFubm90YXRpb25zLmxlbmd0aDtcbiAgICAgICAgICAgIGZvciAobGV0IGEgPSAwOyBhIDwgY2E7IGErKykge1xuICAgICAgICAgICAgICAgIGNvbnN0IGFubm8gPSB0aGlzLmFubm90YXRpb25zW2FdO1xuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgYW5uby5zZXFEYXR1bS51bmNlcnRhaW5CZWdpbiAhPSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgICAgICAgICAgICAgIGFubm8uZnV6enlTdGFydC5zZXRBdHRyaWJ1dGUoXCJkXCIsIHRoaXMuZ2V0QW5ub3RhdGlvblJlY3RQYXRoKGFubm8uc2VxRGF0dW0udW5jZXJ0YWluQmVnaW4sIGFubm8uc2VxRGF0dW0uYmVnaW4sIGFubm8pKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBhbm5vLmNlcnRhaW4uc2V0QXR0cmlidXRlKFwiZFwiLCB0aGlzLmdldEFubm90YXRpb25SZWN0UGF0aChhbm5vLnNlcURhdHVtLmJlZ2luLCBhbm5vLnNlcURhdHVtLmVuZCwgYW5ubykpO1xuXG4gICAgICAgICAgICAgICAgaWYgKGFubm8uc2VxRGF0dW0udW5jZXJ0YWluRW5kKSB7XG4gICAgICAgICAgICAgICAgICAgIGFubm8uZnV6enlFbmQuc2V0QXR0cmlidXRlKFwiZFwiLCB0aGlzLmdldEFubm90YXRpb25SZWN0UGF0aChhbm5vLnNlcURhdHVtLmVuZCwgYW5uby5zZXFEYXR1bS51bmNlcnRhaW5FbmQsIGFubm8pKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBkMy5zZWxlY3QodGhpcy5iYWNrZ3JvdW5kKVxuICAgICAgICAgICAgLmF0dHIoXCJ3aWR0aFwiLCBwcm90TGVuZ3RoKVxuICAgICAgICAgICAgLmF0dHIoXCJ4XCIsIHRoaXMuZ2V0UmVzWHdpdGhTdGlja1pvb20oMC41KSk7XG5cbiAgICAgICAgZDMuc2VsZWN0KHRoaXMub3V0bGluZSlcbiAgICAgICAgICAgIC5hdHRyKFwid2lkdGhcIiwgcHJvdExlbmd0aClcbiAgICAgICAgICAgIC5hdHRyKFwieFwiLCB0aGlzLmdldFJlc1h3aXRoU3RpY2tab29tKDAuNSkpO1xuXG4gICAgICAgIGQzLnNlbGVjdCh0aGlzLmhpZ2hsaWdodClcbiAgICAgICAgICAgIC5hdHRyKFwid2lkdGhcIiwgcHJvdExlbmd0aCArIDUpXG4gICAgICAgICAgICAuYXR0cihcInhcIiwgdGhpcy5nZXRSZXNYd2l0aFN0aWNrWm9vbSgwLjUpIC0gMi41KTtcblxuXG4gICAgICAgIHRoaXMuc2V0U2NhbGVHcm91cCgpO1xuICAgIH1cbn07XG5cblBvbHltZXIucHJvdG90eXBlLnNldFNjYWxlR3JvdXAgPSBmdW5jdGlvbigpIHtcbiAgICB0aGlzLnVwcGVyR3JvdXAuYXBwZW5kQ2hpbGQodGhpcy50aWNrcyk7IC8vd2lsbCBkbyBub3RoaW5nIGlmIHRoaXMudGlja3MgYWxyZWFkeSBhcHBlbmRlZCB0byB0aGlzLnVwcGVyZ3JvdXBcbiAgICBkMy5zZWxlY3QodGhpcy50aWNrcykuc2VsZWN0QWxsKFwiKlwiKS5yZW1vdmUoKTtcblxuICAgIHRoaXMuc2NhbGVMYWJlbHMgPSBbXTtcbiAgICBjb25zdCBTY2FsZVRpY2tzUGVyTGFiZWwgPSAyOyAvLyB2YXJpZXMgd2l0aCBzY2FsZT9cbiAgICBsZXQgdGljayA9IC0xO1xuICAgIGNvbnN0IGxhc3RUaWNrWCA9IHRoaXMuZ2V0UmVzWHdpdGhTdGlja1pvb20odGhpcy5zaXplKTtcblxuICAgIGZvciAobGV0IHJlcyA9IDE7IHJlcyA8PSB0aGlzLnNpemU7IHJlcysrKSB7XG4gICAgICAgIGlmIChyZXMgPT09IDEgfHxcbiAgICAgICAgICAgICgocmVzICUgMTAwID09PSAwKSAmJiAoMjAwICogdGhpcy5zdGlja1pvb20gPiBQb2x5bWVyLm1pblhEaXN0KSkgfHxcbiAgICAgICAgICAgICgocmVzICUgMTAgPT09IDApICYmICgyMCAqIHRoaXMuc3RpY2tab29tID4gUG9seW1lci5taW5YRGlzdCkpXG4gICAgICAgICkge1xuICAgICAgICAgICAgY29uc3QgdHggPSB0aGlzLmdldFJlc1h3aXRoU3RpY2tab29tKHJlcyk7XG4gICAgICAgICAgICBpZiAodGhpcy5zdGlja1pvb20gPj0gOCB8fCByZXMgIT09IDEpIHtcbiAgICAgICAgICAgICAgICB0aWNrQXQodGhpcywgdHgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGljayA9ICh0aWNrICsgMSkgJSBTY2FsZVRpY2tzUGVyTGFiZWw7XG4gICAgICAgICAgICAvLyBkb2VzIHRoaXMgb25lIGdldCBhIGxhYmVsP1xuICAgICAgICAgICAgaWYgKHRpY2sgPT09IDApIHsgLy8gJiYgdHggPiAyMCkge1xuICAgICAgICAgICAgICAgIGlmICgodHggKyBQb2x5bWVyLm1pblhEaXN0KSA8IGxhc3RUaWNrWCkge1xuICAgICAgICAgICAgICAgICAgICBzY2FsZUxhYmVsQXQodGhpcywgcmVzLCB0eCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLnN0aWNrWm9vbSA+PSA4KSB7XG4gICAgICAgICAgICBjb25zdCBzZXFMYWJlbEdyb3VwID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKENvbmZpZy5zdmducywgXCJnXCIpO1xuICAgICAgICAgICAgc2VxTGFiZWxHcm91cC5zZXRBdHRyaWJ1dGUoXCJ0cmFuc2Zvcm1cIiwgXCJ0cmFuc2xhdGUoXCIgKyB0aGlzLmdldFJlc1h3aXRoU3RpY2tab29tKHJlcykgKyBcIiBcIiArIDAgKyBcIilcIik7XG4gICAgICAgICAgICBjb25zdCBzZXFMYWJlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUyhDb25maWcuc3ZnbnMsIFwidGV4dFwiKTtcbiAgICAgICAgICAgIHNlcUxhYmVsLnNldEF0dHJpYnV0ZSgnZm9udC1mYW1pbHknLCBcIidDb3VyaWVyIE5ldycsIG1vbm9zcGFjZVwiKTtcbiAgICAgICAgICAgIHNlcUxhYmVsLnNldEF0dHJpYnV0ZSgnZm9udC1zaXplJywgJzEwcHgnKTtcbiAgICAgICAgICAgIHNlcUxhYmVsLnNldEF0dHJpYnV0ZShcInRleHQtYW5jaG9yXCIsIFwibWlkZGxlXCIpO1xuICAgICAgICAgICAgc2VxTGFiZWwuc2V0QXR0cmlidXRlKFwieFwiLCBcIjBcIik7XG4gICAgICAgICAgICBzZXFMYWJlbC5zZXRBdHRyaWJ1dGUoXCJ5XCIsIFwiM1wiKTtcbiAgICAgICAgICAgIHNlcUxhYmVsLmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKHRoaXMuc2VxdWVuY2VbcmVzIC0gMV0pKTtcbiAgICAgICAgICAgIHNlcUxhYmVsR3JvdXAuYXBwZW5kQ2hpbGQoc2VxTGFiZWwpO1xuICAgICAgICAgICAgdGhpcy5zY2FsZUxhYmVscy5wdXNoKHNlcUxhYmVsKTtcbiAgICAgICAgICAgIHRoaXMudGlja3MuYXBwZW5kQ2hpbGQoc2VxTGFiZWxHcm91cCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgc2NhbGVMYWJlbEF0KHRoaXMsIHRoaXMuc2l6ZSwgbGFzdFRpY2tYKTtcbiAgICBpZiAodGhpcy5zdGlja1pvb20gPj0gOCkge1xuICAgICAgICB0aWNrQXQodGhpcywgbGFzdFRpY2tYKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBzY2FsZUxhYmVsQXQoc2VsZiwgdGV4dCwgdGlja1gpIHtcbiAgICAgICAgY29uc3Qgc2NhbGVMYWJlbEdyb3VwID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKENvbmZpZy5zdmducywgXCJnXCIpO1xuICAgICAgICBzY2FsZUxhYmVsR3JvdXAuc2V0QXR0cmlidXRlKFwidHJhbnNmb3JtXCIsIFwidHJhbnNsYXRlKFwiICsgdGlja1ggKyBcIiBcIiArIDAgKyBcIilcIik7XG4gICAgICAgIGNvbnN0IHNjYWxlTGFiZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50TlMoQ29uZmlnLnN2Z25zLCBcInRleHRcIik7XG4gICAgICAgIHNjYWxlTGFiZWwuc2V0QXR0cmlidXRlKFwiY2xhc3NcIiwgXCJQb2x5bWVyIHhsdl90ZXh0IFBvbHltZXJMYWJlbFwiKTtcbiAgICAgICAgc2NhbGVMYWJlbC5zZXRBdHRyaWJ1dGUoJ2ZvbnQtZmFtaWx5JywgXCInQ291cmllciBOZXcnLCBtb25vc3BhY2VcIik7XG4gICAgICAgIHNjYWxlTGFiZWwuc2V0QXR0cmlidXRlKCdmb250LXNpemUnLCAnMTQnKTtcbiAgICAgICAgc2NhbGVMYWJlbC5zZXRBdHRyaWJ1dGUoXCJ0ZXh0LWFuY2hvclwiLCBcIm1pZGRsZVwiKTtcbiAgICAgICAgc2NhbGVMYWJlbC5zZXRBdHRyaWJ1dGUoXCJ4XCIsIFwiMFwiKTtcbiAgICAgICAgc2NhbGVMYWJlbC5zZXRBdHRyaWJ1dGUoXCJ5XCIsIFBvbHltZXIuU1RJQ0tIRUlHSFQgKyA0KTtcbiAgICAgICAgc2NhbGVMYWJlbC5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZSh0ZXh0KSk7XG4gICAgICAgIHNjYWxlTGFiZWxHcm91cC5hcHBlbmRDaGlsZChzY2FsZUxhYmVsKTtcbiAgICAgICAgc2VsZi5zY2FsZUxhYmVscy5wdXNoKHNjYWxlTGFiZWwpO1xuICAgICAgICBzZWxmLnRpY2tzLmFwcGVuZENoaWxkKHNjYWxlTGFiZWxHcm91cCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdGlja0F0KHNlbGYsIHRpY2tYKSB7XG4gICAgICAgIGNvbnN0IHRpY2sgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50TlMoQ29uZmlnLnN2Z25zLCBcImxpbmVcIik7XG4gICAgICAgIHRpY2suc2V0QXR0cmlidXRlKFwieDFcIiwgdGlja1gpO1xuICAgICAgICB0aWNrLnNldEF0dHJpYnV0ZShcInkxXCIsIFwiNVwiKTtcbiAgICAgICAgdGljay5zZXRBdHRyaWJ1dGUoXCJ4MlwiLCB0aWNrWCk7XG4gICAgICAgIHRpY2suc2V0QXR0cmlidXRlKFwieTJcIiwgXCIxMFwiKTtcbiAgICAgICAgdGljay5zZXRBdHRyaWJ1dGUoXCJzdHJva2VcIiwgXCJibGFja1wiKTtcbiAgICAgICAgc2VsZi50aWNrcy5hcHBlbmRDaGlsZCh0aWNrKTtcbiAgICB9XG59O1xuXG5Qb2x5bWVyLnByb3RvdHlwZS5zZXRGb3JtID0gZnVuY3Rpb24oZm9ybSwgc3ZnUCkge1xuICAgIGlmICh0aGlzLmJ1c3kgIT09IHRydWUpIHtcbiAgICAgICAgaWYgKGZvcm0gPT09IDEpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLmZvcm0gIT09IDEpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnRvU3RpY2soKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIGlmICh0aGlzLmZvcm0gIT09IDApIHtcbiAgICAgICAgICAgIHRoaXMudG9DaXJjbGUoc3ZnUCk7XG4gICAgICAgICAgICAvLyB2YXIgciA9IHRoaXMuZ2V0QmxvYlJhZGl1cygpO1xuXG4gICAgICAgIH1cbiAgICAgICAgLy8gfVxuICAgIH1cbn07XG5cblBvbHltZXIucHJvdG90eXBlLnRvQ2lyY2xlID0gZnVuY3Rpb24oc3ZnUCkge1xuICAgIC8vc3ZnUCA9IG51bGw7Ly8gdGVtcCBoYWNrIC0geW91IGNhbiB1bmNvbW1lbnQgdGhpcyBpcyB5b3UgZXhwZXJpZW5jZSB0aGluZ3MgJ2ZseWluZyBvZmYgc2NyZWVuJ1xuICAgIHRoaXMuYnVzeSA9IHRydWU7XG5cbiAgICAvLyB2YXIgcHJvdExlbmd0aCA9IHRoaXMuc2l6ZSAqIHRoaXMuc3RpY2tab29tO1xuICAgIGNvbnN0IHIgPSB0aGlzLmdldEJsb2JSYWRpdXMoKTtcbiAgICAvL1xuICAgIGQzLnNlbGVjdCh0aGlzLmJhY2tncm91bmQpLnRyYW5zaXRpb24oKVxuICAgICAgICAuYXR0cihcInhcIiwgLXIpLmF0dHIoXCJ5XCIsIC1yKVxuICAgICAgICAuYXR0cihcIndpZHRoXCIsIHIgKiAyKS5hdHRyKFwiaGVpZ2h0XCIsIHIgKiAyKVxuICAgICAgICAuYXR0cihcInJ4XCIsIHIpLmF0dHIoXCJyeVwiLCByKVxuICAgICAgICAuZHVyYXRpb24oUG9seW1lci50cmFuc2l0aW9uVGltZSk7XG4gICAgZDMuc2VsZWN0KHRoaXMub3V0bGluZSkudHJhbnNpdGlvbigpXG4gICAgICAgIC5hdHRyKFwieFwiLCAtcikuYXR0cihcInlcIiwgLXIpXG4gICAgICAgIC5hdHRyKFwid2lkdGhcIiwgciAqIDIpLmF0dHIoXCJoZWlnaHRcIiwgciAqIDIpXG4gICAgICAgIC5hdHRyKFwicnhcIiwgcikuYXR0cihcInJ5XCIsIHIpXG4gICAgICAgIC5kdXJhdGlvbihQb2x5bWVyLnRyYW5zaXRpb25UaW1lKTtcbiAgICBkMy5zZWxlY3QodGhpcy5hbm5vdGF0aW9uc1N2Z0dyb3VwKS50cmFuc2l0aW9uKClcbiAgICAgICAgLmF0dHIoXCJ0cmFuc2Zvcm1cIiwgXCJzY2FsZSgxLCAxKVwiKVxuICAgICAgICAuZHVyYXRpb24oUG9seW1lci50cmFuc2l0aW9uVGltZSk7XG4gICAgZDMuc2VsZWN0KHRoaXMuaGlnaGxpZ2h0KS50cmFuc2l0aW9uKClcbiAgICAgICAgLmF0dHIoXCJ4XCIsIC1yKS5hdHRyKFwieVwiLCAtcilcbiAgICAgICAgLmF0dHIoXCJ3aWR0aFwiLCByICogMikuYXR0cihcImhlaWdodFwiLCByICogMilcbiAgICAgICAgLmF0dHIoXCJyeFwiLCByKS5hdHRyKFwicnlcIiwgcilcbiAgICAgICAgLmR1cmF0aW9uKFBvbHltZXIudHJhbnNpdGlvblRpbWUpO1xuXG4gICAgY29uc3Qgc3RpY2tab29tSW50ZXJwb2wgPSBkMy5pbnRlcnBvbGF0ZSh0aGlzLnN0aWNrWm9vbSwgMCk7XG4gICAgLy8gdmFyIHJvdGF0aW9uSW50ZXJwb2wgPSBkMy5pbnRlcnBvbGF0ZSgodGhpcy5yb3RhdGlvbiA+IDE4MCkgPyB0aGlzLnJvdGF0aW9uIC0gMzYwIDogdGhpcy5yb3RhdGlvbiwgMCk7XG4gICAgY29uc3QgbGFiZWxUcmFuc2Zvcm0gPSBkMy50cmFuc2Zvcm0odGhpcy5sYWJlbFNWRy5nZXRBdHRyaWJ1dGUoXCJ0cmFuc2Zvcm1cIikpO1xuICAgIGNvbnN0IGxhYmVsU3RhcnRQb2ludCA9IGxhYmVsVHJhbnNmb3JtLnRyYW5zbGF0ZVswXTtcbiAgICBjb25zdCBsYWJlbFRyYW5zbGF0ZUludGVycG9sID0gZDMuaW50ZXJwb2xhdGUobGFiZWxTdGFydFBvaW50LCAtKHIgKyA1KSk7XG5cbiAgICBsZXQgeEludGVycG9sID0gbnVsbCxcbiAgICAgICAgeUludGVycG9sID0gbnVsbDtcbiAgICBpZiAodHlwZW9mIHN2Z1AgIT09ICd1bmRlZmluZWQnICYmIHN2Z1AgIT09IG51bGwpIHtcbiAgICAgICAgeEludGVycG9sID0gZDMuaW50ZXJwb2xhdGUodGhpcy5jeCwgc3ZnUC54KTtcbiAgICAgICAgeUludGVycG9sID0gZDMuaW50ZXJwb2xhdGUodGhpcy5jeSwgc3ZnUC55KTtcbiAgICB9XG5cbiAgICBjb25zdCBzZWxmID0gdGhpcztcbiAgICBkMy5zZWxlY3QodGhpcy50aWNrcykudHJhbnNpdGlvbigpLmF0dHIoXCJvcGFjaXR5XCIsIDApLmR1cmF0aW9uKFBvbHltZXIudHJhbnNpdGlvblRpbWUgLyA0KVxuICAgICAgICAuZWFjaChcImVuZFwiLFxuICAgICAgICAgICAgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgZDMuc2VsZWN0KHRoaXMpLnNlbGVjdEFsbChcIipcIikucmVtb3ZlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICk7XG5cbiAgICBkMy5zZWxlY3QodGhpcy5oaWdobGlnaHQpLnRyYW5zaXRpb24oKVxuICAgICAgICAuYXR0cihcIndpZHRoXCIsIChyICogMikgKyA1KS5hdHRyKFwiaGVpZ2h0XCIsIChyICogMikgKyA1KVxuICAgICAgICAuYXR0cihcInhcIiwgLXIgLSAyLjUpLmF0dHIoXCJ5XCIsIC1yIC0gMi41KVxuICAgICAgICAuYXR0cihcInJ4XCIsIHIgKyAyLjUpLmF0dHIoXCJyeVwiLCByICsgMi41KVxuICAgICAgICAuZHVyYXRpb24oUG9seW1lci50cmFuc2l0aW9uVGltZSk7XG5cbiAgICBpZiAodGhpcy5hbm5vdGF0aW9ucykge1xuICAgICAgICBjb25zdCBhbm5vdHMgPSB0aGlzLmFubm90YXRpb25zO1xuICAgICAgICBjb25zdCBjYSA9IGFubm90cy5sZW5ndGg7XG4gICAgICAgIGZvciAobGV0IGEgPSAwOyBhIDwgY2E7IGErKykge1xuICAgICAgICAgICAgY29uc3QgYW5ubyA9IGFubm90c1thXTtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgYW5uby5zZXFEYXR1bS51bmNlcnRhaW5CZWdpbiAhPSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgZnV6enlTdGFydCA9IGFubm8uZnV6enlTdGFydDtcbiAgICAgICAgICAgICAgICBkMy5zZWxlY3QoZnV6enlTdGFydCkudHJhbnNpdGlvbigpLmF0dHIoXCJkXCIsIHRoaXMuZ2V0QW5ub3RhdGlvblBpZVNsaWNlQXBwcm94aW1hdGVQYXRoKGFubm8uc2VxRGF0dW0udW5jZXJ0YWluQmVnaW4sIGFubm8uc2VxRGF0dW0uYmVnaW4pKVxuICAgICAgICAgICAgICAgICAgICAuZHVyYXRpb24oUG9seW1lci50cmFuc2l0aW9uVGltZSkuZWFjaChcImVuZFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgYiA9IDA7IGIgPCBjYTsgYisrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGFubm9CID0gc2VsZi5hbm5vdGF0aW9uc1tiXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMgPT09IGFubm9CLmZ1enp5U3RhcnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGQzLnNlbGVjdCh0aGlzKS5hdHRyKFwiZFwiLCBzZWxmLmdldEFubm90YXRpb25QaWVTbGljZUFyY1BhdGgoYW5ub0Iuc2VxRGF0dW0udW5jZXJ0YWluQmVnaW4sIGFubm9CLnNlcURhdHVtLmJlZ2luKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIGlmIChhbm5vLmJlZ2luICYmIGFubm8uZW5kKSB7XG4gICAgICAgICAgICBjb25zdCBjZXJ0YWluID0gYW5uby5jZXJ0YWluO1xuICAgICAgICAgICAgZDMuc2VsZWN0KGNlcnRhaW4pLnRyYW5zaXRpb24oKS5hdHRyKFwiZFwiLCB0aGlzLmdldEFubm90YXRpb25QaWVTbGljZUFwcHJveGltYXRlUGF0aChhbm5vLnNlcURhdHVtLmJlZ2luLCBhbm5vLnNlcURhdHVtLmVuZCkpXG4gICAgICAgICAgICAgICAgLmR1cmF0aW9uKFBvbHltZXIudHJhbnNpdGlvblRpbWUpLmVhY2goXCJlbmRcIixcbiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBiID0gMDsgYiA8IGNhOyBiKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBhbm5vQiA9IHNlbGYuYW5ub3RhdGlvbnNbYl07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMgPT09IGFubm9CLmNlcnRhaW4pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZDMuc2VsZWN0KHRoaXMpLmF0dHIoXCJkXCIsIHNlbGYuZ2V0QW5ub3RhdGlvblBpZVNsaWNlQXJjUGF0aChhbm5vQi5zZXFEYXR1bS5iZWdpbiwgYW5ub0Iuc2VxRGF0dW0uZW5kKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIC8vIH1cblxuICAgICAgICAgICAgaWYgKHR5cGVvZiBhbm5vLnNlcURhdHVtLnVuY2VydGFpbkVuZCAhPSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgZnV6enlFbmQgPSBhbm5vLmZ1enp5RW5kO1xuICAgICAgICAgICAgICAgIGQzLnNlbGVjdChmdXp6eUVuZCkudHJhbnNpdGlvbigpLmF0dHIoXCJkXCIsIHRoaXMuZ2V0QW5ub3RhdGlvblBpZVNsaWNlQXBwcm94aW1hdGVQYXRoKGFubm8uc2VxRGF0dW0uZW5kLCBhbm5vLnNlcURhdHVtLnVuY2VydGFpbkVuZCkpXG4gICAgICAgICAgICAgICAgICAgIC5kdXJhdGlvbihQb2x5bWVyLnRyYW5zaXRpb25UaW1lKS5lYWNoKFwiZW5kXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBiID0gMDsgYiA8IGNhOyBiKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgYW5ub0IgPSBzZWxmLmFubm90YXRpb25zW2JdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcyA9PT0gYW5ub0IuZnV6enlFbmQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGQzLnNlbGVjdCh0aGlzKS5hdHRyKFwiZFwiLCBzZWxmLmdldEFubm90YXRpb25QaWVTbGljZUFyY1BhdGgoYW5ub0Iuc2VxRGF0dW0uZW5kLCBhbm5vQi5zZXFEYXR1bS51bmNlcnRhaW5FbmQpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgKTtcblxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgY29uc3Qgb3JpZ2luYWxTdGlja1pvb20gPSB0aGlzLnN0aWNrWm9vbTtcbiAgICBjb25zdCBvcmlnaW5hbFJvdGF0aW9uID0gdGhpcy5yb3RhdGlvbjtcbiAgICBjb25zdCBjdWJpY0luT3V0ID0gZDMuZWFzZSgnY3ViaWMtaW4tb3V0Jyk7XG4gICAgZDMudGltZXIoZnVuY3Rpb24oZWxhcHNlZCkge1xuICAgICAgICByZXR1cm4gdXBkYXRlKGVsYXBzZWQgLyBQb2x5bWVyLnRyYW5zaXRpb25UaW1lKTtcbiAgICB9KTtcblxuICAgIGZ1bmN0aW9uIHVwZGF0ZShpbnRlcnApIHtcbiAgICAgICAgY29uc3QgbGFiZWxUcmFuc2Zvcm0gPSBkMy50cmFuc2Zvcm0oc2VsZi5sYWJlbFNWRy5nZXRBdHRyaWJ1dGUoXCJ0cmFuc2Zvcm1cIikpO1xuICAgICAgICBjb25zdCBrID0gc2VsZi5jb250cm9sbGVyLnN2Z0VsZW1lbnQuY3JlYXRlU1ZHTWF0cml4KCkucm90YXRlKGxhYmVsVHJhbnNmb3JtLnJvdGF0ZSkudHJhbnNsYXRlKGxhYmVsVHJhbnNsYXRlSW50ZXJwb2woY3ViaWNJbk91dChpbnRlcnApKSwgSW50ZXJhY3Rvci5sYWJlbFkpOyAvLy5zY2FsZSh6KS50cmFuc2xhdGUoLWMueCwgLWMueSk7XG4gICAgICAgIHNlbGYubGFiZWxTVkcudHJhbnNmb3JtLmJhc2VWYWwuaW5pdGlhbGl6ZShzZWxmLmNvbnRyb2xsZXIuc3ZnRWxlbWVudC5jcmVhdGVTVkdUcmFuc2Zvcm1Gcm9tTWF0cml4KGspKTtcbiAgICAgICAgLy9+XG4gICAgICAgIGlmICh4SW50ZXJwb2wgIT09IG51bGwpIHtcbiAgICAgICAgICAgIHNlbGYuc2V0UG9zaXRpb24oeEludGVycG9sKGN1YmljSW5PdXQoaW50ZXJwKSksIHlJbnRlcnBvbChjdWJpY0luT3V0KGludGVycCkpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHNlbGYuc3RpY2tab29tID0gc3RpY2tab29tSW50ZXJwb2woY3ViaWNJbk91dChpbnRlcnApKTtcbiAgICAgICAgc2VsZi5zZXRBbGxMaW5rQ29vcmRpbmF0ZXMoKTtcblxuICAgICAgICBpZiAoaW50ZXJwID09PSAxKSB7IC8vIGZpbmlzaGVkIC0gdGlkeSB1cFxuICAgICAgICAgICAgc2VsZi5mb3JtID0gMDtcbiAgICAgICAgICAgIHNlbGYuY2hlY2tMaW5rcygpO1xuICAgICAgICAgICAgc2VsZi5zdGlja1pvb20gPSBvcmlnaW5hbFN0aWNrWm9vbTtcbiAgICAgICAgICAgIHNlbGYucm90YXRpb24gPSBvcmlnaW5hbFJvdGF0aW9uO1xuICAgICAgICAgICAgc2VsZi5idXN5ID0gZmFsc2U7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfSBlbHNlIGlmIChpbnRlcnAgPiAxKSB7XG4gICAgICAgICAgICByZXR1cm4gdXBkYXRlKDEpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgfVxufTtcblxuUG9seW1lci5wcm90b3R5cGUudG9TdGljayA9IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuYnVzeSA9IHRydWU7XG4gICAgdGhpcy5mb3JtID0gMTtcblxuICAgIC8vcmVtb3ZlIHByb3QtcHJvdCBsaW5rcyAtIHdvdWxkIGl0IGJlIGJldHRlciBpZiBjaGVja0xpbmtzIGRpZCB0aGlzPyAtIHRoaW5rIG5vdFxuICAgIGNvbnN0IGMgPSB0aGlzLmJpbmFyeUxpbmtzLnZhbHVlcygpLmxlbmd0aDtcbiAgICBmb3IgKGxldCBsID0gMDsgbCA8IGM7IGwrKykge1xuICAgICAgICBjb25zdCBsaW5rID0gdGhpcy5iaW5hcnlMaW5rcy52YWx1ZXMoKVtsXTtcbiAgICAgICAgLy9vdXQgd2l0aCB0aGUgb2xkXG4gICAgICAgIGlmIChsaW5rLnNob3duKSB7XG4gICAgICAgICAgICBsaW5rLmhpZGUoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGNvbnN0IHByb3RMZW5ndGggPSB0aGlzLnNpemUgKiB0aGlzLnN0aWNrWm9vbTtcbiAgICBjb25zdCByID0gdGhpcy5nZXRCbG9iUmFkaXVzKCk7XG5cbiAgICBjb25zdCBsZW5ndGhJbnRlcnBvbCA9IGQzLmludGVycG9sYXRlKCgyICogciksIHByb3RMZW5ndGgpO1xuICAgIGNvbnN0IHN0aWNrWm9vbUludGVycG9sID0gZDMuaW50ZXJwb2xhdGUoMCwgdGhpcy5zdGlja1pvb20pO1xuICAgIGNvbnN0IGxhYmVsVHJhbnNsYXRlSW50ZXJwb2wgPSBkMy5pbnRlcnBvbGF0ZSgtKHIgKyA1KSwgLSgoKHRoaXMuc2l6ZSAvIDIpICogdGhpcy5zdGlja1pvb20pICsgKHRoaXMublRlcm1pbnVzRmVhdHVyZSA/IDI1IDogMTApKSk7XG5cbiAgICBjb25zdCBvcmlnU3RpY2tab29tID0gdGhpcy5zdGlja1pvb207XG4gICAgdGhpcy5zdGlja1pvb20gPSAwO1xuICAgIHRoaXMuY2hlY2tMaW5rcyh0aGlzLmJpbmFyeUxpbmtzKTtcbiAgICB0aGlzLmNoZWNrTGlua3ModGhpcy5zZWxmTGluayk7XG4gICAgdGhpcy5jaGVja0xpbmtzKHRoaXMuc2VxdWVuY2VMaW5rcyk7XG4gICAgdGhpcy5zdGlja1pvb20gPSBvcmlnU3RpY2tab29tO1xuXG4gICAgZDMuc2VsZWN0KHRoaXMuYmFja2dyb3VuZCkudHJhbnNpdGlvbigpIC8vLmF0dHIoXCJzdHJva2Utb3BhY2l0eVwiLCAxKVxuICAgICAgICAuYXR0cihcImhlaWdodFwiLCBQb2x5bWVyLlNUSUNLSEVJR0hUKVxuICAgICAgICAuYXR0cihcInlcIiwgLVBvbHltZXIuU1RJQ0tIRUlHSFQgLyAyKVxuICAgICAgICAuYXR0cihcInJ4XCIsIDApLmF0dHIoXCJyeVwiLCAwKVxuICAgICAgICAuZHVyYXRpb24oUG9seW1lci50cmFuc2l0aW9uVGltZSk7XG5cbiAgICBkMy5zZWxlY3QodGhpcy5vdXRsaW5lKS50cmFuc2l0aW9uKCkgLy8uYXR0cihcInN0cm9rZS1vcGFjaXR5XCIsIDEpXG4gICAgICAgIC5hdHRyKFwiaGVpZ2h0XCIsIFBvbHltZXIuU1RJQ0tIRUlHSFQpXG4gICAgICAgIC5hdHRyKFwieVwiLCAtUG9seW1lci5TVElDS0hFSUdIVCAvIDIpXG4gICAgICAgIC5hdHRyKFwicnhcIiwgMCkuYXR0cihcInJ5XCIsIDApXG4gICAgICAgIC5kdXJhdGlvbihQb2x5bWVyLnRyYW5zaXRpb25UaW1lKTtcblxuICAgIGQzLnNlbGVjdCh0aGlzLmhpZ2hsaWdodCkudHJhbnNpdGlvbigpXG4gICAgICAgIC5hdHRyKFwid2lkdGhcIiwgcHJvdExlbmd0aCArIDUpLmF0dHIoXCJoZWlnaHRcIiwgUG9seW1lci5TVElDS0hFSUdIVCArIDUpXG4gICAgICAgIC5hdHRyKFwieFwiLCB0aGlzLmdldFJlc1h3aXRoU3RpY2tab29tKDAuNSkgLSAyLjUpLmF0dHIoXCJ5XCIsICgtUG9seW1lci5TVElDS0hFSUdIVCAvIDIpIC0gMi41KVxuICAgICAgICAuYXR0cihcInJ4XCIsIDApLmF0dHIoXCJyeVwiLCAwKVxuICAgICAgICAuZHVyYXRpb24oUG9seW1lci50cmFuc2l0aW9uVGltZSk7XG5cbiAgICBpZiAodGhpcy5hbm5vdGF0aW9ucykge1xuICAgICAgICBjb25zdCBhbm5vdHMgPSB0aGlzLmFubm90YXRpb25zO1xuICAgICAgICBjb25zdCBjYSA9IGFubm90cy5sZW5ndGg7XG4gICAgICAgIGZvciAobGV0IGEgPSAwOyBhIDwgY2E7IGErKykge1xuICAgICAgICAgICAgY29uc3QgYW5ubyA9IGFubm90c1thXTtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgYW5uby5zZXFEYXR1bS51bmNlcnRhaW5CZWdpbiAhPSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgZnV6enlTdGFydCA9IGFubm8uZnV6enlTdGFydDtcbiAgICAgICAgICAgICAgICBmdXp6eVN0YXJ0LnNldEF0dHJpYnV0ZShcImRcIiwgdGhpcy5nZXRBbm5vdGF0aW9uUGllU2xpY2VBcHByb3hpbWF0ZVBhdGgoYW5uby5zZXFEYXR1bS51bmNlcnRhaW5CZWdpbiwgYW5uby5zZXFEYXR1bS5iZWdpbikpO1xuICAgICAgICAgICAgICAgIGQzLnNlbGVjdChmdXp6eVN0YXJ0KS50cmFuc2l0aW9uKCkuYXR0cihcImRcIiwgdGhpcy5nZXRBbm5vdGF0aW9uUmVjdFBhdGgoYW5uby5zZXFEYXR1bS51bmNlcnRhaW5CZWdpbiwgYW5uby5zZXFEYXR1bS5iZWdpbiwgYW5ubykpXG4gICAgICAgICAgICAgICAgICAgIC5kdXJhdGlvbihQb2x5bWVyLnRyYW5zaXRpb25UaW1lKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIGlmIChhbm5vLnNlcURhdHVtLmJlZ2luICYmIGFubm8uc2VxRGF0dW0uZW5kKSB7XG4gICAgICAgICAgICBjb25zdCBjZXJ0YWluID0gYW5uby5jZXJ0YWluO1xuICAgICAgICAgICAgY2VydGFpbi5zZXRBdHRyaWJ1dGUoXCJkXCIsIHRoaXMuZ2V0QW5ub3RhdGlvblBpZVNsaWNlQXBwcm94aW1hdGVQYXRoKGFubm8uc2VxRGF0dW0uYmVnaW4sIGFubm8uc2VxRGF0dW0uZW5kKSk7XG4gICAgICAgICAgICBkMy5zZWxlY3QoY2VydGFpbikudHJhbnNpdGlvbigpLmF0dHIoXCJkXCIsIHRoaXMuZ2V0QW5ub3RhdGlvblJlY3RQYXRoKGFubm8uc2VxRGF0dW0uYmVnaW4sIGFubm8uc2VxRGF0dW0uZW5kLCBhbm5vKSlcbiAgICAgICAgICAgICAgICAuZHVyYXRpb24oUG9seW1lci50cmFuc2l0aW9uVGltZSk7XG4gICAgICAgICAgICAvLyB9XG4gICAgICAgICAgICBpZiAodHlwZW9mIGFubm8uc2VxRGF0dW0udW5jZXJ0YWluRW5kICE9IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBmdXp6eUVuZCA9IGFubm8uZnV6enlFbmQ7XG4gICAgICAgICAgICAgICAgZnV6enlFbmQuc2V0QXR0cmlidXRlKFwiZFwiLCB0aGlzLmdldEFubm90YXRpb25QaWVTbGljZUFwcHJveGltYXRlUGF0aChhbm5vLnNlcURhdHVtLmVuZCwgYW5uby5zZXFEYXR1bS51bmNlcnRhaW5FbmQpKTtcbiAgICAgICAgICAgICAgICBkMy5zZWxlY3QoZnV6enlFbmQpLnRyYW5zaXRpb24oKS5hdHRyKFwiZFwiLCB0aGlzLmdldEFubm90YXRpb25SZWN0UGF0aChhbm5vLnNlcURhdHVtLmVuZCwgYW5uby5zZXFEYXR1bS51bmNlcnRhaW5FbmQsIGFubm8pKVxuICAgICAgICAgICAgICAgICAgICAuZHVyYXRpb24oUG9seW1lci50cmFuc2l0aW9uVGltZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBjb25zdCBzZWxmID0gdGhpcztcbiAgICBjb25zdCBjdWJpY0luT3V0ID0gZDMuZWFzZSgnY3ViaWMtaW4tb3V0Jyk7XG4gICAgZDMudGltZXIoZnVuY3Rpb24oZWxhcHNlZCkge1xuICAgICAgICByZXR1cm4gdXBkYXRlKGVsYXBzZWQgLyBQb2x5bWVyLnRyYW5zaXRpb25UaW1lKTtcbiAgICB9KTtcblxuICAgIGZ1bmN0aW9uIHVwZGF0ZShpbnRlcnApIHtcbiAgICAgICAgY29uc3QgbGFiZWxUcmFuc2Zvcm0gPSBkMy50cmFuc2Zvcm0oc2VsZi5sYWJlbFNWRy5nZXRBdHRyaWJ1dGUoXCJ0cmFuc2Zvcm1cIikpO1xuICAgICAgICBjb25zdCBrID0gc2VsZi5jb250cm9sbGVyLnN2Z0VsZW1lbnQuY3JlYXRlU1ZHTWF0cml4KCkucm90YXRlKGxhYmVsVHJhbnNmb3JtLnJvdGF0ZSkudHJhbnNsYXRlKGxhYmVsVHJhbnNsYXRlSW50ZXJwb2woY3ViaWNJbk91dChpbnRlcnApKSwgSW50ZXJhY3Rvci5sYWJlbFkpOyAvLy5zY2FsZSh6KS50cmFuc2xhdGUoLWMueCwgLWMueSk7XG4gICAgICAgIHNlbGYubGFiZWxTVkcudHJhbnNmb3JtLmJhc2VWYWwuaW5pdGlhbGl6ZShzZWxmLmNvbnRyb2xsZXIuc3ZnRWxlbWVudC5jcmVhdGVTVkdUcmFuc2Zvcm1Gcm9tTWF0cml4KGspKTtcblxuICAgICAgICBjb25zdCBjdXJyZW50TGVuZ3RoID0gbGVuZ3RoSW50ZXJwb2woY3ViaWNJbk91dChpbnRlcnApKTtcbiAgICAgICAgZDMuc2VsZWN0KHNlbGYuaGlnaGxpZ2h0KS5hdHRyKFwid2lkdGhcIiwgY3VycmVudExlbmd0aCkuYXR0cihcInhcIiwgLShjdXJyZW50TGVuZ3RoIC8gMikgKyAoMC41ICogc2VsZi5zdGlja1pvb20pKTtcbiAgICAgICAgZDMuc2VsZWN0KHNlbGYub3V0bGluZSkuYXR0cihcIndpZHRoXCIsIGN1cnJlbnRMZW5ndGgpLmF0dHIoXCJ4XCIsIC0oY3VycmVudExlbmd0aCAvIDIpICsgKDAuNSAqIHNlbGYuc3RpY2tab29tKSk7XG4gICAgICAgIGQzLnNlbGVjdChzZWxmLmJhY2tncm91bmQpLmF0dHIoXCJ3aWR0aFwiLCBjdXJyZW50TGVuZ3RoKS5hdHRyKFwieFwiLCAtKGN1cnJlbnRMZW5ndGggLyAyKSArICgwLjUgKiBzZWxmLnN0aWNrWm9vbSkpO1xuICAgICAgICBzZWxmLnN0aWNrWm9vbSA9IHN0aWNrWm9vbUludGVycG9sKGN1YmljSW5PdXQoaW50ZXJwKSlcbiAgICAgICAgc2VsZi5zZXRBbGxMaW5rQ29vcmRpbmF0ZXMoKTtcblxuICAgICAgICBpZiAoaW50ZXJwID09PSAxKSB7IC8vIGZpbmlzaGVkIC0gdGlkeSB1cFxuICAgICAgICAgICAgc2VsZi5idXN5ID0gZmFsc2U7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfSBlbHNlIGlmIChpbnRlcnAgPiAxKSB7XG4gICAgICAgICAgICByZXR1cm4gdXBkYXRlKDEpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZDMuc2VsZWN0KHRoaXMudGlja3MpLmF0dHIoXCJvcGFjaXR5XCIsIDApO1xuICAgIHRoaXMuc2V0U2NhbGVHcm91cCgpO1xuICAgIGQzLnNlbGVjdCh0aGlzLnRpY2tzKS50cmFuc2l0aW9uKCkuYXR0cihcIm9wYWNpdHlcIiwgMSlcbiAgICAgICAgLmRlbGF5KFBvbHltZXIudHJhbnNpdGlvblRpbWUgKiAwLjgpLmR1cmF0aW9uKFBvbHltZXIudHJhbnNpdGlvblRpbWUgLyAyKTtcbn07XG5cblxuUG9seW1lci5wcm90b3R5cGUudG9TdGlja05vVHJhbnNpdGlvbiA9IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuYnVzeSA9IHRydWU7XG4gICAgdGhpcy5mb3JtID0gMTtcblxuICAgIC8vcmVtb3ZlIHByb3QtcHJvdCBsaW5rcyAtIHdvdWxkIGl0IGJlIGJldHRlciBpZiBjaGVja0xpbmtzIGRpZCB0aGlzPyAtIHRoaW5rIG5vdFxuICAgIGNvbnN0IGMgPSB0aGlzLmJpbmFyeUxpbmtzLnZhbHVlcygpLmxlbmd0aDtcbiAgICBmb3IgKGxldCBsID0gMDsgbCA8IGM7IGwrKykge1xuICAgICAgICBjb25zdCBsaW5rID0gdGhpcy5iaW5hcnlMaW5rcy52YWx1ZXMoKVtsXTtcbiAgICAgICAgLy9vdXQgd2l0aCB0aGUgb2xkXG4gICAgICAgIGlmIChsaW5rLnNob3duKSB7XG4gICAgICAgICAgICBsaW5rLmhpZGUoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGNvbnN0IHByb3RMZW5ndGggPSB0aGlzLnNpemUgKiB0aGlzLnN0aWNrWm9vbTtcbiAgICBjb25zdCByID0gdGhpcy5nZXRCbG9iUmFkaXVzKCk7XG5cbiAgICBjb25zdCBsZW5ndGhJbnRlcnBvbCA9IGQzLmludGVycG9sYXRlKCgyICogciksIHByb3RMZW5ndGgpO1xuICAgIC8vIHZhciBzdGlja1pvb21JbnRlcnBvbCA9IGQzLmludGVycG9sYXRlKDAsIHRoaXMuc3RpY2tab29tKTtcbiAgICAvLyB2YXIgcm90YXRpb25JbnRlcnBvbCA9IGQzLmludGVycG9sYXRlKDAsICh0aGlzLnJvdGF0aW9uID4gMTgwKSA/IHRoaXMucm90YXRpb24gLSAzNjAgOiB0aGlzLnJvdGF0aW9uKTtcbiAgICBjb25zdCBsYWJlbFRyYW5zbGF0ZUludGVycG9sID0gZDMuaW50ZXJwb2xhdGUoLShyICsgNSksIC0oKCh0aGlzLnNpemUgLyAyKSAqIHRoaXMuc3RpY2tab29tKSArICh0aGlzLm5UZXJtaW51c0ZlYXR1cmUgPyAyNSA6IDEwKSkpO1xuXG4gICAgLy8gdmFyIG9yaWdTdGlja1pvb20gPSB0aGlzLnN0aWNrWm9vbTtcbiAgICAvLyB0aGlzLnN0aWNrWm9vbSA9IDA7XG4gICAgdGhpcy5jaGVja0xpbmtzKHRoaXMuYmluYXJ5TGlua3MpO1xuICAgIHRoaXMuY2hlY2tMaW5rcyh0aGlzLnNlbGZMaW5rKTtcbiAgICB0aGlzLmNoZWNrTGlua3ModGhpcy5zZXF1ZW5jZUxpbmtzKTtcbiAgICAvLyB0aGlzLnN0aWNrWm9vbSA9IG9yaWdTdGlja1pvb207XG5cbiAgICBkMy5zZWxlY3QodGhpcy5iYWNrZ3JvdW5kKSAvLy50cmFuc2l0aW9uKCkgLy8uYXR0cihcInN0cm9rZS1vcGFjaXR5XCIsIDEpXG4gICAgICAgIC5hdHRyKFwiaGVpZ2h0XCIsIFBvbHltZXIuU1RJQ0tIRUlHSFQpXG4gICAgICAgIC5hdHRyKFwieVwiLCAtUG9seW1lci5TVElDS0hFSUdIVCAvIDIpXG4gICAgICAgIC5hdHRyKFwicnhcIiwgMCkuYXR0cihcInJ5XCIsIDApO1xuICAgIC8vICAuZHVyYXRpb24oUG9seW1lci50cmFuc2l0aW9uVGltZSk7XG5cbiAgICBkMy5zZWxlY3QodGhpcy5vdXRsaW5lKSAvLy50cmFuc2l0aW9uKCkgLy8uYXR0cihcInN0cm9rZS1vcGFjaXR5XCIsIDEpXG4gICAgICAgIC5hdHRyKFwiaGVpZ2h0XCIsIFBvbHltZXIuU1RJQ0tIRUlHSFQpXG4gICAgICAgIC5hdHRyKFwieVwiLCAtUG9seW1lci5TVElDS0hFSUdIVCAvIDIpXG4gICAgICAgIC5hdHRyKFwicnhcIiwgMCkuYXR0cihcInJ5XCIsIDApO1xuICAgIC8vICAuZHVyYXRpb24oUG9seW1lci50cmFuc2l0aW9uVGltZSk7XG5cbiAgICBkMy5zZWxlY3QodGhpcy5oaWdobGlnaHQpIC8vLnRyYW5zaXRpb24oKVxuICAgICAgICAuYXR0cihcIndpZHRoXCIsIHByb3RMZW5ndGggKyA1KS5hdHRyKFwiaGVpZ2h0XCIsIFBvbHltZXIuU1RJQ0tIRUlHSFQgKyA1KVxuICAgICAgICAuYXR0cihcInhcIiwgdGhpcy5nZXRSZXNYd2l0aFN0aWNrWm9vbSgwLjUpIC0gMi41KS5hdHRyKFwieVwiLCAoLVBvbHltZXIuU1RJQ0tIRUlHSFQgLyAyKSAtIDIuNSlcbiAgICAgICAgLmF0dHIoXCJyeFwiLCAwKS5hdHRyKFwicnlcIiwgMCk7XG4gICAgLy8gLmR1cmF0aW9uKFBvbHltZXIudHJhbnNpdGlvblRpbWUpO1xuXG4gICAgaWYgKHRoaXMuYW5ub3RhdGlvbnMpIHtcbiAgICAgICAgY29uc3QgYW5ub3RzID0gdGhpcy5hbm5vdGF0aW9ucztcbiAgICAgICAgY29uc3QgY2EgPSBhbm5vdHMubGVuZ3RoO1xuICAgICAgICBmb3IgKGxldCBhID0gMDsgYSA8IGNhOyBhKyspIHtcbiAgICAgICAgICAgIGNvbnN0IGFubm8gPSBhbm5vdHNbYV07XG4gICAgICAgICAgICBpZiAodHlwZW9mIGFubm8uc2VxRGF0dW0udW5jZXJ0YWluQmVnaW4gIT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICAgICAgICAgIGNvbnN0IGZ1enp5U3RhcnQgPSBhbm5vLmZ1enp5U3RhcnQ7XG4gICAgICAgICAgICAgICAgLy8gZnV6enlTdGFydC5zZXRBdHRyaWJ1dGUoXCJkXCIsIHRoaXMuZ2V0QW5ub3RhdGlvblBpZVNsaWNlQXBwcm94aW1hdGVQYXRoKGFubm8uc2VxRGF0dW0udW5jZXJ0YWluQmVnaW4sIGFubm8uc2VxRGF0dW0uYmVnaW4pKTtcbiAgICAgICAgICAgICAgICBkMy5zZWxlY3QoZnV6enlTdGFydCkuYXR0cihcImRcIiwgdGhpcy5nZXRBbm5vdGF0aW9uUmVjdFBhdGgoYW5uby5zZXFEYXR1bS51bmNlcnRhaW5CZWdpbiwgYW5uby5zZXFEYXR1bS5iZWdpbiwgYW5ubykpO1xuICAgICAgICAgICAgICAgIC8vIC5kdXJhdGlvbihQb2x5bWVyLnRyYW5zaXRpb25UaW1lKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIGlmIChhbm5vLnNlcURhdHVtLmJlZ2luICYmIGFubm8uc2VxRGF0dW0uZW5kKSB7XG4gICAgICAgICAgICBjb25zdCBjZXJ0YWluID0gYW5uby5jZXJ0YWluO1xuICAgICAgICAgICAgY2VydGFpbi5zZXRBdHRyaWJ1dGUoXCJkXCIsIHRoaXMuZ2V0QW5ub3RhdGlvblBpZVNsaWNlQXBwcm94aW1hdGVQYXRoKGFubm8uc2VxRGF0dW0uYmVnaW4sIGFubm8uc2VxRGF0dW0uZW5kKSk7XG4gICAgICAgICAgICBkMy5zZWxlY3QoY2VydGFpbikgLyoudHJhbnNpdGlvbigpKi8gLmF0dHIoXCJkXCIsIHRoaXMuZ2V0QW5ub3RhdGlvblJlY3RQYXRoKGFubm8uc2VxRGF0dW0uYmVnaW4sIGFubm8uc2VxRGF0dW0uZW5kLCBhbm5vKSk7XG4gICAgICAgICAgICAvLyAuZHVyYXRpb24oUG9seW1lci50cmFuc2l0aW9uVGltZSk7XG4gICAgICAgICAgICAvLyB9XG4gICAgICAgICAgICBpZiAodHlwZW9mIGFubm8uc2VxRGF0dW0udW5jZXJ0YWluRW5kICE9IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBmdXp6eUVuZCA9IGFubm8uZnV6enlFbmQ7XG4gICAgICAgICAgICAgICAgLy8gZnV6enlFbmQuc2V0QXR0cmlidXRlKFwiZFwiLCB0aGlzLmdldEFubm90YXRpb25QaWVTbGljZUFwcHJveGltYXRlUGF0aChhbm5vLnNlcURhdHVtLmVuZCwgYW5uby5zZXFEYXR1bS51bmNlcnRhaW5FbmQpKTtcbiAgICAgICAgICAgICAgICBkMy5zZWxlY3QoZnV6enlFbmQpIC8qLnRyYW5zaXRpb24oKSovIC5hdHRyKFwiZFwiLCB0aGlzLmdldEFubm90YXRpb25SZWN0UGF0aChhbm5vLnNlcURhdHVtLmVuZCwgYW5uby5zZXFEYXR1bS51bmNlcnRhaW5FbmQsIGFubm8pKTtcbiAgICAgICAgICAgICAgICAvLyAuZHVyYXRpb24oUG9seW1lci50cmFuc2l0aW9uVGltZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBjb25zdCBzZWxmID0gdGhpcztcbiAgICAvLyB2YXIgY3ViaWNJbk91dCA9IGQzLmVhc2UoJ2N1YmljLWluLW91dCcpO1xuICAgIC8vIGQzLnRpbWVyKGZ1bmN0aW9uKGVsYXBzZWQpIHtcbiAgICAvLyAgICAgcmV0dXJuIHVwZGF0ZShlbGFwc2VkIC8gUG9seW1lci50cmFuc2l0aW9uVGltZSk7XG4gICAgLy8gfSk7XG5cbiAgICAvLyB1cGRhdGUoMSlcbiAgICAvL1xuICAgIC8vIGZ1bmN0aW9uIHVwZGF0ZShpbnRlcnApIHtcbiAgICBjb25zdCBsYWJlbFRyYW5zZm9ybSA9IGQzLnRyYW5zZm9ybShzZWxmLmxhYmVsU1ZHLmdldEF0dHJpYnV0ZShcInRyYW5zZm9ybVwiKSk7XG4gICAgY29uc3QgayA9IHNlbGYuY29udHJvbGxlci5zdmdFbGVtZW50LmNyZWF0ZVNWR01hdHJpeCgpLnJvdGF0ZShsYWJlbFRyYW5zZm9ybS5yb3RhdGUpLnRyYW5zbGF0ZShsYWJlbFRyYW5zbGF0ZUludGVycG9sKDEpLCBJbnRlcmFjdG9yLmxhYmVsWSk7IC8vLnNjYWxlKHopLnRyYW5zbGF0ZSgtYy54LCAtYy55KTtcbiAgICBzZWxmLmxhYmVsU1ZHLnRyYW5zZm9ybS5iYXNlVmFsLmluaXRpYWxpemUoc2VsZi5jb250cm9sbGVyLnN2Z0VsZW1lbnQuY3JlYXRlU1ZHVHJhbnNmb3JtRnJvbU1hdHJpeChrKSk7XG5cbiAgICBjb25zdCBjdXJyZW50TGVuZ3RoID0gbGVuZ3RoSW50ZXJwb2woMSk7XG4gICAgZDMuc2VsZWN0KHNlbGYuaGlnaGxpZ2h0KS5hdHRyKFwid2lkdGhcIiwgY3VycmVudExlbmd0aCkuYXR0cihcInhcIiwgLShjdXJyZW50TGVuZ3RoIC8gMikgKyAoMC41ICogc2VsZi5zdGlja1pvb20pKTtcbiAgICBkMy5zZWxlY3Qoc2VsZi5vdXRsaW5lKS5hdHRyKFwid2lkdGhcIiwgY3VycmVudExlbmd0aCkuYXR0cihcInhcIiwgLShjdXJyZW50TGVuZ3RoIC8gMikgKyAoMC41ICogc2VsZi5zdGlja1pvb20pKTtcbiAgICBkMy5zZWxlY3Qoc2VsZi5iYWNrZ3JvdW5kKS5hdHRyKFwid2lkdGhcIiwgY3VycmVudExlbmd0aCkuYXR0cihcInhcIiwgLShjdXJyZW50TGVuZ3RoIC8gMikgKyAoMC41ICogc2VsZi5zdGlja1pvb20pKTtcbiAgICAvLyBzZWxmLnN0aWNrWm9vbSA9IHN0aWNrWm9vbUludGVycG9sKGN1YmljSW5PdXQoaW50ZXJwKSlcbiAgICBzZWxmLnNldEFsbExpbmtDb29yZGluYXRlcygpO1xuXG4gICAgLy8gaWYgKGludGVycCA9PT0gMSkgeyAvLyBmaW5pc2hlZCAtIHRpZHkgdXBcbiAgICAvLyByZXR1cm4gdHJ1ZTtcbiAgICAvLyB9IGVsc2UgaWYgKGludGVycCA+IDEpIHtcbiAgICAvLyAgICAgcmV0dXJuIHVwZGF0ZSgxKTtcbiAgICAvLyB9IGVsc2Uge1xuICAgIC8vICAgICByZXR1cm4gZmFsc2U7XG4gICAgLy8gfVxuICAgIC8vIH1cblxuXG4gICAgLy9kMy5zZWxlY3QodGhpcy50aWNrcykuYXR0cihcIm9wYWNpdHlcIiwgMCk7XG4gICAgdGhpcy5zZXRTY2FsZUdyb3VwKCk7XG4gICAgZDMuc2VsZWN0KHRoaXMudGlja3MpIC8qLnRyYW5zaXRpb24oKSovIC5hdHRyKFwib3BhY2l0eVwiLCAxKTtcbiAgICAvLy5kZWxheShQb2x5bWVyLnRyYW5zaXRpb25UaW1lICogMC44KS5kdXJhdGlvbihQb2x5bWVyLnRyYW5zaXRpb25UaW1lIC8gMik7XG5cbiAgICBzZWxmLmJ1c3kgPSBmYWxzZTtcblxufTtcblxuUG9seW1lci5wcm90b3R5cGUuZ2V0UmVzWHdpdGhTdGlja1pvb20gPSBmdW5jdGlvbihyKSB7XG4gICAgaWYgKHIgPT09IFwibi1uXCIpIHtcbiAgICAgICAgcmV0dXJuICgtdGhpcy5zaXplIC8gMiAqIHRoaXMuc3RpY2tab29tKSAtIDIwO1xuICAgIH0gZWxzZSBpZiAociA9PT0gXCJjLWNcIikge1xuICAgICAgICByZXR1cm4gKHRoaXMuc2l6ZSAvIDIgKiB0aGlzLnN0aWNrWm9vbSkgKyAyMDtcbiAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gKHIgLSAodGhpcy5zaXplIC8gMikpICogdGhpcy5zdGlja1pvb207XG4gICAgfVxufTtcblxuLy9jYWxjdWxhdGUgdGhlICBjb29yZGluYXRlcyBvZiBhIHJlc2lkdWUgKHJlbGF0aXZlIHRvIHRoaXMuY29udHJvbGxlci5jb250YWluZXIpXG5Qb2x5bWVyLnByb3RvdHlwZS5nZXRSZXNpZHVlQ29vcmRpbmF0ZXMgPSBmdW5jdGlvbihyLCB5T2ZmKSB7XG4gICAgaWYgKHR5cGVvZiByID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgIGFsZXJ0KFwiRXJyb3I6IHJlc2lkdWUgbnVtYmVyIGlzIHVuZGVmaW5lZFwiKTtcbiAgICB9XG4gICAgbGV0IHggPSB0aGlzLmdldFJlc1h3aXRoU3RpY2tab29tKHIgKiAxKSAqIHRoaXMuY29udHJvbGxlci56O1xuICAgIGxldCB5O1xuICAgIGlmICh4ICE9PSAwKSB7XG4gICAgICAgIGNvbnN0IGwgPSBNYXRoLmFicyh4KTtcbiAgICAgICAgY29uc3QgYSA9IE1hdGguYWNvcyh4IC8gbCk7XG4gICAgICAgIGNvbnN0IHJvdFJhZCA9ICh0aGlzLnJvdGF0aW9uIC8gMzYwKSAqIE1hdGguUEkgKiAyO1xuICAgICAgICB4ID0gbCAqIE1hdGguY29zKHJvdFJhZCArIGEpO1xuICAgICAgICB5ID0gbCAqIE1hdGguc2luKHJvdFJhZCArIGEpO1xuICAgICAgICBpZiAodHlwZW9mIHlPZmYgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICB4ICs9IHlPZmYgKiB0aGlzLmNvbnRyb2xsZXIueiAqIE1hdGguY29zKHJvdFJhZCArIChNYXRoLlBJIC8gMikpO1xuICAgICAgICAgICAgeSArPSB5T2ZmICogdGhpcy5jb250cm9sbGVyLnogKiBNYXRoLnNpbihyb3RSYWQgKyAoTWF0aC5QSSAvIDIpKTtcbiAgICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAgIHkgPSB5T2ZmO1xuICAgIH1cbiAgICB4ID0geCArIHRoaXMuY3g7XG4gICAgeSA9IHkgKyB0aGlzLmN5O1xuICAgIHJldHVybiBbeCwgeV07XG59O1xuXG5Qb2x5bWVyLnByb3RvdHlwZS5jbGVhclBvc2l0aW9uYWxGZWF0dXJlcyA9IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuYW5ub3RhdGlvbnMgPSBbXTtcbiAgICB0aGlzLmFubm90YXRpb25UeXBlcyA9IFtdO1xuICAgIGlmICh0aGlzLmFubm90YXRpb25zU3ZnR3JvdXApIGQzLnNlbGVjdCh0aGlzLmFubm90YXRpb25zU3ZnR3JvdXApLnNlbGVjdEFsbChcIipcIikucmVtb3ZlKCk7XG59XG5cblBvbHltZXIucHJvdG90eXBlLnNldFBvc2l0aW9uYWxGZWF0dXJlcyA9IGZ1bmN0aW9uKHBvc0ZlYXRzKSB7XG4gICAgaWYgKHBvc0ZlYXRzKSB7XG4gICAgICAgIGNvbnN0IGFubm90YXRpb25UeXBlc1NldCA9IG5ldyBTZXQoKTtcbiAgICAgICAgLy8gdmFyIHkgPSAtSW50ZXJhY3Rvci5TVElDS0hFSUdIVCAvIDI7XG4gICAgICAgIC8vZHJhdyBsb25nZXN0IHJlZ2lvbnMgZmlyc3RcbiAgICAgICAgcG9zRmVhdHMuc29ydChmdW5jdGlvbihhLCBiKSB7XG4gICAgICAgICAgICByZXR1cm4gKGIuZW5kIC0gYi5iZWdpbikgLSAoYS5lbmQgLSBhLmJlZ2luKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuYW5ub3RhdGlvbnMgPSBwb3NGZWF0cztcbiAgICAgICAgaWYgKHRoaXMuYW5ub3RhdGlvbnMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICAvL34gYWxlcnQoXCJubyBhbm5vdFwiKTtcbiAgICAgICAgICAgIHRoaXMuYW5ub3RhdGlvbnMucHVzaChuZXcgQW5ub3RhdGlvbihcIk5vIGFubm90YXRpb25zXCIsIG5ldyBTZXF1ZW5jZUZlYXR1cmUobnVsbCwgMSArIFwiLVwiICsgdGhpcy5zaXplKSkpO1xuICAgICAgICB9XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcG9zRmVhdHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGNvbnN0IGFubm8gPSBwb3NGZWF0c1tpXTtcbiAgICAgICAgICAgIGlmIChhbm5vLnNlcURhdHVtLnNlcXVlbmNlRGF0dW1TdHJpbmcgIT09IFwibi1uXCIgJiYgYW5uby5zZXFEYXR1bS5zZXF1ZW5jZURhdHVtU3RyaW5nICE9PSBcImMtY1wiKSB7XG4gICAgICAgICAgICAgICAgYW5ub3RhdGlvblR5cGVzU2V0LmFkZChhbm5vLmRlc2NyaXB0aW9uKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgYW5uby5mdXp6eVN0YXJ0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKENvbmZpZy5zdmducywgXCJwYXRoXCIpO1xuICAgICAgICAgICAgYW5uby5jZXJ0YWluID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKENvbmZpZy5zdmducywgXCJwYXRoXCIpO1xuICAgICAgICAgICAgYW5uby5mdXp6eUVuZCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUyhDb25maWcuc3ZnbnMsIFwicGF0aFwiKTtcblxuICAgICAgICAgICAgaWYgKHRoaXMuZm9ybSA9PT0gMCkge1xuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgYW5uby5zZXFEYXR1bS51bmNlcnRhaW5CZWdpbiAhPSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgICAgICAgICAgICAgIGFubm8uZnV6enlTdGFydC5zZXRBdHRyaWJ1dGUoXCJkXCIsIHRoaXMuZ2V0QW5ub3RhdGlvblBpZVNsaWNlQXJjUGF0aChhbm5vLnNlcURhdHVtLnVuY2VydGFpbkJlZ2luLCBhbm5vLnNlcURhdHVtLmJlZ2luKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vIGlmIChhbm5vLnNlcURhdHVtLmJlZ2luICYmIGFubm8uc2VxRGF0dW0uZW5kKSB7XG4gICAgICAgICAgICAgICAgYW5uby5jZXJ0YWluLnNldEF0dHJpYnV0ZShcImRcIiwgdGhpcy5nZXRBbm5vdGF0aW9uUGllU2xpY2VBcmNQYXRoKGFubm8uc2VxRGF0dW0uYmVnaW4sIGFubm8uc2VxRGF0dW0uZW5kKSk7XG4gICAgICAgICAgICAgICAgLy8gfVxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgYW5uby5zZXFEYXR1bS51bmNlcnRhaW5FbmQgIT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICAgICAgICAgICAgICBhbm5vLmZ1enp5RW5kLnNldEF0dHJpYnV0ZShcImRcIiwgdGhpcy5nZXRBbm5vdGF0aW9uUGllU2xpY2VBcmNQYXRoKGFubm8uc2VxRGF0dW0uZW5kLCBhbm5vLnNlcURhdHVtLnVuY2VydGFpbkVuZCkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBhbm5vLnNlcURhdHVtLnVuY2VydGFpbkJlZ2luICE9IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgYW5uby5mdXp6eVN0YXJ0LnNldEF0dHJpYnV0ZShcImRcIiwgdGhpcy5nZXRBbm5vdGF0aW9uUmVjdFBhdGgoYW5uby5zZXFEYXR1bS51bmNlcnRhaW5CZWdpbiwgYW5uby5zZXFEYXR1bS5iZWdpbiwgYW5ubykpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvLyBpZiAoYW5uby5zZXFEYXR1bS5iZWdpbiAmJiBhbm5vLnNlcURhdHVtLmVuZCkge1xuICAgICAgICAgICAgICAgIGFubm8uY2VydGFpbi5zZXRBdHRyaWJ1dGUoXCJkXCIsIHRoaXMuZ2V0QW5ub3RhdGlvblJlY3RQYXRoKGFubm8uc2VxRGF0dW0uYmVnaW4sIGFubm8uc2VxRGF0dW0uZW5kLCBhbm5vKSk7XG4gICAgICAgICAgICAgICAgLy8gfVxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgYW5uby5zZXFEYXR1bS51bmNlcnRhaW5FbmQgIT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICAgICAgICAgICAgICBhbm5vLmZ1enp5RW5kLnNldEF0dHJpYnV0ZShcImRcIiwgdGhpcy5nZXRBbm5vdGF0aW9uUmVjdFBhdGgoYW5uby5zZXFEYXR1bS5lbmQsIGFubm8uc2VxRGF0dW0udW5jZXJ0YWluRW5kLCBhbm5vKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYW5uby5mdXp6eVN0YXJ0LnNldEF0dHJpYnV0ZShcInN0cm9rZS13aWR0aFwiLCBcIjFcIik7XG4gICAgICAgICAgICBhbm5vLmZ1enp5U3RhcnQuc2V0QXR0cmlidXRlKFwiZmlsbC1vcGFjaXR5XCIsIFwiMC42XCIpO1xuICAgICAgICAgICAgYW5uby5jZXJ0YWluLnNldEF0dHJpYnV0ZShcInN0cm9rZS13aWR0aFwiLCBcIjFcIik7XG4gICAgICAgICAgICBhbm5vLmNlcnRhaW4uc2V0QXR0cmlidXRlKFwiZmlsbC1vcGFjaXR5XCIsIFwiMC42XCIpO1xuICAgICAgICAgICAgYW5uby5mdXp6eUVuZC5zZXRBdHRyaWJ1dGUoXCJzdHJva2Utd2lkdGhcIiwgXCIxXCIpO1xuICAgICAgICAgICAgYW5uby5mdXp6eUVuZC5zZXRBdHRyaWJ1dGUoXCJmaWxsLW9wYWNpdHlcIiwgXCIwLjZcIik7XG5cbiAgICAgICAgICAgIGNvbnN0IHRleHQgPSBhbm5vLmRlc2NyaXB0aW9uICsgXCIgW1wiICsgKGFubm8uc2VxRGF0dW0gPyBhbm5vLnNlcURhdHVtLnRvU3RyaW5nKCkgOiBhbm5vLnNlcURhdHVtLmJlZ2luICsgXCIgLSBcIiArIGFubm8uc2VxRGF0dW0uZW5kKSArIFwiXVwiO1xuICAgICAgICAgICAgYW5uby5mdXp6eVN0YXJ0Lm5hbWUgPSB0ZXh0O1xuICAgICAgICAgICAgYW5uby5jZXJ0YWluLm5hbWUgPSB0ZXh0O1xuICAgICAgICAgICAgYW5uby5mdXp6eUVuZC5uYW1lID0gdGV4dDtcbiAgICAgICAgICAgIGNvbnN0IHhsdiA9IHRoaXMuY29udHJvbGxlcjtcbiAgICAgICAgICAgIGNvbnN0IHNlbGYgPSB0aGlzO1xuICAgICAgICAgICAgY29uc3QgdG9vbFRpcEZ1bmMgPSBmdW5jdGlvbiAoZXZ0KSB7XG4gICAgICAgICAgICAgICAgY29uc3QgZWwgPSAoZXZ0LnRhcmdldC5jb3JyZXNwb25kaW5nVXNlRWxlbWVudCkgPyBldnQudGFyZ2V0LmNvcnJlc3BvbmRpbmdVc2VFbGVtZW50IDogZXZ0LnRhcmdldDtcbiAgICAgICAgICAgICAgICB4bHYucHJldmVudERlZmF1bHRzQW5kU3RvcFByb3BhZ2F0aW9uKGV2dCk7XG4gICAgICAgICAgICAgICAgeGx2LnNldFRvb2x0aXAoZWwubmFtZSwgZWwuZ2V0QXR0cmlidXRlKCdmaWxsJykpO1xuICAgICAgICAgICAgICAgIHNlbGYuc2hvd0hpZ2hsaWdodCh0cnVlKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBhbm5vLmZ1enp5U3RhcnQub25tb3VzZW92ZXIgPSB0b29sVGlwRnVuYztcbiAgICAgICAgICAgIGFubm8uY2VydGFpbi5vbm1vdXNlb3ZlciA9IHRvb2xUaXBGdW5jO1xuICAgICAgICAgICAgYW5uby5mdXp6eUVuZC5vbm1vdXNlb3ZlciA9IHRvb2xUaXBGdW5jO1xuICAgICAgICAgICAgLy8gaWYgKHRoaXMuYW5ub3RhdGlvbnNTdmdHcm91cCkgeyAvL2hhY2tcbiAgICAgICAgICAgIGlmICh0eXBlb2YgYW5uby5zZXFEYXR1bS51bmNlcnRhaW5CZWdpbiAhPSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5hbm5vdGF0aW9uc1N2Z0dyb3VwLmFwcGVuZENoaWxkKGFubm8uZnV6enlTdGFydCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLmFubm90YXRpb25zU3ZnR3JvdXAuYXBwZW5kQ2hpbGQoYW5uby5jZXJ0YWluKTtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgYW5uby5zZXFEYXR1bS51bmNlcnRhaW5FbmQgIT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICAgICAgICAgIHRoaXMuYW5ub3RhdGlvbnNTdmdHcm91cC5hcHBlbmRDaGlsZChhbm5vLmZ1enp5RW5kKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIH1cbiAgICAgICAgfVxuICAgICAgICB0aGlzLmFubm90YXRpb25UeXBlcyA9IEFycmF5LmZyb20oYW5ub3RhdGlvblR5cGVzU2V0LnZhbHVlcygpKTtcbiAgICB9XG59O1xuXG5Qb2x5bWVyLnN0ZXBzSW5BcmMgPSA1O1xuXG5Qb2x5bWVyLnByb3RvdHlwZS5nZXRBbm5vdGF0aW9uUGllU2xpY2VBcmNQYXRoID0gZnVuY3Rpb24oc3RhcnRSZXMsIGVuZFJlcykge1xuICAgIC8vIHZhciBzdGFydEFuZ2xlID0gKChzdGFydFJlcyAtIDEpIC8gdGhpcy5zaXplKSAqIDM2MDtcbiAgICAvLyB2YXIgZW5kQW5nbGUgPSAoKGVuZFJlcyAtIDEpIC8gdGhpcy5zaXplKSAqIDM2MDtcbiAgICBsZXQgc3RhcnRBbmdsZSwgZW5kQW5nbGU7XG4gICAgaWYgKHN0YXJ0UmVzID09PSBcIm4tblwiKSB7XG4gICAgICAgIHN0YXJ0QW5nbGUgPSAtMjA7IC8vKChzdGFydFJlcyAtIDEpIC8gdGhpcy5zaXplKSAqIDM2MDtcbiAgICAgICAgZW5kQW5nbGUgPSAoKGVuZFJlcyAtMSkgLyB0aGlzLnNpemUpICogMzYwO1xuICAgIH0gZWxzZSBpZiAoZW5kUmVzID09PSBcImMtY1wiKSB7XG4gICAgICAgIHN0YXJ0QW5nbGUgPSAoKHN0YXJ0UmVzIC0gMSkgLyB0aGlzLnNpemUpICogMzYwO1xuICAgICAgICBlbmRBbmdsZSA9ICsyMDsgLy8oKGVuZFJlcykgLyB0aGlzLnNpemUpICogMzYwO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHN0YXJ0QW5nbGUgPSAoKHN0YXJ0UmVzIC0gMSkgLyB0aGlzLnNpemUpICogMzYwO1xuICAgICAgICBlbmRBbmdsZSA9ICgoZW5kUmVzIC0xKSAvIHRoaXMuc2l6ZSkgKiAzNjA7XG4gICAgfVxuICAgIGNvbnN0IHJhZGl1cyA9IHRoaXMuZ2V0QmxvYlJhZGl1cygpIC0gMjtcbiAgICBjb25zdCBhcmNTdGFydCA9IEludGVyYWN0b3IudHJpZyhyYWRpdXMsIHN0YXJ0QW5nbGUgLSA5MCk7XG4gICAgY29uc3QgYXJjRW5kID0gSW50ZXJhY3Rvci50cmlnKHJhZGl1cywgZW5kQW5nbGUgLSA5MCk7XG4gICAgbGV0IGxhcmdlQXJjaCA9IDA7XG4gICAgaWYgKChlbmRBbmdsZSAtIHN0YXJ0QW5nbGUpID4gMTgwIHx8IChlbmRBbmdsZSA9PT0gc3RhcnRBbmdsZSkpIHtcbiAgICAgICAgbGFyZ2VBcmNoID0gMTtcbiAgICB9XG4gICAgcmV0dXJuIFwiTTAsMCBMXCIgKyBhcmNTdGFydC54ICsgXCIsXCIgKyBhcmNTdGFydC55ICsgXCIgQVwiICsgcmFkaXVzICsgXCIsXCIgK1xuICAgICAgICByYWRpdXMgKyBcIiAwIFwiICsgbGFyZ2VBcmNoICsgXCIgMSBcIiArIGFyY0VuZC54ICsgXCIsXCIgKyBhcmNFbmQueSArIFwiIFpcIjtcbn07XG5cblBvbHltZXIucHJvdG90eXBlLmdldEFubm90YXRpb25QaWVTbGljZUFwcHJveGltYXRlUGF0aCA9IGZ1bmN0aW9uKHN0YXJ0UmVzLCBlbmRSZXMpIHtcbiAgICAvL2FwcHJveGltYXRlIHBpZSBzbGljZVxuICAgIGxldCBzdGFydEFuZ2xlLCBlbmRBbmdsZTtcbiAgICBpZiAoc3RhcnRSZXMgPT09IFwibi1uXCIpIHtcbiAgICAgICAgc3RhcnRBbmdsZSA9IC0yMDsgLy8oKHN0YXJ0UmVzIC0gMSkgLyB0aGlzLnNpemUpICogMzYwO1xuICAgICAgICBlbmRBbmdsZSA9ICgoZW5kUmVzKSAvIHRoaXMuc2l6ZSkgKiAzNjA7XG4gICAgfSBlbHNlIGlmIChlbmRSZXMgPT09IFwiYy1jXCIpIHtcbiAgICAgICAgc3RhcnRBbmdsZSA9ICgoc3RhcnRSZXMgLSAxKSAvIHRoaXMuc2l6ZSkgKiAzNjA7XG4gICAgICAgIGVuZEFuZ2xlID0gKzIwOyAvLygoZW5kUmVzKSAvIHRoaXMuc2l6ZSkgKiAzNjA7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgc3RhcnRBbmdsZSA9ICgoc3RhcnRSZXMgLSAxKSAvIHRoaXMuc2l6ZSkgKiAzNjA7XG4gICAgICAgIGVuZEFuZ2xlID0gKChlbmRSZXMpIC8gdGhpcy5zaXplKSAqIDM2MDtcbiAgICB9XG4gICAgY29uc3QgcGllUmFkaXVzID0gdGhpcy5nZXRCbG9iUmFkaXVzKCkgLSAyO1xuICAgIC8vIHZhciBhcmNTdGFydCA9IEludGVyYWN0b3IudHJpZyhwaWVSYWRpdXMsIHN0YXJ0QW5nbGUgLSA5MCk7XG4gICAgLy8gdmFyIGFyY0VuZCA9IEludGVyYWN0b3IudHJpZyhwaWVSYWRpdXMsIGVuZEFuZ2xlIC0gOTApO1xuICAgIGxldCBhcHByb3hpbWF0ZVBpZVBhdGggPSBcIk0gMCwwXCI7XG4gICAgY29uc3Qgc3RlcHNJbkFyYyA9IDU7XG4gICAgZm9yIChsZXQgc2lhID0gMDsgc2lhIDw9IFBvbHltZXIuc3RlcHNJbkFyYzsgc2lhKyspIHtcbiAgICAgICAgY29uc3QgYW5nbGUgPSBzdGFydEFuZ2xlICsgKChlbmRBbmdsZSAtIHN0YXJ0QW5nbGUpICogKHNpYSAvIHN0ZXBzSW5BcmMpKTtcbiAgICAgICAgY29uc3Qgc2lhQ29vcmQgPSBJbnRlcmFjdG9yLnRyaWcocGllUmFkaXVzLCBhbmdsZSAtIDkwKTtcbiAgICAgICAgYXBwcm94aW1hdGVQaWVQYXRoICs9IFwiIEwgXCIgKyBzaWFDb29yZC54ICsgXCIsXCIgKyBzaWFDb29yZC55O1xuICAgIH1cbiAgICBhcHByb3hpbWF0ZVBpZVBhdGggKz0gXCIgTCBcIiArIDAgKyBcIixcIiArIDA7XG4gICAgYXBwcm94aW1hdGVQaWVQYXRoICs9IFwiICBaXCI7XG4gICAgcmV0dXJuIGFwcHJveGltYXRlUGllUGF0aDtcbn07XG5cblBvbHltZXIucHJvdG90eXBlLmdldEFubm90YXRpb25SZWN0UGF0aCA9IGZ1bmN0aW9uKHN0YXJ0UmVzLCBlbmRSZXMsIGFubm8pIHtcbiAgICAvL2RvbWFpbiBhcyByZWN0YW5nbGUgcGF0aFxuICAgIGxldCB0b3AsIGJvdHRvbSwgcnVuZ0hlaWdodDtcbiAgICBjb25zdCBydW5nID0gdGhpcy5hbm5vdGF0aW9uVHlwZXMuaW5kZXhPZihhbm5vLmRlc2NyaXB0aW9uKTtcbiAgICBpZiAocnVuZyA9PT0gLTEpIHtcbiAgICAgICAgYm90dG9tID0gUG9seW1lci5TVElDS0hFSUdIVCAvIDI7XG4gICAgICAgIHRvcCA9IC1Qb2x5bWVyLlNUSUNLSEVJR0hUIC8gMjtcbiAgICB9IGVsc2Uge1xuICAgICAgICBydW5nSGVpZ2h0ID0gUG9seW1lci5TVElDS0hFSUdIVCAvIHRoaXMuYW5ub3RhdGlvblR5cGVzLmxlbmd0aDtcbiAgICAgICAgdG9wID0gKC1Qb2x5bWVyLlNUSUNLSEVJR0hUIC8gMikgKyAocnVuZyAqIHJ1bmdIZWlnaHQpOyAvLyB0b2RvIC0gbG9va3MgbGlrZSB0b3AgYW5kIGJvdHRvbSB3cm9uZyB3YXkgcm91bmQ/XG4gICAgICAgIGJvdHRvbSA9IHRvcCArIHJ1bmdIZWlnaHQ7XG4gICAgfVxuXG4gICAgbGV0IGFubm90WCwgYW5ub3RTaXplLCBhbm5vdExlbmd0aDtcbiAgICBpZiAoc3RhcnRSZXMgPT09IFwibi1uXCIpIHtcbiAgICAgICAgYW5ub3RYID0gdGhpcy5nZXRSZXNYd2l0aFN0aWNrWm9vbSgwIC0gMC41KSAtIDIwO1xuICAgICAgICAvLyB2YXIgYW5ub3RTaXplID0gKDEgKyAoZW5kUmVzIC0gc3RhcnRSZXMpKTtcbiAgICAgICAgYW5ub3RMZW5ndGggPSAyMDsvL2Fubm90U2l6ZSAqIHRoaXMuc3RpY2tab29tO1xuICAgIH0gZWxzZSBpZiAoZW5kUmVzID09PSBcImMtY1wiKSB7XG4gICAgICAgIGFubm90WCA9IHRoaXMuZ2V0UmVzWHdpdGhTdGlja1pvb20oc3RhcnRSZXMgLSAwICsgMC41KTtcbiAgICAgICAgLy8gdmFyIGFubm90U2l6ZSA9ICgxICsgKGVuZFJlcyAtIHN0YXJ0UmVzKSk7XG4gICAgICAgIGFubm90TGVuZ3RoID0gMjA7Ly9hbm5vdFNpemUgKiB0aGlzLnN0aWNrWm9vbTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBhbm5vdFggPSB0aGlzLmdldFJlc1h3aXRoU3RpY2tab29tKHN0YXJ0UmVzIC0gMC41KTsgLy8gdG9kbyAtIGxvb2sgb3V0IGZvciBwb3NpdGlvbnMgYmVpbmcgc3RyaW5nc1xuICAgICAgICBhbm5vdFNpemUgPSAoMSArIChlbmRSZXMgLSBzdGFydFJlcykpO1xuICAgICAgICBhbm5vdExlbmd0aCA9IGFubm90U2l6ZSAqIHRoaXMuc3RpY2tab29tO1xuICAgIH1cbiAgICBsZXQgcmVjdFBhdGggPSBcIk0gXCIgKyBhbm5vdFggKyBcIixcIiArIGJvdHRvbTtcbiAgICBmb3IgKGxldCBzaWEgPSAwOyBzaWEgPD0gUG9seW1lci5zdGVwc0luQXJjOyBzaWErKykge1xuICAgICAgICBjb25zdCBzdGVwID0gYW5ub3RYICsgKGFubm90TGVuZ3RoICogKHNpYSAvIFBvbHltZXIuc3RlcHNJbkFyYykpO1xuICAgICAgICByZWN0UGF0aCArPSBcIiBMIFwiICsgc3RlcCArIFwiLFwiICsgdG9wO1xuICAgIH1cbiAgICByZWN0UGF0aCArPSBcIiBMIFwiICsgKGFubm90WCArIGFubm90TGVuZ3RoKSArIFwiLFwiICsgYm90dG9tICtcbiAgICAgICAgXCIgWlwiO1xuICAgIHJldHVybiByZWN0UGF0aDtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gUG9seW1lcjtcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQUE7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUlBO0FBSUE7QUFLQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBRUE7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUlBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBS0E7QUFLQTtBQUdBO0FBTUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBR0E7QUFDQTtBQUdBO0FBQ0E7QUFLQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBR0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFHQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFHQTtBQUNBO0FBQ0E7QUFHQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBR0E7QUFDQTtBQWxEQTtBQW1EQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUFBO0FBTUE7QUFBQTtBQU1BO0FBQ0E7QUFLQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBRUE7QUFDQTtBQUFBO0FBR0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFBQTtBQUNBO0FBS0E7QUFBQTtBQUNBO0FBS0E7QUFBQTtBQUNBO0FBS0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUFBO0FBQUE7QUFFQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUFBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQUE7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUdBO0FBQ0E7QUFBQTtBQUNBO0FBQUE7QUFBQTtBQUNBO0FBRUE7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQUE7QUFDQTtBQUVBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQVpBO0FBYUE7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQXpFQTtBQUNBO0FBV0E7QUFBQTtBQThEQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFFQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBRUE7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/model/interactor/Polymer.js\n");

/***/ }),

/***/ "./src/model/interactor/Protein.js":
/*!*****************************************!*\
  !*** ./src/model/interactor/Protein.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("//    \txiNET Interaction Viewer\n//    \tCopyright 2013 Rappsilber Laboratory\n//\n//    \tThis product includes software developed at\n//    \tthe Rappsilber Laboratory (http://www.rappsilberlab.org/).\n//\n//\t\tProtein.js\n//\n//\t\tauthors: Lutz Fischer, Colin Combe\n\n\nvar d3 = __webpack_require__(/*! d3 */ \"./node_modules/d3/d3.js\");\n\nvar Interactor = __webpack_require__(/*! ./Interactor */ \"./src/model/interactor/Interactor.js\");\n\nvar Polymer = __webpack_require__(/*! ./Polymer */ \"./src/model/interactor/Polymer.js\");\n\nvar Config = __webpack_require__(/*! ../../controller/Config */ \"./src/controller/Config.js\");\n\nProtein.prototype = new Polymer();\n\nfunction Protein(id, xinetController, json, name) {\n  this.id = id; // id may not be accession (multiple Segments with same accesssion)\n\n  this.controller = xinetController;\n  this.json = json;\n  this.name = name;\n  this.tooltip = this.name + ' [' + this.id + ']'; // + this.accession;\n  //links\n\n  this.naryLinks = d3.map();\n  this.binaryLinks = d3.map();\n  this.selfLink = null;\n  this.sequenceLinks = d3.map();\n  this.selfLink = null; // layout info\n\n  this.cx = 40;\n  this.cy = 40; // this.ix = 40;\n  // this.iy = 40;\n\n  this.rotation = 0;\n  this.stickZoom = 1;\n  this.form = 0; //null; // 0 = blob, 1 = stick\n  //rotators\n\n  /*\tthis.lowerRotator = new Rotator(this, 0, this.controller);\n  \tthis.upperRotator = new Rotator(this, 1, this.controller); */\n\n  this.upperGroup = document.createElementNS(Config.svgns, \"g\");\n  this.upperGroup.setAttribute(\"class\", \"protein upperGroup\"); //make highlight\n\n  this.highlight = document.createElementNS(Config.svgns, \"rect\");\n  this.highlight.setAttribute(\"stroke\", Config.highlightColour);\n  this.highlight.setAttribute(\"stroke-width\", \"5\");\n  this.highlight.setAttribute(\"fill\", \"none\");\n  this.upperGroup.appendChild(this.highlight); //make background\n  //http://stackoverflow.com/questions/17437408/how-do-i-change-a-circle-to-a-square-using-d3\n\n  this.background = document.createElementNS(Config.svgns, \"rect\");\n  this.background.setAttribute(\"fill\", \"#FFFFFF\");\n  this.upperGroup.appendChild(this.background); //create label - we will move this svg element around when protein form changes\n\n  this.labelSVG = document.createElementNS(Config.svgns, \"text\");\n  this.labelSVG.setAttribute(\"text-anchor\", \"end\");\n  this.labelSVG.setAttribute(\"fill\", \"black\");\n  this.labelSVG.setAttribute(\"x\", \"0\");\n  this.labelSVG.setAttribute(\"y\", \"10\");\n  this.labelSVG.setAttribute(\"class\", \"protein xlv_text proteinLabel\");\n  this.labelSVG.setAttribute('font-family', 'Arial');\n  this.labelSVG.setAttribute('font-size', '16'); //choose label text\n\n  if (this.name !== null && this.name !== \"\") {\n    this.labelText = this.name;\n  } else {\n    this.labelText = this.id;\n  }\n\n  if (this.labelText.length > 25) {\n    this.labelText = this.labelText.substr(0, 16) + \"...\";\n  }\n\n  this.labelTextNode = document.createTextNode(this.labelText);\n  this.labelSVG.appendChild(this.labelTextNode);\n  d3.select(this.labelSVG).attr(\"transform\", \"translate( -\" + 5 + \" \" + Interactor.labelY + \") rotate(0) scale(1, 1)\");\n  this.upperGroup.appendChild(this.labelSVG); //ticks (and animo acid letters)\n\n  this.ticks = document.createElementNS(Config.svgns, \"g\"); //svg group for annotations\n\n  this.annotationsSvgGroup = document.createElementNS(Config.svgns, \"g\");\n  this.annotationsSvgGroup.setAttribute(\"opacity\", \"1\");\n  this.upperGroup.appendChild(this.annotationsSvgGroup); //make outline\n\n  this.outline = document.createElementNS(Config.svgns, \"rect\");\n  this.outline.setAttribute(\"stroke\", \"black\");\n  this.outline.setAttribute(\"stroke-width\", \"1\");\n  this.outline.setAttribute(\"fill\", \"none\");\n  this.upperGroup.appendChild(this.outline);\n  this.scaleLabels = []; //since form is set to 0, make this a circle, this stuff is equivalant to\n  // end result of toCircle but without transition\n\n  var r = this.getBlobRadius();\n  d3.select(this.outline).attr(\"fill-opacity\", 1) // .attr(\"fill\", \"#ffffff\")\n  .attr(\"x\", -r).attr(\"y\", -r).attr(\"width\", r * 2).attr(\"height\", r * 2).attr(\"rx\", r).attr(\"ry\", r);\n  d3.select(this.background).attr(\"x\", -r).attr(\"y\", -r).attr(\"width\", r * 2).attr(\"height\", r * 2).attr(\"rx\", r).attr(\"ry\", r);\n  d3.select(this.annotationsSvgGroup).attr(\"transform\", \"scale(1, 1)\");\n  d3.select(this.highlight).attr(\"width\", r * 2 + 5).attr(\"height\", r * 2 + 5).attr(\"x\", -r - 2.5).attr(\"y\", -r - 2.5).attr(\"rx\", r + 2.5).attr(\"ry\", r + 2.5).attr(\"stroke-opacity\", 0);\n  this.labelSVG.setAttribute(\"transform\", \"translate(\" + -(r + 5) + \",\" + \"-5)\"); // events\n\n  var self = this; //    this.upperGroup.setAttribute('pointer-events','all');\n  //todo: move to Interactor prototype?\n\n  this.upperGroup.onmousedown = function (evt) {\n    self.mouseDown(evt);\n  };\n\n  this.upperGroup.onmouseover = function (evt) {\n    self.mouseOver(evt);\n  };\n\n  this.upperGroup.onmouseout = function (evt) {\n    self.mouseOut(evt);\n  }; // this.upperGroup.ontouchstart = function(evt) {\n  //     self.touchStart(evt);\n  // };\n\n\n  Object.defineProperty(this, \"height\", {\n    get: function height() {\n      return 60; //this.upperGroup.getBBox().height + 60; // * this.controller.z;\n    }\n  });\n  this.showHighlight(false);\n}\n/*\nProtein.prototype.showData = function(evt) {\n    const url = \"http://www.uniprot.org/uniprot/\" + this.json.identifier.id;\n    window.open(url, '_blank');\n}\n*/\n\n\nmodule.exports = Protein;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/model/interactor/Protein.js\n");

/***/ }),

/***/ "./src/model/interactor/RNA.js":
/*!*************************************!*\
  !*** ./src/model/interactor/RNA.js ***!
  \*************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("//    \txiNET Interaction Viewer\n//    \tCopyright 2013 Rappsilber Laboratory\n//\n//    \tThis product includes software developed at\n//    \tthe Rappsilber Laboratory (http://www.rappsilberlab.org/).\n//\n//\t\tRNA.js\n//\n//\t\tauthors: Colin Combe\n\n\nvar d3 = __webpack_require__(/*! d3 */ \"./node_modules/d3/d3.js\");\n\nvar Interactor = __webpack_require__(/*! ./Interactor */ \"./src/model/interactor/Interactor.js\");\n\nvar Config = __webpack_require__(/*! ../../controller/Config */ \"./src/controller/Config.js\");\n\nRNA.prototype = new Interactor();\n\nfunction RNA(id, xlvController, json, name) {\n  this.id = id; // id may not be accession (multiple Segments with same accession)\n\n  this.controller = xlvController;\n  this.json = json; //links\n\n  this.naryLinks = d3.map();\n  this.binaryLinks = d3.map();\n  this.selfLink = null;\n  this.sequenceLinks = d3.map();\n  this.name = name; // layout info\n\n  this.cx = 40;\n  this.cy = 40;\n  /*\n   * Upper group\n   * svg group for elements that appear above links\n   */\n\n  this.upperGroup = document.createElementNS(Config.svgns, \"g\");\n  this.upperGroup.setAttribute(\"class\", \"upperGroup\"); //for polygon\n\n  var points = \"0, -10  10, 0 0, 10 -10, 0\"; //make highlight\n\n  this.highlight = document.createElementNS(Config.svgns, \"polygon\");\n  this.highlight.setAttribute(\"points\", points);\n  this.highlight.setAttribute(\"stroke\", Config.highlightColour);\n  this.highlight.setAttribute(\"stroke-width\", \"5\");\n  this.highlight.setAttribute(\"fill\", \"none\"); //this.highlight.setAttribute(\"fill-opacity\", 1);\n  //attributes that may change\n\n  d3.select(this.highlight).attr(\"stroke-opacity\", 0);\n  this.upperGroup.appendChild(this.highlight); //create label - we will move this svg element around when protein form changes\n\n  this.labelSVG = document.createElementNS(Config.svgns, \"text\");\n  this.labelSVG.setAttribute(\"text-anchor\", \"end\");\n  this.labelSVG.setAttribute(\"fill\", \"black\");\n  this.labelSVG.setAttribute(\"x\", \"0\");\n  this.labelSVG.setAttribute(\"y\", \"10\");\n  this.labelSVG.setAttribute(\"class\", \"xlv_text proteinLabel\");\n  this.labelSVG.setAttribute('font-family', 'Arial');\n  this.labelSVG.setAttribute('font-size', '16');\n  this.labelText = this.name;\n  this.labelTextNode = document.createTextNode(this.labelText);\n  this.labelSVG.appendChild(this.labelTextNode);\n  d3.select(this.labelSVG).attr(\"transform\", \"translate( -\" + 15 + \" \" + Interactor.labelY + \")\");\n  this.upperGroup.appendChild(this.labelSVG); //make blob\n\n  this.outline = document.createElementNS(Config.svgns, \"polygon\");\n  this.outline.setAttribute(\"points\", points);\n  this.outline.setAttribute(\"stroke\", \"black\");\n  this.outline.setAttribute(\"stroke-width\", \"1\");\n  d3.select(this.outline).attr(\"stroke-opacity\", 1).attr(\"fill-opacity\", 1).attr(\"fill\", \"#ffffff\"); //append outline\n\n  this.upperGroup.appendChild(this.outline); // events\n\n  var self = this; //    this.upperGroup.setAttribute('pointer-events','all');\n\n  this.upperGroup.onmousedown = function (evt) {\n    self.mouseDown(evt);\n  };\n\n  this.upperGroup.onmouseover = function (evt) {\n    self.mouseOver(evt);\n  };\n\n  this.upperGroup.onmouseout = function (evt) {\n    self.mouseOut(evt);\n  };\n\n  this.upperGroup.ontouchstart = function (evt) {\n    self.touchStart(evt);\n  };\n}\n/*\nRNA.prototype.showData = function(evt) {\n    const url = \"http://rnacentral.org/rna/\" + this.json.identifier.id;\n    window.open(url, '_blank');\n}\n*/\n\n\nmodule.exports = RNA;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvbW9kZWwvaW50ZXJhY3Rvci9STkEuanMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly94aU5FVC8uL3NyYy9tb2RlbC9pbnRlcmFjdG9yL1JOQS5qcz8wODM0Il0sInNvdXJjZXNDb250ZW50IjpbIi8vICAgIFx0eGlORVQgSW50ZXJhY3Rpb24gVmlld2VyXG4vLyAgICBcdENvcHlyaWdodCAyMDEzIFJhcHBzaWxiZXIgTGFib3JhdG9yeVxuLy9cbi8vICAgIFx0VGhpcyBwcm9kdWN0IGluY2x1ZGVzIHNvZnR3YXJlIGRldmVsb3BlZCBhdFxuLy8gICAgXHR0aGUgUmFwcHNpbGJlciBMYWJvcmF0b3J5IChodHRwOi8vd3d3LnJhcHBzaWxiZXJsYWIub3JnLykuXG4vL1xuLy9cdFx0Uk5BLmpzXG4vL1xuLy9cdFx0YXV0aG9yczogQ29saW4gQ29tYmVcblxuXCJ1c2Ugc3RyaWN0XCI7XG5jb25zdCBkMyA9IHJlcXVpcmUoJ2QzJyk7XG5jb25zdCBJbnRlcmFjdG9yID0gcmVxdWlyZSgnLi9JbnRlcmFjdG9yJyk7XG5jb25zdCBDb25maWcgPSByZXF1aXJlKCcuLi8uLi9jb250cm9sbGVyL0NvbmZpZycpO1xuXG5STkEucHJvdG90eXBlID0gbmV3IEludGVyYWN0b3IoKTtcblxuZnVuY3Rpb24gUk5BKGlkLCB4bHZDb250cm9sbGVyLCBqc29uLCBuYW1lKSB7XG4gICAgdGhpcy5pZCA9IGlkOyAvLyBpZCBtYXkgbm90IGJlIGFjY2Vzc2lvbiAobXVsdGlwbGUgU2VnbWVudHMgd2l0aCBzYW1lIGFjY2Vzc2lvbilcbiAgICB0aGlzLmNvbnRyb2xsZXIgPSB4bHZDb250cm9sbGVyO1xuICAgIHRoaXMuanNvbiA9IGpzb247XG4gICAgLy9saW5rc1xuICAgIHRoaXMubmFyeUxpbmtzID0gZDMubWFwKCk7XG4gICAgdGhpcy5iaW5hcnlMaW5rcyA9IGQzLm1hcCgpO1xuICAgIHRoaXMuc2VsZkxpbmsgPSBudWxsO1xuICAgIHRoaXMuc2VxdWVuY2VMaW5rcyA9IGQzLm1hcCgpO1xuXG4gICAgdGhpcy5uYW1lID0gbmFtZTtcbiAgICAvLyBsYXlvdXQgaW5mb1xuICAgIHRoaXMuY3ggPSA0MDtcbiAgICB0aGlzLmN5ID0gNDA7XG5cbiAgICAvKlxuICAgICAqIFVwcGVyIGdyb3VwXG4gICAgICogc3ZnIGdyb3VwIGZvciBlbGVtZW50cyB0aGF0IGFwcGVhciBhYm92ZSBsaW5rc1xuICAgICAqL1xuXG4gICAgdGhpcy51cHBlckdyb3VwID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKENvbmZpZy5zdmducywgXCJnXCIpO1xuICAgIHRoaXMudXBwZXJHcm91cC5zZXRBdHRyaWJ1dGUoXCJjbGFzc1wiLCBcInVwcGVyR3JvdXBcIik7XG5cbiAgICAvL2ZvciBwb2x5Z29uXG4gICAgY29uc3QgcG9pbnRzID0gXCIwLCAtMTAgIDEwLCAwIDAsIDEwIC0xMCwgMFwiO1xuICAgIC8vbWFrZSBoaWdobGlnaHRcbiAgICB0aGlzLmhpZ2hsaWdodCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUyhDb25maWcuc3ZnbnMsIFwicG9seWdvblwiKTtcbiAgICB0aGlzLmhpZ2hsaWdodC5zZXRBdHRyaWJ1dGUoXCJwb2ludHNcIiwgcG9pbnRzKTtcbiAgICB0aGlzLmhpZ2hsaWdodC5zZXRBdHRyaWJ1dGUoXCJzdHJva2VcIiwgQ29uZmlnLmhpZ2hsaWdodENvbG91cik7XG4gICAgdGhpcy5oaWdobGlnaHQuc2V0QXR0cmlidXRlKFwic3Ryb2tlLXdpZHRoXCIsIFwiNVwiKTtcbiAgICB0aGlzLmhpZ2hsaWdodC5zZXRBdHRyaWJ1dGUoXCJmaWxsXCIsIFwibm9uZVwiKTtcbiAgICAvL3RoaXMuaGlnaGxpZ2h0LnNldEF0dHJpYnV0ZShcImZpbGwtb3BhY2l0eVwiLCAxKTtcbiAgICAvL2F0dHJpYnV0ZXMgdGhhdCBtYXkgY2hhbmdlXG4gICAgZDMuc2VsZWN0KHRoaXMuaGlnaGxpZ2h0KS5hdHRyKFwic3Ryb2tlLW9wYWNpdHlcIiwgMCk7XG4gICAgdGhpcy51cHBlckdyb3VwLmFwcGVuZENoaWxkKHRoaXMuaGlnaGxpZ2h0KTtcblxuICAgIC8vY3JlYXRlIGxhYmVsIC0gd2Ugd2lsbCBtb3ZlIHRoaXMgc3ZnIGVsZW1lbnQgYXJvdW5kIHdoZW4gcHJvdGVpbiBmb3JtIGNoYW5nZXNcbiAgICB0aGlzLmxhYmVsU1ZHID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKENvbmZpZy5zdmducywgXCJ0ZXh0XCIpO1xuICAgIHRoaXMubGFiZWxTVkcuc2V0QXR0cmlidXRlKFwidGV4dC1hbmNob3JcIiwgXCJlbmRcIik7XG4gICAgdGhpcy5sYWJlbFNWRy5zZXRBdHRyaWJ1dGUoXCJmaWxsXCIsIFwiYmxhY2tcIilcbiAgICB0aGlzLmxhYmVsU1ZHLnNldEF0dHJpYnV0ZShcInhcIiwgXCIwXCIpO1xuICAgIHRoaXMubGFiZWxTVkcuc2V0QXR0cmlidXRlKFwieVwiLCBcIjEwXCIpO1xuICAgIHRoaXMubGFiZWxTVkcuc2V0QXR0cmlidXRlKFwiY2xhc3NcIiwgXCJ4bHZfdGV4dCBwcm90ZWluTGFiZWxcIik7XG4gICAgdGhpcy5sYWJlbFNWRy5zZXRBdHRyaWJ1dGUoJ2ZvbnQtZmFtaWx5JywgJ0FyaWFsJyk7XG4gICAgdGhpcy5sYWJlbFNWRy5zZXRBdHRyaWJ1dGUoJ2ZvbnQtc2l6ZScsICcxNicpO1xuXG4gICAgdGhpcy5sYWJlbFRleHQgPSB0aGlzLm5hbWU7XG4gICAgdGhpcy5sYWJlbFRleHROb2RlID0gZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUodGhpcy5sYWJlbFRleHQpO1xuICAgIHRoaXMubGFiZWxTVkcuYXBwZW5kQ2hpbGQodGhpcy5sYWJlbFRleHROb2RlKTtcbiAgICBkMy5zZWxlY3QodGhpcy5sYWJlbFNWRykuYXR0cihcInRyYW5zZm9ybVwiLFxuICAgICAgICBcInRyYW5zbGF0ZSggLVwiICsgKDE1KSArIFwiIFwiICsgSW50ZXJhY3Rvci5sYWJlbFkgKyBcIilcIik7XG4gICAgdGhpcy51cHBlckdyb3VwLmFwcGVuZENoaWxkKHRoaXMubGFiZWxTVkcpO1xuXG4gICAgLy9tYWtlIGJsb2JcbiAgICB0aGlzLm91dGxpbmUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50TlMoQ29uZmlnLnN2Z25zLCBcInBvbHlnb25cIik7XG4gICAgdGhpcy5vdXRsaW5lLnNldEF0dHJpYnV0ZShcInBvaW50c1wiLCBwb2ludHMpO1xuXG4gICAgdGhpcy5vdXRsaW5lLnNldEF0dHJpYnV0ZShcInN0cm9rZVwiLCBcImJsYWNrXCIpO1xuICAgIHRoaXMub3V0bGluZS5zZXRBdHRyaWJ1dGUoXCJzdHJva2Utd2lkdGhcIiwgXCIxXCIpO1xuICAgIGQzLnNlbGVjdCh0aGlzLm91dGxpbmUpLmF0dHIoXCJzdHJva2Utb3BhY2l0eVwiLCAxKS5hdHRyKFwiZmlsbC1vcGFjaXR5XCIsIDEpXG4gICAgICAgIC5hdHRyKFwiZmlsbFwiLCBcIiNmZmZmZmZcIik7XG4gICAgLy9hcHBlbmQgb3V0bGluZVxuICAgIHRoaXMudXBwZXJHcm91cC5hcHBlbmRDaGlsZCh0aGlzLm91dGxpbmUpO1xuXG4gICAgLy8gZXZlbnRzXG4gICAgY29uc3Qgc2VsZiA9IHRoaXM7XG4gICAgLy8gICAgdGhpcy51cHBlckdyb3VwLnNldEF0dHJpYnV0ZSgncG9pbnRlci1ldmVudHMnLCdhbGwnKTtcbiAgICB0aGlzLnVwcGVyR3JvdXAub25tb3VzZWRvd24gPSBmdW5jdGlvbihldnQpIHtcbiAgICAgICAgc2VsZi5tb3VzZURvd24oZXZ0KTtcbiAgICB9O1xuICAgIHRoaXMudXBwZXJHcm91cC5vbm1vdXNlb3ZlciA9IGZ1bmN0aW9uKGV2dCkge1xuICAgICAgICBzZWxmLm1vdXNlT3ZlcihldnQpO1xuICAgIH07XG4gICAgdGhpcy51cHBlckdyb3VwLm9ubW91c2VvdXQgPSBmdW5jdGlvbihldnQpIHtcbiAgICAgICAgc2VsZi5tb3VzZU91dChldnQpO1xuICAgIH07XG4gICAgdGhpcy51cHBlckdyb3VwLm9udG91Y2hzdGFydCA9IGZ1bmN0aW9uKGV2dCkge1xuICAgICAgICBzZWxmLnRvdWNoU3RhcnQoZXZ0KTtcbiAgICB9O1xuXG59XG5cbi8qXG5STkEucHJvdG90eXBlLnNob3dEYXRhID0gZnVuY3Rpb24oZXZ0KSB7XG4gICAgY29uc3QgdXJsID0gXCJodHRwOi8vcm5hY2VudHJhbC5vcmcvcm5hL1wiICsgdGhpcy5qc29uLmlkZW50aWZpZXIuaWQ7XG4gICAgd2luZG93Lm9wZW4odXJsLCAnX2JsYW5rJyk7XG59XG4qL1xubW9kdWxlLmV4cG9ydHMgPSBSTkE7XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFBQTtBQUNBO0FBQUE7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUVBOzs7OztBQUtBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUVBO0FBRUE7Ozs7Ozs7O0FBTUEiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/model/interactor/RNA.js\n");

/***/ }),

/***/ "./src/model/link/BinaryLink.js":
/*!**************************************!*\
  !*** ./src/model/link/BinaryLink.js ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("//    xiNET interaction viewer\n//    Copyright 2013 Rappsilber Laboratory\n//\n//    This product includes software developed at\n//    the Rappsilber Laboratory (http://www.rappsilberlab.org/).\n\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nvar d3 = __webpack_require__(/*! d3 */ \"./node_modules/d3/d3.js\");\n\nvar Config = __webpack_require__(/*! ../../controller/Config */ \"./src/controller/Config.js\");\n\nvar Link = __webpack_require__(/*! ./Link */ \"./src/model/link/Link.js\");\n\nvar Intersection = __webpack_require__(/*! intersectionjs */ \"./node_modules/intersectionjs/intersection.js\");\n\nvar Point2D = __webpack_require__(/*! point2d */ \"./node_modules/point2d/index.js\"); // BinaryLink.js\n// the class representing a binary interaction\n\n\nBinaryLink.prototype = new Link();\n\nfunction BinaryLink(id, xlvController, fromI, toI) {\n  this.id = id;\n  this.evidences = d3.map();\n  this.interactors = [fromI, toI];\n  this.sequenceLinks = d3.map();\n  this.controller = xlvController;\n} //~ BinaryLink.prototype.getToolTip = function(){\n//~ var tooltip = \"\", fromResidues = \"\", toResidues = \"\";\n//~ var seqLinks = this.sequenceLinks.values();\n//~ var seqLinkCount = seqLinks.length;\n//~ for (var sl = 0; sl < seqLinkCount; sl++){\n//~ if (sl > 0){\n//~ fromResidues += \",\";\n//~ toResidues += \",\";\n//~ }\n//~ var seqLink = seqLinks[sl];\n//~ for (var i = 0; i < seqLink.fromSequenceData.length; i++){\n//~ if (i > 0) tooltip += \",\";\n//~ fromResidues += seqLink.fromSequenceData[i].toString();\n//~ }\n//~ for (var j = 0; j < seqLink.toSequenceData.length; j++){\n//~ if (j > 0) tooltip += \",\";\n//~ toResidues += seqLink.toSequenceData[j].toString();\n//~ }\n//~ }\n//~ tooltip += this.interactors[0].labelText + \" \";\n//~ tooltip += fromResidues;\n//~ tooltip += \" TO \";\n//~ tooltip += this.interactors[1].labelText + \" \";\n//~ tooltip += toResidues;\n//~ return tooltip;\n//~ }\n\n\nBinaryLink.prototype.initSVG = function () {\n  this.line = document.createElementNS(Config.svgns, \"line\");\n  this.highlightLine = document.createElementNS(Config.svgns, \"line\");\n  this.thickLine = document.createElementNS(Config.svgns, \"line\");\n  this.line.setAttribute(\"class\", \"link\");\n  this.line.setAttribute(\"fill\", \"none\");\n  this.line.setAttribute(\"stroke\", \"black\");\n  this.line.setAttribute(\"stroke-width\", \"1\");\n  this.line.setAttribute(\"stroke-linecap\", \"round\");\n  this.highlightLine.setAttribute(\"class\", \"link\");\n  this.highlightLine.setAttribute(\"fill\", \"none\");\n  this.highlightLine.setAttribute(\"stroke\", Config.highlightColour);\n  this.highlightLine.setAttribute(\"stroke-width\", \"10\");\n  this.highlightLine.setAttribute(\"stroke-linecap\", \"round\");\n  this.highlightLine.setAttribute(\"stroke-opacity\", \"0\");\n  this.thickLine.setAttribute(\"class\", \"link\");\n  this.thickLine.setAttribute(\"fill\", \"none\");\n  this.thickLine.setAttribute(\"stroke\", \"lightgray\");\n  this.thickLine.setAttribute(\"stroke-linecap\", \"round\");\n  this.thickLine.setAttribute(\"stroke-linejoin\", \"round\"); //set the events for it\n\n  var self = this;\n\n  this.line.onmousedown = function (evt) {\n    self.mouseDown(evt);\n  };\n\n  this.line.onmouseover = function (evt) {\n    self.mouseOver(evt);\n  };\n\n  this.line.onmouseout = function (evt) {\n    self.mouseOut(evt);\n  };\n\n  this.line.ontouchstart = function (evt) {\n    self.touchStart(evt);\n  };\n\n  this.highlightLine.onmousedown = function (evt) {\n    self.mouseDown(evt);\n  };\n\n  this.highlightLine.onmouseover = function (evt) {\n    self.mouseOver(evt);\n  };\n\n  this.highlightLine.onmouseout = function (evt) {\n    self.mouseOut(evt);\n  };\n\n  this.highlightLine.ontouchstart = function (evt) {\n    self.touchStart(evt);\n  };\n\n  this.thickLine.onmousedown = function (evt) {\n    self.mouseDown(evt);\n  };\n\n  this.thickLine.onmouseover = function (evt) {\n    self.mouseOver(evt);\n  };\n\n  this.thickLine.onmouseout = function (evt) {\n    self.mouseOut(evt);\n  };\n\n  this.thickLine.ontouchstart = function (evt) {\n    self.touchStart(evt);\n  };\n};\n\nBinaryLink.prototype.showHighlight = function (show) {\n  if (this.notSubLink === true) {\n    this.highlightInteractors(show);\n  }\n\n  if (show) {\n    //~ this.highlightLine.setAttribute(\"stroke\", xiNET.highlightColour.toRGB());\n    this.highlightLine.setAttribute(\"stroke-opacity\", \"1\");\n  } else {\n    //~ this.highlightLine.setAttribute(\"stroke\", xiNET.selectedColour.toRGB());\n    //~ if (this.isSelected === false) {\n    this.highlightLine.setAttribute(\"stroke-opacity\", \"0\"); //~ }\n  }\n};\n\nBinaryLink.prototype.check = function () {\n  if (!this.interactors[0].form && !this.interactors[1].form) {\n    //checks if form not defined or is 0\n    this.show();\n    return true;\n  } else {\n    //at least one end was in stick form\n    this.hide();\n    return false;\n  }\n};\n\nBinaryLink.prototype.show = function () {\n  if (typeof this.line === 'undefined') {\n    this.initSVG();\n  }\n\n  this.line.setAttribute(\"stroke-width\", this.controller.z * 1);\n  this.highlightLine.setAttribute(\"stroke-width\", this.controller.z * 10);\n  this.setLinkCoordinates(this.interactors[0]);\n  this.setLinkCoordinates(this.interactors[1]);\n\n  if (this.thickLineShown) {\n    this.controller.p_pLinksWide.appendChild(this.thickLine);\n  }\n\n  this.controller.highlights.appendChild(this.highlightLine);\n  this.controller.p_pLinks.appendChild(this.line);\n\n  if (this.thickLineShown) {\n    this.thickLine.setAttribute(\"stroke-width\", this.w);\n  }\n};\n\nBinaryLink.prototype.hide = function () {\n  this.thickLine.remove();\n  this.highlightLine.remove();\n  this.line.remove(); // const p_pLinksWide = [];\n  // const highlights = [];\n  // const p_pLinks = [];\n  //\n  // for (var i = 0; i < this.controller.p_pLinksWide.childNodes.length; i++) {\n  //     p_pLinksWide[i] = this.controller.p_pLinksWide.childNodes[i];\n  // }\n  //\n  // for (var i = 0; i < this.controller.highlights.childNodes.length; i++) {\n  //     highlights[i] = this.controller.highlights.childNodes[i];\n  // }\n  //\n  // for (var i = 0; i < this.controller.p_pLinks.childNodes.length; i++) {\n  //     p_pLinks[i] = this.controller.p_pLinks.childNodes[i];\n  // }\n  //\n  // if (p_pLinksWide.indexOf(this.thickLine) > -1) {\n  //     this.controller.p_pLinksWide.removeChild(this.thickLine);\n  // }\n  // if (highlights.indexOf(this.highlightLine) > -1) {\n  //     this.controller.highlights.removeChild(this.highlightLine);\n  // }\n  // if (p_pLinks.indexOf(this.line) > -1) {\n  //     this.controller.p_pLinks.removeChild(this.line);\n  // }\n};\n\nBinaryLink.prototype.setLinkCoordinates = function () {\n  if (typeof this.line === 'undefined') {\n    this.initSVG();\n  }\n\n  var pos1 = this.interactors[0].getPosition();\n  var pos2 = this.interactors[1].getPosition();\n  var naryPath, iPath, a1, a2, intersect;\n\n  if (this.interactors[0].type === 'complex') {\n    naryPath = this.interactors[0].naryLink.hull;\n    iPath = [];\n\n    var _iterator = _createForOfIteratorHelper(naryPath),\n        _step;\n\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var p = _step.value;\n        iPath.push(new Point2D(p[0], p[1]));\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n\n    a1 = new Point2D(pos1[0], pos1[1]);\n    a2 = new Point2D(pos2[0], pos2[1]);\n    intersect = Intersection.intersectLinePolygon(a1, a2, iPath);\n\n    if (intersect.points[0]) {\n      pos1 = [intersect.points[0].x, intersect.points[0].y];\n    }\n\n    this.line.setAttribute(\"marker-start\", \"url(#marker_diamond)\");\n    this.line.setAttribute(\"marker-end\", \"url(#marker_diamond)\");\n  }\n\n  if (this.interactors[1].type === 'complex') {\n    naryPath = this.interactors[0].naryLink.hull;\n    iPath = [];\n\n    var _iterator2 = _createForOfIteratorHelper(naryPath),\n        _step2;\n\n    try {\n      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n        var _p = _step2.value;\n        iPath.push(new Point2D(_p[0], _p[1]));\n      }\n    } catch (err) {\n      _iterator2.e(err);\n    } finally {\n      _iterator2.f();\n    }\n\n    a1 = new Point2D(pos1[0], pos1[1]);\n    a2 = new Point2D(pos2[0], pos2[1]);\n    intersect = Intersection.intersectLinePolygon(a1, a2, iPath);\n\n    if (intersect.points[0]) {\n      pos2 = [intersect.points[0].x, intersect.points[0].y];\n    }\n\n    this.line.setAttribute(\"marker-start\", \"url(#marker_diamond)\");\n    this.line.setAttribute(\"marker-end\", \"url(#marker_diamond)\");\n  }\n\n  this.line.setAttribute(\"x1\", pos1[0]);\n  this.line.setAttribute(\"y1\", pos1[1]);\n  this.highlightLine.setAttribute(\"x1\", pos1[0]);\n  this.highlightLine.setAttribute(\"y1\", pos1[1]);\n\n  if (this.thickLineShown) {\n    this.thickLine.setAttribute(\"x1\", pos1[0]);\n    this.thickLine.setAttribute(\"y1\", pos1[1]);\n  }\n\n  this.line.setAttribute(\"x2\", pos2[0]);\n  this.line.setAttribute(\"y2\", pos2[1]);\n  this.highlightLine.setAttribute(\"x2\", pos2[0]);\n  this.highlightLine.setAttribute(\"y2\", pos2[1]);\n\n  if (this.thickLineShown) {\n    this.thickLine.setAttribute(\"x2\", pos2[0]);\n    this.thickLine.setAttribute(\"y2\", pos2[1]);\n  }\n};\n/*\nBinaryLink.prototype.getOtherEnd = function(interactor) {\n    return ((this.interactors[0] === interactor) ? this.interactors[1] : this.interactors[0]);\n};\n*/\n\n\nmodule.exports = BinaryLink;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/model/link/BinaryLink.js\n");

/***/ }),

/***/ "./src/model/link/Link.js":
/*!********************************!*\
  !*** ./src/model/link/Link.js ***!
  \********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("//      xiNET Interaction Viewer\n//      Copyright 2013 Rappsilber Laboratory\n//\n//      This product includes software developed at\n//      the Rappsilber Laboratory (http://www.rappsilberlab.org/).\n//\n//      author: Colin Combe\n//\n//      Link.js\n//      The graphical representation of one or many interactions.\n//      One link represents all interactions with same participants.\n//      E.g. psi-mi may contains multiple experiments giving evidence for same interaction\n//      - using one glyph to represent them all prevents uppermost graphic from occluding those lower down\n\n\nvar d3 = __webpack_require__(/*! d3 */ \"./node_modules/d3/d3.js\");\n\nvar Link = function Link() {};\n\nLink.maxNoEvidences = 0;\n\nLink.prototype.addEvidence = function (interaction) {\n  if (!this.evidences) {\n    this.evidences = d3.map();\n  }\n\n  if (this.evidences.has(interaction.id) === false) {\n    this.evidences.set(interaction.id, interaction);\n\n    if (this.evidences.values().length > Link.maxNoEvidences) {\n      //values().length can be replaced with size() in newer d3 lib\n      Link.maxNoEvidences = this.evidences.values().length;\n      return true;\n    }\n  } else {\n    return false;\n  }\n};\n\nLink.prototype.highlightInteractors = function (show) {\n  var interactors = this.interactors;\n\n  for (var i = 0; i < interactors.length; i++) {\n    interactors[i].showHighlight(show);\n  }\n}; // event handler for starting dragging or rotation (or flipping internal links)\n\n\nLink.prototype.mouseDown = function (evt) {\n  this.controller.preventDefaultsAndStopPropagation(evt); //see MouseEvents.js\n  //if a force layout exists then stop it\n\n  if (this.controller.layout) {\n    this.controller.layout.stop();\n  }\n\n  this.controller.dragElement = this; //this.controller.clearSelection();\n  //this.setSelected(true);\n  //store start location\n\n  var p = this.controller.getEventPoint(evt); // seems to be correct, see above\n\n  this.controller.dragStart = this.controller.mouseToSVG(p.x, p.y); //~ this.showData();\n\n  return false;\n}; // highlight on mouseover, all 'subclasses' need a showHighlight method\n\n\nLink.prototype.mouseOver = function (evt) {\n  //console.log(\"clickable mouse over\");\n  this.controller.preventDefaultsAndStopPropagation(evt); //this.showHighlight(true, true);\n\n  this.controller.setTooltip(this.getToolTip(), this.colour);\n  return false;\n};\n\nLink.prototype.getToolTip = function () {\n  return this.id;\n};\n\nLink.prototype.mouseOut = function (evt) {\n  this.controller.preventDefaultsAndStopPropagation(evt);\n  this.showHighlight(false, true);\n  this.controller.hideTooltip();\n  return false;\n};\n\nLink.prototype.touchStart = function (evt) {\n  this.controller.preventDefaultsAndStopPropagation(evt); //see MouseEvents.js\n  //if a force layout exists then stop it\n\n  if (this.controller.layout !== undefined) {\n    this.controller.layout.stop();\n  }\n\n  this.controller.dragElement = this;\n  this.controller.clearSelection(); //    this.setSelected(true);\n  //store start location\n\n  var p = this.controller.getTouchEventPoint(evt); // seems to be correct, see above\n\n  this.controller.dragStart = this.controller.mouseToSVG(p.x, p.y); //~ this.showData();\n\n  return false;\n}; //used when link clicked\n\n/*Link.prototype.showData = function() {\n    if (document.getElementById('jsonHeading')) {\n        document.getElementById('jsonHeading').innerHTML = this.id;\n    }\n    if (document.getElementById('json')) {\n        document.getElementById('json').innerHTML =\n            \"<pre>\" + JSON.stringify(this.filteredEvidence(), null, ' ') + \"</pre>\";\n    }\n};*/\n\n\nLink.prototype.filteredEvidence = function () {\n  //TODO - filtering\n  return this.evidences.values(); //~ if (typeof interaction.confidences !== 'undefined') {\n  //~ var confidences = interaction.confidences;\n  //~ var confCount = confidences.length;\n  //~ for (var c = 0; c < confCount; c++){\n  //~ var conf = confidences[c];\n  //~ if (conf.type === 'intact-miscore'){\n  //~ interaction.score = conf.value * 1.0;\n  //~ }\n  //~ }\n  //~ }\n}; //used by BinaryLink and UnaryLink\n\n\nLink.prototype.hide = function () {\n  this.thickLine.remove();\n  this.highlightLine.remove();\n  this.line.remove(); // const p_pLinksWide = [];\n  // const highlights = [];\n  // const p_pLinks = [];\n  //\n  // for (var i = 0; i < this.controller.p_pLinksWide.childNodes.length; i++) {\n  //     p_pLinksWide[i] = this.controller.p_pLinksWide.childNodes[i];\n  // }\n  //\n  // for (var i = 0; i < this.controller.highlights.childNodes.length; i++) {\n  //     highlights[i] = this.controller.highlights.childNodes[i];\n  // }\n  //\n  // for (var i = 0; i < this.controller.p_pLinks.childNodes.length; i++) {\n  //     p_pLinks[i] = this.controller.p_pLinks.childNodes[i];\n  // }\n  //\n  // if (p_pLinksWide.indexOf(this.thickLine) > -1) {\n  //     this.controller.p_pLinksWide.removeChild(this.thickLine);\n  // }\n  // if (highlights.indexOf(this.highlightLine) > -1) {\n  //     this.controller.highlights.removeChild(this.highlightLine);\n  // }\n  // if (p_pLinks.indexOf(this.line) > -1) {\n  //     this.controller.p_pLinks.removeChild(this.line);\n  // }\n};\n\nmodule.exports = Link;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/model/link/Link.js\n");

/***/ }),

/***/ "./src/model/link/NaryLink.js":
/*!************************************!*\
  !*** ./src/model/link/NaryLink.js ***!
  \************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("//      xiNET interaction viewer\n//      Copyright 2014 Rappsilber Laboratory\n//\n//      This product includes software developed at\n//      the Rappsilber Laboratory (http://www.rappsilberlab.org/).\n//\n//      author: Colin Combe, Josh Heimbach\n//\n//\t\tNaryLink.js\n//\t\tgraphically represents n-ary interactions\n\n\nvar d3 = __webpack_require__(/*! d3 */ \"./node_modules/d3/d3.js\");\n\nvar Link = __webpack_require__(/*! ./Link */ \"./src/model/link/Link.js\");\n\nvar Config = __webpack_require__(/*! ../../controller/Config */ \"./src/controller/Config.js\");\n\nvar Interactor = __webpack_require__(/*! ../interactor/Interactor */ \"./src/model/interactor/Interactor.js\"); //NaryLink.naryColours; // init'ed in clear function of controller\n\n\nNaryLink.orbitNodes = 16;\nNaryLink.orbitRadius = 20;\nNaryLink.prototype = new Link();\n\nfunction NaryLink(id, xlvController) {\n  this.id = id;\n  this.evidences = d3.map();\n  this.interactors = []; // todo: rename to participants\n\n  this.sequenceLinks = d3.map();\n  this.binaryLinks = d3.map();\n  this.unaryLinks = d3.map();\n  this.controller = xlvController;\n  this.tooltip = this.id; //used to avoid some unnecessary manipulation of DOM\n\n  this.initSVG();\n}\n\nNaryLink.prototype.getTotalParticipantCount = function () {\n  var result = 0;\n  var c = this.interactors.length;\n\n  for (var p = 0; p < c; p++) {\n    var participant = this.interactors[p]; //console.log(\"! \" + typeof participant);\n\n    if (participant.type !== \"complex\") {\n      result++;\n    } else {\n      result = result + participant.naryLink.getTotalParticipantCount();\n    }\n  }\n\n  return result;\n};\n\nNaryLink.prototype.initSVG = function () {\n  this.path = document.createElementNS(Config.svgns, \"path\");\n  this.colour = NaryLink.naryColours(this.id);\n  this.path.setAttribute('fill', this.colour); //set the events for it\n\n  var self = this;\n\n  this.path.onmousedown = function (evt) {\n    self.mouseDown(evt);\n  };\n\n  this.path.onmouseover = function (evt) {\n    self.mouseOver(evt);\n  };\n\n  this.path.onmouseout = function (evt) {\n    self.mouseOut(evt);\n  };\n\n  this.path.ontouchstart = function (evt) {\n    self.touchStart(evt);\n  };\n};\n\nNaryLink.prototype.showHighlight = function (show) {\n  this.highlightInteractors(show);\n};\n\nNaryLink.prototype.check = function () {\n  this.show();\n  return true;\n};\n\nNaryLink.prototype.show = function () {\n  this.path.setAttribute(\"stroke-width\", this.controller.z * 1);\n  this.setLinkCoordinates();\n  this.controller.naryLinks.appendChild(this.path);\n};\n\nNaryLink.prototype.hide = function () {};\n\nNaryLink.prototype.setLinkCoordinates = function () {\n  // Uses d3.geom.hull to calculate a bounding path around an array of vertices\n  var calculateHullPath = function calculateHullPath(values) {\n    var hullPath = d3.geom.hull(values);\n    self.hull = hullPath; //hack?\n\n    return \"M\" + hullPath.join(\"L\") + \"Z\";\n  };\n\n  var self = this; // TODO: - tidy hack above?\n\n  var mapped = this.orbitNodes(this.getMappedCoordinates());\n  var hullValues = calculateHullPath(mapped);\n\n  if (hullValues) {\n    this.path.setAttribute('d', hullValues);\n  }\n\n  if (this.complex) {\n    this.complex.setAllLinkCoordinates();\n  }\n};\n\nNaryLink.prototype.getMappedCoordinates = function () {\n  var interactors = this.interactors;\n  var mapped = [];\n  var ic = interactors.length;\n\n  for (var i = 0; i < ic; i++) {\n    var interactor = interactors[i];\n\n    if (interactor.type === 'complex') {\n      mapped = mapped.concat(this.orbitNodes(interactor.naryLink.getMappedCoordinates()));\n    } else if (interactor.form === 1) {\n      var start = interactor.getResidueCoordinates(0);\n      var end = interactor.getResidueCoordinates(interactor.size);\n\n      if (!isNaN(start[0]) && !isNaN(start[1]) && !isNaN(end[0]) && !isNaN(end[1])) {\n        mapped.push(start);\n        mapped.push(end);\n      } else {\n        mapped.push(interactor.getPosition());\n      }\n    } else {\n      mapped.push(interactor.getPosition());\n    }\n  }\n\n  return mapped;\n}; //'orbit' nodes - several nodes around interactor positions to give margin\n\n\nNaryLink.prototype.orbitNodes = function (mapped) {\n  var orbitNodes = [];\n  var mc = mapped.length;\n\n  for (var mi = 0; mi < mc; mi++) {\n    var m = mapped[mi];\n\n    for (var o = 0; o < NaryLink.orbitNodes; o++) {\n      var angle = 360 / NaryLink.orbitNodes * o;\n      var p = [m[0] + NaryLink.orbitRadius, m[1]];\n      orbitNodes.push(Interactor.rotatePointAboutPoint(p, m, angle));\n    }\n  }\n\n  return orbitNodes;\n};\n\nmodule.exports = NaryLink;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvbW9kZWwvbGluay9OYXJ5TGluay5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovL3hpTkVULy4vc3JjL21vZGVsL2xpbmsvTmFyeUxpbmsuanM/NzIyOSJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyAgICAgIHhpTkVUIGludGVyYWN0aW9uIHZpZXdlclxuLy8gICAgICBDb3B5cmlnaHQgMjAxNCBSYXBwc2lsYmVyIExhYm9yYXRvcnlcbi8vXG4vLyAgICAgIFRoaXMgcHJvZHVjdCBpbmNsdWRlcyBzb2Z0d2FyZSBkZXZlbG9wZWQgYXRcbi8vICAgICAgdGhlIFJhcHBzaWxiZXIgTGFib3JhdG9yeSAoaHR0cDovL3d3dy5yYXBwc2lsYmVybGFiLm9yZy8pLlxuLy9cbi8vICAgICAgYXV0aG9yOiBDb2xpbiBDb21iZSwgSm9zaCBIZWltYmFjaFxuLy9cbi8vXHRcdE5hcnlMaW5rLmpzXG4vL1x0XHRncmFwaGljYWxseSByZXByZXNlbnRzIG4tYXJ5IGludGVyYWN0aW9uc1xuXG5cInVzZSBzdHJpY3RcIjtcblxuY29uc3QgZDMgPSByZXF1aXJlKCdkMycpO1xuY29uc3QgTGluayA9IHJlcXVpcmUoJy4vTGluaycpO1xuY29uc3QgQ29uZmlnID0gcmVxdWlyZSgnLi4vLi4vY29udHJvbGxlci9Db25maWcnKTtcbmNvbnN0IEludGVyYWN0b3IgPSByZXF1aXJlKCcuLi9pbnRlcmFjdG9yL0ludGVyYWN0b3InKTtcblxuLy9OYXJ5TGluay5uYXJ5Q29sb3VyczsgLy8gaW5pdCdlZCBpbiBjbGVhciBmdW5jdGlvbiBvZiBjb250cm9sbGVyXG5OYXJ5TGluay5vcmJpdE5vZGVzID0gMTY7XG5OYXJ5TGluay5vcmJpdFJhZGl1cyA9IDIwO1xuXG5OYXJ5TGluay5wcm90b3R5cGUgPSBuZXcgTGluaygpO1xuXG5mdW5jdGlvbiBOYXJ5TGluayhpZCwgeGx2Q29udHJvbGxlcikge1xuICAgIHRoaXMuaWQgPSBpZDtcbiAgICB0aGlzLmV2aWRlbmNlcyA9IGQzLm1hcCgpO1xuICAgIHRoaXMuaW50ZXJhY3RvcnMgPSBbXTsgLy8gdG9kbzogcmVuYW1lIHRvIHBhcnRpY2lwYW50c1xuICAgIHRoaXMuc2VxdWVuY2VMaW5rcyA9IGQzLm1hcCgpO1xuICAgIHRoaXMuYmluYXJ5TGlua3MgPSBkMy5tYXAoKTtcbiAgICB0aGlzLnVuYXJ5TGlua3MgPSBkMy5tYXAoKTtcbiAgICB0aGlzLmNvbnRyb2xsZXIgPSB4bHZDb250cm9sbGVyO1xuICAgIHRoaXMudG9vbHRpcCA9IHRoaXMuaWQ7XG4gICAgLy91c2VkIHRvIGF2b2lkIHNvbWUgdW5uZWNlc3NhcnkgbWFuaXB1bGF0aW9uIG9mIERPTVxuICAgIHRoaXMuaW5pdFNWRygpO1xufVxuXG5OYXJ5TGluay5wcm90b3R5cGUuZ2V0VG90YWxQYXJ0aWNpcGFudENvdW50ID0gZnVuY3Rpb24oKSB7XG4gICAgbGV0IHJlc3VsdCA9IDA7XG4gICAgY29uc3QgYyA9IHRoaXMuaW50ZXJhY3RvcnMubGVuZ3RoO1xuICAgIGZvciAobGV0IHAgPSAwOyBwIDwgYzsgcCsrKSB7XG4gICAgICAgIGNvbnN0IHBhcnRpY2lwYW50ID0gdGhpcy5pbnRlcmFjdG9yc1twXTtcbiAgICAgICAgLy9jb25zb2xlLmxvZyhcIiEgXCIgKyB0eXBlb2YgcGFydGljaXBhbnQpO1xuICAgICAgICBpZiAocGFydGljaXBhbnQudHlwZSAhPT0gXCJjb21wbGV4XCIpIHtcbiAgICAgICAgICAgIHJlc3VsdCsrO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmVzdWx0ID0gcmVzdWx0ICsgcGFydGljaXBhbnQubmFyeUxpbmsuZ2V0VG90YWxQYXJ0aWNpcGFudENvdW50KCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cblxuTmFyeUxpbmsucHJvdG90eXBlLmluaXRTVkcgPSBmdW5jdGlvbigpIHtcbiAgICB0aGlzLnBhdGggPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50TlMoQ29uZmlnLnN2Z25zLCBcInBhdGhcIik7XG4gICAgdGhpcy5jb2xvdXIgPSBOYXJ5TGluay5uYXJ5Q29sb3Vycyh0aGlzLmlkKTtcbiAgICB0aGlzLnBhdGguc2V0QXR0cmlidXRlKCdmaWxsJywgdGhpcy5jb2xvdXIpO1xuICAgIC8vc2V0IHRoZSBldmVudHMgZm9yIGl0XG4gICAgY29uc3Qgc2VsZiA9IHRoaXM7XG4gICAgdGhpcy5wYXRoLm9ubW91c2Vkb3duID0gZnVuY3Rpb24oZXZ0KSB7XG4gICAgICAgIHNlbGYubW91c2VEb3duKGV2dCk7XG4gICAgfTtcbiAgICB0aGlzLnBhdGgub25tb3VzZW92ZXIgPSBmdW5jdGlvbihldnQpIHtcbiAgICAgICAgc2VsZi5tb3VzZU92ZXIoZXZ0KTtcbiAgICB9O1xuICAgIHRoaXMucGF0aC5vbm1vdXNlb3V0ID0gZnVuY3Rpb24oZXZ0KSB7XG4gICAgICAgIHNlbGYubW91c2VPdXQoZXZ0KTtcbiAgICB9O1xuICAgIHRoaXMucGF0aC5vbnRvdWNoc3RhcnQgPSBmdW5jdGlvbihldnQpIHtcbiAgICAgICAgc2VsZi50b3VjaFN0YXJ0KGV2dCk7XG4gICAgfTtcbn07XG5cbk5hcnlMaW5rLnByb3RvdHlwZS5zaG93SGlnaGxpZ2h0ID0gZnVuY3Rpb24oc2hvdykge1xuICAgIHRoaXMuaGlnaGxpZ2h0SW50ZXJhY3RvcnMoc2hvdyk7XG59O1xuXG5OYXJ5TGluay5wcm90b3R5cGUuY2hlY2sgPSBmdW5jdGlvbigpIHtcbiAgICB0aGlzLnNob3coKTtcbiAgICByZXR1cm4gdHJ1ZTtcbn07XG5cbk5hcnlMaW5rLnByb3RvdHlwZS5zaG93ID0gZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5wYXRoLnNldEF0dHJpYnV0ZShcInN0cm9rZS13aWR0aFwiLCB0aGlzLmNvbnRyb2xsZXIueiAqIDEpO1xuICAgIHRoaXMuc2V0TGlua0Nvb3JkaW5hdGVzKCk7XG4gICAgdGhpcy5jb250cm9sbGVyLm5hcnlMaW5rcy5hcHBlbmRDaGlsZCh0aGlzLnBhdGgpO1xufTtcblxuTmFyeUxpbmsucHJvdG90eXBlLmhpZGUgPSBmdW5jdGlvbigpIHt9O1xuXG5OYXJ5TGluay5wcm90b3R5cGUuc2V0TGlua0Nvb3JkaW5hdGVzID0gZnVuY3Rpb24oKSB7XG4gICAgLy8gVXNlcyBkMy5nZW9tLmh1bGwgdG8gY2FsY3VsYXRlIGEgYm91bmRpbmcgcGF0aCBhcm91bmQgYW4gYXJyYXkgb2YgdmVydGljZXNcbiAgICBjb25zdCBjYWxjdWxhdGVIdWxsUGF0aCA9IGZ1bmN0aW9uICh2YWx1ZXMpIHtcbiAgICAgICAgY29uc3QgaHVsbFBhdGggPSBkMy5nZW9tLmh1bGwodmFsdWVzKTtcbiAgICAgICAgc2VsZi5odWxsID0gaHVsbFBhdGg7IC8vaGFjaz9cbiAgICAgICAgcmV0dXJuIFwiTVwiICsgaHVsbFBhdGguam9pbihcIkxcIikgKyBcIlpcIjtcbiAgICB9O1xuICAgIGNvbnN0IHNlbGYgPSB0aGlzOyAvLyBUT0RPOiAtIHRpZHkgaGFjayBhYm92ZT9cbiAgICBjb25zdCBtYXBwZWQgPSB0aGlzLm9yYml0Tm9kZXModGhpcy5nZXRNYXBwZWRDb29yZGluYXRlcygpKTtcbiAgICBjb25zdCBodWxsVmFsdWVzID0gY2FsY3VsYXRlSHVsbFBhdGgobWFwcGVkKTtcbiAgICBpZiAoaHVsbFZhbHVlcykge1xuICAgICAgICB0aGlzLnBhdGguc2V0QXR0cmlidXRlKCdkJywgaHVsbFZhbHVlcyk7XG4gICAgfVxuICAgIGlmICh0aGlzLmNvbXBsZXgpIHtcbiAgICAgICAgdGhpcy5jb21wbGV4LnNldEFsbExpbmtDb29yZGluYXRlcygpO1xuICAgIH1cbn07XG5cbk5hcnlMaW5rLnByb3RvdHlwZS5nZXRNYXBwZWRDb29yZGluYXRlcyA9IGZ1bmN0aW9uKCkge1xuICAgIGNvbnN0IGludGVyYWN0b3JzID0gdGhpcy5pbnRlcmFjdG9ycztcbiAgICBsZXQgbWFwcGVkID0gW107XG4gICAgY29uc3QgaWMgPSBpbnRlcmFjdG9ycy5sZW5ndGg7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBpYzsgaSsrKSB7XG4gICAgICAgIGNvbnN0IGludGVyYWN0b3IgPSBpbnRlcmFjdG9yc1tpXTtcbiAgICAgICAgaWYgKGludGVyYWN0b3IudHlwZSA9PT0gJ2NvbXBsZXgnKSB7XG4gICAgICAgICAgICBtYXBwZWQgPSBtYXBwZWQuY29uY2F0KHRoaXMub3JiaXROb2RlcyhpbnRlcmFjdG9yLm5hcnlMaW5rLmdldE1hcHBlZENvb3JkaW5hdGVzKCkpKTtcbiAgICAgICAgfSBlbHNlIGlmIChpbnRlcmFjdG9yLmZvcm0gPT09IDEpIHtcbiAgICAgICAgICAgIGNvbnN0IHN0YXJ0ID0gaW50ZXJhY3Rvci5nZXRSZXNpZHVlQ29vcmRpbmF0ZXMoMCk7XG4gICAgICAgICAgICBjb25zdCBlbmQgPSBpbnRlcmFjdG9yLmdldFJlc2lkdWVDb29yZGluYXRlcyhpbnRlcmFjdG9yLnNpemUpO1xuICAgICAgICAgICAgaWYgKCFpc05hTihzdGFydFswXSkgJiYgIWlzTmFOKHN0YXJ0WzFdKSAmJlxuICAgICAgICAgICAgICAgICFpc05hTihlbmRbMF0pICYmICFpc05hTihlbmRbMV0pKSB7XG4gICAgICAgICAgICAgICAgbWFwcGVkLnB1c2goc3RhcnQpO1xuICAgICAgICAgICAgICAgIG1hcHBlZC5wdXNoKGVuZCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIG1hcHBlZC5wdXNoKGludGVyYWN0b3IuZ2V0UG9zaXRpb24oKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBtYXBwZWQucHVzaChpbnRlcmFjdG9yLmdldFBvc2l0aW9uKCkpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBtYXBwZWQ7XG59XG5cbi8vJ29yYml0JyBub2RlcyAtIHNldmVyYWwgbm9kZXMgYXJvdW5kIGludGVyYWN0b3IgcG9zaXRpb25zIHRvIGdpdmUgbWFyZ2luXG5OYXJ5TGluay5wcm90b3R5cGUub3JiaXROb2RlcyA9IGZ1bmN0aW9uKG1hcHBlZCkge1xuICAgIGNvbnN0IG9yYml0Tm9kZXMgPSBbXTtcbiAgICBjb25zdCBtYyA9IG1hcHBlZC5sZW5ndGg7XG4gICAgZm9yIChsZXQgbWkgPSAwOyBtaSA8IG1jOyBtaSsrKSB7XG4gICAgICAgIGNvbnN0IG0gPSBtYXBwZWRbbWldO1xuICAgICAgICBmb3IgKGxldCBvID0gMDsgbyA8IE5hcnlMaW5rLm9yYml0Tm9kZXM7IG8rKykge1xuICAgICAgICAgICAgY29uc3QgYW5nbGUgPSAoMzYwIC8gTmFyeUxpbmsub3JiaXROb2RlcykgKiBvO1xuICAgICAgICAgICAgY29uc3QgcCA9IFttWzBdICsgTmFyeUxpbmsub3JiaXRSYWRpdXMsIG1bMV1dO1xuICAgICAgICAgICAgb3JiaXROb2Rlcy5wdXNoKEludGVyYWN0b3Iucm90YXRlUG9pbnRBYm91dFBvaW50KHAsIG0sIGFuZ2xlKSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG9yYml0Tm9kZXM7XG59XG5cblxubW9kdWxlLmV4cG9ydHMgPSBOYXJ5TGluaztcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFBQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFFQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/model/link/NaryLink.js\n");

/***/ }),

/***/ "./src/model/link/SequenceLink.js":
/*!****************************************!*\
  !*** ./src/model/link/SequenceLink.js ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("//    xiNET interaction viewer\n//    Copyright 2013 Rappsilber Laboratory\n//\n//    This product includes software developed at\n//    the Rappsilber Laboratory (http://www.rappsilberlab.org/).\n\n\nvar Link = __webpack_require__(/*! ./Link */ \"./src/model/link/Link.js\");\n\nvar Config = __webpack_require__(/*! ../../controller/Config */ \"./src/controller/Config.js\"); //todo: rename to SequenceFeatureLink\n\n\nfunction SequenceLink(id, fromFeatPos, toFeatPos, xlvController) {\n  this.init(id, fromFeatPos, toFeatPos, xlvController);\n}\n\nSequenceLink.prototype = new Link();\n\nSequenceLink.prototype.init = function (id, fromFeatPos, toFeatPos, xlvController) {\n  this.id = id;\n  this.controller = xlvController;\n  this.fromSequenceData = fromFeatPos;\n  this.toSequenceData = toFeatPos;\n  this.interactors = [this.fromSequenceData[0].node, this.toSequenceData[0].node]; //*\n  // *potentially, this over simplifies the situation,\n  // but there is a workaround in way ReadMiJson init's links so OK for now\n};\n/*\nSequenceLink.prototype.getToolTip = function() {\n    var tooltip = \"\";\n    tooltip += this.interactors[0].labelText + \" \";\n    for (var i = 0; i < this.fromSequenceData.length; i++) {\n        if (i > 0) tooltip += \",\";\n        tooltip += this.fromSequenceData[i].toString();\n    }\n    tooltip += \" to \";\n    tooltip += this.interactors[1].labelText + \" \";\n    for (var j = 0; j < this.toSequenceData.length; j++) {\n        if (j > 0) tooltip += \",\";\n        tooltip += this.toSequenceData[j].toString();\n    }\n    return tooltip;\n}*/\n\n\nSequenceLink.prototype.initSVG = function () {\n  if (typeof this.glyph === 'undefined') {\n    this.glyph = document.createElementNS(Config.svgns, \"path\");\n    this.uncertainGlyph = document.createElementNS(Config.svgns, \"path\");\n    this.highlightGlyph = document.createElementNS(Config.svgns, \"path\");\n    this.glyph.setAttribute(\"stroke-linecap\", \"round\");\n    this.uncertainGlyph.setAttribute(\"stroke-linecap\", \"round\");\n    this.highlightGlyph.setAttribute(\"stroke-linecap\", \"round\");\n    this.glyph.setAttribute(\"class\", \"link\");\n    this.glyph.setAttribute(\"fill\", \"black\"); //\"#E08214\");\n\n    this.glyph.setAttribute(\"opacity\", \"0.6\");\n    this.glyph.setAttribute(\"stroke\", \"black\"); //\"\"#A08214\");// // TODO: will look better with this line partly removed\n\n    this.glyph.setAttribute(\"stroke-opacity\", \"0.6\");\n    this.glyph.setAttribute(\"stroke-width\", \"1\");\n    this.uncertainGlyph.setAttribute(\"class\", \"link\");\n    this.uncertainGlyph.setAttribute(\"fill\", \"black\"); //url('#checkers_uncertain')\");//\"#A01284\");\n\n    this.uncertainGlyph.setAttribute(\"stroke\", \"black\"); //\"none\");//\"#A01284\");\n\n    this.uncertainGlyph.setAttribute(\"stroke-opacity\", \"0.2\");\n    this.uncertainGlyph.setAttribute(\"fill-opacity\", \"0.2\");\n    this.highlightGlyph.setAttribute(\"class\", \"link\");\n    this.highlightGlyph.setAttribute(\"fill\", \"none\");\n    this.highlightGlyph.setAttribute(\"stroke\", Config.highlightColour);\n    this.highlightGlyph.setAttribute(\"stroke-width\", \"10\");\n    this.highlightGlyph.setAttribute(\"stroke-opacity\", \"0\"); //set the events for it\n\n    var self = this;\n\n    this.uncertainGlyph.onmousedown = function (evt) {\n      self.mouseDown(evt);\n    };\n\n    this.uncertainGlyph.onmouseover = function (evt) {\n      self.mouseOver(evt);\n    };\n\n    this.uncertainGlyph.onmouseout = function (evt) {\n      self.mouseOut(evt);\n    };\n\n    this.glyph.onmousedown = function (evt) {\n      self.mouseDown(evt);\n    };\n\n    this.glyph.onmouseover = function (evt) {\n      self.mouseOver(evt);\n    };\n\n    this.glyph.onmouseout = function (evt) {\n      self.mouseOut(evt);\n    };\n\n    this.highlightGlyph.onmousedown = function (evt) {\n      self.mouseDown(evt);\n    };\n\n    this.highlightGlyph.onmouseover = function (evt) {\n      self.mouseOver(evt);\n    };\n\n    this.highlightGlyph.onmouseout = function (evt) {\n      self.mouseOut(evt);\n    };\n  }\n}; //andAlternatives means highlight alternative links in case of site ambiguity\n\n\nSequenceLink.prototype.showHighlight = function (show) {\n  if (show) {\n    this.highlightGlyph.setAttribute(\"stroke-opacity\", \"1\");\n  } else {\n    this.highlightGlyph.setAttribute(\"stroke-opacity\", \"0\");\n  }\n}; //used when filter changed\n\n\nSequenceLink.prototype.check = function () {\n  if (this.filteredEvidence().length > 0 && this.anyInteractorIsBar() === true) {\n    this.show();\n    return true;\n  } else {\n    this.hide();\n    return false;\n  }\n};\n\nSequenceLink.prototype.anyInteractorIsBar = function () {\n  var ic = this.interactors.length;\n\n  for (var i = 0; i < ic; i++) {\n    if (this.interactors[i].form === 1) {\n      return true;\n    }\n  }\n\n  return false;\n};\n\nSequenceLink.prototype.show = function () {\n  if (!this.glyph) {\n    this.initSVG();\n  } // //this.glyph.setAttribute(\"stroke-width\", this.controller.z * xiNET.linkWidth);\n  // this.uncertainGlyph.setAttribute(\"stroke-width\", this.controller.z * 10);\n  // this.highlightGlyph.setAttribute(\"stroke-width\", this.controller.z * 10);\n\n\n  this.setLinkCoordinates();\n  var containingGroup = this.controller.res_resLinks;\n\n  if (this.interactors[0] === this.interactors[1]) {\n    containingGroup = this.controller.selfRes_resLinks;\n  }\n\n  containingGroup.appendChild(this.highlightGlyph);\n  containingGroup.appendChild(this.glyph);\n  containingGroup.appendChild(this.uncertainGlyph);\n};\n\nSequenceLink.prototype.hide = function () {\n  // TODO: this looks wierd\n  var containingGroup = this.controller.res_resLinks;\n\n  if (this.interactors[0] === this.interactors[1]) {\n    containingGroup = this.controller.selfRes_resLinks;\n  }\n\n  var groupChildren = [];\n\n  for (var i = 0; i < containingGroup.childNodes.length; i++) {\n    groupChildren[i] = containingGroup.childNodes[i];\n  }\n\n  if (groupChildren.indexOf(this.glyph) > -1) {\n    containingGroup.removeChild(this.glyph);\n    containingGroup.removeChild(this.uncertainGlyph);\n    containingGroup.removeChild(this.highlightGlyph);\n  }\n}; // update the links(polygons/lines) to fit to the protein\n\n\nSequenceLink.prototype.setLinkCoordinates = function () {\n  function isNumber(thing) {\n    return !isNaN(parseFloat(thing)) && isFinite(thing);\n  }\n\n  function getPathSegments(midPoint, controlPoint, startRes, endRes, interactor, yOffset) {\n    var startPoint, endPoint;\n\n    if (!interactor.form) {\n      // tests if form = undefined or 0 //TODO: maybe change this, its confusing\n      startPoint = interactor.getPosition();\n      endPoint = startPoint;\n    } else {\n      startPoint = interactor.getResidueCoordinates(startRes, yOffset);\n      endPoint = interactor.getResidueCoordinates(endRes, yOffset);\n    }\n\n    return ' Q' + controlPoint[0] + ',' + controlPoint[1] + ' ' + startPoint[0] + ',' + startPoint[1] + ' L' + endPoint[0] + ',' + endPoint[1] + ' Q' + controlPoint[0] + ',' + controlPoint[1] + ' ' + midPoint[0] + ',' + midPoint[1];\n  }\n\n  function sequenceDataMidPoint(sequenceData, interactor) {\n    //get the smallest start and the biggest end\n    var lowestLinkedRes = null,\n        highestLinkedRes = null;\n    var sdCount = sequenceData.length;\n\n    for (var s = 0; s < sdCount; s++) {\n      var _seqDatum = sequenceData[s];\n\n      if (!isNaN(parseFloat(_seqDatum.begin)) && isFinite(_seqDatum.begin)) {\n        var start = _seqDatum.begin * 1; // todo - the times 1 is necessary\n\n        if (lowestLinkedRes === null || start < lowestLinkedRes) {\n          lowestLinkedRes = start;\n        }\n      }\n\n      if (!isNaN(parseFloat(_seqDatum.uncertainBegin)) && isFinite(_seqDatum.uncertainBegin)) {\n        var uncertainBegin = _seqDatum.uncertainBegin * 1;\n\n        if (lowestLinkedRes === null || uncertainBegin < lowestLinkedRes) {\n          lowestLinkedRes = uncertainBegin;\n        }\n      }\n\n      if (!isNaN(parseFloat(_seqDatum.end)) && isFinite(_seqDatum.end)) {\n        var end = _seqDatum.end * 1;\n\n        if (highestLinkedRes === null || end > highestLinkedRes) {\n          highestLinkedRes = end;\n        }\n      }\n\n      if (!isNaN(parseFloat(_seqDatum.uncertainEnd)) && isFinite(_seqDatum.uncertainEnd)) {\n        var uncertainEnd = _seqDatum.uncertainEnd * 1;\n\n        if (highestLinkedRes === null || uncertainEnd > highestLinkedRes) {\n          highestLinkedRes = uncertainEnd;\n        }\n      }\n    }\n\n    return interactor.getResidueCoordinates((lowestLinkedRes + highestLinkedRes) / 2, 0);\n  }\n\n  var fromInteractor = this.fromSequenceData[0].node;\n  var toInteractor = this.toSequenceData[0].node; //calculate mid points of from and to sequence data\n\n  var fMid, tMid;\n\n  if (!fromInteractor.form) {\n    // if not (undefined or 0)\n    fMid = fromInteractor.getPosition();\n  } else {\n    fMid = sequenceDataMidPoint(this.fromSequenceData, fromInteractor);\n  }\n\n  if (!toInteractor.form) {\n    // if not (undefined or 0)\n    tMid = toInteractor.getPosition();\n  } else {\n    tMid = sequenceDataMidPoint(this.toSequenceData, toInteractor);\n  } //calculate angle from fromInteractor mid point to toInteractor mid point\n\n\n  var deltaX = fMid[0] - tMid[0];\n  var deltaY = fMid[1] - tMid[1];\n  var angleBetweenMidPoints = Math.atan2(deltaY, deltaX); //todo: tidy up trig code so everything is always in radian\n\n  var abmpDeg = angleBetweenMidPoints / (2 * Math.PI) * 360;\n\n  if (abmpDeg < 0) {\n    abmpDeg += 360;\n  } //out is value we use to decide which side of bar the link glyph is drawn\n  //first for 'from' interactor\n\n\n  var out = abmpDeg - fromInteractor.rotation;\n\n  if (out < 0) {\n    out += 360;\n  }\n\n  var fyOffset = 10;\n\n  if (out < 180) {\n    fyOffset = -10;\n  }\n\n  var fRotRad = fromInteractor.rotation / 360 * Math.PI * 2;\n\n  if (out > 180) {\n    fRotRad = fRotRad - Math.PI;\n  } //now for 'to' interactor\n\n\n  out = abmpDeg - toInteractor.rotation;\n\n  if (out < 0) {\n    out += 360;\n  }\n\n  var tyOffset = 10;\n\n  if (out > 180) {\n    tyOffset = -10;\n  }\n\n  var tRotRad = toInteractor.rotation / 360 * Math.PI * 2;\n\n  if (out < 180) {\n    tRotRad = tRotRad - Math.PI;\n  }\n\n  var ftMid = [fMid[0] + 30 * Math.sin(fRotRad) * this.controller.z, fMid[1] - 30 * Math.cos(fRotRad) * this.controller.z];\n\n  if (!fromInteractor.form) {\n    // if not (undefined or 0)\n    ftMid = fMid;\n  }\n\n  var ttMid = [tMid[0] + 30 * Math.sin(tRotRad) * this.controller.z, tMid[1] - 30 * Math.cos(tRotRad) * this.controller.z];\n\n  if (!toInteractor.form) {\n    // if not (undefined or 0)\n    ttMid = tMid;\n  }\n\n  var triPointMid = [(ftMid[0] + ttMid[0]) / 2, (ftMid[1] + ttMid[1]) / 2];\n  var fSDCount = this.fromSequenceData.length;\n  var tSDCount = this.toSequenceData.length;\n  var seqDatum, highlightStartRes, highlightEndRes;\n  var glyphPath = 'M' + triPointMid[0] + ',' + triPointMid[1];\n  var uncertainGlyphPath = 'M' + triPointMid[0] + ',' + triPointMid[1];\n  var highlightGlyphPath = 'M' + triPointMid[0] + ',' + triPointMid[1];\n\n  for (var f = 0; f < fSDCount; f++) {\n    seqDatum = this.fromSequenceData[f];\n    glyphPath += getPathSegments(triPointMid, ftMid, seqDatum.begin, seqDatum.end, fromInteractor, fyOffset);\n    highlightStartRes = seqDatum.begin;\n    highlightEndRes = seqDatum.end;\n\n    if (isNumber(seqDatum.uncertainBegin)) {\n      uncertainGlyphPath += getPathSegments(triPointMid, ftMid, seqDatum.uncertainBegin, seqDatum.begin, fromInteractor, fyOffset);\n      highlightStartRes = seqDatum.uncertainBegin;\n    }\n\n    if (isNumber(seqDatum.uncertainEnd)) {\n      uncertainGlyphPath += getPathSegments(triPointMid, ftMid, seqDatum.end, seqDatum.uncertainEnd, fromInteractor, fyOffset);\n      highlightEndRes = seqDatum.uncertainEnd;\n    }\n\n    highlightGlyphPath += getPathSegments(triPointMid, ftMid, highlightStartRes, highlightEndRes, fromInteractor, fyOffset);\n  }\n\n  for (var t = 0; t < tSDCount; t++) {\n    seqDatum = this.toSequenceData[t];\n    glyphPath += getPathSegments(triPointMid, ttMid, seqDatum.begin, seqDatum.end, toInteractor, tyOffset);\n    highlightStartRes = seqDatum.begin;\n    highlightEndRes = seqDatum.end;\n\n    if (isNumber(seqDatum.uncertainBegin)) {\n      uncertainGlyphPath += getPathSegments(triPointMid, ttMid, seqDatum.uncertainBegin, seqDatum.begin, toInteractor, tyOffset);\n      highlightStartRes = seqDatum.uncertainBegin;\n    }\n\n    if (isNumber(seqDatum.uncertainEnd)) {\n      uncertainGlyphPath += getPathSegments(triPointMid, ttMid, seqDatum.end, seqDatum.uncertainEnd, toInteractor, tyOffset);\n      highlightEndRes = seqDatum.uncertainEnd;\n    }\n\n    highlightGlyphPath += getPathSegments(triPointMid, ttMid, highlightStartRes, highlightEndRes, toInteractor, tyOffset);\n  }\n\n  if (!this.glyph) {\n    this.initSVG();\n  }\n\n  this.glyph.setAttribute(\"d\", glyphPath);\n  this.uncertainGlyph.setAttribute(\"d\", uncertainGlyphPath);\n  this.highlightGlyph.setAttribute(\"d\", highlightGlyphPath);\n};\n\nmodule.exports = SequenceLink;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/model/link/SequenceLink.js\n");

/***/ }),

/***/ "./src/model/link/UnaryLink.js":
/*!*************************************!*\
  !*** ./src/model/link/UnaryLink.js ***!
  \*************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("//    \txiNET Interaction Viewer\n//    \tCopyright 2013 Rappsilber Laboratory\n//\n//    \tThis product includes software developed at\n//    \tthe Rappsilber Laboratory (http://www.rappsilberlab.org/).\n//\n//\t\tauthor: Colin Combe\n//\n// \t\tUnaryLink.js\n// \t\tthe class representing a self-link\n\n\nvar d3 = __webpack_require__(/*! d3 */ \"./node_modules/d3/d3.js\");\n\nvar Config = __webpack_require__(/*! ../../controller/Config */ \"./src/controller/Config.js\");\n\nvar Link = __webpack_require__(/*! ./Link */ \"./src/model/link/Link.js\"); // var SequenceLink = require('./SequenceLink');\n\n\nUnaryLink.prototype = new Link();\n\nfunction UnaryLink(id, xlvController, interactor) {\n  this.id = id;\n  this.evidences = d3.map();\n  this.interactors = [interactor];\n  this.sequenceLinks = d3.map();\n  this.controller = xlvController;\n  this.initSVG();\n} //~ UnaryLink.prototype.getToolTip = function(){\n//~ var tooltip = \"\", fromResidues = \"\", toResidues = \"\";\n//~ var seqLinks = this.sequenceLinks.values();\n//~ var seqLinkCount = seqLinks.length;\n//~ for (var sl = 0; sl < seqLinkCount; sl++){\n//~ if (sl > 0){\n//~ fromResidues += \",\";\n//~ toResidues += \",\";\n//~ }\n//~ var seqLink = seqLinks[sl];\n//~ for (var i = 0; i < seqLink.fromSequenceData.length; i++){\n//~ if (i > 0) tooltip += \",\";\n//~ fromResidues += seqLink.fromSequenceData[i].toString();\n//~ }\n//~ for (var j = 0; j < seqLink.toSequenceData.length; j++){\n//~ if (j > 0) tooltip += \",\";\n//~ toResidues += seqLink.toSequenceData[j].toString();\n//~ }\n//~ }\n//~ tooltip += this.interactors[0].labelText + \" \";\n//~ tooltip += fromResidues;\n//~ tooltip += \" TO \";\n//~ tooltip += this.interactors[0].labelText + \" \";\n//~ tooltip += toResidues;\n//~ return tooltip;\n//~ };\n\n\nUnaryLink.prototype.initSVG = function () {\n  var path = this.interactors[0].getAggregateSelfLinkPath();\n  this.line = document.createElementNS(Config.svgns, \"path\");\n  this.line.setAttribute('d', path);\n  this.highlightLine = document.createElementNS(Config.svgns, 'path');\n  this.highlightLine.setAttribute('d', path);\n  this.thickLine = document.createElementNS(Config.svgns, 'path');\n  this.thickLine.setAttribute('d', path);\n  this.line.setAttribute(\"class\", \"link\");\n  this.line.setAttribute(\"fill\", \"none\");\n  this.line.setAttribute(\"stroke\", \"black\");\n  this.line.setAttribute(\"stroke-width\", \"1\");\n  this.line.setAttribute(\"stroke-linecap\", \"round\");\n  this.highlightLine.setAttribute(\"class\", \"link\");\n  this.highlightLine.setAttribute(\"fill\", \"none\");\n  this.highlightLine.setAttribute(\"stroke\", Config.highlightColour);\n  this.highlightLine.setAttribute(\"stroke-width\", \"10\");\n  this.highlightLine.setAttribute(\"stroke-linecap\", \"round\");\n  this.highlightLine.setAttribute(\"stroke-opacity\", \"0\");\n  this.thickLine.setAttribute(\"class\", \"link\");\n  this.thickLine.setAttribute(\"fill\", \"none\");\n  this.thickLine.setAttribute(\"stroke\", \"lightgray\");\n  this.thickLine.setAttribute(\"stroke-linecap\", \"round\");\n  this.thickLine.setAttribute(\"stroke-linejoin\", \"round\"); //set the events for it\n\n  var self = this;\n\n  this.line.onmousedown = function (evt) {\n    self.mouseDown(evt);\n  };\n\n  this.line.onmouseover = function (evt) {\n    self.mouseOver(evt);\n  };\n\n  this.line.onmouseout = function (evt) {\n    self.mouseOut(evt);\n  };\n\n  this.line.ontouchstart = function (evt) {\n    self.touchStart(evt);\n  };\n\n  this.highlightLine.onmousedown = function (evt) {\n    self.mouseDown(evt);\n  };\n\n  this.highlightLine.onmouseover = function (evt) {\n    self.mouseOver(evt);\n  };\n\n  this.highlightLine.onmouseout = function (evt) {\n    self.mouseOut(evt);\n  };\n\n  this.highlightLine.ontouchstart = function (evt) {\n    self.touchStart(evt);\n  };\n\n  this.thickLine.onmousedown = function (evt) {\n    self.mouseDown(evt);\n  };\n\n  this.thickLine.onmouseover = function (evt) {\n    self.mouseOver(evt);\n  };\n\n  this.thickLine.onmouseout = function (evt) {\n    self.mouseOut(evt);\n  };\n\n  this.thickLine.ontouchstart = function (evt) {\n    self.touchStart(evt);\n  }; // this.isSelected = false;\n\n};\n\nUnaryLink.prototype.selfLink = function () {\n  return this.fromProtein === this.toProtein;\n};\n\nUnaryLink.prototype.initSelfLinkSVG = function () {\n  var path = this.interactors[0].getAggregateSelfLinkPath();\n  this.line.setAttribute('d', path);\n  this.highlightLine.setAttribute('d', path);\n  this.thickLine.setAttribute('d', path);\n};\n\nUnaryLink.prototype.showHighlight = function (show) {\n  if (this.notSubLink === true) {\n    this.highlightInteractors(show);\n  }\n\n  if (show) {\n    //~ this.highlightLine.setAttribute(\"stroke\", xiNET.highlightColour.toRGB());\n    this.highlightLine.setAttribute(\"stroke-opacity\", \"1\");\n  } else {\n    //~ this.highlightLine.setAttribute(\"stroke\", xiNET.selectedColour.toRGB());\n    //~ if (this.isSelected === false) {\n    this.highlightLine.setAttribute(\"stroke-opacity\", \"0\"); //~ }\n  }\n};\n\nUnaryLink.prototype.check = function () {\n  if (this.interactors[0].form !== 1) {\n    this.show();\n    return true;\n  } else {\n    this.hide();\n    return false;\n  }\n};\n\nUnaryLink.prototype.show = function () {\n  this.line.setAttribute(\"transform\", \"translate(\" + this.interactors[0].cx + \" \" + this.interactors[0].cy + \")\" + \" scale(\" + this.controller.z + \")\");\n  this.highlightLine.setAttribute(\"transform\", \"translate(\" + this.interactors[0].cx + \" \" + this.interactors[0].cy + \")\" + \" scale(\" + this.controller.z + \")\");\n  this.controller.highlights.appendChild(this.highlightLine);\n  this.controller.p_pLinks.appendChild(this.line);\n};\n\nUnaryLink.prototype.setLinkCoordinates = function () {\n  var interactor = this.interactors[0];\n\n  if (typeof this.thickLine !== 'undefined') {\n    this.thickLine.setAttribute(\"transform\", \"translate(\" + interactor.cx + \" \" + interactor.cy + \")\" + \" scale(\" + this.controller.z + \")\");\n  }\n\n  this.line.setAttribute(\"transform\", \"translate(\" + interactor.cx + \" \" + interactor.cy + \")\" + \" scale(\" + this.controller.z + \")\");\n  this.highlightLine.setAttribute(\"transform\", \"translate(\" + interactor.cx + \" \" + interactor.cy + \")\" + \" scale(\" + this.controller.z + \")\");\n};\n\nmodule.exports = UnaryLink;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/model/link/UnaryLink.js\n");

/***/ })

/******/ });